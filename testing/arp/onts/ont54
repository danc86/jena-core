<?xml version="1.0" encoding="UTF-8"?>
<rdf:RDF xmlns:daml="http://www.daml.org/2001/03/daml+oil#"
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
    xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#" 
    xmlns="http://opencyc.sourceforge.net/daml/cyc#">
    <daml:Ontology about="">
        <daml:versionInfo>$Id$</daml:versionInfo>
        <rdfs:comment>The Cyc Upper Ontology</rdfs:comment>
    </daml:Ontology>
    <daml:UniqueProperty rdf:ID="guid">
        <rdfs:label>guid</rdfs:label>
        <rdfs:comment>Permanent Global Unique ID for the associated
            concept -- which enables concept renaming.  Users should not
            depend upon the DAML ID nor label as fixed for all time.</rdfs:comment>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
        <daml:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>
    </daml:UniqueProperty>
    <Time-Quantity rdf:ID="AFewDaysDuration">
        <rdfs:label>a few days duration</rdfs:label>
        <rdfs:comment>Duration of 2 to 10 days</rdfs:comment>
        <guid>bd58f6ee-9c29-11b1-9dad-c379636f7270</guid>
    </Time-Quantity>
    <OrderOfMagnitudeInterval rdf:ID="AFewDecadesDuration">
        <rdfs:label>a few decades duration</rdfs:label>
        <rdfs:comment>Duration of 2 to 10 decades</rdfs:comment>
        <guid>bd58af72-9c29-11b1-9dad-c379636f7270</guid>
    </OrderOfMagnitudeInterval>
    <OrderOfMagnitudeInterval rdf:ID="AFewHoursDuration">
        <rdfs:label>a few hours duration</rdfs:label>
        <rdfs:comment>Duration of 2 to 10 hours</rdfs:comment>
        <guid>bd58fded-9c29-11b1-9dad-c379636f7270</guid>
    </OrderOfMagnitudeInterval>
    <OrderOfMagnitudeInterval rdf:ID="AFewMinutesDuration">
        <rdfs:label>a few minutes duration</rdfs:label>
        <rdfs:comment>Duration of 2 to 10 minutes</rdfs:comment>
        <guid>bd5899f0-9c29-11b1-9dad-c379636f7270</guid>
    </OrderOfMagnitudeInterval>
    <Time-Quantity rdf:ID="AFewMonthsDuration">
        <rdfs:label>a few months duration</rdfs:label>
        <rdfs:comment>A few months 2-10</rdfs:comment>
        <guid>bd59008b-9c29-11b1-9dad-c379636f7270</guid>
    </Time-Quantity>
    <OrderOfMagnitudeInterval rdf:ID="AFewSecondsDuration">
        <rdfs:label>a few seconds duration</rdfs:label>
        <rdfs:comment>Duration of 2 to 30 seconds</rdfs:comment>
        <guid>bd589ecf-9c29-11b1-9dad-c379636f7270</guid>
    </OrderOfMagnitudeInterval>
    <Time-Quantity rdf:ID="AFewWeeksDuration">
        <rdfs:label>a few weeks duration</rdfs:label>
        <rdfs:comment>Duration of 2 to 10 weeks</rdfs:comment>
        <guid>bd58ddfa-9c29-11b1-9dad-c379636f7270</guid>
    </Time-Quantity>
    <Time-Quantity rdf:ID="AFewYearsDuration">
        <rdfs:label>a few years duration</rdfs:label>
        <rdfs:comment>Duration of 2 to 10 years</rdfs:comment>
        <guid>bd589ddb-9c29-11b1-9dad-c379636f7270</guid>
    </Time-Quantity>
    <daml:Class rdf:ID="AbandoningSomething">
        <rdfs:label>abandonments</rdfs:label>
        <rdfs:comment>The collection of events in which some #$Agent
            deliberately gives up possession of something, without
            giving it to another.</rdfs:comment>
        <guid>bd67b7de-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#LosingUserRights"/>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
        <daml:disjointWith rdf:resource="#GainingUserRights"/>
    </daml:Class>
    <daml:Class rdf:ID="Ablation">
        <rdfs:label>ablations</rdfs:label>
        <rdfs:comment>A collection of events.  In an #$Ablation, a
            (usually relatively thin) layer of material is removed from
            the surface of an object.</rdfs:comment>
        <guid>bd58b6b3-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#Separation-Complete"/>
        <rdfs:subClassOf rdf:resource="#RemovingSomething"/>
    </daml:Class>
    <daml:Class rdf:ID="AboveGroundLevelInAConstruction">
        <rdfs:label>above ground levels</rdfs:label>
        <rdfs:comment>A specialization of #$LevelOfAConstruction whose
            instances are at or above ground level.  See also
            #$BasementLevelInAConstruction and #$BalconyLevelInAConstruction.</rdfs:comment>
        <guid>bd588bb2-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#LevelOfAConstruction"/>
    </daml:Class>
    <daml:Class rdf:ID="AbradingSomething">
        <rdfs:label>abrading events</rdfs:label>
        <rdfs:comment>A collection of events.  In an #$AbradingSomething
            event, the surface of some object is gradually worn away by
            scraping or similar physical contact involving friction.
            Devices used in elements of #$AbradingSomething include
            files and sand paper; elements of #$AbradingSomething would
            include the event in which Howard Hughes sanded down the
            Spruce Goose for the last time, the event in which Lucy
            Ricardo filed her fingernails just before her singing debut
            at Rickie&apos;s club, etc.</rdfs:comment>
        <guid>bd5899e7-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#Ablation"/>
    </daml:Class>
    <daml:Class rdf:ID="AbstractInformationalThing">
        <rdfs:label>data</rdfs:label>
        <rdfs:comment>A heterogeneous collection of abstract objects
            that pertain to information. Subsumes not only
            #$Proposition, but also the collections #$Sentence,
            #$CharacterString, #$AtomicSymbol-Abstract, #$Microtheory,
            #$PropositionalInformationThing, and #$ConceptualWork. Note
            that while all #$AbstractInformationalThings are abstract
            objects (this collection is disjoint with
            #$SpatialThing-Localized), most instances of this collection
            can have multiple concrete &apos;embodiments&apos;. A single
            instance of #$Sentence can be written on several peices of
            paper (see #$instantiationOfAIS); a
            #$PropositionalInformationThing may be the content of
            several concrete documents, such as instances of #$BookCopy
            (see #$containsInfoPropositional-IBT); and several events,
            such as spoken utterances, may have a certain #$Proposition
            as their content (see #$containsInformation). Note that some
            instances of #$AbstractInformationalThing have temporal
            extent. Examples include all instances of #$Novel-CW and
            #$Movie-CW. Others specs are disjoint with #$TemporalThing.
            Examples include all instances of #$Character-Abstract and #$Proposition.</rdfs:comment>
        <guid>bdff6c64-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#StuffType"/>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#IntangibleIndividual"/>
        <daml:disjointWith rdf:resource="#SpatialThing"/>
        <daml:disjointWith rdf:resource="#Agent"/>
        <daml:disjointWith rdf:resource="#Event"/>
    </daml:Class>
    <daml:Class rdf:ID="AbstractProgrammingLanguage">
        <rdfs:label>programming languages</rdfs:label>
        <rdfs:comment>The collection of languages invented for use by
            computers. This includes both command languages and others
            which one doesn&apos;t really `program&apos; in.</rdfs:comment>
        <guid>bd58c2ea-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="AbstractShapeType">
        <rdfs:label>abstract shape type</rdfs:label>
        <rdfs:comment>A collection of collections. An instance SHAPE of
            #$ShapeType (q.v.) is also an instance of
            #$AbstractShapeType if and only if SHAPE is a spec of
            #$GeometricThing-Abstract. It is distinguished from
            #$GenericShapeType (q.v.), which is the collection of those
            collections that are instances of #$ShapeType, some of whose
            instances are abstract, and some of whose instances are
            localized. There is no &apos;#$LocalizedShapeType&apos;. The
            instances of #$AbstractShapeType are the acceptable
            second-arguments of the predicate #$shape. So, if you have
            have a spherical ball, BALL001, it is true that (#$shape
            BALL001 (#$AbstractFn #$SphereShape)), but false (in fact,
            undefined) that (#$shape BALL001 #$SphereShape).</rdfs:comment>
        <guid>c0f46e32-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="#ShapeType"/>
        <daml:disjointWith rdf:resource="#GenericShapeType"/>
    </daml:Class>
    <daml:Class rdf:ID="AcademicProfessional">
        <rdfs:label>academics</rdfs:label>
        <rdfs:comment>A collection of persons; a subset of
            #$Professional.  Each element of #$AcademicProfessional is a
            person whose job is to educate and/or to perform research as
            an affiliate of an academic institution.  This includes
            members of the teaching and/or research staff of schools,
            colleges, universities, and research institutes.</rdfs:comment>
        <guid>bd589db6-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#OccupationType"/>
        <rdfs:subClassOf rdf:resource="#Professional"/>
    </daml:Class>
    <daml:Class rdf:ID="AcademicQuarter">
        <rdfs:label>academic quarters</rdfs:label>
        <rdfs:comment>Each instance of this collection is a
            #$TimeInterval defined by some educational institution: one
            quarter of their #$AcademicYear.  Since the start dates, end
            dates, and duration may all vary depending on the
            institution, the year, etc., instances of this collection
            must unfortunately be time intervals like StanfordSpringQuarter1991.</rdfs:comment>
        <guid>bd589441-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#TimeInterval"/>
        <daml:disjointWith rdf:resource="#TimePoint"/>
    </daml:Class>
    <daml:Class rdf:ID="AcademicSemester">
        <rdfs:label>semesters</rdfs:label>
        <rdfs:comment>Each instance of this collection is a
            #$TimeInterval defined by some educational institution: one
            half of their #$AcademicYear. Since the start dates, end
            dates and duration may vary depending on the institution and
            year, instances will be time intervals such as ``StanfordSpringSemester1990-91&apos;&apos;.</rdfs:comment>
        <guid>bd58ea30-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#TimeInterval"/>
        <daml:disjointWith rdf:resource="#TimePoint"/>
    </daml:Class>
    <daml:Class rdf:ID="AcademicTrimester">
        <rdfs:label>trimesters</rdfs:label>
        <rdfs:comment>Each instance of this collection is a
            #$TimeInterval defined by some educational institution: one
            third of their #$AcademicYear. Since the start dates, end
            dates, and duration may all vary depending on the
            institution and year, instances of this collection must
            unfortunately be time intervals like UCLASpringTrimester1990-91.</rdfs:comment>
        <guid>bd58ea73-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#TimeInterval"/>
        <daml:disjointWith rdf:resource="#TimePoint"/>
    </daml:Class>
    <daml:Class rdf:ID="AcademicYear">
        <rdfs:label>academic years</rdfs:label>
        <rdfs:comment>Each instance of this collection is an annually
            recurring #$TimeInterval defined by an educational
            institution.  Since the start dates, end dates, and duration
            may all vary depending on the institution, the year, etc.,
            instances of this collection must unfortunately be time
            intervals like Stanford1989-90AcademicYear.</rdfs:comment>
        <guid>bd58f188-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#TimeInterval"/>
        <daml:disjointWith rdf:resource="#TimePoint"/>
    </daml:Class>
    <daml:Class rdf:ID="Acceleration">
        <rdfs:label>accelerations</rdfs:label>
        <rdfs:comment>Acceleration is the change in speed of an object
            per unit time.  It is a measurable physical quantity,
            measured in units such as MilesPerHourPerSecond.</rdfs:comment>
        <guid>bd58dc89-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DerivedNumericAttributeType"/>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
        <rdfs:subClassOf rdf:resource="#PhysicalAttribute"/>
    </daml:Class>
    <daml:Class rdf:ID="AccessNumber">
        <rdfs:label>access numbers</rdfs:label>
        <rdfs:comment>A collection of #$PhoneNumbers. Each element of
            #$AccessNumber is a string that a user with #$Internet
            connections uses to connect to his/her #$InternetServiceProvider.</rdfs:comment>
        <guid>bf796ce3-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#IDStringType"/>
        <rdfs:subClassOf rdf:resource="#PhoneNumber"/>
    </daml:Class>
    <daml:Class rdf:ID="AccessingAnIBT">
        <rdfs:label>information-accessing events</rdfs:label>
        <rdfs:comment>A collection of information transfer events.  Each
            element of #$AccessingAnIBT is an action by which an agent
            accesses the content of some IBT (i.e., an element of
            #$InformationBearingThing).  Examples include (getting
            information from) reading a newspaper, watching a film,
            listening to a musical performance, decoding an encrypted
            message, seeing a traffic police officer wave you on, or
            hearing your roommate ask you to take out the trash.  Of
            course, communication conventions play a role here.  In the
            #$NaiveInformationMt, Cyc simply assumes that an agent who
            accesses an IBT understands its content afterwards.  In the
            #$InformationGMt, Cyc makes the more complicated inference
            that an agent who accesses an IBT understands its content
            afterwards only if the agent is able to get the encoded
            information using a convention familiar to that agent.  See
            also #$CommunicationConvention, #$hasCommConvention, #$usesCommConventionForInfo.</rdfs:comment>
        <guid>bd58d61f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#TransferIn"/>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
        <rdfs:subClassOf rdf:resource="#InformationTransferEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="Account">
        <rdfs:label>accounts</rdfs:label>
        <rdfs:comment>A collection of objects; a subset of
            #$LegalAgreement.  Each element of #$Account is a recorded
            obligation (of some particular type) between specified
            parties, consisting of `funds&apos; which typically can be
            added to and drawn upon.  Examples include the instances of
            #$RetirementAccount, #$TravelExpenseAccount, and of the many
            types of #$FinancialAccount.  Note that the contents of an
            account need not be monetary; for example, the contents may
            be amounts of time, as in the subsets #$VacationAccount or a
            #$SickLeaveAccount.  #$Account does NOT include debt
            obligations of fixed face value that cannot be increased or
            reduced (such as a bond).</rdfs:comment>
        <guid>bd588c2b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#AccountType"/>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#LegalAgreement"/>
        <rdfs:subClassOf rdf:resource="#AuthorizedAgreement"/>
    </daml:Class>
    <daml:Class rdf:ID="AccountStatusAttribute">
        <rdfs:label>account statuses</rdfs:label>
        <rdfs:comment>A collection of attributes.  Each element of
            #$AccountStatusAttribute is an attribute that describes the
            obligational status of an #$Account; e.g.,#$PaidInFull,
            #$InComplianceWithPaymentSchedule, #$PaymentOverdue, #$AccountInactive.</rdfs:comment>
        <guid>bd58d207-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#AttributeType"/>
        <rdf:type rdf:resource="#SiblingDisjointAttributeType"/>
        <rdfs:subClassOf rdf:resource="#AttributeValue"/>
    </daml:Class>
    <daml:Class rdf:ID="AccountType">
        <rdfs:label>account type</rdfs:label>
        <rdfs:comment>A collection of collections.  Each element of
            #$AccountType is a collection of financial accounts of some
            type.  Examples: #$SavingsAccount, #$CreditCardAccount,
            #$RetirementAccount, #$SocialSecurityAccount,
            #$TravelExpenseAccount.  Typically, accounts are denominated
            in units of #$Money.</rdfs:comment>
        <guid>bd588be8-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#SiblingDisjointCollection"/>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="#ExistingObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="Acknowledging-CommunicationAct">
        <rdfs:label>acknowledgments</rdfs:label>
        <rdfs:comment>The collection of actions which are #$performedBy
            one #$Agent to convey information about the receipt of a
            prior #$CommunicationAct-Single which was #$performedBy
            another #$Agent.  An example: Judy saying `No&apos; in
            response to Jane&apos;s prior act of saying `Will you clean
            the toaster.&apos;</rdfs:comment>
        <guid>bd590c41-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#CommunicationAct-Single"/>
    </daml:Class>
    <daml:Class rdf:ID="AcquaintanceAttribute">
        <rdfs:label>acquaintance attribute</rdfs:label>
        <rdfs:comment>The collection of attributes that specify ways in
            which (and/or degrees to which) one person is acquainted
            with another  E.g., some instances of this collection are:
            #$FamousPersonAcquaintance, #$TrueFanAcquaintance,
            #$IntimateAcquaintance, #$FrequentContactAcquaintance, etc.</rdfs:comment>
        <guid>bd58f556-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#SocialAttributeType"/>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
    </daml:Class>
    <daml:Class rdf:ID="Action">
        <rdfs:label>actions</rdfs:label>
        <rdfs:comment>A collection of events.  Each instance of #$Action
            is an event that is carried out by some &apos;doer&apos;
            (see #$doneBy).  Actions may include any event in which one
            or more actor(s) effect some change(s) in the tangible or
            intangible state of the world, typically by some expenditure
            of effort or energy.  But note that it is not required that
            any tangible object be moved, changed, produced, or
            destroyed for an action to occur; the effects of actions may
            be intangible (such as the change in a bank balance, or the
            intimidation of a subordinate).  Depending upon the context,
            actors may be animate or inanimate, conscious or
            nonconscious.  For actions that are intentional, see also
            #$PurposefulAction, #$performedBy.</rdfs:comment>
        <guid>bd58a841-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#Event"/>
    </daml:Class>
    <daml:Class rdf:ID="ActionOnObject">
        <rdfs:label>actions on an object</rdfs:label>
        <rdfs:comment>The collection of physical events in which some
            doer acts on an object. Each element of #$ActionOnObject is
            an action in which both the roles of #$doneBy and
            #$objectActedOn (qq.v.) are filled.  Positive examples:
            someone typing on a keyboard; a tornado destroying a
            building.  Negative examples: a person dancing; wind blowing.</rdfs:comment>
        <guid>c0e7f6ca-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#Action"/>
        <rdfs:subClassOf rdf:resource="#PhysicalEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="ActorSlot">
        <rdfs:label>actor slots</rdfs:label>
        <rdfs:comment>A collection of binary predicates; a
            specialization of #$Role.  Each element of #$ActorSlot
            relates some instance of #$Event to a temporal thing
            involved in that event (here called a `participant&apos;,
            but that does not imply activity).  The first argument of
            every #$ActorSlot is an instance of #$Event, and the second
            argument is an instance of #$SomethingExisting.  All
            instances of #$ActorSlot have #$actors as their #$genlPreds,
            directly or indirectly, so that the actor slots form a kind
            of hierarchy.  Each specialized actor slot indicates HOW its
            participant participates in the event, i.e., in what role
            (e.g., #$inputs, #$outputs, #$doneBy).  Actor slots are NOT
            used to indicate the time of an event&apos;s occurrence,
            external representations of the event, and other more
            remotely related things that are not directly or indirectly
            `involved&apos; in occurrence of the event.  Time and other
            quantities are relevant to events but are not instances of
            #$SomethingExisting; thus, they are related to events by
            some non-#$ActorSlot predicate.  Things which are remotely
            related to the event--e.g., someone who is affected by the
            event but doesn&apos;t exist when the event occurs--may be
            related using some instance of #$Role that does not belong
            to #$ActorSlot, such as #$affectedAgent.  See also #$Role.</rdfs:comment>
        <guid>bd588029-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PredicateCategory"/>
    </daml:Class>
    <daml:Class rdf:ID="Address-LocationDesignator">
        <rdfs:label>addresses</rdfs:label>
        <rdfs:comment>A collection of strings.  Each element of
            #$Address-LocationDesignator is a string that denotes an
            address.  Each string indicates one entire address.  For
            example: `President Bill Clinton, White House, 1600
            Pennsylvania Avenue, Washington, DC.</rdfs:comment>
        <guid>bd590a18-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <daml:disjointWith rdf:resource="#ContactLocation"/>
    </daml:Class>
    <daml:Class rdf:ID="Adjective">
        <rdfs:label>adjectives</rdfs:label>
        <rdfs:comment>The collecton of all adjectives. Adjectives are
            words which can modify nouns. Many adjectives have
            comparative and superlative forms. Example: `red&apos;.</rdfs:comment>
        <guid>bd588031-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#LinguisticObjectType"/>
        <rdf:type rdf:resource="#SpeechPart"/>
    </daml:Class>
    <daml:Class rdf:ID="Administrator">
        <rdfs:label>administrators</rdfs:label>
        <rdfs:comment>A collection of persons; a subset of
            #$Professional.  Each element of #$Administrator is an
            employee of an organization who is responsible for managing
            its organizational affairs.  Elements of #$Administrator may
            or may not also be required to manage people.  If so, then
            they are also #$Managers (q.v.).</rdfs:comment>
        <guid>bd58aedc-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#OccupationType"/>
    </daml:Class>
    <daml:Class rdf:ID="Admiration">
        <rdfs:label>admiration</rdfs:label>
        <rdfs:comment>A feeling of strong approval.  An intense positive
            attitude towards another person(s) or group.  May be
            accompanied by emulation.  #$Admiration is different than
            #$Respect (qv).  This is a collection --- see #$Happiness
            for an explanation.  Some more specialized
            #$FeelingAttributeTypes than #$Admiration are
            #$Wonder-Admiration, #$Adulation, #$Awe, etc. </rdfs:comment>
        <guid>bd58b20b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#FeelingAttributeType"/>
        <rdfs:subClassOf rdf:resource="#Respect"/>
    </daml:Class>
    <daml:Class rdf:ID="AdultAnimal">
        <rdfs:label>adult animals</rdfs:label>
        <rdfs:comment>The collection of all adult animals (including
            adult people), meaning all elements of #$Animal that are
            mature enough to bear offspring, or older.</rdfs:comment>
        <guid>c1006731-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Animal"/>
        <daml:disjointWith rdf:resource="#JuvenileAnimal"/>
    </daml:Class>
    <daml:Class rdf:ID="AdultFemalePerson">
        <rdfs:label>women</rdfs:label>
        <rdfs:comment>The collection of all women; i.e., #$Persons who
            are adult and female</rdfs:comment>
        <guid>bd58b1f1-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#FemalePerson"/>
        <rdfs:subClassOf rdf:resource="#HumanAdult"/>
    </daml:Class>
    <daml:Class rdf:ID="Adverb">
        <rdfs:label>adverbs</rdfs:label>
        <rdfs:comment>The collection of all adverbs. Adverbs are words
            which can modify adverbs, verbs, or adjectives. Many adverbs
            are morphologically derived from adjectives. Example: `slowly&apos;.</rdfs:comment>
        <guid>bd58802c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#LinguisticObjectType"/>
        <rdf:type rdf:resource="#SpeechPart"/>
    </daml:Class>
    <daml:Class rdf:ID="Advertising">
        <rdfs:label>advertising events</rdfs:label>
        <rdfs:comment>A collection of #$CommunicationAct-Singles.  In an
            #$Advertising event, someone is communicating, to potential
            customers of an #$Agent, the desire of that agent to do
            business with those customers (either to `do business&apos;
            in general or to sell them something specific.</rdfs:comment>
        <guid>c10afc14-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#CommunicationAct-Single"/>
        <rdfs:subClassOf rdf:resource="#BusinessEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="Affection">
        <rdfs:label>affection</rdfs:label>
        <rdfs:comment>A feeling of fondness for someone or something.
            Sympathy, liking, warmth, tenderness.  This is a
            #$Collection --- for an explanation of that, see
            #$Happiness.  Some more specialized #$FeelingAttributeTypes
            than #$Affection are #$Love, #$Passion, etc.</rdfs:comment>
        <guid>bd58b5c7-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#FeelingAttributeType"/>
    </daml:Class>
    <daml:Class rdf:ID="Afternoon">
        <rdfs:label>afternoons</rdfs:label>
        <rdfs:comment>An #$Afternoon is the daily #$Event where the
            #$Sun moves from its `highest&apos; position in the daily
            cycle and `sets&apos; or becomes a #$MidnightSun, i.e from
            noon till #$Sunset or #$MidnightSun.  A #$Midday overlaps
            the start of an #$Afternoon, and an #$Evening is
            #$contiguousAfter an #$Afternoon (except when there is a
            #$MidnightSun in which case a #$Morning is contiguously
            after the #$Afternoon).  Each #$Afternoon is
            #$temporallyFinishedBy a #$Sunset or #$MidnightSun.</rdfs:comment>
        <guid>bd58863a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#QualitativeTimeOfDay"/>
    </daml:Class>
    <daml:Class rdf:ID="Agent">
        <rdfs:label>agents</rdfs:label>
        <rdfs:comment>In the #$FunctionalRoleAnalysisMt an #$Agent is
            defined quite simply as any temporally extended thing that
            plays one or more functional roles in some #$FunctionalSystem.</rdfs:comment>
        <guid>bd588007-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#CompositeTangibleAndIntangibleObject"/>
        <rdfs:subClassOf rdf:resource="#Agent-Generic"/>
        <daml:disjointWith rdf:resource="#Place"/>
        <daml:disjointWith rdf:resource="#Surface-Generic"/>
        <daml:disjointWith rdf:resource="#EarthStuff"/>
        <daml:disjointWith rdf:resource="#FluidTangibleThing"/>
        <daml:disjointWith rdf:resource="#TangibleProduct"/>
        <daml:disjointWith rdf:resource="#Artifact"/>
        <daml:disjointWith rdf:resource="#TextualMaterial"/>
        <daml:disjointWith rdf:resource="#AbstractInformationalThing"/>
    </daml:Class>
    <daml:Class rdf:ID="Agent-Generic">
        <rdfs:label>agent - generic</rdfs:label>
        <rdfs:comment>#$Agent-Generic is the collection of all agents,
            or things (like #$Animals, #$Robots, #$DivineBeings, etc.)
            that have desires and intentions and the presumed ability to
            act on them.  An instance of this collection may be an
            instance of #$AgentiveArtifact or #$Agent (but not both).</rdfs:comment>
        <guid>bec69a78-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#SomethingExisting"/>
        <rdfs:subClassOf rdf:resource="#PartiallyIntangible"/>
        <daml:disjointWith rdf:resource="#Artifact-NonAgentive"/>
    </daml:Class>
    <daml:Class rdf:ID="AgentiveArtifact">
        <rdfs:label>agentive artifact</rdfs:label>
        <rdfs:comment>#$AgentiveArtifact is the collection of all
            artifacts (created by instances of #$Agent) that commonly
            possess (at least) the apparent ability to make decisions
            and commence actions more or less independently of those
            agents.  The distinction here is conventional; a certain
            functional sophistication possessed by instances of
            #$Artifact that are &apos;not really living agents&apos;
            seems to mirror that possessed by &apos;living agents&apos;.
            This sense of agency derives from ability or function the
            artifact possesses, namely the ability to  commence actions,
            independently of agents, based on some internal calculation
            or deliberation.  Example subcollections include #$Computer,
            #$Robot, #$TrojanHorseComputerProgram.</rdfs:comment>
        <guid>bfa66fc1-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Agent-Generic"/>
    </daml:Class>
    <daml:Class rdf:ID="AgentiveNoun">
        <rdfs:label>agentive nouns</rdfs:label>
        <rdfs:comment>The collection of all nouns in the agentive form.
            Agentive nouns usually denote the `doer&apos; or
            `performer&apos; of some action, and often end in `-er&apos;
            or `-or&apos;. Example: `runner&apos;.</rdfs:comment>
        <guid>bd588033-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#LinguisticObjectType"/>
        <rdf:type rdf:resource="#SpeechPart"/>
        <rdfs:subClassOf rdf:resource="#DeVerbalNoun"/>
    </daml:Class>
    <daml:Class rdf:ID="Agility">
        <rdfs:label>agility</rdfs:label>
        <rdfs:comment>#$Agility is the #$ScriptPerformanceAttributeType
            for describing actions in which the performer&apos;s whole
            body moves precisely and in a well-coordinated fashion.</rdfs:comment>
        <guid>bd58d302-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ScriptPerformanceAttributeType"/>
        <rdfs:subClassOf rdf:resource="#ScriptPerformanceAttribute"/>
    </daml:Class>
    <daml:Class rdf:ID="Agreement">
        <rdfs:label>agreements</rdfs:label>
        <rdfs:comment>A collection of `objects&apos; with temporal
            extent.  Each element of #$Agreement involves two or more
            parties, who agree that certain propositions should be true.
            Making the propositions true may require some action or
            commitment of wealth on the part of one or more of the
            #$agreeingAgents.  Thus, elements of #$Agreement will
            usually involve some instances of #$Obligation. Note:
            Elements of #$Agreement and #$Obligation differ, however, in
            that an #$obligatedAgent is responsible for the truth of all
            of the propositions in an obligation.  In an agreement, some
            agents may not be responsible for all of the propositions in
            the agreement being true. For example, in a loan agreement,
            the borrower agrees to give the lender back the money, but
            the borrower is the only #$obligatedAgent for the repayment.
            Note that #$obligatedAgents need not be among the
            #$agreeingAgents in the agreement that involves or generates
            the obligation.  For example, the Board of Directors of
            XYZCorporation may agree that some non-director will assume
            the post and duties of President of XYZCorporation.
            Moreover, #$agreeingAgents aren&apos;t always
            obligatedAgents; e.g., Wanda and Paul may agree that Paul
            alone is obligated to do some task. Examples include
            instances of #$PeaceAccord, #$LegalAgreement,
            #$InformalAgreement, #$BusinessPartnershipAgreement,
            #$WorkAgreement, #$SalesAgreement, #$MaintenanceAgreement,
            #$Reservation, #$Appointment, etc.</rdfs:comment>
        <guid>bd58afa3-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#IntangibleExistingThing"/>
        <rdfs:subClassOf rdf:resource="#SupposedToBeMicrotheory"/>
        <rdfs:subClassOf rdf:resource="#PropositionalInformationThing"/>
    </daml:Class>
    <SharedNote rdf:ID="AgreementNote">
        <rdfs:label>agreement note</rdfs:label>
        <rdfs:comment>Elements of #$Agreement (and of its subsets) are
            #$Microtheory instances containing propositions representing
            what some number of parties have agreed upon. An #$Agreement
            may contain a set of #$Obligations on the part of one or
            more of the parties. An #$Agreement may also be just a set
            of beliefs that the parties have decided to share. To
            indicate which propositions are true in an #$Agreement,
            regardless of whether they are true in reality, use
            #$ist-Agreement. (#$ist-Agreement AGREEMENT PROP) means that
            PROP is a #$ELSentence-Assertible expressing something that
            was agreed upon in AGREEMENT. Other relevant vocabulary:
            (#$agreeingAgents AGREEMENT AGENT) means that AGENT is one
            of the parties agreeing to AGREEMENT. (#$subAgreements
            AGREEMENT1 AGREEMENT2) means that AGREEMENT2 is a part of
            (is included in) AGREEMENT1. (#$governedByAgreement ACTION
            AGREEMENT) means that ACTION is governed by the terms of
            AGREEMENT. (#$agreementForbids AGREEMENT AGENT ACTION-TYPE
            ROLE) means that AGREEMENT forbids AGENT to play ROLE in
            elements of ACTION-TYPE. (#$agreementRequires AGREEMENT
            AGENT ACTION-TYPE ROLE) means that AGREEMENT requires AGENT
            to play ROLE in at least one element of ACTION-TYPE.
            (#$agreementPeriod AGREEMENT TIME) means that AGREEMENT is
            considered to be true during the time period TIME.</rdfs:comment>
        <guid>bd58b208-9c29-11b1-9dad-c379636f7270</guid>
    </SharedNote>
    <daml:Class rdf:ID="AilmentCondition">
        <rdfs:label>ailments</rdfs:label>
        <rdfs:comment>The most general collection of ailment events; a
            subset of #$PhysiologicalCondition, and a subset of #$Event.
            An instance of #$AilmentCondition is a dynamic state of
            sickness, injury, or physiological impairment.  Having an
            ailment is an event:  it has temporal aspects, it progresses
            dynamically, etc., it is not just `being in some static
            state of un-wellness.&apos;   Some subsets of
            #$AilmentCondition are: #$RespiratoryAilment,
            #$HeartCondition, #$Cancer, #$MotionSickness, #$Poisoning,
            #$Infection, #$InjuryCondition.  If a particular person
            suffers from asthma, that is an element of
            #$AilmentCondition.  Each #$AilmentCondition is a state of
            actual, developed sickness or impairment, rather than the
            event of getting sick or becoming impaired.  Also note that
            each type of ailment, such as #$Asthma, is the set of all
            `cases&apos; or `instances&apos; of individuals suffering
            from that condition.</rdfs:comment>
        <guid>c10c1856-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PhysiologicalConditionType"/>
        <rdfs:subClassOf rdf:resource="#PhysiologicalCondition"/>
    </daml:Class>
    <daml:Class rdf:ID="Air">
        <rdfs:label>air</rdfs:label>
        <rdfs:comment>A collection of tangibles; a subset of
            #$GaseousTangibleThing.  Each element of #$Air is one
            `piece&apos; among all the portions of the atmosphere of the
            Earth, considered as a substance present in various places,
            in various quantities, under various pressures, etc.
            Examples: the AirInAustin; the stuffy air in my office; the
            thin air atop Annapurna.  See also
            #$TheAtmosphereQuaSinglePieceOfStuff, which is all ambient
            #$Air on the planet taken as a single object.</rdfs:comment>
        <guid>bd58c00c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TangibleStuffStateType"/>
        <rdfs:subClassOf rdf:resource="#Mixture"/>
        <rdfs:subClassOf rdf:resource="#GaseousTangibleThing"/>
    </daml:Class>
    <daml:Class rdf:ID="AirForce">
        <rdfs:label>air forces</rdfs:label>
        <rdfs:comment>A collection of military organizations.  An
            element of #$AirForce is a military organization, modern or
            historical, composed mainly of airborne forces: bombers,
            fighters, torpedo planes, parachute troops, surveillance
            aircraft, etc., and having the function of defending or
            attacking air space, ships, or ground targets.</rdfs:comment>
        <guid>c10c1acc-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="AirForcePersonnel">
        <rdfs:label>air force people</rdfs:label>
        <rdfs:comment>A collection of people, a subset   of
            #$MilitaryPerson. Each element of this collection is
            somebody who works for an #$AirForce.</rdfs:comment>
        <guid>bd58a7cd-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#OccupationType"/>
        <rdfs:subClassOf rdf:resource="#MilitaryPerson"/>
    </daml:Class>
    <daml:Class rdf:ID="AirRespiration">
        <rdfs:label>air respiration</rdfs:label>
        <rdfs:comment>A collection of activities constituting a natural
            #$PhysiologicalFunction; #$AirRespiration is the collection
            of all #$Respiration events in which an organism trades some
            of the carbon dioxide in its tissues for oxygen from the atmosphere.</rdfs:comment>
        <guid>bd58bdb6-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#Respiration"/>
    </daml:Class>
    <daml:Class rdf:ID="AirTransportationDevice">
        <rdfs:label>aircraft</rdfs:label>
        <rdfs:comment>In the #$ModernMilitaryVehiclesMt,
            #$AirTransportationDevice parallels the military concept of
            &apos;air platform&apos;; namely, an air vehicle commonly
            used in military operations to transport weapons, goods, or
            personnel by air.</rdfs:comment>
        <guid>bd58ae50-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdf:type rdf:resource="#ProductType"/>
        <rdfs:subClassOf rdf:resource="#TransportationDevice"/>
    </daml:Class>
    <daml:Class rdf:ID="AirlineCompany">
        <rdfs:label>airlines</rdfs:label>
        <rdfs:comment>The collection of all air transportation
            companies.  An element of #$AirlineCompany is a
            #$TransportationCompany that operates airplanes to transport
            goods or people in exchange for money.</rdfs:comment>
        <guid>bd58aaee-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#CommercialServiceOrganization"/>
        <rdfs:subClassOf rdf:resource="#Business"/>
    </daml:Class>
    <daml:Class rdf:ID="Airplane">
        <rdfs:label>airplanes</rdfs:label>
        <rdfs:comment>The collection of all heavier-than-air,
            self-powered flying machines (excluding cruise missiles)
            that get their lift while flying from #$AirplaneWings. Thus,
            #$Helicopters are excluded because the lift is caused by
            rotors. A borderline case are planes that take-off
            vertically, using a turbojet engine, so initially the lift
            is not due to their wings. In flight, however, such planes
            will need their wings to stay up in the air.</rdfs:comment>
        <guid>bd58828b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="AirplaneRunway">
        <rdfs:label>runways</rdfs:label>
        <rdfs:comment>An airstrip, at an airport, on an aircraft
            carrier, or in some field, upon which airplanes taxi, take
            off, and land.</rdfs:comment>
        <guid>bd58910e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#PathForWheeledVehicles"/>
    </daml:Class>
    <daml:Class rdf:ID="Airport-Physical">
        <rdfs:label>airports</rdfs:label>
        <rdfs:comment>The collection of all airfields, where airplanes
            take off and land.  An #$Airport-Physical definitely has a
            runway, may or may not have any other buildings. If
            it&apos;s the grounds of an #$AirportOrganization, some of
            those other features will be present.</rdfs:comment>
        <guid>bd58feaf-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="AirportOrganization">
        <rdfs:label>airports</rdfs:label>
        <rdfs:comment>A collection of organizations.  An element of
            #$AirportOrganization is an organization that manages and
            controls particular airports and their appurtenant
            facilities; e.g., #$LaGuardiaAirport-Organization.</rdfs:comment>
        <guid>bd589fbc-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Organization"/>
    </daml:Class>
    <daml:Class rdf:ID="Alertness">
        <rdfs:label>alertness</rdfs:label>
        <rdfs:comment>#$Alertness is an #$AnimalPhysiologicalAttribute
            which specifies how sleepy or alert an animal is.  Levels of
            #$Alertness include #$Asleep, #$Sleepy, and #$Awake.</rdfs:comment>
        <guid>bd58a532-9c29-11b1-9dad-c379636f7270</guid>
        <rdfs:subClassOf rdf:resource="#AnimalPhysiologicalAttribute"/>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </daml:Class>
    <daml:Class rdf:ID="AllergicReaction">
        <rdfs:label>allergic reactions</rdfs:label>
        <rdfs:comment>A collection of dynamic, physiological states.  An
            instance of #$AllergicReaction is an event in which an
            organism which is exposed to a particular substance (e.g.,
            pollen, mold) develops some abnormality or impairment of its
            physiological condition as a result of interacting with the
            substance.  Allergic reactions to some types of substances
            occur widely in members of a species; e.g.,
            #$PoisonIvyPoisoning in humans.  But other allergic
            reactions affect only a small proportion of a species, such
            as human allergies to penicillin.  This concept is the set
            of events in which allergic reactions are `taking
            place&apos;, not abstract unrealized potential situations
            such as `John is allergic to milk.&apos;  I.e., if John were
            allergic to milk, and he drank some, and then proceeded to
            have a whopping bad allergic reaction, that latter event
            would be an element of #$AllergicReaction.</rdfs:comment>
        <guid>c0fd6b2f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PhysiologicalConditionType"/>
        <rdfs:subClassOf rdf:resource="#AilmentCondition"/>
    </daml:Class>
    <TimeInterval rdf:ID="Always-TimeInterval">
        <rdfs:label>forever</rdfs:label>
        <rdfs:comment>The interval of time which encompasses all time.
            In more general MTs we remain agnostic as to whether this
            time interval has either a beginning or an end, but if it
            does, #$Always-TimeInterval begins when time itself begins
            and ends only when time ends completely.  Every other
            instance of #$TimeInterval is a #$timeSlices of
            #$Always-TimeInterval. </rdfs:comment>
        <guid>c0ea3419-9c29-11b1-9dad-c379636f7270</guid>
    </TimeInterval>
    <daml:Class rdf:ID="Ambulance">
        <rdfs:label>ambulances</rdfs:label>
        <rdfs:comment>The collection of all RoadVehicles that are
            equipped primarily for transporting wounded, injured or sick persons.</rdfs:comment>
        <guid>bd588cd2-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#RoadVehicle"/>
    </daml:Class>
    <daml:Class rdf:ID="Amphibian">
        <rdfs:label>amphibians</rdfs:label>
        <rdfs:comment>The collection of all #$Organism-Wholes which are
            members of the #$BiologicalClass Amphibia, being a
            specialization of #$Vertebrate.    Members of this class are
            smooth skinned #$Vertebrates which hatch from eggs to form
            aquatic larvae [see #$Larva].  These larvae metamorphose
            into an air-breathing adult [see AirBreathingVertebrate]
            (normally) having #$Lungs.  Subsets of this collection
            include #$Frogs and #$Salamanders.</rdfs:comment>
        <guid>bd58e024-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#BiologicalClass"/>
        <rdf:type rdf:resource="#OrganismClassificationType"/>
        <rdfs:subClassOf rdf:resource="#Vertebrate"/>
        <rdfs:subClassOf rdf:resource="#NonPersonAnimal"/>
    </daml:Class>
    <daml:Class rdf:ID="AnatomicalVessel">
        <rdfs:label>anatomical vessel</rdfs:label>
        <rdfs:comment>The collection of all anatomical vessels in
            #$Animals.  Instances of this collection are tubular animal
            tissue which acts as a conduit for body fluids or substances
            passing into or out of the body.</rdfs:comment>
        <guid>be425bb7-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#AnimalBodyPartType"/>
        <rdfs:subClassOf rdf:resource="#Pipe-GenericConduit"/>
        <rdfs:subClassOf rdf:resource="#AnimalBodyPart"/>
        <rdfs:subClassOf rdf:resource="#CordlikeObject"/>
    </daml:Class>
    <daml:Class rdf:ID="Anesthesia">
        <rdfs:label>anesthesia</rdfs:label>
        <rdfs:comment>A collection of events; a subset of #$DrugTherapy
            (q.v.).  In an instance of #$Anesthesia, a
            #$BiologicalLivingObject undergoes the effect of some
            instance of #$Anesthetic, the effect of which is to
            eliminate the perception of pain.  #$Anesthesia events occur
            in connection with other medical care events, so that a
            patient will not feel the pain or discomfort that would
            otherwise be associated with those medical procedures.
            #$Anesthetics are of various chemical kinds, work in various
            ways, and can be administered in various ways.  They may
            topically numb an area, they may poison the central nervous
            system to the point where the animal loses consciousness,
            etc.  The resulting anesthetic therapies thus may differ,
            according to the type of anesthetic used; for example, the
            patient may or may not be conscious during an instance of
            #$Anesthesia.  See also #$AdministeringADrug.</rdfs:comment>
        <guid>c0fd53a3-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#DrugTherapy"/>
    </daml:Class>
    <daml:Class rdf:ID="Anger">
        <rdfs:label>outrages</rdfs:label>
        <rdfs:comment>Intense feeling of displeasure and usually of
            antagonism.  This is a #$Collection --- for an explanation
            of that, see #$Happiness.  Some more specialized
            #$FeelingAttributeTypes than #$Anger include #$Belligerence, etc.</rdfs:comment>
        <guid>bd58c448-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#FeelingAttributeType"/>
        <rdfs:subClassOf rdf:resource="#Frustration"/>
    </daml:Class>
    <daml:Class rdf:ID="Angle">
        <rdfs:label>angles</rdfs:label>
        <rdfs:comment>A subset of #$GeometricThing.  Each element of
            #$Angle is formed by two lines diverging from the same point
            or two surfaces diverging from the same line. Examples
            include spatially localized objects, such as the angle
            formed by the intersection of two walls, and abstract
            objects, such as the angle formed by the intersection of two
            (abstract) lines.</rdfs:comment>
        <guid>bd61bd87-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#GenericShapeType"/>
        <rdfs:subClassOf rdf:resource="#GeometricThing"/>
    </daml:Class>
    <daml:Class rdf:ID="AngularAccelerationRate">
        <rdfs:label>angular acceleration rate</rdfs:label>
        <rdfs:comment>#$AngularAccelerationRate is the rate at which the
            #$RateOfRotation of an object changes.It is a measurable
            physical quantity, measured in units such as radians per
            second per second.</rdfs:comment>
        <guid>bd59080e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MeasurableAttributeType"/>
        <rdf:type rdf:resource="#AttributeType"/>
        <rdf:type rdf:resource="#DerivedNumericAttributeType"/>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
        <rdfs:subClassOf rdf:resource="#PhysicalAttribute"/>
    </daml:Class>
    <daml:Class rdf:ID="Animal">
        <rdfs:label>animals</rdfs:label>
        <rdfs:comment>The collection of all animals; this large class of
            organisms is one instance of #$BiologicalKingdom.  Animals
            are typically motile, living, whole organisms; they are
            elements of #$Heterotroph, incapable of performing instances
            of #$Photosynthesis.  Animal cells contain cholesterol and
            lack cell walls made of cellulose.  #$Person is a subset of
            #$Animal; see also #$NonPersonAnimal.</rdfs:comment>
        <guid>bd58b031-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#BiologicalKingdom"/>
        <rdf:type rdf:resource="#OrganismClassificationType"/>
        <rdfs:subClassOf rdf:resource="#PerceptualAgent"/>
        <rdfs:subClassOf rdf:resource="#AnimalBLO"/>
        <rdfs:subClassOf rdf:resource="#Organism-Whole"/>
        <rdfs:subClassOf rdf:resource="#Agent"/>
        <rdfs:subClassOf rdf:resource="#SolidTangibleThing"/>
        <daml:disjointWith rdf:resource="#VegetableMatter"/>
        <daml:disjointWith rdf:resource="#Plant"/>
        <daml:disjointWith rdf:resource="#DeadAnimal"/>
    </daml:Class>
    <daml:Class rdf:ID="AnimalActivity">
        <rdfs:label>activities</rdfs:label>
        <rdfs:comment>A collection of events.  Each element of
            #$AnimalActivity is an action whose performer(s) (see
            #$doneBy) belong to the collection #$Animal.</rdfs:comment>
        <guid>bd588daa-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#Action"/>
    </daml:Class>
    <daml:Class rdf:ID="AnimalBLO">
        <rdfs:label>animal body parts</rdfs:label>
        <rdfs:comment>The subset of #$BiologicalLivingObject which
            includes all the elements of #$Animal and of
            #$AnimalBodyPart and #$AnimalBodyRegion.</rdfs:comment>
        <guid>c0fe0761-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#BiologicalLivingObject"/>
    </daml:Class>
    <daml:Class rdf:ID="AnimalBodyPart">
        <rdfs:label>body parts</rdfs:label>
        <rdfs:comment>The collection of all the anatomical parts and
            physical regions of all living animals; a subset of
            #$OrganismPart.  Each element of #$AnimalBodyPart is a piece
            of some live animal and thus is itself an instance of
            #$BiologicalLivingObject.  #$AnimalBodyPart includes both
            highly localized organs (e.g., hearts) and physical systems
            composed of parts distributed throughout an animal&apos;s
            body (such as its circulatory system and nervous system).
            By default, all elements of #$AnimalBodyPart are considered
            a part (see #$anatomicalParts) of some instance of #$Animal.
            However, there are exceptional cases, e.g., a severed limb,
            hair which has fallen out, detached parts of dead animals,
            blood which has poured out of a body.</rdfs:comment>
        <guid>bd58801c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#AnimalBodyRegion"/>
        <daml:disjointWith rdf:resource="#PlantPart"/>
    </daml:Class>
    <daml:Class rdf:ID="AnimalBodyPartType">
        <rdfs:label>animal body part type</rdfs:label>
        <rdfs:comment>The collection of all the types of
            #$AnimalBodyParts.  An #$AnimalBodyPartType  is a
            characterization of body parts by structure and/or function.
            Some elements of this collection include #$SpinalColumn,
            #$Eyelash, #$NervousSystem, #$Urethra,
            #$Wing-AnimalBodyPart, #$HeelOfPalm, etc.  As can be seen
            from those examples, #$AnimalBodyPartType is not organized
            along species/order/class/phylum/... taxonomic lines.</rdfs:comment>
        <guid>bd58e7da-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdf:type rdf:resource="#SiblingDisjointCollection"/>
    </daml:Class>
    <daml:Class rdf:ID="AnimalBodyRegion">
        <rdfs:label>animal body region</rdfs:label>
        <rdfs:comment>The set of parts of an animal&apos;s body that one
            might point to, operate on, photograph, transplant, etc.  So
            this is a collection of (conceptual) spatial subdivisions of
            the bodies of #$Animals, generally contiguous and having
            some more or less clear boundary.  Some elements of this
            collections are Einstein&apos;s head, #$SantasBeard, and
            Babe Ruth&apos;s right arm.  Other elements of this set are
            what might be considered unhealthy body regions, such as a
            blister, a puncture wound, a bruise, etc. -- but those are
            still clearly a part of an animal&apos;s body, can be
            pointed to, photographed, bandaged up, etc.     Note that
            this concept is quite different from an animal body
            `system&apos; (such as the lymph system, the nervous system,
            etc.) which comprises a small portion of an animal&apos;s
            total mass but is distributed throughout the animal&apos;s
            body -- see #$AnimalBodyPart.  (At the naive, commonsense
            level of physiology, and for almost all purposes, it is
            perfectly acceptable to conceptualize Santa&apos;s beard as
            one #$AnimalBodyRegion, and the same for Farrah
            Fawcett&apos;s hair, etc.  A borderline case of this is:
            Cher&apos;s fingernails.  In some contexts, one would treat
            those as an #$AnimalBodyRegion, and in other contexts one
            would treat them as ten separate #$AnimalBodyRegions.)</rdfs:comment>
        <guid>bd5adaa1-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#OrganismPart"/>
        <rdfs:subClassOf rdf:resource="#AnimalBLO"/>
    </daml:Class>
    <daml:Class rdf:ID="AnimalMigration">
        <rdfs:label>migrations</rdfs:label>
        <rdfs:comment>The collection of regular, species-linked
            movements of an animal or group of animals from one place to
            another, usually with a return to the starting point after a
            certain period of time.  In some species, the migration
            cycle occurs once in a lifetime, while others migrate
            annually on a seasonal basis.   Migration is typically
            linked with an animal&apos;s reproductive cycle (as in
            salmon), but may also involve seasonal relocation to a more
            hospitable climate and/or more plentiful food supply. For
            example, many birds exhibit seasonal migration; e.g., native
            Northeastern U.S. birds that spend their winters in the
            Southern U.S.</rdfs:comment>
        <guid>c1009284-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#Translation-RoundTrip"/>
        <rdfs:subClassOf rdf:resource="#LocomotionEvent-Animal"/>
    </daml:Class>
    <daml:Class rdf:ID="AnimalPhysiologicalAttribute">
        <rdfs:label>physiological attributes of animals</rdfs:label>
        <rdfs:comment>The broadest collection of attributes of #$Animals
            that describe the physiological aspects of an animal,
            including its physiological (1) capacities, (2) conditions,
            and (3) states.  Examples include: (1) Capacities:
            #$Fertile, #$HearingImpaired, #$Paraplegic; (2) Conditions:
            #$Anemic, #$AthleticPhysicalBuild; (3) States:
            #$Intoxicated, #$Injured, #$Inflamed.
            #$PlantPhysiologicalAttributes, such as #$InBloom, are excluded.</rdfs:comment>
        <guid>bd58a577-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#AttributeType"/>
        <rdfs:subClassOf rdf:resource="#PhysiologicalAttribute"/>
    </daml:Class>
    <daml:Class rdf:ID="AnimalSound">
        <rdfs:label>animal sounds</rdfs:label>
        <rdfs:comment>A collection of information bearing things (IBTs);
            a subset of #$InformationBearingWavePropagation.  Each
            element of #$AnimalSound is a sound of a type which
            originally was, and typically is, made by an animal using
            just its body parts (though such a sound may subsequently
            have been reproduced by imitation or recording).  For
            example, instances of #$Birdsong, #$NeighingSound,
            #$PurringSound, #$BarkingSound, #$BrayingSound.  Note that
            the restriction to sounds produced by body parts alone
            excludes noises produced by moving external objects; i.e.,
            #$AnimalSound does NOT include rustling the leaves
            underfoot, splashing water, or playing a musical instrument.</rdfs:comment>
        <guid>bd620dbf-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#AudibleSound"/>
        <rdfs:subClassOf rdf:resource="#InformationBearingWavePropagation"/>
    </daml:Class>
    <daml:Class rdf:ID="AnimalWalkingProcess">
        <rdfs:label>animal walking processes</rdfs:label>
        <rdfs:comment>The collection of instances of #$Walking-Generic
            in which the #$locomotor is an #$Animal.</rdfs:comment>
        <guid>bd58d77d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#SimpleWholeBodyMovement"/>
        <rdfs:subClassOf rdf:resource="#SingleDoerAction"/>
        <rdfs:subClassOf rdf:resource="#LocomotionProcess-Animal"/>
    </daml:Class>
    <daml:Class rdf:ID="AnnualClimateCycle">
        <rdfs:label>climates</rdfs:label>
        <rdfs:comment>A collection of events.  Each element of
            #$AnnualClimateCycle is an extended event, one year in
            length, which encompasses #$subEvents describing the
            changing of the seasons.  Subsets include
            #$TemperateClimateCycle, #$HumidSubtropicalClimateCycle,
            etc.  See also the comments on #$ClimateCycleType, #$hasClimateType.</rdfs:comment>
        <guid>bd5901a2-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#WeatherEvent"/>
        <daml:disjointWith rdf:resource="#ImmediateWeatherProcess"/>
    </daml:Class>
    <daml:Class rdf:ID="AnnualEventType">
        <rdfs:label>annual event type</rdfs:label>
        <rdfs:comment>A collection of collections.  The instances of an
            element of #$AnnualEventType are synchronized with the
            calendar.  If ?X is an #$AnnualEventType, then one occurs
            each year.  For example, #$ChristmasHoliday is an
            #$AnnualEventType, because one occurs each year,
            synchronized with the calendar.</rdfs:comment>
        <guid>be1ed0b5-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#TemporallyDisjointIntervalType"/>
    </daml:Class>
    <daml:Class rdf:ID="AntiSymmetricBinaryPredicate">
        <rdfs:label>anti symmetric binary predicate</rdfs:label>
        <rdfs:comment>A collection of predicates; the subset of
            #$BinaryPredicate whose elements represent antisymmetric
            relations.  A predicate F is an element of
            #$AntiSymmetricBinaryPredicate if and only if F is a binary
            predicate and, if both (F X Y) and (F Y X) hold, then X=Y,
            for every X,Y within the domain and range of F.  For
            example, #$greaterThanOrEqualTo, #$compatibleBloodTypes.
            Note this additional restriction: A Cyc predicate F can be
            an element of #$AntiSymmetricBinaryPredicate only if the
            type (i.e., arg-Isa) constraint applicable to F&apos;s first
            argument is not disjoint with the type constraint applicable
            to F&apos;s second argument.  See also #$NoteOnArgumentTypingAndPropertiesOfRelations.</rdfs:comment>
        <guid>bdc9fb94-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="http://www.daml.org/2001/03/daml+oil#Property"/>
    </daml:Class>
    <daml:Class rdf:ID="AntiTransitiveBinaryPredicate">
        <rdfs:label>anti transitive binary predicate</rdfs:label>
        <rdfs:comment>A collection of predicates; the subset of
            #$BinaryPredicate whose elements represent anti-transitive
            relations.  A predicate F is an element of
            #$AntiTransitiveBinaryPredicate if and only if F is a binary
            predicate and, for every X,Y,Z in the domain of F, (#$not
            (#$and (F X Y)(F Y Z)(F X Z))).    Note this additional
            restriction: A Cyc predicate F can be an element of
            #$AntiTransitiveBinaryPredicate only if the type (i.e.,
            arg-Isa) constraint applicable to F&apos;s first argument is
            not disjoint with the type constraint applicable to F&apos;s
            second argument.  See also #$NoteOnArgumentTypingAndPropertiesOfRelations.</rdfs:comment>
        <guid>bf8bdc58-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="#IrreflexiveBinaryPredicate"/>
    </daml:Class>
    <daml:Class rdf:ID="Anticipation-Feeling">
        <rdfs:label>expectancies</rdfs:label>
        <rdfs:comment>Emotion accompanying an expectation of something
            pleasant in the foreseeable future.  This is a collection;
            for an explanation of a typical #$FeelingAttributeType, see
            #$Happiness. </rdfs:comment>
        <guid>bd58cefc-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#FeelingAttributeType"/>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </daml:Class>
    <daml:Class rdf:ID="Apathy">
        <rdfs:label>apathy</rdfs:label>
        <rdfs:comment>A lack of interest or concern.  If someone is
            feeling some measure of #$Apathy, then they typically will
            have little or no response to things normally expected to
            excite emotion or interest.  This is a #$Collection --- for
            an explanation of that, see #$Happiness.  A related
            #$FeelingAttributeType is #$Boredom.</rdfs:comment>
        <guid>bd5893b4-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#FeelingAttributeType"/>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </daml:Class>
    <daml:Class rdf:ID="Appendage-AnimalBodyPart">
        <rdfs:label>appendages</rdfs:label>
        <rdfs:comment>The collection of all appendages of #$Animals.  An
            appendage is an #$AnimalBodyPart that is connected to, and
            extends from, the animal&apos;s #$Torso (or else from
            another of its appendages, such as a hand extending from an
            arm).  Each appendage is used by the #$Animal for one or
            more functions; altogether, appendages serve a wide variety
            of functions such as locomotion, manipulation, sensing,
            fighting, scratching, heat dissipation, balance, etc.
            Appendages are not crucial for the life of the animal, thus
            a #$Neck-AnimalBodyPart or #$Head-AnimalBodyPart is not
            considered to be an appendage.</rdfs:comment>
        <guid>bd5882f8-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdf:type rdf:resource="#AnimalBodyPartType"/>
        <rdfs:subClassOf rdf:resource="#AnimalBodyPart"/>
        <rdfs:subClassOf rdf:resource="#BiologicalLivingObject"/>
    </daml:Class>
    <daml:Class rdf:ID="AppropriatingSomething">
        <rdfs:label>appropriations</rdfs:label>
        <rdfs:comment>A collection of events; a subset of
            #$TakingSomething and of #$GainingUserRights.  In an
            instance of #$AppropriatingSomething, an #$Agent takes
            something that no one else has user rights over, such as air
            for breathing, or some object which at that time belongs to
            no one (e.g.,a dime lying in the street). Note: The English
            verb `appropriate&apos; can also mean to take something away
            from someone else, against their will and wrongfully, but
            that is not what is meant here.  For that, see #$Stealing-Generic.</rdfs:comment>
        <guid>bd58eea3-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#TakingSomething"/>
        <daml:disjointWith rdf:resource="#TransferringPossession"/>
    </daml:Class>
    <daml:Class rdf:ID="Approval">
        <rdfs:label>sanctions</rdfs:label>
        <rdfs:comment>The emotion of viewing positively a state of
            affairs or other agent&apos;s actions.  This is a
            collection; for an explanation of a typical
            #$FeelingAttributeType, see #$Happiness.</rdfs:comment>
        <guid>be00bc14-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#FeelingAttributeType"/>
        <rdfs:subClassOf rdf:resource="#Satisfaction"/>
    </daml:Class>
    <daml:Class rdf:ID="April">
        <rdfs:label>April</rdfs:label>
        <rdfs:comment>The collection of all Aprils,   the fourth month
            of the year in the #$JulianCalendar.</rdfs:comment>
        <guid>bd58c279-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MonthOfYearType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CalendarMonth"/>
    </daml:Class>
    <daml:Class rdf:ID="AquaticOrganism">
        <rdfs:label>aquatic organisms</rdfs:label>
        <rdfs:comment>The collection of organisms adapted to life
            underwater, which spend all or most of their time immersed
            in water.  This includes the elements of #$Fish, also many
            instances of #$Mollusk, #$SeaMammal, etc.</rdfs:comment>
        <guid>bd589715-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#OrganismTypeByHabitat"/>
        <rdfs:subClassOf rdf:resource="#Organism-Whole"/>
    </daml:Class>
    <NaturalLanguage rdf:ID="ArabicLanguage">
        <rdfs:label>Arabic</rdfs:label>
        <rdfs:comment>A Semitic language spoken by a large number of
            people in North Africa and the Middle East.</rdfs:comment>
        <guid>bd588730-9c29-11b1-9dad-c379636f7270</guid>
    </NaturalLanguage>
    <ShapeAttribute rdf:ID="ArcShaped">
        <rdfs:label>arc shaped</rdfs:label>
        <rdfs:comment>The instance of #$ShapeAttribute held by those
            things whose shape is described with the arc of some segment
            of a circle.  For instance, a section of the equator would
            be described as arc shaped.</rdfs:comment>
        <guid>c007e4fe-9c29-11b1-9dad-c379636f7270</guid>
    </ShapeAttribute>
    <daml:Class rdf:ID="Area">
        <rdfs:label>areas</rdfs:label>
        <rdfs:comment>A collection of physical attributes.  Each element
            of #$Area is an amount of two-dimensional space, i.e., a
            surface.  Elements of #$Area may be either a fixed interval,
            such as the area of a rectangle 5 cm x 10 cm, or a range,
            such as the area of a city lot.  See #$UnitOfArea for the
            units used by Cyc to measure areas.</rdfs:comment>
        <guid>bd58c301-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DerivedNumericAttributeType"/>
        <rdfs:subClassOf rdf:resource="#PhysicalAttribute"/>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </daml:Class>
    <daml:Class rdf:ID="ArgGenlAttributeBinaryPredicate">
        <rdfs:label>arg genl attribute binary predicate</rdfs:label>
        <rdfs:comment>Those instances of both #$ArgTypeBinaryPredicate
            and #$ArgGenlAttributePredicate used to specify the required
            attribute of an argument of #$Relation.  Each instance PRED
            of this collection is a binary predicate with the following
            properties: ARG1 is an instance of #$Relation, and ARG2 is
            an instance of #$AttributeValue.  (PRED ARG1 ARG2) means
            that some argument of ARG1 is constrained to be a spec
            attribute of ARG2, where PRED determines the argument place
            in question.</rdfs:comment>
        <guid>c0aa7393-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdf:type rdf:resource="#RelationshipType"/>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="#ArgTypeBinaryPredicate"/>
    </daml:Class>
    <daml:Class rdf:ID="ArgGenlAttributeTernaryPredicate">
        <rdfs:label>arg genl attribute ternary predicate</rdfs:label>
        <rdfs:comment>Those instances of both #$ArgTypeTernaryPredicate
            and #$ArgGenlAttributePredicate used to specify the required
            #$genlAttributes of an argument of a #$Relation; the arg1 is
            the Relation; the arg2 is the argument constrained; the arg3
            is the required #$genlAttributes #$AttributeValue.</rdfs:comment>
        <guid>bf4fcfa6-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdf:type rdf:resource="#RelationshipType"/>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="#ArgTypeTernaryPredicate"/>
    </daml:Class>
    <daml:Class rdf:ID="ArgGenlBinaryPredicate">
        <rdfs:label>arg genl binary predicate</rdfs:label>
        <rdfs:comment>Those instances of both #$BinaryPredicate and
            #$ArgGenlPredicate used to specify the required #$genls of
            an argument of a #$Relation; the arg1 is the #$Relation; the
            arg2 is the required #$genls #$Collection.</rdfs:comment>
        <guid>bf1eedc8-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdf:type rdf:resource="#RelationshipType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#ArgTypeBinaryPredicate"/>
    </daml:Class>
    <daml:Class rdf:ID="ArgGenlTernaryPredicate">
        <rdfs:label>arg genl ternary predicate</rdfs:label>
        <rdfs:comment>Those instances of both #$TernaryPredicate and
            #$ArgGenlPredicate used to specify the required #$genls of
            an argument of a #$Relation; the arg1 is the Relation; the
            arg2 is the argument constrained; the arg3 is the required
            #$genls #$Collection.</rdfs:comment>
        <guid>bd97e378-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdf:type rdf:resource="#RelationshipType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#ArgTypeTernaryPredicate"/>
        <rdfs:subClassOf rdf:resource="#TernaryPredicate"/>
    </daml:Class>
    <daml:Class rdf:ID="ArgIsaBinaryPredicate">
        <rdfs:label>arg isa binary predicate</rdfs:label>
        <rdfs:comment>Those instances of both #$BinaryPredicate and
            #$ArgIsaPredicate used to specify the required #$isa of an
            argument of a #$Relation; the arg1 is the #$Relation; the
            arg2 is the required #$isa #$Collection.</rdfs:comment>
        <guid>bfa4fe8c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdf:type rdf:resource="#RelationshipType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#ArgTypeBinaryPredicate"/>
    </daml:Class>
    <daml:Class rdf:ID="ArgIsaTernaryPredicate">
        <rdfs:label>arg isa ternary predicate</rdfs:label>
        <rdfs:comment>Those instances of both #$TernaryPredicate and
            #$ArgIsaPredicate used to specify the required #$isa of an
            argument of a #$Relation;  the arg1 is the #$Relation; the
            arg2 is the argument constrained; the arg3 is the required
            #$isa #$Collection.</rdfs:comment>
        <guid>bfedab5d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdf:type rdf:resource="#RelationshipType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#ArgTypeTernaryPredicate"/>
        <rdfs:subClassOf rdf:resource="#TernaryPredicate"/>
    </daml:Class>
    <daml:Class rdf:ID="ArgTypeBinaryPredicate">
        <rdfs:label>arg type binary predicate</rdfs:label>
        <rdfs:comment>Those instances of both #$BinaryPredicate and
            #$ArgTypePredicate used to specify the required #$isa or
            #$genls or #$genlAttributes of an argument of a #$Relation;
            the arg1 is the #$Relation; the arg2 is the required type, a
            #$Collection or #$AttributeValue.</rdfs:comment>
        <guid>beb5aba2-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#RelationshipType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="http://www.daml.org/2001/03/daml+oil#Property"/>
    </daml:Class>
    <daml:Class rdf:ID="ArgTypeTernaryPredicate">
        <rdfs:label>arg type ternary predicate</rdfs:label>
        <rdfs:comment>Those instances of both #$TernaryPredicate and
            #$ArgTypePredicate used to specify the required #$isa or
            #$genls or #$genlAttributes of an argument of a #$Relation;
            the arg1 is the Relation; the arg2 is the argument
            constrained; the arg3 is the required type: a #$Collection
            or an #$AttributeValue.</rdfs:comment>
        <guid>c00a42b9-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdf:type rdf:resource="#RelationshipType"/>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="#TernaryPredicate"/>
    </daml:Class>
    <SharedNote rdf:ID="ArgumentTypeChecking-FORTSvsNonReifiedNATS">
        <rdfs:label>argument type checking - f o r t svs non reified n a
            t s</rdfs:label>
        <rdfs:comment>Arg-type checking imposes somewhat weaker
            constraints on non-reified function terms than it does for
            forts (first order reified terms).  Specifically,
            non-reified terms are required only to be consistent with
            arg-isa and arg-genls constraints using disjointness
            reasoning constraint is satisfied when no disjointness
            violation can be found. This is significantly weaker than
            the constraints imposed on forts: forts must provably
            satisfy applicable arg-isa and arg-genl constraints using
            isa and genls reasoning.</rdfs:comment>
        <guid>bd6bae41-9c29-11b1-9dad-c379636f7270</guid>
    </SharedNote>
    <daml:Class rdf:ID="Arm">
        <rdfs:label>arms</rdfs:label>
        <rdfs:comment>The collection of all animal arms.  An #$Arm of an
            animal is one of its #$AnimalBodyParts, more particularly
            one of its appendages, a limb which it uses for manipulation
            moreso than for locomotion.  A #$Hand is considered part of
            an #$Arm.</rdfs:comment>
        <guid>bd58e9e5-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#SymmetricAnatomicalPartType"/>
        <rdf:type rdf:resource="#AnimalBodyPartType"/>
        <rdfs:subClassOf rdf:resource="#BiologicalLivingObject"/>
    </daml:Class>
    <daml:Class rdf:ID="ArmMovement">
        <rdfs:label>arm movement</rdfs:label>
        <rdfs:comment>The collection of any movements of an arm that are
            generated by the #$Animal whose arm it is, through nerve
            impulses to the arm.  Physically, an #$ArmMovement involves
            movement of the upper arm or elbow in relation to the body
            to which it is attached.</rdfs:comment>
        <guid>bd58a69d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#BodyMovementEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="Army-BranchOfService">
        <rdfs:label>regular armies</rdfs:label>
        <rdfs:comment>The collection of all modern nation-states&apos;
            armies (the whole  branch of service).  This sense of
            &apos;army&apos; is different from an &apos;Army&apos; or
            &apos;Army Group&apos; in the sense  of a military unit.  It
            is customary to refer to very large  military units in the
            fields as &apos;armies&apos;, e.g. the American 5th Army in
            the European Theater in WWII.  This is not the sense being
            referred to  here--&apos;the Army&apos; itself is intended.</rdfs:comment>
        <guid>bf6e8301-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <daml:disjointWith rdf:resource="#Navy"/>
    </daml:Class>
    <daml:Class rdf:ID="ArmyPersonnel">
        <rdfs:label>army people</rdfs:label>
        <rdfs:comment>A collection of people, a subset   of
            #$MilitaryPerson. Each element of this collection is
            somebody who works for an #$Army-BranchOfSevice.</rdfs:comment>
        <guid>bd58eecc-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#OccupationType"/>
        <rdfs:subClassOf rdf:resource="#Soldier"/>
    </daml:Class>
    <daml:Class rdf:ID="ArrestingSomeone">
        <rdfs:label>arrests</rdfs:label>
        <rdfs:comment>A collection of events.  In an instance of
            #$ArrestingSomeone, a law enforcement officer arrests
            another person, who is thereupon taken into custody (#$HeldCaptive).</rdfs:comment>
        <guid>bd66906e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#CapturingAnimal"/>
    </daml:Class>
    <daml:Class rdf:ID="ArtObject">
        <rdfs:label>works of art</rdfs:label>
        <rdfs:comment>A collection of information bearing objects
            (IBOs).  Each element of #$ArtObject is a tangible object
            that is a work, or a reproduction of a work, in one of the
            representational or plastic arts, such as a painting,
            sculpture, ceramic piece, quilt, stained glass composition,
            etc.  #$ArtObject does NOT include plays, movies, music,
            performance art, or other activities.  #$ArtObject is a
            subset of #$InformationBearingObject, but its elements need
            not have propositional content, although they may.  Examples
            of #$ArtObject: the #$StatueOfLiberty, the Mona Lisa, a
            poster reproduction of Van Gogh&apos;s `Starry Night&apos;,
            Rodin&apos;s `Burghers of Calais&apos;, a piece of Ju ware
            from the Sung Dynasty, the windows of Chartres Cathedral, a
            series of prints by Picasso.</rdfs:comment>
        <guid>bd58c7b8-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#CompositeTangibleAndIntangibleObject"/>
        <rdfs:subClassOf rdf:resource="#Artifact"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangibleProduct"/>
        <rdfs:subClassOf rdf:resource="#VisualInformationSource"/>
    </daml:Class>
    <daml:Class rdf:ID="Arthropod">
        <rdfs:label>arthropods</rdfs:label>
        <rdfs:comment>An instance of #$BiologicalPhylum whose
            #$taxonMembers include (mostly) the numerous collections of
            chitin-armored invertebrates that have jointed bodies and
            limbs, e.g., insects, spiders, crustaceans, etc.</rdfs:comment>
        <guid>bd58b048-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#BiologicalPhylum"/>
        <rdf:type rdf:resource="#OrganismClassificationType"/>
        <rdfs:subClassOf rdf:resource="#Animal"/>
        <rdfs:subClassOf rdf:resource="#Invertebrate"/>
    </daml:Class>
    <daml:Class rdf:ID="Artifact">
        <rdfs:label>artifacts</rdfs:label>
        <rdfs:comment>A collection of tangible things.  An instance of
            #$Artifact is a tangible which was more or less
            intentionally created by an #$Agent (or a group of #$Agents
            working together) to serve some purpose or perform some
            function.  By `created&apos;, we don&apos;t require that the
            matter itself be created, it is often just the result of
            some sort of assemblage or modification process, such as a
            wooden flute that&apos;s been whittled from a tree branch, a
            sawhorse that&apos;s been put together out of boards and
            nails, a coin that&apos;s been minted by embossing or by
            melting liquid silver into a mold, etc.    Let&apos;s
            consider some positive and negative examples.    In addition
            to the obvious human artifacts (buildings, tools, textiles,
            power lines), this collection includes certain sorts of
            things made by #$Animals, such as bird nests, termite
            mounds, and beaver dams.    Something which just barely
            squeaks through the intended meaning of this concept is
            #$YaleUniversity.  In addition to the abstract legal entity,
            it consists of a set of physical buildings, furnishings,
            etc.  By contrast, an organization that had no headquarters
            building, equipment, tangible property, etc. would not be an
            artifact.  Similarly, a fictional character such as Tom
            Sawyer is not an artifact (in the context of the story, Tom
            is not an artifact because he is a real boy; in the context
            of the real world, Tom is not an artifact because he has no
            tangible component whatsoever.)    While some artifacts may
            be alive, or contain living subparts, we do not intend this
            collection to encompass all organisms which resulted from
            normal biological reproductive processes.  Your child is not
            an artifact.    If you do an oil painting of a house that is
            an artifact, but much more borderline is what you get if you
            take a rock and just paint it a solid color, say white.  In
            general that won&apos;t be an artifact unless it serves some
            purpose, such as marking the shoulder of a roadway, but more
            questionable cases are if the purpose of the white rock is
            just `to be sold as art&apos; or `to look pretty.&apos;  The
            white rock might thus be an artifact in certain contexts,
            but not in others.    Not every instance of #$Path-Generic
            (q.v.) is necessarily an instance of #$Artifact.  For
            example, some channels used for navigation may not be
            artifacts, because even though they are marked with human
            artifacts (i.e., channel markers) as locations where ships
            may safely travel, the channel itself may have been a
            naturally occurring pre-existing thing -- e.g., the
            #$EnglishChannel.  If a #$ChannelOrStrait were produced or
            maintained only by constant dredging, it might count as an
            artifact.  By contrast, each #$Canal, such as #$SuezCanal,
            is almost certain to be an #$Artifact.  See also #$Product.</rdfs:comment>
        <guid>bd5907fd-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <daml:disjointWith rdf:resource="#Agent"/>
    </daml:Class>
    <daml:Class rdf:ID="Artifact-NonAgentive">
        <rdfs:label>artifact - non agentive</rdfs:label>
        <rdfs:comment>#$Artifact-NonAgentive is the collection of all
            artifacts that in no plausible, literal sense may be
            considered to have a kind of agency in ordinary,
            non-fictional, straightforward contexts -- i.e. they are not
            instances of #$Agent-Generic.  (Exceptions within
            metaphorical, fanciful, or fictional context could supersede
            membership in this collection: when someone says, &apos;My
            hairdryer hates me&apos;, the hairdryer would not be an
            instance of #$Artifact-NonAgentive in that special context.)
            Example subcollections: #$StoneStuff, #$Air, #$Tooth,
            #$Caffeine. #$AgentiveArtifacts like #$Robots are excluded.</rdfs:comment>
        <guid>bd8e4b86-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <daml:disjointWith rdf:resource="#BiologicalLivingObject"/>
        <daml:disjointWith rdf:resource="#Agent-Generic"/>
    </daml:Class>
    <daml:Class rdf:ID="ArtificialMaterial">
        <rdfs:label>artificial substances</rdfs:label>
        <rdfs:comment>A collection of substances; a subset of
            #$Artifact.  An instance of #$ArtificialMaterial is a
            portion of artificial stuff that was intentionally made by
            some agent(s), such as #$Plastic or #$SweetNLow. Since
            #$ArtificialMaterials are intentionally produced, this class
            does not normally include materials which are merely
            #$byProducts or #$wasteProducts of an intentional process.
            However, what is a byproduct at one time or in one context
            may be a useful material that would count as an instance of
            #$ArtificialMaterial in another.</rdfs:comment>
        <guid>bd590222-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdfs:subClassOf rdf:resource="#Artifact"/>
        <daml:disjointWith rdf:resource="#NaturalTangibleStuff"/>
    </daml:Class>
    <Alertness rdf:ID="Asleep">
        <rdfs:label>asleep</rdfs:label>
        <rdfs:comment>#$Asleep is the #$Alertness attribute of being
            asleep.  #$Asleep is a specialization of #$Unconscious.
            (#$holdsIn (#$YearFn 1776) (#$alertnessLevel RipVanWinkle #$Asleep)).</rdfs:comment>
        <guid>bd58a6ff-9c29-11b1-9dad-c379636f7270</guid>
    </Alertness>
    <daml:Class rdf:ID="AssociativeRelation">
        <rdfs:label>associative relation</rdfs:label>
        <rdfs:comment>An important subset of #$Relation.  Each element
            RELN of #$AssociativeRelation is a relationship such that
            the expressions (RELN A (RELN B C)) and (RELN (RELN A B) C)
            both have the same value or meaning; e.g., #$PlusFn,
            #$TimesFn, #$or, #$and.  More generally, the truth of an
            asserted associative relation  is unaffected by any change
            from one well-formed parenthesization of its use (on a given
            sequence of arguments) to another.</rdfs:comment>
        <guid>c14862c2-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdf:type rdf:resource="#RelationshipType"/>
        <rdfs:subClassOf rdf:resource="#Relation"/>
    </daml:Class>
    <daml:Class rdf:ID="AstronomicalObject">
        <rdfs:label>astronomical objects</rdfs:label>
        <rdfs:comment>A collection of tangibles.  Each element of
            #$AstronomicalObject is an object of interest to
            astronomers, which includes the Earth along with other
            objects in outer space.  Some, but not all, elements of
            #$AstronomicalObject belong to #$CelestialObject, the
            collection of heavenly bodies visible from earth.  Examples:
            #$Polaris-TheStar, the #$Sun, #$PlanetSaturn. See also: #$HeavenlyBody.</rdfs:comment>
        <guid>bd58d178-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#TangibleThing"/>
        <rdfs:subClassOf rdf:resource="#InanimateObject-Natural"/>
    </daml:Class>
    <daml:Class rdf:ID="AsymmetricBinaryPredicate">
        <rdfs:label>asymmetric binary predicate</rdfs:label>
        <rdfs:comment>A collection of predicates; the subset of
            #$AntiSymmetricBinaryPredicate whose elements represent
            asymmetric relations.  A predicate F is an element of
            #$AsymmetricBinaryPredicate if and only if F is a binary
            predicate and (F X Y) implies (#$not (F Y X)).  For example,
            #$northOf, #$children, #$greaterThan, #$overrides.    Note
            this additional restriction: A Cyc predicate F can be an
            element of #$AsymmetricBinaryPredicate only if the type
            (i.e., arg-Isa) constraint applicable to F&apos;s first
            argument is not disjoint with the type constraint applicable
            to F&apos;s second argument.  See also #$NoteOnArgumentTypingAndPropertiesOfRelations.</rdfs:comment>
        <guid>bd6561fc-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="#IrreflexiveBinaryPredicate"/>
        <rdfs:subClassOf rdf:resource="#AntiSymmetricBinaryPredicate"/>
        <daml:disjointWith rdf:resource="#SymmetricBinaryPredicate"/>
    </daml:Class>
    <daml:Class rdf:ID="AtLeastPartiallyMentalEvent">
        <rdfs:label>mental events</rdfs:label>
        <rdfs:comment>A collection of events. Each event that is an
            instance of #$AtLeastPartiallyMentalEvent has an actor or
            group of actors (see #$actors) whose mental functions are
            involved.  The collection includes such things as dreaming,
            perceiving, sensing, theorizing about something, having a
            realization, making a decision, building, designing
            something, and consciously carrying out a task. Some of
            those examples are actions as well as events (see #$doneBy
            or #$performedBy).  Note that the above list includes both
            purposeful events and non-purposeful events that involve
            mental functions.  Note also that any event that has a
            mental component is also an instance of this collection so
            that events like preparing lunch would be classified as
            instances of #$AtLeastPartiallyMentalEvent.  It is almost
            always possible and preferable to use one of the specs of
            #$AtLeastPartiallyMentalEvent.  If an event seems mostly
            mental in nature, modulo neurons firing and related brain
            activity, use #$StrictlyMentalEvent or one of its specs.  If
            it essentially involves both mental and physical activity,
            see #$CompositePhysicalAndMentalEvent or
            #$PurposefulCompositePhysicalAndMentalActivity.  For mental
            events that are intentionally and purposefully performed,
            see the subset #$PurposefulMentalActivity.</rdfs:comment>
        <guid>bd588615-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#AnimalActivity"/>
        <rdfs:subClassOf rdf:resource="#Event"/>
    </daml:Class>
    <daml:Class rdf:ID="Athlete">
        <rdfs:label>athletes</rdfs:label>
        <rdfs:comment>A collection of persons.  Each element of
            #$Athlete is a person who trains to compete in contests
            involving physical agility, stamina, or strength.  In the
            #$JobMt, #$Athlete is a subset of #$Professional (q.v.), and
            hence in that microtheory represents the collection of
            professional athletes.</rdfs:comment>
        <guid>bd58befb-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PersonByActivityType"/>
        <rdf:type rdf:resource="#OccupationType"/>
        <rdfs:subClassOf rdf:resource="#Person"/>
    </daml:Class>
    <daml:Class rdf:ID="AthleticActivity">
        <rdfs:label>athletic activities</rdfs:label>
        <rdfs:comment>Any athletic activity, i.e. one which   involves
            physical exertion and tends to require strength and stamina.
            Not just limited to competitive sports events.  Also
            includes spelunking,    or going for a jog, or shooting a
            few hoops.</rdfs:comment>
        <guid>be01fe5d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
        <rdfs:subClassOf rdf:resource="#PhysicalEvent"/>
    </daml:Class>
    <InternationalWaters rdf:ID="AtlanticOcean">
        <rdfs:label>the Atlantic Ocean</rdfs:label>
        <rdfs:comment>The main body of salt water primarily in the
            #$WesternHemisphere-Region, bordering on five #$Continents
            (or three #$TrueContinents -- Western coasts of Europe and
            Africa, Antarctica, Eastern coasts of North and South America).</rdfs:comment>
        <guid>bd5901d2-9c29-11b1-9dad-c379636f7270</guid>
    </InternationalWaters>
    <daml:Class rdf:ID="Atom">
        <rdfs:label>atoms</rdfs:label>
        <rdfs:comment>A collection of microscopic-scale objects.  Each
            instance of #$Atom has one atomic nucleus and some number of
            electrons.  As a default, we assume that an instance of
            #$Atom has no net charge, i.e., that it has as many
            instances of #$Electrons as it does of #$Protons in its
            #$AtomicNucleus; but note there are exceptions, e.g., those
            which are instances of #$Ion.</rdfs:comment>
        <guid>bd5891ef-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#ChemicalObject"/>
    </daml:Class>
    <daml:Class rdf:ID="AtomicNucleus">
        <rdfs:label>nuclei</rdfs:label>
        <rdfs:comment>A collection of objects; a subset of
            #$MicroscopicScaleObject.  Each instance of #$AtomicNucleus
            is an object composed of some definite number of instances
            of #$Proton and some definite number of instances of
            #$Neutron.  Instances of the collection #$Atom are each
            composed of one member of #$AtomicNucleus and some number of electrons.</rdfs:comment>
        <guid>bd58a3d9-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#MicroscopicScaleObject"/>
    </daml:Class>
    <daml:Class rdf:ID="AttributeType">
        <rdfs:label>attribute type</rdfs:label>
        <rdfs:comment>A collection of collections.  Each element of
            #$AttributeType is a collection of attributes.  Each element
            of #$AttributeType is a subset of #$AttributeValue (q.v.).
            Examples include #$SensoryAttribute, #$BodyPartPosition,
            #$OrientationAttribute, #$SecurityClearanceLevel,
            #$ComputerVideoResolution, #$ForceVector, and many more.</rdfs:comment>
        <guid>bd590364-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#ObjectType"/>
        <daml:disjointWith rdf:resource="#AttributeValue"/>
    </daml:Class>
    <daml:Class rdf:ID="AttributeValue">
        <rdfs:label>attributes</rdfs:label>
        <rdfs:comment>The set of all attributes represented in Cyc.
            #$AttributeValue includes quantities, such as 5 inches
            (i.e., (#$Inch 5)) or 1000 dollars per year (i.e.,
            (#$DollarsPerYear 1000)), as well as qualities like #$Hilly,
            #$Rough, #$DeviceOn, etc., which can be used to make
            assertions about the state of some tangible object.</rdfs:comment>
        <guid>bd5880c5-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#AttributeType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#IntangibleIndividual"/>
        <daml:disjointWith rdf:resource="#Relation"/>
        <daml:disjointWith rdf:resource="#Proposition"/>
        <daml:disjointWith rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <daml:disjointWith rdf:resource="#AttributeType"/>
        <daml:disjointWith rdf:resource="#Microtheory"/>
        <daml:disjointWith rdf:resource="#TemporalThing"/>
        <daml:disjointWith rdf:resource="#Language"/>
        <daml:disjointWith rdf:resource="#SpatialThing"/>
    </daml:Class>
    <daml:Class rdf:ID="AudibleSound">
        <rdfs:label>sounds</rdfs:label>
        <rdfs:comment>A collection of events; a subset of #$Sound.  Each
            element of #$AudibleSound is a sound within the #$Frequency
            range of human hearing.</rdfs:comment>
        <guid>bd5906fc-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#WavePropagationType"/>
        <rdfs:subClassOf rdf:resource="#WavePropagation"/>
        <rdfs:subClassOf rdf:resource="#Sound"/>
    </daml:Class>
    <daml:Class rdf:ID="AudioCommunicating">
        <rdfs:label>audio-communicating events</rdfs:label>
        <rdfs:comment>A collection of information transfer events; a
            subset of #$Communicating.  Each element of
            #$AudioCommunicating is a transmission of sound-borne
            information between two (or more) agents; e.g., talking,
            clapping, or performing music.</rdfs:comment>
        <guid>bd58c907-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#Communicating"/>
    </daml:Class>
    <daml:Class rdf:ID="August">
        <rdfs:label>August</rdfs:label>
        <rdfs:comment>The collection of all Augusts,   the eighth month
            of the year in the #$JulianCalendar.</rdfs:comment>
        <guid>bd58c170-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MonthOfYearType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CalendarMonth"/>
    </daml:Class>
    <Country rdf:ID="Australia">
        <rdfs:label>Australia</rdfs:label>
        <rdfs:comment>Australia, the country that occupies the
            #$ContinentOfAustralia (and also #$TasmaniaIslandAustralia)
            dividing the eastern #$IndianOcean from the southwestern
            #$PacificOcean.  In the #$DualistGeopoliticalMt, this
            constant includes both physical and political aspects of Australia.</rdfs:comment>
        <guid>bd5894b3-9c29-11b1-9dad-c379636f7270</guid>
    </Country>
    <daml:Class rdf:ID="AuthorizedAgreement">
        <rdfs:label>authorized agreements</rdfs:label>
        <rdfs:comment>The collection of generic agreements that are
            authorized by one of the agreeing parties (typically by the
            issuer of the document embodying the agreement).
            #$AuthorizedAgreements are generic in the sense that their
            authorizing agents are party to many similar agreements; for
            that reason, an #$AuthorizedAgreement is typically given a
            unique identification number.  Examples: bank accounts,
            driver&apos;s licenses, stock certificates.</rdfs:comment>
        <guid>bd58b01c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Agreement"/>
    </daml:Class>
    <daml:Class rdf:ID="AutoDealership">
        <rdfs:label>car dealerships</rdfs:label>
        <rdfs:comment>Each instance is an establishment (an organization
            located at one site) that sells automobiles and other types
            of road vehicles to consumers.</rdfs:comment>
        <guid>bd58eed7-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#SingleSiteOrganization"/>
        <rdfs:subClassOf rdf:resource="#RetailStore"/>
        <rdfs:subClassOf rdf:resource="#Business"/>
    </daml:Class>
    <daml:Class rdf:ID="Automobile">
        <rdfs:label>cars</rdfs:label>
        <rdfs:comment>A collection of transportation devices -- those
            commonly known as `passenger cars.&apos;  An instance of
            #$Automobile is an element of #$RoadVehicle which was
            designed for carrying about 4 passengers (give or take a
            factor of 2).  In addition to midsize cars, #$Automobile
            includes elements belonging to the subsets #$SportsCar,
            #$PickupTruck and #$Van.  This collection does NOT include
            motorcycles, buses, tractors, etc.</rdfs:comment>
        <guid>bd5895c1-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#RoadVehicle"/>
        <rdfs:subClassOf rdf:resource="#ContactLocation"/>
        <rdfs:subClassOf rdf:resource="#HumanlyOccupiedSpatialObject"/>
    </daml:Class>
    <Alertness rdf:ID="Awake">
        <rdfs:label>awake</rdfs:label>
        <rdfs:comment>#$Awake is the #$Alertness attribute of being awake.</rdfs:comment>
        <guid>bd58a5fa-9c29-11b1-9dad-c379636f7270</guid>
    </Alertness>
    <daml:Class rdf:ID="BackSide">
        <rdfs:label>backs</rdfs:label>
        <rdfs:comment>The collection of all the entire back sides (as
            conventionally understood) of all objects that have distinct
            #$Sides, one of which faces in the backwards direction.</rdfs:comment>
        <guid>bd59048d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#RegionType"/>
        <rdfs:subClassOf rdf:resource="#Side"/>
    </daml:Class>
    <CycLAssertionDirection rdf:ID="Backward-AssertionDirection">
        <rdfs:label>backward - assertion direction</rdfs:label>
        <rdfs:comment>The backward direction for Cyc assertions; the
            assertion is not forward propagated.</rdfs:comment>
        <guid>bd674278-9c29-11b1-9dad-c379636f7270</guid>
    </CycLAssertionDirection>
    <PreparationAttribute rdf:ID="Baked">
        <rdfs:label>baked</rdfs:label>
        <rdfs:comment>The attribute #$Baked is a specialized form of
            #$Cooked.  Food that is #$Baked has been prepared in an
            event of #$BakingFood, using a $#RegularOven.</rdfs:comment>
        <guid>bd5886dd-9c29-11b1-9dad-c379636f7270</guid>
    </PreparationAttribute>
    <daml:Class rdf:ID="BakingFood">
        <rdfs:label>baking food</rdfs:label>
        <rdfs:comment>A collection of events in which food is baked in a
            #$RegularOven.  After an event of #$BakingFood, the food
            involved has been #$Baked.</rdfs:comment>
        <guid>bd58aed0-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#CookingFood"/>
    </daml:Class>
    <daml:Class rdf:ID="BalconyLevelInAConstruction">
        <rdfs:label>balconies</rdfs:label>
        <rdfs:comment>A specialization of #$LevelOfAConstruction whose
            instances are balconies in the style of those overhanging
            levels sometimes found in churches, theatres, etc.  Such
            balconies are often approximately one-third the size of the
            floor or level below them, and therefore can be considered
            legitimate levels themselves. They usually contain a mob of
            seats.  Note that this collection does _not_ include the
            kind of balcony that protrudes from a window or door on an
            already existing level.   See also
            #$AboveGroundLevelInAConstruction and #$BasementLevelInAConstruction.</rdfs:comment>
        <guid>bd5894f5-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#LevelOfAConstruction"/>
    </daml:Class>
    <Entity rdf:ID="Bangladesh">
        <rdfs:label>Bangladesh</rdfs:label>
        <rdfs:comment>Country near the eastern end of the Indian
            subcontinent, separated  from #$Nepal by a narrow corridor
            of #$India, and sharing part of its  border with #$Burma.
            Considered a part of India&apos;s territory during  the
            period of British colonial rule.</rdfs:comment>
        <guid>bd590173-9c29-11b1-9dad-c379636f7270</guid>
    </Entity>
    <daml:Class rdf:ID="BankDebitCard">
        <rdfs:label>debit cards</rdfs:label>
        <rdfs:comment>A collection of official `documents&apos;.  Each
            element of #$BankDebitCard is a plastic card that enables
            the holder to access the account with which the card is
            associated; typically used to withdraw funds from the
            account.  Cf. #$CreditCard.</rdfs:comment>
        <guid>c0fd4920-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MoneyTenderType"/>
        <rdfs:subClassOf rdf:resource="#Plastic"/>
        <rdfs:subClassOf rdf:resource="#Card"/>
        <rdfs:subClassOf rdf:resource="#IDDocument"/>
        <rdfs:subClassOf rdf:resource="#TenderObject"/>
    </daml:Class>
    <daml:Class rdf:ID="Bartering">
        <rdfs:label>barters</rdfs:label>
        <rdfs:comment>The collection of transactions between two
            #$Agents in which one #$Agent gives items or services to
            another #$Agent, and the other #$Agent gives items or
            services in return, and neither of the items or services is
            money, credit, or payment of money.</rdfs:comment>
        <guid>bd58b2e0-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#ExchangeOfUserRights"/>
        <rdfs:subClassOf rdf:resource="#Transaction"/>
        <daml:disjointWith rdf:resource="#MonetaryExchangeOfUserRights"/>
    </daml:Class>
    <BroadMicrotheory rdf:ID="BaseKB">
        <rdfs:label>base k b</rdfs:label>
        <rdfs:comment>#$BaseKB is the most general #$Microtheory
            currently in use.  Assertions in this context are
            `accessible&apos; from any other #$Microtheory via the
            #$genlMt relation.  In the partial order of microtheories,
            all microtheories have access to #$BaseKB.  An assertion
            which is true here will by default be true in every context.
            The `content&apos; of #$BaseKB consists of very general
            assertions which are expected to be usable in most or all
            applications of Cyc, as well as Cyc&apos;s most fundamental
            assertions that it uses in inference, and all completely
            universal, timeless truths.</rdfs:comment>
        <guid>bd588111-9c29-11b1-9dad-c379636f7270</guid>
    </BroadMicrotheory>
    <daml:Class rdf:ID="BasementLevelInAConstruction">
        <rdfs:label>basements</rdfs:label>
        <rdfs:comment>A specialization of #$LevelOfAConstruction whose
            instances are below ground level.  See also
            #$AboveGroundLevelInAConstruction and #$BalconyLevelInAConstruction.</rdfs:comment>
        <guid>bd58ce1a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#LevelOfAConstruction"/>
    </daml:Class>
    <daml:Class rdf:ID="Battle">
        <rdfs:label>battles</rdfs:label>
        <rdfs:comment>The collection of events in which two or more
            large groups of #$Persons meet and fight one another, each
            group seeking to vanquish (some of) the others.  #$Battles
            are often conducted by #$MilitaryOrganizations, and they may
            influence the outcomes of #$WagingWar.  A #$Battle will have
            as #$subEvents at least two #$PhysicallyAttackingAnAgent
            events, in which one of the fighting groups attacks the other.</rdfs:comment>
        <guid>bd58aeb0-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
    </daml:Class>
    <ThreeDimensionalShapeAttribute rdf:ID="BeamShaped">
        <rdfs:label>beam shaped</rdfs:label>
        <rdfs:comment>The attribute shared by all objects that have the
            attribute #$Rectangular3DShaped and for which one dimension
            is many times greater than the other two dimensions.</rdfs:comment>
        <guid>c138a988-9c29-11b1-9dad-c379636f7270</guid>
    </ThreeDimensionalShapeAttribute>
    <Agent rdf:ID="Belgium">
        <rdfs:label>Belgium</rdfs:label>
        <rdfs:comment>Belgium, a small #$IndependentCountry in the west
            of the #$ContinentOfEurope.  It is a kingdom.  The constant
            includes the nation of Belgium as it has existed throughout
            time, including both its physical and its political aspects.</rdfs:comment>
        <guid>bd58df47-9c29-11b1-9dad-c379636f7270</guid>
    </Agent>
    <daml:Class rdf:ID="BeliefSystem">
        <rdfs:label>systems of belief</rdfs:label>
        <rdfs:comment>The collection of ideologies (systems of belief)
            in terms of which an agent characterizes (i.e., makes sense
            of) their world.  Elements of this set include:
            #$VegetarianBeliefs, #$GermanNaziIdeology,
            #$RepublicanPartyIdeology, #$CommunistIdeology,
            #$PacifistIdeology, #$Atheism, etc. See also #$ConventionalClassificationSystem.</rdfs:comment>
        <guid>bd58bd47-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#BeliefSystemType"/>
        <rdfs:subClassOf rdf:resource="#AbstractInformationalThing"/>
    </daml:Class>
    <daml:Class rdf:ID="BeliefSystemType">
        <rdfs:label>belief system type</rdfs:label>
        <rdfs:comment>The collection of all the kinds of
            #$BeliefSystems: religious, philosophical, political,
            ethical, cultural, and scientific.  Some elements of this
            collection include #$Religion, #$PhilosophyBeliefs, etc.
            The most general member of this set is #$BeliefSystems (qv).</rdfs:comment>
        <guid>bd590588-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
    </daml:Class>
    <PhysicalStructuralAttribute rdf:ID="Bendable">
        <rdfs:label>bendable</rdfs:label>
        <rdfs:comment>A physical attribute.  #$Bendable is the
            #$PhysicalStructuralAttribute of an object that tends to
            stay in the contorted shape when contorted.  Note: for
            something to be bendable, it must be #$Flexible.</rdfs:comment>
        <guid>bd58874c-9c29-11b1-9dad-c379636f7270</guid>
    </PhysicalStructuralAttribute>
    <LivingLanguage rdf:ID="BengaliLanguage">
        <rdfs:label>Asamiya</rdfs:label>
        <rdfs:comment>Language spoken in the Indic area.</rdfs:comment>
        <guid>bd58cf7c-9c29-11b1-9dad-c379636f7270</guid>
    </LivingLanguage>
    <daml:Class rdf:ID="Bicycle">
        <rdfs:label>bicycles</rdfs:label>
        <rdfs:comment>The collection of all bicycles, personal wheeled
            transport devices powered by human peddling.   Most Bicycles
            have two main wheels arranged in-line, but some tandem
            bicycles have more than two wheels.</rdfs:comment>
        <guid>bd58e8d0-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Device-UserPowered"/>
    </daml:Class>
    <daml:Class rdf:ID="BidirectedPathSystem">
        <rdfs:label>bidirected path system</rdfs:label>
        <rdfs:comment>An instance of #$PathSystemType-Structural and a
            subcollection of #$Semi-DirectedPathSystem.  For each
            instance SYS of #$BidirectedPathSystem, every link in SYS is
            given two directions.</rdfs:comment>
        <guid>beffe753-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PathSystemType-Structural"/>
        <rdfs:subClassOf rdf:resource="#Semi-DirectedPathSystem"/>
        <daml:disjointWith rdf:resource="#DirectedPathSystem"/>
    </daml:Class>
    <daml:Class rdf:ID="BilaterallySymmetricObject">
        <rdfs:label>bilaterally symmetric object</rdfs:label>
        <rdfs:comment>The collection of objects which are symmetric on
            both sides of a bisecting axis, as are most vertebrates.</rdfs:comment>
        <guid>bd58b94b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#SpatialThing"/>
    </daml:Class>
    <daml:Class rdf:ID="Bill-PaymentRequest">
        <rdfs:label>bills</rdfs:label>
        <rdfs:comment>A collection of documents.  Each element of
            #$Bill-PaymentRequest is a notification, demand, or request
            made by a creditor (or its agent) to a debtor, for payment
            of a debt previously incurred for some loan, goods, or
            services.  Examples: telephone bills, tax bills, department
            store bills, cleaning bills, fuel bills.</rdfs:comment>
        <guid>bd58d7b1-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#TextualMaterial"/>
    </daml:Class>
    <daml:Class rdf:ID="BillingLocation">
        <rdfs:label>billing locations</rdfs:label>
        <rdfs:comment>A collection of places; a subset of
            #$ContactLocation.  Each element of #$BillingLocation is a
            location to which invoices are sent.  For most private
            individuals, their billing location is their home address.</rdfs:comment>
        <guid>be0184e0-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ContactLocationType"/>
        <rdfs:subClassOf rdf:resource="#MailingLocation"/>
    </daml:Class>
    <daml:Class rdf:ID="BinaryFunction">
        <rdfs:label>binary function</rdfs:label>
        <rdfs:comment>#$BinaryFunction is the collection of all Cyc
            functions which take two arguments.</rdfs:comment>
        <guid>c0e7247c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#BinaryRelation"/>
        <rdfs:subClassOf rdf:resource="#Function-Denotational"/>
    </daml:Class>
    <daml:Class rdf:ID="BinaryPredicate">
        <rdfs:label>binary predicates</rdfs:label>
        <rdfs:comment>#$BinaryPredicate is the collection of all Cyc
            predicates which take two arguments.</rdfs:comment>
        <guid>bd588102-9c29-11b1-9dad-c379636f7270</guid>
        <daml:sameClassAs rdf:resource="http://www.daml.org/2001/03/daml+oil#Property"/>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
        <rdfs:subClassOf rdf:resource="#BinaryRelation"/>
        <daml:disjointWith rdf:resource="#SubLObject"/>
    </daml:Class>
    <daml:Class rdf:ID="BinaryRelation">
        <rdfs:label>binary relation</rdfs:label>
        <rdfs:comment>The collection of all #$Relations of arity 2 in
            CycL.  This  collection was created in order to implement
            automatic conclusion of  arity for relations in CycL,
            regardless of whether they are predicates  or functions.</rdfs:comment>
        <guid>be75c8f9-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#FixedArityRelation"/>
        <daml:disjointWith rdf:resource="#PartiallyCommutativeRelation"/>
    </daml:Class>
    <daml:Class rdf:ID="BioDeteriorationResistance">
        <rdfs:label>bio deterioration resistance</rdfs:label>
        <rdfs:comment>A collection of attributes; a subset of
            #$PhysicalAttribute.  Each element of
            #$BioDeteriorationResistance represents a specific capacity
            of a tangible object to resist biological deterioration.
            Degrees of #$BioDeteriorationResistance may be represented
            using #$GenericValueFunctions.  Indicate a particular
            object&apos;s #$BioDeteriorationResistance with the
            predicate #$resistanceToBioDeterioration.</rdfs:comment>
        <guid>be00bf59-9c29-11b1-9dad-c379636f7270</guid>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </daml:Class>
    <daml:Class rdf:ID="BiologicalCatabolismEvent">
        <rdfs:label>catabolisms</rdfs:label>
        <rdfs:comment>A collection of events.  Each
            #$BiologicalCatabolismEvent involve the destruction of
            larger molecules.  E.g., the degradation of glucose into
            carbon dioxide and water, which releases energy used to make
            ATP (adenosine triphosphate).</rdfs:comment>
        <guid>bd58ef47-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#BiologicalDestructionEvent"/>
        <rdfs:subClassOf rdf:resource="#BiologicalMetabolismEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="BiologicalClass">
        <rdfs:label>classes</rdfs:label>
        <rdfs:comment>The collection of taxonomic subdivisions directly
            under #$BiologicalPhylum (for animals and for the
            animal-like organisms in the #$ProtistaKingdom), or
            #$BiologicalDivision (for the plants and for the plant-like
            organisms within the #$ProtistaKingdom).</rdfs:comment>
        <guid>bd58974c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#BiologicalTaxonType"/>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="#BiologicalTaxon"/>
    </daml:Class>
    <daml:Class rdf:ID="BiologicalDecompositionEvent">
        <rdfs:label>biological decomposition event</rdfs:label>
        <rdfs:comment>A collection of events.  In each
            #$BiologicalDecompositionEvent, some living structures are decomposed.</rdfs:comment>
        <guid>bd58b294-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#BiologicalDestructionEvent"/>
        <rdfs:subClassOf rdf:resource="#DecompositionEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="BiologicalDestructionEvent">
        <rdfs:label>biological destruction event</rdfs:label>
        <rdfs:comment>A collection of events.  In each element of
            #$BiologicalDestructionEvent, something is destroyed by some
            element(s) of #$BiologicalLivingObject.  For example,
            #$DigestingInStomach is a subset of #$BiologicalDestructionEvent.</rdfs:comment>
        <guid>bd58b316-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#BiologicalEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="BiologicalDevelopmentEvent">
        <rdfs:label>biological development event</rdfs:label>
        <rdfs:comment>A collection of events, and a subset of
            #$IntrinsicStateChangeEvents.  In each
            #$BiologicalDevelopmentEvent, one or more living things
            undergo biological changes in which they progress from one
            developmental stage to another.  For example, the
            germination of a seed, the opening of a flower, the pupating
            of a caterpillar, a teenager reaching puberty.  Some
            borderline non-examples include: Groucho Marx being born,
            Groucho Marx dying.</rdfs:comment>
        <guid>bd58d906-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#IntrinsicStateChangeEvent"/>
        <rdfs:subClassOf rdf:resource="#BiologicalEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="BiologicalDivision">
        <rdfs:label>divisions</rdfs:label>
        <rdfs:comment>The collection of main taxonomic subdivisions of
            #$BiologicalKingdom (or #$BiologicalSubkingdom) for the
            members of the #$MoneraKingdom (i.e., prokaryotes), #$Fungus
            Kingdom, #$Plant Kingdom, and for the plant-like organisms
            within the #$ProtistaKingdom.  In the #$Animal Kingdom,
            however, the main taxonomic subdivisions are elements of
            #$BiologicalPhylum (q.v.) rather than #$BiologicalDivision.</rdfs:comment>
        <guid>bd58978f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#BiologicalTaxonType"/>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="#BiologicalTaxon"/>
    </daml:Class>
    <daml:Class rdf:ID="BiologicalEvent">
        <rdfs:label>biological processes</rdfs:label>
        <rdfs:comment>An event in which a biological thing is a #$bodilyDoer.</rdfs:comment>
        <guid>bd5902b7-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#PhysicalEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="BiologicalFamily">
        <rdfs:label>taxonomic families</rdfs:label>
        <rdfs:comment>The collection of biological taxonomic
            subdivisions below #$BiologicalOrder (or
            #$BiologicalSuborder) and above #$BiologicalGenus.
            Especially important in Botanical classification.</rdfs:comment>
        <guid>bd58cb2c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdf:type rdf:resource="#BiologicalTaxonType"/>
        <rdfs:subClassOf rdf:resource="#BiologicalTaxon"/>
    </daml:Class>
    <daml:Class rdf:ID="BiologicalGenus">
        <rdfs:label>genera</rdfs:label>
        <rdfs:comment>The collection of biological taxonomic
            subdivisions below #$BiologicalFamily and above
            #$BiologicalSpecies.  Sometimes, hybrids are possible
            between different instances of #$BiologicalSpecies that
            belong to the same #$BiologicalGenus.</rdfs:comment>
        <guid>bd589a9f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#BiologicalTaxonType"/>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="#BiologicalTaxon"/>
    </daml:Class>
    <daml:Class rdf:ID="BiologicalIntakeEvent">
        <rdfs:label>biological intake event</rdfs:label>
        <rdfs:comment>A collection of processes.  In each element of
            #$BiologicalIntakeEvent, some object(s) are taken into some
            living structure.</rdfs:comment>
        <guid>bd588866-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#BiologicalTransportationEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="BiologicalKingdom">
        <rdfs:label>kingdoms</rdfs:label>
        <rdfs:comment>The collection of the highest, most general
            taxonomic divisions of organisms.  Traditionally, it has
            included the elements of #$Animal and of #$Plant and may
            include separate kingdoms for the elements of
            #$ProkaryoticCell, single-celled eukaryotes (protists), and fungi.</rdfs:comment>
        <guid>bd58989a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#BiologicalTaxonType"/>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="#BiologicalTaxon"/>
    </daml:Class>
    <daml:Class rdf:ID="BiologicalLivingObject">
        <rdfs:label>living things</rdfs:label>
        <rdfs:comment>A collection of all structures that are composed
            of one or more living cells (see #$Cell).  Biological living
            objects (BLOs) may be either elements of #$Organism-Whole
            (like dogs or pine trees) or are components of such whole
            organisms (like noses, tails, and pine needles).  The
            healthy leg of a living person is a BLO (as is the person),
            but an amputated leg is not a BLO.  Every element of
            #$BiologicalLivingObject is either capable of biological
            reproduction itself or has components which are capable of
            biological reproduction (such as the cells in a living arm).</rdfs:comment>
        <guid>bd58a6ed-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#OrganicStuff"/>
        <rdfs:subClassOf rdf:resource="#CompositeTangibleAndIntangibleObject"/>
        <rdfs:subClassOf rdf:resource="#NaturalTangibleStuff"/>
        <daml:disjointWith rdf:resource="#Organization"/>
        <daml:disjointWith rdf:resource="#InanimateThing"/>
        <daml:disjointWith rdf:resource="#Place"/>
        <daml:disjointWith rdf:resource="#Artifact-NonAgentive"/>
    </daml:Class>
    <daml:Class rdf:ID="BiologicalMetabolismEvent">
        <rdfs:label>biological metabolism event</rdfs:label>
        <rdfs:comment>The collection of biological processes in which
            substrates are converted into metabolites.  The metabolites
            may be more or less complex than the substrates.</rdfs:comment>
        <guid>bd58ee48-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#BiologicalEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="BiologicalOrder">
        <rdfs:label>orders</rdfs:label>
        <rdfs:comment>The collection of biological taxonomic
            subdivisions below #$BiologicalClass (or
            #$BiologicalSubclass) and above #$BiologicalFamily.</rdfs:comment>
        <guid>bd58e329-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdf:type rdf:resource="#BiologicalTaxonType"/>
        <rdfs:subClassOf rdf:resource="#BiologicalTaxon"/>
    </daml:Class>
    <daml:Class rdf:ID="BiologicalPhylum">
        <rdfs:label>phyla</rdfs:label>
        <rdfs:comment>The collection of main taxonomic subdivisions of
            #$BiologicalKingdom (or #$BiologicalSubkingdom if present)
            for the #$Animal kingdom and for the animal-like organisms
            within the #$ProtistaKingdom.  The other elements of
            #$BiologicalKingdom have divisions belonging to
            #$BiologicalDivision instead of Phyla (Phyla is the plural
            of Phylum).</rdfs:comment>
        <guid>bd589813-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdf:type rdf:resource="#BiologicalTaxonType"/>
        <rdfs:subClassOf rdf:resource="#BiologicalTaxon"/>
    </daml:Class>
    <daml:Class rdf:ID="BiologicalProductionEvent">
        <rdfs:label>biological production event</rdfs:label>
        <rdfs:comment>A collection of events.  In each element of
            #$BiologicalProductionEvent, raw materials are combined to
            produce a product, and some element(s) of
            #$BiologicalLivingObject is the producer.  E.g., the
            production of honey by honeybees, the growth of a seedling
            into a tree, the secretion of sweat by a marathon runner,
            etc.    Note:  This is a very general collection, and for
            most purposes one of its subsets will better capture what is intended.</rdfs:comment>
        <guid>bd58c40f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#BiologicalEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="BiologicalReproductionEvent">
        <rdfs:label>procreations</rdfs:label>
        <rdfs:comment>A collection of events.  Each element of
            #$BiologicalReproductionEvent is an event in which one or
            more biological organisms (the #$parentActors) produce new
            organisms (the #$offspringActors) generally of the same kind
            as the parents.</rdfs:comment>
        <guid>bd58d8c5-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#BiologicalProductionEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="BiologicalSpecies">
        <rdfs:label>species</rdfs:label>
        <rdfs:comment>A collection of the lowest taxons
            (#$BiologicalTaxon, q.v.) that are necessarily common to
            both parents of fertile offspring, or, in the case of
            asexual reproduction, necessarily common to parent and
            child.  Members of different species cannot produce fertile
            offspring by interbreeding.  An element of
            #$BiologicalSpecies has members who all have significant
            traits in common, and members of each biological species
            have other members as parents.  In biological taxonomy,
            related species are grouped into a particular element of
            #$BiologicalGenus (q.v.).</rdfs:comment>
        <guid>bd58caeb-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdf:type rdf:resource="#BiologicalTaxonType"/>
        <rdfs:subClassOf rdf:resource="#BiologicalTaxon"/>
    </daml:Class>
    <daml:Class rdf:ID="BiologicalSubclass">
        <rdfs:label>subclasses</rdfs:label>
        <rdfs:comment>The collection of biological taxonomic
            subdivisions more specific than #$BiologicalClass but more
            general than #$BiologicalOrder.</rdfs:comment>
        <guid>bd58cba7-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdf:type rdf:resource="#BiologicalTaxonType"/>
        <rdfs:subClassOf rdf:resource="#BiologicalTaxon"/>
    </daml:Class>
    <daml:Class rdf:ID="BiologicalSubfamily">
        <rdfs:label>biological subfamily</rdfs:label>
        <rdfs:comment>The collection of biological taxonomic
            subdivisions below #$BiologicalFamily and above #$BiologicalGenus.</rdfs:comment>
        <guid>bf7063f7-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdf:type rdf:resource="#BiologicalTaxonType"/>
        <rdfs:subClassOf rdf:resource="#BiologicalTaxon"/>
    </daml:Class>
    <daml:Class rdf:ID="BiologicalSubkingdom">
        <rdfs:label>subkingdoms</rdfs:label>
        <rdfs:comment>The collection of biological subkingdoms, the
            biological taxonomic divisions of organisms immediately
            below #$BiologicalKingdom.</rdfs:comment>
        <guid>bd589857-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdf:type rdf:resource="#BiologicalTaxonType"/>
        <rdfs:subClassOf rdf:resource="#BiologicalTaxon"/>
    </daml:Class>
    <daml:Class rdf:ID="BiologicalSuborder">
        <rdfs:label>biological suborder</rdfs:label>
        <rdfs:comment>The collection of biological taxonomic
            subdivisions below #$BiologicalOrder and above #$BiologicalFamily.</rdfs:comment>
        <guid>bdf83894-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#BiologicalTaxonType"/>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="#BiologicalTaxon"/>
    </daml:Class>
    <daml:Class rdf:ID="BiologicalSubphylum">
        <rdfs:label>biological subphylum</rdfs:label>
        <rdfs:comment>A collection of #$BiologicalTaxons that is more
            restrictive than #$BiologicalPhylum.  All instances of a
            particular #$BiologicalSubspecies have significant traits or
            collections of traits in common which are not shared by all
            other members of the same #$BiologicalPhylum.</rdfs:comment>
        <guid>bed637c5-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#BiologicalTaxonType"/>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="#BiologicalTaxon"/>
    </daml:Class>
    <daml:Class rdf:ID="BiologicalSubspecies">
        <rdfs:label>subspecies</rdfs:label>
        <rdfs:comment>A collection of #$BiologicalTaxons that is more
            restrictive than #$BiologicalSpecies.  Members of different
            subspecies can produce fertile offspring by interbreeding,
            but the offspring are not members of the parental subspecies
            although they are members of the common #$BiologicalSpecies.
            All instances of a particular #$BiologicalSubspecies have
            significant traits or collections of traits in common which
            are not shared by all other members of the same
            #$BiologicalSpecies.      A #$BiologicalSubspecies is formed
            by inbreeding of a restricted group of members of a single
            species.  This can happen naturally through geographic
            isolation or intentionally through controlled reproduction
            to create, for example, #$Dog breeds or crop strains.</rdfs:comment>
        <guid>c0b6222b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#BiologicalTaxonType"/>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="#BiologicalTaxon"/>
    </daml:Class>
    <daml:Class rdf:ID="BiologicalTaxon">
        <rdfs:label>taxonomic groups</rdfs:label>
        <rdfs:comment>The collection of ranked categories accepted by
            biologists for the biological classification of organisms
            according to their suspected evolutionary relationships.
            Includes all levels of taxons.  See also
            #$BiologicalTaxonType and #$OrganismClassificationType.</rdfs:comment>
        <guid>bd58e2e8-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#SiblingDisjointCollection"/>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="#OrganismClassificationType"/>
    </daml:Class>
    <daml:Class rdf:ID="BiologicalTaxonType">
        <rdfs:label>biological taxon type</rdfs:label>
        <rdfs:comment>A collection of collections of collections;
            #$BiologicalTaxonType contains the classes of organism types
            (i.e., taxons) that biologists recognize, including
            #$BiologicalSpecies, #$BiologicalPhylum, etc.   The naive
            classes that non-biologists use may be instances of some
            element of #$BiologicalTaxonType, though often they are not.
            When they coincide, the commonsense class of organism (e.g.,
            #$Person) is an instance of some #$BiologicalTaxonType
            (#$BiologicalSpecies, for example).  See also #$OrganismClassificationType.</rdfs:comment>
        <guid>bd588dc6-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#SiblingDisjointCollection"/>
        <rdf:type rdf:resource="#CollectionType"/>
    </daml:Class>
    <daml:Class rdf:ID="BiologicalTransportationEvent">
        <rdfs:label>biological transportation event</rdfs:label>
        <rdfs:comment>The collection of processes involving living
            structures in which objects are transported.</rdfs:comment>
        <guid>bd58fce2-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#TransportationEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="Bird">
        <rdfs:label>birds</rdfs:label>
        <rdfs:comment>The collection of birds; a subset of #$Vertebrate.
            Each element of #$Bird is an air-breathing, warm-blooded
            animal, covered with feathers, having forelimbs modified as
            wings and a beak rather than teeth.  Members of most, but
            not all, species of bird can fly.  #$Bird is an instance of #$BiologicalClass.</rdfs:comment>
        <guid>bd58bc48-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#BiologicalClass"/>
        <rdf:type rdf:resource="#OrganismClassificationType"/>
        <rdfs:subClassOf rdf:resource="#TerrestrialOrganism"/>
        <rdfs:subClassOf rdf:resource="#Vertebrate"/>
        <rdfs:subClassOf rdf:resource="#NonPersonAnimal"/>
    </daml:Class>
    <daml:Class rdf:ID="BirthEvent">
        <rdfs:label>births</rdfs:label>
        <rdfs:comment>The collection of events in which one animal
            (prototypically, a #$Mammal) gives birth to another.  The
            mother is the #$birthParent and the child is the
            #$birthChild.  Both are #$objectOfStateChange; the mother
            goes from being pregnant to not pregnant (therefore a
            #$BirthEvent is an instance of #$PregnancyEndingEvent),
            while the child changes from being inside the mother and
            relying on the mother for nutritional, respiratory, and
            excretory needs (called in CYC the #$Embryo life stage,
            although different English terms apply to different stages
            of in utero development in mammals and not all of these
            terms apply to live-born #$Fish) to the #$JuvenileAnimal
            life stage (see #$BiologicalStageOfDevelopment).</rdfs:comment>
        <guid>bd58b30c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#MedicalCareEvent"/>
        <rdfs:subClassOf rdf:resource="#BiologicalDevelopmentEvent"/>
        <rdfs:subClassOf rdf:resource="#EmittingAnObject"/>
        <rdfs:subClassOf rdf:resource="#PregnancyEndingEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="BlimpTheAirship">
        <rdfs:label>blimps</rdfs:label>
        <rdfs:comment>The collection of all dirigible, motorized,
            lighter-than-air craft (airships).  Each generally consists
            of a gas-filled gas-sack from which a control and passenger
            cabin hangs (the gas-sack may or may not have rigid
            reinforcement such as ribs).  A BlimpTheAirship flies more
            slowly than an #$Airplane.  They are also called blimps,
            dirigibles and Zeppelins.</rdfs:comment>
        <guid>bd5892ea-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdf:type rdf:resource="#ProductType"/>
        <rdfs:subClassOf rdf:resource="#TransportationDevice-Vehicle"/>
    </daml:Class>
    <JobAttribute rdf:ID="BlueCollar">
        <rdfs:label>working class</rdfs:label>
        <rdfs:comment>An attribute; an element of #$JobAttribute.  Blue
            collar jobs are those requiring a relatively high proportion
            of manual/physical labor.</rdfs:comment>
        <guid>bd58ca03-9c29-11b1-9dad-c379636f7270</guid>
    </JobAttribute>
    <daml:Class rdf:ID="BlueCollarWorker">
        <rdfs:label>workmen</rdfs:label>
        <rdfs:comment>A collection of persons; a subset of
            #$Professional.  Each element of #$BlueCollarWorker is a
            person whose occupation is manual-labor intensive, sometimes
            demanding physical strength and, in some jobs, considerable
            skill, practical judgment, and work experience.  Types of
            blue-collar workers include miners, truck drivers,
            steelworkers, construction workers, agricultural workers,
            laborers, mechanics, garbage collectors, assembly line
            workers, janitorial workers, etc.  Their jobs may require
            some specialized training or apprenticeship but don&apos;t
            require a college degree.</rdfs:comment>
        <guid>bd58aecd-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#OccupationType"/>
        <rdfs:subClassOf rdf:resource="#Professional"/>
    </daml:Class>
    <daml:Class rdf:ID="BodilyFunctionEvent">
        <rdfs:label>bodily function events</rdfs:label>
        <rdfs:comment>The collection of animal activities that, from an
            evolutionary standpoint, the body of the doer was
            &apos;designed&apos; to do, and that are instances of action
            types that can be and often are done without conscious
            volition. It includes dreaming but not rational thought, and
            breathing but not holding one&apos;s breath. If an instance
            of #$BodilyFunctionEvent involves the doer moving all or
            part of its body, either volitionally or as a reflex, it is
            also an instance of #$BodyMovementEvent.</rdfs:comment>
        <guid>bd58f3d9-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#PhysiologicalProcess"/>
        <rdfs:subClassOf rdf:resource="#AnimalActivity"/>
        <rdfs:subClassOf rdf:resource="#SingleDoerAction"/>
    </daml:Class>
    <daml:Class rdf:ID="BodilyFunctionEvent-Involuntary">
        <rdfs:label>involuntary bodily functions</rdfs:label>
        <rdfs:comment>This is the subset of #$BodilyFunctionEvent whose
            elements are actions in which the `doer&apos; is, by
            definition, a #$nonDeliberateActors.  Specializations
            (subsets) of #$BodilyFunctionEvent-Involuntary include
            #$HavingASeizure, #$Blushing, #$Bleeding,
            #$ExperiencingHunger, etc.  Note: if the `doer&apos; of an
            involuntary bodily function is an #$Organism-Whole, then use
            #$bodilyDoer to describe its role in the event.</rdfs:comment>
        <guid>bd59f763-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#BodilyFunctionEvent"/>
        <rdfs:subClassOf rdf:resource="#BiologicalEvent"/>
        <daml:disjointWith rdf:resource="#PurposefulAction"/>
    </daml:Class>
    <daml:Class rdf:ID="BodyMovementEvent">
        <rdfs:label>body movements</rdfs:label>
        <rdfs:comment>The collection of activities in which an #$Animal
            agent moves a part of its own body, whether consciously and
            intentionally or reflexively.  #$BodyMovementEvent includes
            subsets such as #$TakingAStep, #$BlockingAPunch,
            #$Hiccoughing, and #$BlinkingOnesEyes.</rdfs:comment>
        <guid>bd58f6e3-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#SingleDoerAction"/>
        <rdfs:subClassOf rdf:resource="#AnimalActivity"/>
    </daml:Class>
    <daml:Class rdf:ID="BodyOfWater">
        <rdfs:label>bodies of water</rdfs:label>
        <rdfs:comment>A collection of topographical features.  Each
            element of #$BodyOfWater is a natural or artificial body of
            water.  Elements may belong to specialized subsets such as
            #$Lake, #$Stream, and #$Ocean. #$BodyOfWater includes
            reservoirs, #$Canals, and navigation channels that are
            developed and/or enlarged by humans.  However, it does not
            include smaller purely-artificial bodies of water such as
            #$SwimmingPools or tanks of water.  Examples of
            #$BodyOfWater: #$HudsonBay, #$PanamaCanal, #$AdriaticSea,
            #$BayOfBengal, #$NiagaraFalls.</rdfs:comment>
        <guid>bd5884fc-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#TopographicalFeature"/>
        <rdfs:subClassOf rdf:resource="#InanimateThing"/>
    </daml:Class>
    <daml:Class rdf:ID="BodyPartPosition">
        <rdfs:label>body positions</rdfs:label>
        <rdfs:comment>The collection of attributes describing the
            position of a body part (or a whole body).  A
            #$BodyPartPosition may be determined relative to the
            body&apos;s environment (as with #$Postures) or merely with
            respect to the body part itself (e.g., #$Flexed, #$Extended).</rdfs:comment>
        <guid>bd5907ae-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#AttributeType"/>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#PhysiologicalAttribute"/>
    </daml:Class>
    <daml:Class rdf:ID="Boiling">
        <rdfs:label>boiling events</rdfs:label>
        <rdfs:comment>A collection of events.  In each #$Boiling, a
            piece of liquid matter is raised to its #$boilingPoint and
            is thereby changed from being in the #$LiquidStateOfMatter
            to being in the #$GaseousStateOfMatter. Note:  this is not
            intended to cover the cases of heat/evacuation causing a
            solid to sublime directly into a gas.</rdfs:comment>
        <guid>bd589c37-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#PhysicalStateChangeEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="Book-CW">
        <rdfs:label>books</rdfs:label>
        <rdfs:comment>A collection of #$ConceptualWorks. Instantiations
            may be either hardcopy or electronic.  Traditional hardcopy
            instantiations are instances of #$BookCopy, but in the later
            half of the Twentieth Century of the Common Era additional
            formats were created (books on (audio) tape, computer media
            containing instantiations of textual computer files, etc.
            Instances of #$Book-CW are usually #$TextualMaterial, but
            some may contain only arrangements of images.</rdfs:comment>
        <guid>bd58e6ab-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdf:type rdf:resource="#ProductType"/>
        <rdfs:subClassOf rdf:resource="#PublishedMaterial"/>
        <rdfs:subClassOf rdf:resource="#BookGeneric-CW"/>
    </daml:Class>
    <daml:Class rdf:ID="BookGeneric-CW">
        <rdfs:label>book generic - c w</rdfs:label>
        <rdfs:comment>A collection of #$ConceptualWorks. Instantiations
            may be either hardcopy or electronic.  Traditional hardcopy
            instantiations are instances of #$BookCopy, but in the later
            half of the Twentieth Century of the Common Era additional
            formats were created (books on (audio) tape, computer media
            containing instantiations of textual computer files, etc.
            Instances of #$Book-CW are usually #$TextualMaterial, but
            some may contain only arrangements of images.</rdfs:comment>
        <guid>c0290c9b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#PublishedMaterial"/>
    </daml:Class>
    <BroadMicrotheory rdf:ID="BookkeepingMt">
        <rdfs:label>bookkeeping mt</rdfs:label>
        <rdfs:comment>A #$Microtheory for stating basic #$Cyc
            bookkeeping information, such as assertions using
            #$myCreator and #$myCreationTime.</rdfs:comment>
        <guid>beaed5bd-9c29-11b1-9dad-c379636f7270</guid>
    </BroadMicrotheory>
    <daml:Class rdf:ID="BookkeepingPredicate">
        <rdfs:label>bookkeeping predicates</rdfs:label>
        <rdfs:comment>A collection of predicates.  Each element of
            #$BookkeepingPredicate is a predicate used to form
            assertions about the creation and internal representation of
            a Cyc constant.  Bookkeeping predicates neither specify nor
            constrain the semantics of Cyc constants.  Examples:
            #$myCreator, #$myCreationTime, #$termOfUnit,
            #$multiplicationUnits, #$defnSufficient.</rdfs:comment>
        <guid>bd5880ef-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
    </daml:Class>
    <daml:Class rdf:ID="Border">
        <rdfs:label>borders</rdfs:label>
        <rdfs:comment>The collection of all lines, linear regions, or
            dividing planes or surfaces--physical or abstract--that each
            constitutes the boundary between (#$formsBorderBetween) two
            regions (i.e., two elements of #$SpatialThing).</rdfs:comment>
        <guid>bd62894d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="Boredom">
        <rdfs:label>boredom</rdfs:label>
        <rdfs:comment>A state of dissatisfaction, weariness, or
            restlessness accompanied by a lack of interest.  This is a
            #$Collection --- for an explanation of that, see
            #$Happiness.  A related #$FeelingAttributeType is #$Apathy.</rdfs:comment>
        <guid>bd58a612-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#FeelingAttributeType"/>
        <rdfs:subClassOf rdf:resource="#Apathy"/>
    </daml:Class>
    <daml:Class rdf:ID="BorrowingSomething">
        <rdfs:label>borrowing events</rdfs:label>
        <rdfs:comment>A collection of events; a subset of
            #$TemporaryChangeOfUserRights.  In an instance of
            #$BorrowingSomething, an #$Agent takes temporary control of
            something, usually with the permission of its owner(s).
            Generally, the lending agent expects the borrowing agent to
            use the object for one of its normal functions (#$intendedBehaviorCapable).</rdfs:comment>
        <guid>bd58cf42-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#TransferringPossession"/>
        <rdfs:subClassOf rdf:resource="#TemporaryChangeOfUserRights"/>
    </daml:Class>
    <daml:Class rdf:ID="BotanicalOrgan">
        <rdfs:label>botanical organs</rdfs:label>
        <rdfs:comment>A subset of #$PlantPart, the collection
            #$BotanicalOrgan includes parts of a plant which are major
            morphological and functional divisions of individual plants,
            typically consisting of stems, flowers, roots, leaves, etc.</rdfs:comment>
        <guid>bd58f8f8-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#PlantPart"/>
    </daml:Class>
    <daml:Class rdf:ID="BottomSide">
        <rdfs:label>undersides</rdfs:label>
        <rdfs:comment>The collection of all the entire bottom sides (as
            conventionally understood) of all objects that have distinct
            #$Sides, one of which faces down.</rdfs:comment>
        <guid>bd58d673-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#RegionType"/>
        <rdfs:subClassOf rdf:resource="#Side"/>
    </daml:Class>
    <daml:Class rdf:ID="Brain">
        <rdfs:label>brains</rdfs:label>
        <rdfs:comment>The collection of all #$Animal brains.  An
            individual #$Brain is an #$Organ which controls most bodily
            movement, receives sensory input from the body and objects
            outside the body, and in which the mind operates, being the
            locus for all #$MentalSituations.</rdfs:comment>
        <guid>bd58d3eb-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#UniqueAnatomicalPartType"/>
        <rdf:type rdf:resource="#AnimalBodyPartType"/>
        <rdfs:subClassOf rdf:resource="#BiologicalLivingObject"/>
    </daml:Class>
    <IndependentCountry rdf:ID="Brazil">
        <rdfs:label>Brazil</rdfs:label>
        <rdfs:comment>Brazil throughout time, both political and
            physical aspects.</rdfs:comment>
        <guid>bd588f01-9c29-11b1-9dad-c379636f7270</guid>
    </IndependentCountry>
    <daml:Class rdf:ID="Breathing">
        <rdfs:label>breathing events</rdfs:label>
        <rdfs:comment>A collection of activities constituting a natural
            #$PhysiologicalFunction; #$Breathing is the collection of
            #$AirRespiration events in which the respiring organism
            takes air into its internal #$Lungs, where the gas exchange
            occurs.  See also #$Respiration.</rdfs:comment>
        <guid>bd58b773-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#AirRespiration"/>
        <rdfs:subClassOf rdf:resource="#PhysiologicalFunction"/>
    </daml:Class>
    <PhysicalStructuralAttribute rdf:ID="Brittle">
        <rdfs:label>brittle</rdfs:label>
        <rdfs:comment>A physical attribute.  #$Brittle is the
            #$PhysicalStructuralAttribute of a substance which breaks
            easily when subjected to a low or moderate impact or
            application of force, such as most instances of #$Glass.</rdfs:comment>
        <guid>bd58d4cb-9c29-11b1-9dad-c379636f7270</guid>
    </PhysicalStructuralAttribute>
    <daml:Class rdf:ID="BroadMicrotheory">
        <rdfs:label>broad microtheory</rdfs:label>
        <rdfs:comment>The collection of those microtheories that contain
            so many assertions that they are not useful for
            `relevance&apos; focusing during inference.  (A
            #$BroadMicrotheory is not used internally in Cyc&apos;s
            indexing scheme during inference.)  Examples: #$BaseKB and #$EnglishMt.</rdfs:comment>
        <guid>bd5c0498-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MicrotheoryType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#Microtheory"/>
    </daml:Class>
    <daml:Class rdf:ID="Broadcast-CoABS">
        <rdfs:label>broadcast - co a b s</rdfs:label>
        <rdfs:comment>The collection of instances of requests for
            problem resolution that are posted on the CoABS grid.   An
            instance of #$Broadcast-CoABS will have to include the
            #$GridAddress-CoABS of the broadcaster, who can then
            assemble a #$Community-CoABS of agents to solve the problem.
            A #$Broadcast-CoABS together with a broadcaster forms a
            degenerate instance of #$Community-CoABS.</rdfs:comment>
        <guid>bf84c310-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#InformationBearingThing"/>
    </daml:Class>
    <daml:Class rdf:ID="Building">
        <rdfs:label>buildings</rdfs:label>
        <rdfs:comment>A collection of artifacts; a subset of
            #$FixedStructure and of #$HumanShelterConstruction.  An
            instance of #$Building is typically a substantial structure
            and must have walls and a roof, with rooms inside or at
            least some area designed to be occupied by humans (but not
            necessarily as a residence).  Examples include the Empire
            State Building, Michael Jackson&apos;s house in L.A., King
            Arthur&apos;s castle, an #$AircraftHangar at O&apos;Hare, a
            #$Lighthouse in the Mediterranean sea, the
            #$SydneyOperaHouse, the #$WashingtonMonumentInWashingtonDC, etc.</rdfs:comment>
        <guid>bd58fb28-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#RealEstate"/>
        <rdfs:subClassOf rdf:resource="#HumanShelterConstruction"/>
        <rdfs:subClassOf rdf:resource="#FixedStructure"/>
    </daml:Class>
    <daml:Class rdf:ID="BuildingMaterial">
        <rdfs:label>building material</rdfs:label>
        <rdfs:comment>A collection of tangible things.  An instance of
            #$BuildingMaterial is a material thing typically used in
            making new structures.  Instances of #$BuildingMaterial
            include a piece of lumber, a brick, a slab of concrete, a
            roof shingle, a copper nail, a double-paned storm window, etc.</rdfs:comment>
        <guid>c10af48b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#Artifact"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangibleProduct"/>
    </daml:Class>
    <daml:Class rdf:ID="Bus-RoadVehicle">
        <rdfs:label>buses</rdfs:label>
        <rdfs:comment>The collection of all buses, transport vehicles
            for ground transportation of many (they have room for at
            least 10, probably fewer than 60) people.  A bus usually is
            driven by a professional bus driver.</rdfs:comment>
        <guid>bd58b4bf-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdf:type rdf:resource="#ProductType"/>
        <rdfs:subClassOf rdf:resource="#RoadVehicle"/>
    </daml:Class>
    <daml:Class rdf:ID="Bush">
        <rdfs:label>bushes</rdfs:label>
        <rdfs:comment>A collection of plants; a subset of #$Plant-Woody.
            The collection #$Bush includes all bushes, i.e., woody
            plants of branching growth habit that lack substantial
            trunks and are not usually taller than a person (and they
            are shorter than most specimens of #$Tree-ThePlant).   This
            is a commonsense collection without distinct boundaries.</rdfs:comment>
        <guid>bd589a2d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#OrganismClassificationType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Plant-Woody"/>
    </daml:Class>
    <daml:Class rdf:ID="Business">
        <rdfs:label>businesses</rdfs:label>
        <rdfs:comment>The collection of #$Organizations intended to make
            profits, i.e., make money for agents that own them.  All
            #$Businesses are #$CommercialOrganizations (they must buy or
            sell something), but not all #$CommercialOrganizations are
            #$Businesses.  In a franchise #$Organization, the
            #$parentCompany is regarded as a #$Business, while the
            #$subOrganizations are merely instances of
            #$CommercialOrganization.  #$Businesses are typically
            #$LegalAgents, while #$CommercialOrganizations need not be.</rdfs:comment>
        <guid>bd58d036-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#CommercialOrganization"/>
    </daml:Class>
    <daml:Class rdf:ID="BusinessEvent">
        <rdfs:label>business events</rdfs:label>
        <rdfs:comment>A collection of events.  Each element of
            #$BusinessEvent is an intentional occurrence that is closely
            associated with, and either helps or hinders, the business
            purpose of some agent.  Examples include: the development of
            General Motors&apos; business plan for 1996; an individual
            sales call on a particular customer; printing the 1996
            Yellow Pages directory for the Austin, TX, area; selling a
            newspaper; designing and manufacturing a new memory chip.
            #$BusinessEvent does NOT include purely social or
            recreational occurrences.</rdfs:comment>
        <guid>bd588c38-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#SocialOccurrence"/>
    </daml:Class>
    <daml:Class rdf:ID="BusinessPerson">
        <rdfs:label>businesspeople</rdfs:label>
        <rdfs:comment>A collection of persons; a subset of
            #$Professional. Each element of #$BusinessPerson is a person
            whose occupation is primarily in the ownership and/or
            operation of a business.</rdfs:comment>
        <guid>c0fcd0ea-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#OccupationType"/>
        <rdfs:subClassOf rdf:resource="#Professional"/>
    </daml:Class>
    <daml:Class rdf:ID="BusinessRelationshipActivity">
        <rdfs:label>activities in a business relationship</rdfs:label>
        <rdfs:comment>A collection of events; a subset of both
            #$BusinessEvent and #$SocialOccurrence.  Each instance of
            #$BusinessRelationshipActivity is a (usually long-term)
            social activity whose participants are related by some
            business relationship.  The social events constituting a
            #$BusinessRelationshipActivity further, either directly or
            indirectly, the (usually mutual) business interests of the
            participants.  A #$BusinessRelationshipActivity is typically
            carried out over multiple social occasions and may consist
            of many #$subEvents.</rdfs:comment>
        <guid>c10afcc8-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#BusinessEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="Buying">
        <rdfs:label>purchases</rdfs:label>
        <rdfs:comment>A collection of events.  Each element of #$Buying
            is an event in which an agent voluntarily pays to acquire
            something tangible or intangible, or for the performance of
            a service, which another agent sells in the event.  Payment
            may be in money or other exchange of wealth.  Elements of
            #$Buying may include #$subEvents of negotiation, the act of
            paying, and the transfer of the purchased thing to the
            buyer.  Examples of #$Buying include: purchasing fighter
            jets for the Navy; buying a Pepsi from a vending machine;
            ordering dinner at a restaurant; acquiring a personal life
            insurance policy for oneself; mail-ordering clothes from
            Sears; shopping at a farmers&apos; market.</rdfs:comment>
        <guid>bd58cbda-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#MonetaryExchangeOfUserRights"/>
        <rdfs:subClassOf rdf:resource="#BuyingActivity"/>
    </daml:Class>
    <daml:Class rdf:ID="BuyingActivity">
        <rdfs:label>buying activities</rdfs:label>
        <rdfs:comment>A collection of events.  #$BuyingActivity very
            generally includes events related to purchasing goods or
            services.  Each element of #$BuyingActivity is an event that
            is either (i) a common prelude to buying (i.e., the kinds of
            activities that contribute to their doers becoming buyers),
            or (ii) an element of #$Buying itself.  Examples of
            #$BuyingActivity include shopping for, or ordering,
            something very specific, and also general expressions of
            interest in purchasing something, such as placing an `Item
            Wanted&apos; ad in a newspaper.</rdfs:comment>
        <guid>bd588f8e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#CommercialActivity"/>
    </daml:Class>
    <daml:Class rdf:ID="CGSUnitOfMeasure">
        <rdfs:label>centimeter-gram-second units of measure</rdfs:label>
        <rdfs:comment>A subset of #$UnitOfMeasure.  #$CGSUnitOfMeasure
            is the collection of all the measurement functions whose
            results use the CGS (i.e., centimeter-gram-second) system of
            measure to describe physical quantities.  Examples:
            #$CentimetersPerSecond, #$CubicCentimeter, #$Gram, #$SecondsDuration.</rdfs:comment>
        <guid>bd589a3d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#RelationshipType"/>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </daml:Class>
    <daml:Class rdf:ID="CalendarAutumn">
        <rdfs:label>autumns</rdfs:label>
        <rdfs:comment>The calendar season that begins at autumnal
            equinox and runs until winter solstice.</rdfs:comment>
        <guid>be011790-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CalendarSeasonType"/>
        <rdfs:subClassOf rdf:resource="#CalendarSeason"/>
    </daml:Class>
    <daml:Class rdf:ID="CalendarCentury">
        <rdfs:label>centuries</rdfs:label>
        <rdfs:comment>The collection of centuries that make up the
            calendar (1900&apos;s, 1700&apos;s etc.)  An example of such
            a constant in Cyc is #$TheNineteenthCenturyAD </rdfs:comment>
        <guid>bd58b8f6-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CalendarCoveringType"/>
        <rdfs:subClassOf rdf:resource="#Date"/>
        <daml:disjointWith rdf:resource="#TimePoint"/>
    </daml:Class>
    <daml:Class rdf:ID="CalendarCoveringType">
        <rdfs:label>calendar covering type</rdfs:label>
        <rdfs:comment>#$CalendarCoveringType is a collection of
            collections.  An element CC of #$CalendarCoveringType is
            itself a collection, a type of time interval, such that the
            union of all the instances of CC would completely cover all
            of time without overlap.  Thus, #$CalendarYear is a
            #$CalendarCoveringType because all of time consists of a
            sequence of non-overlapping #$CalendarYears.  Similarly
            #$CalendarMonth, #$CalendarDay, #$CalendarHour, etc.  Notice
            that #$Monday and #$December are NOT instances of
            #$CalendarCoveringType, because all of time is not a
            sequence of Mondays, or Decembers.  Also notice that a
            collection Week -- defined as the set of all
            seven-day-long-periods-of-time -- would not be an instance
            of #$CalendarCoveringType, since several different Weeks
            could overlap; e.g., the week beginning today and the week
            beginning yesterday and the week beginning tomorrow.</rdfs:comment>
        <guid>bd58a30c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#SiblingDisjointCollection"/>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="#TemporallyDisjointIntervalType"/>
    </daml:Class>
    <daml:Class rdf:ID="CalendarDay">
        <rdfs:label>days</rdfs:label>
        <rdfs:comment>The collection of days that make up the calendar.
            This is a collection of disjoint but contiguous time
            intervals.  One of its elements is Thursday, August 1, 1996.</rdfs:comment>
        <guid>bd58de08-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CalendarCoveringType"/>
        <rdfs:subClassOf rdf:resource="#Date"/>
        <daml:disjointWith rdf:resource="#TimePoint"/>
    </daml:Class>
    <daml:Class rdf:ID="CalendarDecade">
        <rdfs:label>decades</rdfs:label>
        <rdfs:comment>The collection of decades that make up the
            calendar; e.g., #$The1970s.</rdfs:comment>
        <guid>bd58b937-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CalendarCoveringType"/>
        <rdfs:subClassOf rdf:resource="#Date"/>
        <daml:disjointWith rdf:resource="#TimePoint"/>
    </daml:Class>
    <daml:Class rdf:ID="CalendarHalfCentury">
        <rdfs:label>calendar half centuries</rdfs:label>
        <rdfs:comment>The collection of exact half-centuries on the
            calendar, such as #$FirstHalfOf20thCenturyAD</rdfs:comment>
        <guid>c0f71f9e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CalendarCoveringType"/>
        <rdfs:subClassOf rdf:resource="#Date"/>
        <daml:disjointWith rdf:resource="#TimePoint"/>
    </daml:Class>
    <daml:Class rdf:ID="CalendarHour">
        <rdfs:label>calendar hours</rdfs:label>
        <rdfs:comment>The collection of hours that make up the calendar.
            These are contiguous and disjoint time intervals, except of
            course for particular instances that represent exactly the
            same 60-minute-long time interval.  See #$CalendarDay.</rdfs:comment>
        <guid>bd58933b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CalendarCoveringType"/>
        <rdfs:subClassOf rdf:resource="#Date"/>
        <rdfs:subClassOf rdf:resource="#TimeOfDay"/>
        <daml:disjointWith rdf:resource="#TimePoint"/>
    </daml:Class>
    <daml:Class rdf:ID="CalendarMinute">
        <rdfs:label>calendar minutes</rdfs:label>
        <rdfs:comment>The collection of minutes that make up the
            calendar.  These are contiguous and disjoint time intervals,
            except of course for particular instances that represent
            exactly the same 60-second-long time interval.  See
            #$CalendarDay.  Sixty of these partition each #$CalendarHour</rdfs:comment>
        <guid>bd58b9fc-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CalendarCoveringType"/>
        <rdfs:subClassOf rdf:resource="#Date"/>
        <daml:disjointWith rdf:resource="#TimePoint"/>
    </daml:Class>
    <daml:Class rdf:ID="CalendarMonth">
        <rdfs:label>months</rdfs:label>
        <rdfs:comment>The collection of months that make up the
            calendar.  This is a collection of disjoint but contiguous
            time intervals.  One of its subsets is #$February, which is
            the set of all Februaries; one of its elements is February
            1992 (#$MonthFn #$February (#$YearFn 1992)), a particular
            time interval.</rdfs:comment>
        <guid>bd58c029-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CalendarCoveringType"/>
        <rdfs:subClassOf rdf:resource="#Date"/>
        <daml:disjointWith rdf:resource="#TimePoint"/>
    </daml:Class>
    <daml:Class rdf:ID="CalendarQuarter">
        <rdfs:label>calendar quarters</rdfs:label>
        <rdfs:comment>The collection of calendar quarters that divide up
            a calendar year into four parts.  For each year, the first
            of its four quarters includes January, February, and March;
            the second includes April, May, and June, and so on.</rdfs:comment>
        <guid>c10ae4c7-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CalendarCoveringType"/>
        <rdfs:subClassOf rdf:resource="#Date"/>
        <daml:disjointWith rdf:resource="#TimePoint"/>
    </daml:Class>
    <daml:Class rdf:ID="CalendarSeason">
        <rdfs:label>calendar seasons</rdfs:label>
        <rdfs:comment>This is the set of all calendar seasons.  Four of
            its largest subsets are #$CalendarWinter, #$CalendarSpring,
            #$CalendarSummer, and #$CalendarAutumn</rdfs:comment>
        <guid>be0114e6-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CalendarCoveringType"/>
        <rdfs:subClassOf rdf:resource="#TimeInterval"/>
        <rdfs:subClassOf rdf:resource="#Date"/>
        <daml:disjointWith rdf:resource="#TimePoint"/>
    </daml:Class>
    <daml:Class rdf:ID="CalendarSeasonType">
        <rdfs:label>seasons</rdfs:label>
        <rdfs:comment>This is the collection whose four elements are
            #$CalendarWinter, #$CalendarSpring, #$CalendarSummer, and #$CalendarAutumn.</rdfs:comment>
        <guid>be01141f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdf:type rdf:resource="#CyclicalIntervalGroupType"/>
        <rdfs:subClassOf rdf:resource="#AnnualEventType"/>
    </daml:Class>
    <daml:Class rdf:ID="CalendarSecond">
        <rdfs:label>seconds</rdfs:label>
        <rdfs:comment>The collection of seconds that make up the
            calendar.  Sixty of these #$TimeIntervals contiguously
            divide up each #$CalendarMinute (qv)</rdfs:comment>
        <guid>bd58823e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CalendarCoveringType"/>
        <rdfs:subClassOf rdf:resource="#Date"/>
        <daml:disjointWith rdf:resource="#TimePoint"/>
    </daml:Class>
    <daml:Class rdf:ID="CalendarSpring">
        <rdfs:label>springs</rdfs:label>
        <rdfs:comment>The calendar season that begins at vernal equinox
            and runs until summer solstice.</rdfs:comment>
        <guid>be011735-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CalendarSeasonType"/>
        <rdfs:subClassOf rdf:resource="#CalendarSeason"/>
    </daml:Class>
    <daml:Class rdf:ID="CalendarSummer">
        <rdfs:label>summers</rdfs:label>
        <rdfs:comment>The calendar season that begins at summer solstice
            and runs until autumnal equinox.</rdfs:comment>
        <guid>be011768-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CalendarSeasonType"/>
        <rdfs:subClassOf rdf:resource="#CalendarSeason"/>
    </daml:Class>
    <daml:Class rdf:ID="CalendarWeek">
        <rdfs:label>weeks</rdfs:label>
        <rdfs:comment>The collection of weeks that make up the calendar.
            This is a collection of disjoint but contiguous time
            intervals.  One of its elements is WeekOf2-14-1994.</rdfs:comment>
        <guid>bd58c064-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CalendarCoveringType"/>
        <rdfs:subClassOf rdf:resource="#Date"/>
    </daml:Class>
    <daml:Class rdf:ID="CalendarWinter">
        <rdfs:label>winters</rdfs:label>
        <rdfs:comment>The calendar season that begins at winter solstice
            and runs until vernal equinox.</rdfs:comment>
        <guid>be0116f3-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CalendarSeasonType"/>
        <rdfs:subClassOf rdf:resource="#CalendarSeason"/>
    </daml:Class>
    <daml:Class rdf:ID="CalendarYear">
        <rdfs:label>calendar years</rdfs:label>
        <rdfs:comment>The collection of years that make up the calendar.
            For example, #$TheYear1972, #$TheYear494BC.</rdfs:comment>
        <guid>bd58f257-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CalendarCoveringType"/>
        <rdfs:subClassOf rdf:resource="#Date"/>
        <daml:disjointWith rdf:resource="#TimePoint"/>
    </daml:Class>
    <daml:Class rdf:ID="Calm">
        <rdfs:label>calm</rdfs:label>
        <rdfs:comment>A feeling of calmness or serenity, being quiet and
            free from disturbance.  This is a #$Collection --- for an
            explanation of that, see #$Happiness.  A related
            #$FeelingAttributeType is #$Calm.</rdfs:comment>
        <guid>bd58892c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#FeelingAttributeType"/>
        <rdfs:subClassOf rdf:resource="#Relaxed-Emotion"/>
    </daml:Class>
    <daml:Class rdf:ID="Canal">
        <rdfs:label>canals</rdfs:label>
        <rdfs:comment>The collection of all canals, artificial waterways
            created to be paths for boats, or for irrigation (e.g., the #$PanamaCanal).</rdfs:comment>
        <guid>bd58f371-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#BodyOfWater"/>
        <rdfs:subClassOf rdf:resource="#FlowPath"/>
    </daml:Class>
    <daml:Class rdf:ID="Cancer">
        <rdfs:label>cancer</rdfs:label>
        <rdfs:comment>The collection of all particular cases of cancer.
            Instances of #$Cancer may belong to any one of the many
            different types of disease that are studied and treated by
            oncologists.  Cancer is characterized by abnormal (and
            usually rapid) growth of cells in some organ or system of
            the body; these growths are then prone to dispersal
            (metastesis) into other body regions.  See also #$CancerFn
            --- the expression (#$CancerFn #$Lung) represents a subset
            of #$Cancer, namely the set of all lung cancers.</rdfs:comment>
        <guid>c0fd6a1a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PhysiologicalConditionType"/>
        <rdfs:subClassOf rdf:resource="#AilmentCondition"/>
        <rdfs:subClassOf rdf:resource="#TerminalPhysiologicalCondition"/>
    </daml:Class>
    <daml:Class rdf:ID="Canoe">
        <rdfs:label>canoes</rdfs:label>
        <rdfs:comment>The collection of all canoes, small, narrow
            watercraft that are powered by human paddling, poling or by
            a small boat-engine.</rdfs:comment>
        <guid>bd58ab49-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdf:type rdf:resource="#ProductType"/>
        <rdfs:subClassOf rdf:resource="#Device-UserPowered"/>
    </daml:Class>
    <daml:Class rdf:ID="CapacityAttribute">
        <rdfs:label>capacity attribute</rdfs:label>
        <rdfs:comment>A collection of attributes.  Each element of
            #$CapacityAttribute is an attribute representing a specific
            capacity in which an agent does an action.  For example, an
            action might be done as an agent&apos;s job (#$JobCapacity)
            or hobby (#$HobbyCapacity), as its main function
            (#$MainFunction) or an auxiliary function (#$SupportFunction).</rdfs:comment>
        <guid>bd59013f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#UnorderedAttributeType"/>
        <rdfs:subClassOf rdf:resource="#AttributeValue"/>
    </daml:Class>
    <daml:Class rdf:ID="CapitalCityOfRegion">
        <rdfs:label>capitals</rdfs:label>
        <rdfs:comment>A collection of cities.  Each element of
            #$CapitalCityOfRegion is an element of #$City (q.v.) that is
            the capital of its surrounding region.  This includes both
            capitals of countries and capitals of subregions.  Examples:
            #$CityOfRomeItaly, #$CityOfCardiffWales, #$CityOfAustinTX,
            #$CityOfAbidjanIvoryCoast, #$CityOfLhasaTibet,
            #$CityOfColumbusOH (#$FranklinCountyOhio).  See also
            #$capitalCity, #$capitalCityOfThisState.</rdfs:comment>
        <guid>bd58f295-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#SpatiallyDisjointRegionType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#City"/>
    </daml:Class>
    <daml:Class rdf:ID="CaptiveAnimal">
        <rdfs:label>captive animals</rdfs:label>
        <rdfs:comment>The collection of all animals that are caged,
            tied, kept in an animal container, or otherwise held
            captive.  There is some intersection here with
            #$DomesticPet, but not complete.   Some elements of #$Person
            are members of #$CaptiveAnimal, e.g., political detainees,
            imprisoned criminals, kidnap victims.</rdfs:comment>
        <guid>c100573e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Animal"/>
    </daml:Class>
    <daml:Class rdf:ID="CapturingAnimal">
        <rdfs:label>apprehensions</rdfs:label>
        <rdfs:comment>A collection of events.  In an instance of
            #$CapturingAnimal, an #$Agent takes physical control of a
            (human or non-human) animal.  This collection includes
            trapping animals, kidnapping people (or animals), and also
            what the police do after they arrest a person for a crime.
            The animal may or may not be taken alive.</rdfs:comment>
        <guid>bd5c0f37-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#TakingSomething"/>
        <rdfs:subClassOf rdf:resource="#PhysicalEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="Card">
        <rdfs:label>cards</rdfs:label>
        <rdfs:comment>A collection of objects; a subcollection of
            #$HardcopyInformationBearingObject.  Each element of #$Card
            is a small, sturdy sheet of stuff--usually cardstock paper,
            but could be plastic or thin metal--bearing some kind of
            information. Some kinds are folded. Examples: #$CreditCard,
            #$BusinessCard, and #$PostCard.  Note that electronic
            objects that perform some of the same functions are not
            subcollections of #$Card.</rdfs:comment>
        <guid>c0fd456f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#SheetOfSomeStuff"/>
        <rdfs:subClassOf rdf:resource="#HardcopyInformationBearingObject"/>
    </daml:Class>
    <daml:Class rdf:ID="CargoShip">
        <rdfs:label>cargo vessels</rdfs:label>
        <rdfs:comment>The collection of all cargo ships, i.e., ships
            that by design can transport a large amount of goods.  See
            also #$TankerShip.</rdfs:comment>
        <guid>c1009191-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Ship"/>
    </daml:Class>
    <daml:Class rdf:ID="Carnivore">
        <rdfs:label>carnivores</rdfs:label>
        <rdfs:comment>A #$Collection of organisms classified by their
            typical source of food.  Elements of #$Carnivore feed on
            animals.  Note: #$Carnivore is not an instance of
            #$BiologicalTaxon; e.g., #$Carnivore contains #$Dog as a
            subset but is not its biological taxon.  Note that a
            #$Carnivore is not necessarily a #$Heterotroph, as
            carnivorous plants both digest insects and produce food
            using #$Chlorophyll.</rdfs:comment>
        <guid>bd5904f5-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Organism-Whole"/>
    </daml:Class>
    <daml:Class rdf:ID="CausingAnotherObjectsTranslationalMotion">
        <rdfs:label>events of causing another object&apos;s
            translational motion</rdfs:label>
        <rdfs:comment>A collection of events.  In an instance of
            #$CausingAnotherObjectsTranslationalMotion, one object
            causes another object to undergo a translational motion.
            The object causing the motion is the
            #$providerOfMotiveForce.  The object which is caused to move
            is the #$objectActedOn (and also the #$objectMoving) in the
            event.  One way to cause another object&apos;s motion is by
            carrying it along with one (see the subset
            #$CarryingWhileLocomoting), but there are many others, such
            as throwing, kicking, or knocking it away.  Some elements
            of #$CausingAnotherObjectsTranslationalMotion may be
            elements of #$Translation-Complete (such as elements of
            #$CarryingWhileLocomoting) whereas others (such as elements
            of #$PumpingFluid) may be elements of #$Translation-Flow.
            Examples: a train transporting passengers; a person pushing
            a coin into a vending machine; the release of a bowstring
            which propels an arrow; a magnet attracting a nail.</rdfs:comment>
        <guid>bd58d844-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#ActionOnObject"/>
        <rdfs:subClassOf rdf:resource="#Movement-TranslationEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="Cavity">
        <rdfs:label>cavities</rdfs:label>
        <rdfs:comment>The collection of all cavities, including
            #$Crevices, deep concavities or holes, and cavities of
            containers (e.g. the interior of a box).  Instances of
            #$Cavity, unlike those of its specialization
            #$CavityInteriorRegion, can include walls as parts, in which
            case they are instances of #$CavityWithWalls.  Instances of
            #$Cavity, unlike those of #$Container, do not have well
            defined outside walls.</rdfs:comment>
        <guid>bd5891a8-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="CavityInteriorRegion">
        <rdfs:label>interiors</rdfs:label>
        <rdfs:comment>The collection of space regions that constitute
            cavities inside the walls or boundaries of solid objects.
            Such regions need not be completely sealed off.  As a space
            region, an instance of  #$CavityInteriorRegion is
            intangible, and thus not to be confused with the partially
            tangible matter that might fill or occupy it (see
            #$CavityInteriorContent).  See also #$Cavity, whose
            instances, unlike those of #$CavityInteriorRegion, can
            include walls (in which cases they are also instances of #$CavityWithWalls).</rdfs:comment>
        <guid>bd58a8e9-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#RegionType"/>
        <rdfs:subClassOf rdf:resource="#Cavity"/>
        <rdfs:subClassOf rdf:resource="#SpaceRegion"/>
    </daml:Class>
    <daml:Class rdf:ID="CeilingOfARoom">
        <rdfs:label>ceilings</rdfs:label>
        <rdfs:comment>The collection of all ceilings of every instance
            of #$RoomInAConstruction.  Note that, unlike walls, ceilings
            are conventionally considered to be &apos;one-sided&apos;
            objects.  The other side of a #$CeilingOfARoom may be a
            #$RoofOfAConstruction, or in a #$ModernShelterConstruction,
            more probably the #$FloorInAConstruction in another room.</rdfs:comment>
        <guid>bd58f743-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#PartOfBuilding"/>
    </daml:Class>
    <daml:Class rdf:ID="Cell">
        <rdfs:label>cells</rdfs:label>
        <rdfs:comment>The collection of living cells; a subset of
            #$BiologicalLivingObject.  Each element of #$Cell is one of
            the basic structural units of nearly all living things,
            consisting (at least) of cytoplasm bounded by a cell
            membrane. Only the living structures viruses, mitochondria,
            and plastids are not composed of cells.</rdfs:comment>
        <guid>bd58ee63-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#BiologicalLivingObject"/>
    </daml:Class>
    <daml:Class rdf:ID="CellPart">
        <rdfs:label>cell parts</rdfs:label>
        <rdfs:comment>The collection of structures which are typically
            found and formed as parts of #$Cells. This covers components
            of both #$EukaryoticCells and #$ProkaryoticCells.  It
            includes organelles, vesicles, cell walls, extracellular
            matrix, plasma membranes, receptors, cellular humours,
            microtubules, etc.</rdfs:comment>
        <guid>c10c2471-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#MicroscopicScaleObject"/>
        <rdfs:subClassOf rdf:resource="#OrganismPart"/>
    </daml:Class>
    <daml:Class rdf:ID="CerealFoodGroup">
        <rdfs:label>cereals</rdfs:label>
        <rdfs:comment>The food group consisting of grain products such
            as breads and cereals. Food that contains a significant
            amount of grain products should be specs of this.</rdfs:comment>
        <guid>bd58ccbd-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#FoodGroupType"/>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdf:type rdf:resource="#ProductType"/>
        <rdfs:subClassOf rdf:resource="#EdibleStuff"/>
        <rdfs:subClassOf rdf:resource="#VegetableMatter"/>
    </daml:Class>
    <daml:Class rdf:ID="CerealPlant">
        <rdfs:label>cereal plants</rdfs:label>
        <rdfs:comment>The collection of individual plants like corn,
            wheat, etc., which bear grains.</rdfs:comment>
        <guid>bd589beb-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#OrganismClassificationType"/>
    </daml:Class>
    <daml:Class rdf:ID="ChainOrganization">
        <rdfs:label>chains</rdfs:label>
        <rdfs:comment>A collection of organizations.  An element of
            #$ChainOrganization is a parent business which comes into
            contact with its customers or clients primarily through its
            geographically dispersed sub-organizations, which typically
            are (mostly) homogeneous in product line, style of physical
            quarters, local organizational structure, etc.  Examples
            include the parent organizations of McDonald&apos;s and
            Midas Muffler.</rdfs:comment>
        <guid>bd58e960-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <daml:disjointWith rdf:resource="#SingleSiteOrganization"/>
        <daml:disjointWith rdf:resource="#IndependentOrganization"/>
    </daml:Class>
    <daml:Class rdf:ID="ChangeInUserRights">
        <rdfs:label>change in user rights</rdfs:label>
        <rdfs:comment>A collection of events.  Each element of
            #$ChangeInUserRights is an event in which some instance of
            #$Agent either gains or loses possession of something.
            `Possession&apos; means having some right to use a thing
            that one has in hand or otherwise has access to.  Different
            types of possession (e.g., ownership, rental, borrowings)
            can be specified by the using the appropriate element(s) of
            #$UserRightsAttribute (q.v.).  Changes in an agent&apos;s
            user rights can come about in various ways: through buying
            and selling, renting, borrowing or lending, giving,
            repossession, etc.  Some subsets of this kind of change are
            #$LosingUserRights, #$GainingUserRights, and
            #$ExchangeOfUserRights; in the latter class, there is an
            alteration in the rights of two (or more) agents to use two
            (or more) items -- as in a purchase, when one agent gets
            full use rights to an object by turning over a sum of money
            to the object&apos;s previous owner.  In addition, some
            changes in user rights are classified explicitly in
            #$TemporaryChangeOfUserRights (e.g., borrowing, renting),
            while others are permanent.   Events that involve such
            changes in user rights all belong in the collection of
            events, #$ChangeInUserRights.   In any particular
            #$ChangeInUserRights event, the item which is changing hands
            is identified as the #$objectOfPossessionTransfer.</rdfs:comment>
        <guid>bd5e7431-9c29-11b1-9dad-c379636f7270</guid>
        <rdfs:subClassOf rdf:resource="#GeneralizedTransfer"/>
    </daml:Class>
    <daml:Class rdf:ID="ChangingDeviceState">
        <rdfs:label>changes of device state</rdfs:label>
        <rdfs:comment>The collection of actions in which a device goes
            from one state (the #$fromState) to another state (the
            #$toState).  A change of #$DeviceState may be due to an
            outside #$Agent adjusting a device, or it may happen
            automatically due to the behavior of a device.  The two most
            general state changes (for powered devices) are from
            #$DeviceOn to #$DeviceOff, and vice versa.  Many other
            states peculiar to specific devices can be identified; for
            example, the states of a #$Dishwasher: #$DeviceState-Washing
            and #$DeviceState-Rinsing; or the states that a trapping
            device may be in: #$TrapArmed, #$TrapTripped, #$TrapIdle.
            Note that a change in the state of a device is an intrinsic
            change in the device; i.e., #$ChangingDeviceState is a
            subset of #$IntrinsicStateChangeEvent.</rdfs:comment>
        <guid>bd58d12d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#PhysicalEvent"/>
        <rdfs:subClassOf rdf:resource="#IntrinsicStateChangeEvent"/>
        <rdfs:subClassOf rdf:resource="#Action"/>
    </daml:Class>
    <daml:Class rdf:ID="CharacterString">
        <rdfs:label>character sequences</rdfs:label>
        <rdfs:comment>The collection of all strings of characters (in
            any languages or in no known language).  Each element of the
            collection #$CharacterString is a string of characters or an
            abstract sequence of symbols.  Note: it is NOT any
            particular physical, tangible representation; different
            encodings may represent the characters.  An element of
            #$CharacterString has characters from some fixed character
            set.  The characters are instances of #$Character-Abstract.
            An element of #$CharacterString may be any length, including
            zero (i.e., empty strings, which have no characters).  If
            elements of #$CharacterString are concatenated, the result
            is also an element of #$CharacterString.  The length of the
            resulting string is equal to the sum of the lengths of the
            concatenated strings.   Some types (subsets) of
            #$CharacterString include #$EMailAddress, #$AreaCode,
            #$PhoneNumber, #$PhoneCountryCode, etc.  Note that a
            #$CharacterString is ordered formally as a #$List (rather
            than physically left-to-right or top-to-bottom); thus the
            &apos;first&apos; character in the #$CharacterString for an
            Arabic word happens to be the rightmost (first pronounced)
            character, not the leftmost character, due to the
            letter-order and word-order convention for Arabic writing.</rdfs:comment>
        <guid>bd6100db-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#StuffType"/>
    </daml:Class>
    <daml:Class rdf:ID="Check-TenderObject">
        <rdfs:label>checks</rdfs:label>
        <rdfs:comment>A collection of documents; a subset of
            #$TenderObject.  Each element of #$Check-TenderObject is a
            financial instrument, drawn on a particular account at some
            instance of #$FinancialOrganization, which is redeemable for
            a monetary value by the agent who is the payee.  The
            financial organization pays the payee funds from the
            account, upon proper presentation of the check.</rdfs:comment>
        <guid>bd58cea8-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MoneyTenderType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#TenderObject"/>
        <rdfs:subClassOf rdf:resource="#IDDocument"/>
        <rdfs:subClassOf rdf:resource="#Form-StandardizedIBO"/>
        <rdfs:subClassOf rdf:resource="#FinancialAccountTenderObject"/>
    </daml:Class>
    <daml:Class rdf:ID="ChemicalCompoundType">
        <rdfs:label>chemical compounds</rdfs:label>
        <rdfs:comment>A collection of collections; a subset of
            #$TangibleStuffCompositionType.  Every instance of
            #$ChemicalCompoundType is a subset of #$TangibleThing whose
            instances are defined ONLY by their chemical composition,
            and not by their physical state or any other property.  In
            Cyc&apos;s current representation, #$ChemicalCompoundTypes
            can be of two varieties:  (1) Collections whose instances
            are completely uniform with each other in terms of chemical
            composition; this includes (a) the chemical elements -- such
            as #$Carbon, #$Oxygen, and #$Hydrogen -- which are instances
            of #$ElementStuffTypeByNumberOfProtons (thus, the latter is
            a subset of #$ChemicalCompoundType), and (b) compounds
            constituted of more than one substance chemically bonded,
            e.g., #$Water, #$Caffeine, and #$IronOxide.  (2) Substances
            which have a general chemical specification, that is, whose
            instances do not have exactly the same chemical composition
            but fall within certain specifications, e.g., #$DNAStuff.
            Cyc&apos;s current theory includes those cases in
            #$ChemicalCompoundType, though they are arguably borderline.
            (Future work may require the creation of type collections to
            identify various levels of chemical specification, such as
            `exact formula&apos; or `exact structure&apos;.)  Note:
            Collections which Cyc does NOT classify as
            #$ChemicalCompoundTypes include collections of substances
            which have some component which is of overriding
            significance in some context, so that in everyday language
            such substances are frequently referred to by the name of
            their important component (e.g., `penicillin&apos; applied
            to a tablet containing penicillin), but which have
            significant admixtures of other substances.  Our
            representation distinguishes between the chemical compound
            (here, instances of #$Penicillin) and the mixture of
            substances in a tablet containing some #$Penicillin for
            pharmaceutical use.  Thus, #$Penicillin is an instance of
            #$ChemicalCompoundType, but the collection of tablets
            containing penicillin and including other ingredients are
            not.  Also, subsets of #$Mixture, such as #$Lemonade, are
            not instances of #$ChemicalCompoundType, because mixtures
            are determined by their physical state rather than solely by
            their chemical composition.</rdfs:comment>
        <guid>bd58cd95-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdf:type rdf:resource="#SiblingDisjointCollection"/>
        <rdfs:subClassOf rdf:resource="#TangibleStuffCompositionType"/>
    </daml:Class>
    <daml:Class rdf:ID="ChemicalObject">
        <rdfs:label>chemical objects</rdfs:label>
        <rdfs:comment>A collection of objects; a subset of
            #$MicroscopicScaleObject.  Each instance of #$ChemicalObject
            is an object whose behavior is typically described in terms
            of its outer cloud of #$Electrons.  Subsets of
            #$ChemicalObject include the collections #$Atom and
            #$Molecule and #$Ion, the set of chemical radicals, and the
            set of molecular fragments.</rdfs:comment>
        <guid>bd58916a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#MicroscopicScaleObject"/>
        <rdfs:subClassOf rdf:resource="#InanimateThing"/>
    </daml:Class>
    <daml:Class rdf:ID="ChemicalReaction">
        <rdfs:label>chemical reactions</rdfs:label>
        <rdfs:comment>A collection of events; a subset of
            #$TransformationEvent.  Each instance of #$ChemicalReaction
            is an event in which two or more substances undergo a
            chemical change, i.e., some portions of the substances
            involved are transformed into different
            #$ChemicalCompoundTypes.  The transformations are brought
            about by purely chemical (including biochemical) means which
            affect chemical bonds between atoms in the molecules of
            stuff, rather than by physical means, biological means, or
            purposeful planning, etc.  Examples of #$ChemicalReaction:
            instances of #$CombustionProcess; instances of #$Photosynthesis-Generic.</rdfs:comment>
        <guid>bd589bc8-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#TransformationEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="Chest-BodyPart">
        <rdfs:label>chests</rdfs:label>
        <rdfs:comment>The collection of the chests of #$Animals.  The
            animal&apos;s chest is its #$AnimalBodyPart region located
            between its neck and its abdomen.  For people and many other
            types of animals, the chest is bounded by (defined by, given
            shape by) the animal&apos;s ribcage.</rdfs:comment>
        <guid>bd58a415-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#UniqueAnatomicalPartType"/>
        <rdf:type rdf:resource="#AnimalBodyPartType"/>
        <rdfs:subClassOf rdf:resource="#AnimalBodyPart"/>
        <rdfs:subClassOf rdf:resource="#BiologicalLivingObject"/>
    </daml:Class>
    <IndependentCountry rdf:ID="China-PeoplesRepublic">
        <rdfs:label>China</rdfs:label>
        <rdfs:comment>China, governed as   the Peoples&apos; Republic of
            China, is a country which claims to be the government of all
            of China. #$Taiwan-RepublicOfChina also makes this claim.
            #$China-PeoplesRepublic #$controls all of China except
            Taiwan Province  on the #$Island of #$Formosa (or
            &apos;Taiwan&apos;) and  #$QuemoyIsland and #$MatsuIsland of
            Fujian Province a few kilometers off the coast.  These
            territories are controlled by #$Taiwan-RepublicOfChina.
            China borders the #$EastChinaSea and the #$SouthChinaSea.
            De facto, #$Taiwan-RepublicOfChina and
            #$China-PeoplesRepublic are two separate independent
            countries each with their own territory, while de jure there
            is a single #$IndependentCountry of China, but two
            governments with separate regions of control.</rdfs:comment>
        <guid>bd58a341-9c29-11b1-9dad-c379636f7270</guid>
    </IndependentCountry>
    <daml:Class rdf:ID="ChordataPhylum">
        <rdfs:label>chordates</rdfs:label>
        <rdfs:comment>An instance of #$BiologicalPhylum within the
            #$BiologicalKingdom #$Animal, the #$ChordataPhylum contains
            the many chordate taxa.  All have members who have a
            notochord (a flexible rod running the length of the body) at
            some stage of development and pharyngeal gills at some stage
            of development.  The #$ChordataPhylum has as #$taxonMembers
            all the subsets of #$Vertebrate (including #$Person), as
            well as some non-vertebrate chordates like Amphioxus.</rdfs:comment>
        <guid>bd59063b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#BiologicalPhylum"/>
        <rdfs:subClassOf rdf:resource="#SolidTangibleThing"/>
        <rdfs:subClassOf rdf:resource="#Animal"/>
    </daml:Class>
    <daml:Class rdf:ID="ChronicCondition">
        <rdfs:label>chronic conditions</rdfs:label>
        <rdfs:comment>A collection of ailments.  An instance of
            #$ChronicCondition is an ailment that lingers or recurs in
            an organism throughout its life.  In some cases, the
            symptoms of a chronic condition may abate with treatment.
            The condition may never go away completely.  #$Asthma is a
            subset of #$ChronicCondition.</rdfs:comment>
        <guid>c0fd4e54-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PhysiologicalConditionType"/>
        <rdfs:subClassOf rdf:resource="#PhysiologicalCondition"/>
    </daml:Class>
    <TwoDimensionalShapeAttribute rdf:ID="Circular">
        <rdfs:label>circular</rdfs:label>
        <rdfs:comment>#$Circular is the instance of #$ShapeAttribute
            shared by all circular objects.</rdfs:comment>
        <guid>bd646240-9c29-11b1-9dad-c379636f7270</guid>
    </TwoDimensionalShapeAttribute>
    <daml:Class rdf:ID="CirculatorySystem">
        <rdfs:label>circulatory systems</rdfs:label>
        <rdfs:comment>The collection of all animals&apos; circulatory
            systems.  A #$CirculatorySystem is a system of organs and
            body parts, found in #$Vertebrates and some other animals,
            which function together to circulate the animal&apos;s blood
            throughout its body, supplying needed substances to its
            cells and removing waste products from them.  A
            #$CirculatorySystem is generally composed of #$BloodVessels,
            #$Heart, #$Spleen, etc., considered as an interrelated
            functional system of each animal.   Note:  It generally has
            a close linkage to the respiration system, as the blood
            comes in contact with fresh air to divest itself of the
            waste products it has collected from the body&apos;s cells
            and to acquire new needed substances to take to the
            body&apos;s cells.</rdfs:comment>
        <guid>bd58f31b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#UniqueAnatomicalPartType"/>
        <rdf:type rdf:resource="#AnimalBodyPartType"/>
        <rdfs:subClassOf rdf:resource="#ConnectedPathSystem"/>
        <rdfs:subClassOf rdf:resource="#AnimalBodyPart"/>
        <rdfs:subClassOf rdf:resource="#BiologicalLivingObject"/>
    </daml:Class>
    <daml:Class rdf:ID="City">
        <rdfs:label>cities</rdfs:label>
        <rdfs:comment>A collection of geopolitical entities.  An element
            of #$City is a local human settlement which has its own
            government.  This includes cities, towns, suburbs, villages,
            hamlets, and townships, as long as they have their own
            governments.  A city government is usually mostly autonomous
            from the governments of its surrounding regions, rather than
            being a sub-organization of them.</rdfs:comment>
        <guid>bd58e767-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#SpatiallyDisjointRegionType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#UrbanArea"/>
        <rdfs:subClassOf rdf:resource="#GeopoliticalEntity"/>
        <daml:disjointWith rdf:resource="#ContactLocation"/>
    </daml:Class>
    <CountrySubsidiary rdf:ID="CityOfWashingtonDC">
        <rdfs:label>Washington D.C.</rdfs:label>
        <rdfs:comment>The capital city (#$CapitalCityOfRegion) of the
            #$UnitedStatesOfAmerica, seat of its Federal government,
            which is located in the #$DistrictOfColumbia, a specially
            created Federal district between the States of Maryland and
            Virginia.  Currently, the #$CityOfWashingtonDC and the
            #$DistrictOfColumbia are coextensive.</rdfs:comment>
        <guid>bd590b3c-9c29-11b1-9dad-c379636f7270</guid>
    </CountrySubsidiary>
    <daml:Class rdf:ID="Cleaning">
        <rdfs:label>sanitations</rdfs:label>
        <rdfs:comment>A collection of events.  In each #$Cleaning event,
            dirt (or other unwanted substances) is removed from the
            #$objectOfStateChange of that event.  If a #$Cleaning event
            is successful, then the #$Dirtiness level of the object will
            have been lowered.</rdfs:comment>
        <guid>bd58c9de-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#RemovingSomething"/>
    </daml:Class>
    <daml:Class rdf:ID="CleaningDevice">
        <rdfs:label>cleaning tools</rdfs:label>
        <rdfs:comment>A collection of devices.  An instance of
            #$CleaningDevice is any device, manually powered or
            otherwise, whose #$primaryFunction is to be used in cleaning
            things.  Instances include each #$Mop, each
            #$RegularWindshieldWiper, each  #$FacialTissue, each
            #$ShoeBrush, each #$ClothesWasher, each #$Dishwasher, etc.</rdfs:comment>
        <guid>bd58b64c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#PhysicalDevice"/>
        <rdfs:subClassOf rdf:resource="#SolidTangibleProduct"/>
    </daml:Class>
    <daml:Class rdf:ID="CleaningImplement">
        <rdfs:label>cleaning implements</rdfs:label>
        <rdfs:comment>A collection of tools; a subset   of #$HandTool
            and also of #$CleaningDevice.  An instance of
            #$CleaningImplement is any hand-held tool used for cleaning
            something.  Cleaning implements are used in a wide variety
            of activities and settings; some subsets include the
            collections #$Mop, #$DentalPick, #$ElectricToothBrush,
            #$WashCloth, #$FacialTissue, #$ShoeBrush.  Many cleaning
            implements are intended for wiping, scrubbing, or polishing
            surfaces to remove patches of #$Dirt.</rdfs:comment>
        <guid>bd589192-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#HandTool"/>
        <rdfs:subClassOf rdf:resource="#CleaningDevice"/>
    </daml:Class>
    <daml:Class rdf:ID="ClimateCycleType">
        <rdfs:label>climate cycle type</rdfs:label>
        <rdfs:comment>A collection of collections.  Each element of
            #$ClimateCycleType is a collection of (extended) events
            which are weather processes of one type or another.
            Examples of elements of #$ClimateCycleType are
            #$TemperateClimateCycle and #$SteppeClimateCycle.    Note:
            in practice, there is little need to create terms denoting
            members of the collections belonging to #$ClimateCycleType;
            so long as one just wants to state what TYPE of climate a
            particular region has, simply use the predicate
            #$hasClimateType with the appropriate subset of
            #$AnnualClimateCycle (q.v.).  See also #$hasClimateType.</rdfs:comment>
        <guid>bd58b5f6-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#SiblingDisjointCollection"/>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="#TemporalObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="Cloth">
        <rdfs:label>textiles</rdfs:label>
        <rdfs:comment>A collection of tangible things.  Each element of
            #$Cloth is a piece of textile sheet woven or knitted or
            pressed out of fibers.  Pieces of #$Cloth are commonly used
            as material inputs to the manufacture of clothing items,
            towels, sails for sailing craft, parachutes, draperies, etc.
            Excludes #$Leather (q.v.).</rdfs:comment>
        <guid>bd590909-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdf:type rdf:resource="#ProductType"/>
        <rdfs:subClassOf rdf:resource="#FreeSheet"/>
        <rdfs:subClassOf rdf:resource="#TextileProduct"/>
    </daml:Class>
    <daml:Class rdf:ID="ClothingAccessory">
        <rdfs:label>accessories</rdfs:label>
        <rdfs:comment>A collection of tangible objects.  Each element of
            #$ClothingAccessory is something that is worn as an
            accessory with other clothing items.  Examples include
            elements of the collections #$Jewelry, #$Scarf, #$NeckTie,
            #$Belt-Clothing, #$Suspenders, and suchlike.</rdfs:comment>
        <guid>bd58cee4-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#ClothingItem"/>
    </daml:Class>
    <daml:Class rdf:ID="ClothingItem">
        <rdfs:label>items of clothing</rdfs:label>
        <rdfs:comment>A collection of tangible objects.  Each element of
            #$ClothingItem is something that a person wears as a
            protective and/or decorative covering or ornament.  Items of
            clothing are usually made of flexible materials, such as
            cloth, leather, or yarn.  The collection #$ClothingItem
            contains primarily individual garments (e.g., elements of
            the collections #$Pants, #$Shirt, #$Coat, #$Shoe), together
            with pairs of shoes, socks, and gloves (since each wearer
            needs a pair).  Jewelry, suspenders, belts, etc., are in the
            subset #$ClothingAccessory. Note: outfits (esp. specialized
            outfits) made up of several individual items worn together
            belong to the collection #$ClothingOutfit, which is NOT a
            subset of #$ClothingItem but IS a subset of the broader
            collection, #$SomethingToWear.</rdfs:comment>
        <guid>bd5903d5-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdf:type rdf:resource="#ProductType"/>
        <rdfs:subClassOf rdf:resource="#BilaterallySymmetricObject"/>
    </daml:Class>
    <daml:Class rdf:ID="ClothingOutfit">
        <rdfs:label>outfits</rdfs:label>
        <rdfs:comment>A collection of objects.  Every element of
            #$ClothingOutfit is a group of `coordinated&apos; items that
            are intended to be worn together; e.g., an instance of
            #$ThreePieceSuit, consisting of one suit jacket, one vest,
            and one pair of long pants.  Clothing outfits are often sold
            or provided together as a set; e.g., military uniforms,
            business suits, scuba gear.  A clothing outfit may include
            some accessories, as well as garments.  Cf. #$ClothingItem.</rdfs:comment>
        <guid>bd59033c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Group"/>
    </daml:Class>
    <daml:Class rdf:ID="CloudInSky">
        <rdfs:label>clouds</rdfs:label>
        <rdfs:comment>The collection of clouds (instances of
            #$CloudOfH2O) in the sky over some #$GeographicalRegion (as
            opposed to being at ground-level).</rdfs:comment>
        <guid>c0fba044-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#CloudOfH2O"/>
    </daml:Class>
    <daml:Class rdf:ID="CloudOfH2O">
        <rdfs:label>cloud of h 2 o</rdfs:label>
        <rdfs:comment>A cloud of particles of liquid or solid water in
            the atmosphere covering a #$GeographicalRegion.</rdfs:comment>
        <guid>bd58f48d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingStuffType"/>
    </daml:Class>
    <daml:Class rdf:ID="Cloudiness">
        <rdfs:label>levels of cloudiness</rdfs:label>
        <rdfs:comment>A collection of attributes; a subset of
            #$ScalarInterval.  The elements of #$Cloudiness characterize
            the amount of cloud cover at an #$OutdoorLocation.  A higher
            value indicates more clouds or more dense cover.  Degrees of
            cloudiness may be represented qualitatively (e.g.,
            #$PartialCloudCover, #$CompleteCloudCover), or using
            #$GenericValueFunctions.  The cloudiness of a location can
            be described with the predicate #$cloudinessOfRegion.</rdfs:comment>
        <guid>bd590706-9c29-11b1-9dad-c379636f7270</guid>
        <rdfs:subClassOf rdf:resource="#WeatherAttribute"/>
        <rdfs:subClassOf rdf:resource="#PhysicalAttribute"/>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </daml:Class>
    <WeatherAttribute rdf:ID="Cloudless">
        <rdfs:label>cloudless</rdfs:label>
        <rdfs:comment>#$Cloudless is a #$WeatherAttribute representing a
            specific degree of #$Cloudiness.  (#$cloudinessOfRegion LOC
            #$Cloudless) means that the #$OutdoorLocation LOC has no
            cloud cover.</rdfs:comment>
        <guid>bd58e1f4-9c29-11b1-9dad-c379636f7270</guid>
    </WeatherAttribute>
    <WeatherAttribute rdf:ID="Cloudy">
        <rdfs:label>cloudy</rdfs:label>
        <rdfs:comment>#$Cloudy is a #$WeatherAttribute that
            characterizes an #$OutdoorLocation which has at least some
            cloud cover -- this cloud cover not being situated at
            ground-level (in which case #$Foggy would be the applicable #$WeatherAttribute).</rdfs:comment>
        <guid>bd590748-9c29-11b1-9dad-c379636f7270</guid>
    </WeatherAttribute>
    <CycLAssertionDirection rdf:ID="Code-AssertionDirection">
        <rdfs:label>code - assertion direction</rdfs:label>
        <rdfs:comment>The direction for Cyc assertions which are
            implemented in code; the assertion is not actually used in
            either forward or backward inference.</rdfs:comment>
        <guid>bfe9f22d-9c29-11b1-9dad-c379636f7270</guid>
    </CycLAssertionDirection>
    <daml:Class rdf:ID="CodeOfConduct">
        <rdfs:label>codes of conduct</rdfs:label>
        <rdfs:comment>A collection of microtheories; a subset of both
            #$Obligation and #$SupposedToBeMicrotheory.  Each element of
            #$CodeOfConduct is a microtheory which contains rules and/or
            expectations governing the behavior of those agents subject
            to it in certain kinds of situations.</rdfs:comment>
        <guid>bd5895c7-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MicrotheoryType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="CohabitationUnit">
        <rdfs:label>households</rdfs:label>
        <rdfs:comment>A collection of organizations.  Within the
            #$NaiveBiologicalDescentMt, each instance of
            #$CohabitationUnit is an animal domestic group, i.e., a
            group of animals which live together in the same domestic or
            living group.  This domestic group is assumed (by default)
            to be of a single species.</rdfs:comment>
        <guid>bd5891e0-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="Cohesiveness">
        <rdfs:label>cohesiveness</rdfs:label>
        <rdfs:comment>A collection of attributes; a subset of
            #$PhysicalAttribute.  Each element of #$Cohesiveness
            represents a specific capacity of a physical object to
            cohere; e.g., #$RigidlyCohesive, #$LiquidCohesiveness,
            #$HumanlySeparable.  Cohesiveness of objects is indicated
            with the predicate #$cohesivenessOfObject.</rdfs:comment>
        <guid>be00bb30-9c29-11b1-9dad-c379636f7270</guid>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </daml:Class>
    <daml:Class rdf:ID="Collection">
        <rdfs:label>collections</rdfs:label>
        <rdfs:comment>The collection of all Cyc collections.  Cyc
            collections are natural kinds or classes, as opposed to
            mathematical sets; their elements have some common
            attribute(s).  Each Cyc collection is like a set in so far
            as it may have elements, subsets, and supersets, and may not
            have parts or spatial or temporal properties.  Sets,
            however, differ from collections in that a mathematical set
            may be an arbitrary set of things which have nothing in
            common (see #$Set-Mathematical).  In contrast, the elements
            of a collection will all have in common some feature(s),
            some `intensional&apos; qualities.  In addition, two
            instances of #$Collection can be co-extensional (i.e., have
            all the same elements) without being identical, whereas if
            two arbitrary sets had the same elements, they would be
            considered equal.   As with any Cyc constant, an instance of
            #$Collection should be created only if it is expected to
            have some purpose or utility.  Moreover, the `best&apos;
            collections to create are the ones which are impossible to
            define precisely, yet about which there are rules and other
            things to say.  E.g., `WhiteCat&apos; is not a good element
            of #$Collection to create, because it&apos;s easy to define
            with other Cyc concepts, and there&apos;s not much to say
            about the collection of white cats; but
            `WhiteCollarWorker&apos; could be a good element of
            #$Collection, because it is hard to define exactly, yet
            there are many things to say about it.</rdfs:comment>
        <guid>bd5880cc-9c29-11b1-9dad-c379636f7270</guid>
        <daml:sameClassAs rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
        <rdfs:subClassOf rdf:resource="#SetOrCollection"/>
        <daml:disjointWith rdf:resource="#Set-Mathematical"/>
        <daml:disjointWith rdf:resource="#AttributeValue"/>
        <daml:disjointWith rdf:resource="#Microtheory"/>
    </daml:Class>
    <daml:Class rdf:ID="CollectionDenotingFunction">
        <rdfs:label>collection - denoting functions</rdfs:label>
        <rdfs:comment>The subcollection of #$Function-Denotational whose
            instances, when applied to any appropriate (sequences of)
            arguments, return instances of #$Collection.  Examples
            include #$SwimmingEventFn, #$GroupFn, and #$MoleculeFn;
            (#$MoleculeFn #$Oxygen) denotes the collection of all oxygen
            molecules.  Cf. #$IndividualDenotingFunction and #$SetDenotingFunction.</rdfs:comment>
        <guid>bd58806a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#RelationshipType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#Function-Denotational"/>
        <daml:disjointWith rdf:resource="#IndividualDenotingFunction"/>
    </daml:Class>
    <daml:Class rdf:ID="CollectionEvent">
        <rdfs:label>collections</rdfs:label>
        <rdfs:comment>A collection of events.  Each element of
            #$CollectionEvent is an event in which tangible or
            intangible objects are collected together at a single  place
            .  The objects might come from various sources, and might be
            gathered via some collection network.</rdfs:comment>
        <guid>bd58dc1e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#TransferIn"/>
    </daml:Class>
    <daml:Class rdf:ID="CollectionType">
        <rdfs:label>collection type</rdfs:label>
        <rdfs:comment>#$CollectionType is by definition the collection
            of all  types of #$Collections.</rdfs:comment>
        <guid>beda6953-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
    </daml:Class>
    <daml:Class rdf:ID="Color">
        <rdfs:label>colors</rdfs:label>
        <rdfs:comment>A collection of attributes; a subcollection of
            both #$PhysicalAttribute and #$SensoryAttribute.  Each
            element of #$Color represents a specific color attribute of
            some object or substance; e.g., #$GoldColor,
            #$VividRed-Color, #$Auburn-HairColor, #$Olive-FleshColor.
            Elements of #$Color are #$CompositeAttributes, since they
            can vary along several dimensions (e.g., hue, brightness,
            chroma).  Indicate a particular object&apos;s #$Color with
            one of the following predicates: #$objectHasColor,
            #$mainColorOfObject, or #$uniformColorOfObject.</rdfs:comment>
        <guid>bd588231-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CompositeAttributeType"/>
        <rdfs:subClassOf rdf:resource="#AttributeValue"/>
        <rdfs:subClassOf rdf:resource="#CompositeAttribute"/>
        <rdfs:subClassOf rdf:resource="#SensoryAttribute"/>
        <rdfs:subClassOf rdf:resource="#PhysicalAttribute"/>
    </daml:Class>
    <daml:Class rdf:ID="CombustionProcess">
        <rdfs:label>fires</rdfs:label>
        <rdfs:comment>A collection of events.  Each #$CombustionProcess
            is an event in which rapid oxidation is taking place.  These
            always have heat as an output and often involve emission of
            light as well (typically, flames).  The #$objectActedOn in a
            #$CombustionProcess is at least partly consumed.  See also #$Flammability.</rdfs:comment>
        <guid>bd58c04e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#DecompositionProcess"/>
        <rdfs:subClassOf rdf:resource="#EnergyConversionProcess"/>
    </daml:Class>
    <daml:Class rdf:ID="CommercialActivity">
        <rdfs:label>commercial activities</rdfs:label>
        <rdfs:comment>This is a large collection of events.  As can be
            seen from its subsets, it embraces all types of buying,
            selling, offering to sell, offering to buy, requesting bids,
            performing services for hire, advertising, manufacturing for
            sale, etc.</rdfs:comment>
        <guid>bd5887a4-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#Transaction"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
    </daml:Class>
    <daml:Class rdf:ID="CommercialFishingBoat">
        <rdfs:label>commercial fishing boat</rdfs:label>
        <rdfs:comment>The subcollection of #$Watercraft that contains
            all fishing boats, including trawlers, seiners, junks etc.
            that are marine-life-catching devices, and the main purpose
            of the fishing is commercial.  Note that not all instances
            of CommercialFishingBoat have to be used exclusively in the
            ocean--they can also be used in rivers and lakes, etc.</rdfs:comment>
        <guid>be059efb-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="CommercialOrganization">
        <rdfs:label>commercial organizations</rdfs:label>
        <rdfs:comment>A collection of organizations.  An element of
            #$CommercialOrganization is an organization which buys or
            sells goods or services for a profit.  It may also be an
            element of #$Business or it may merely be a sub-organization
            of a #$Business entity.</rdfs:comment>
        <guid>bd5892d3-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Organization"/>
        <rdfs:subClassOf rdf:resource="#LegalAgent"/>
        <daml:disjointWith rdf:resource="#NonProfitOrganization"/>
        <daml:disjointWith rdf:resource="#GeographicalRegion"/>
    </daml:Class>
    <daml:Class rdf:ID="CommercialServiceOrganization">
        <rdfs:label>service companies</rdfs:label>
        <rdfs:comment>A collection of organizations; a subset of
            #$CommercialOrganization.  An instance of
            #$CommercialServiceOrganization is a commercial organization
            which sells its services as its main product (rather than
            tangible goods), for commercial gain.  Some tangible goods
            may accompany or supplement the main service sold, but only
            as side products; e.g., some elements of #$HairSalon sell
            hair care products.</rdfs:comment>
        <guid>bd58f1b9-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#CommercialOrganization"/>
        <rdfs:subClassOf rdf:resource="#ServiceOrganization"/>
    </daml:Class>
    <WorkStatus rdf:ID="Commissioned">
        <rdfs:label>commissioned</rdfs:label>
        <rdfs:comment>An attribute; an element of #$WorkStatus.  The
            attribute of being paid on a commission basis for work done.</rdfs:comment>
        <guid>bd58b8d7-9c29-11b1-9dad-c379636f7270</guid>
    </WorkStatus>
    <daml:Class rdf:ID="Communicating">
        <rdfs:label>communicating</rdfs:label>
        <rdfs:comment>A collection of events.  Each element of
            #$Communicating is an event in which the transfer of
            information  between or among agents is a focal action;
            communicating is the main  purpose and/or goal in the event.
            That may be contrasted with events  which involve
            communication but wherein the focus is different, e.g.,
            playing cards (wherein the progressive actions -- and
            winning -- of  the game are focal).  Since #$Communicating
            is a subset of  #$PurposefulAction, each #$Communicating
            event must be intentional on  the part of the
            #$senderOfInfo; it may or may not be intentional on  the
            part of the #$recipientOfInfo.  Hence, a speaker on a
            soapbox  haranguing an indifferent crowd is performing an
            instance of  #$Communicating.  In contrast, Juliet
            soliloquizing on her balcony,  unaware that Romeo is
            listening to her, is not #$Communicating; this
            #$InformationTransferEvent would be an instance of
            #$Eavesdropping.  Communicating may be either a one-way or a
            two-way transfer of  information (cf.
            #$CommunicationAct-Single,
            #$MultiDirectionalCommunication).  Every event belonging to
            #$Communicating contains at least one transfer of
            information between  at least two agents who participate in
            the event.  (Note that the  latter requirement excludes
            reading and writing from #$Communicating,  when those events
            are just the private accessing or generating of
            information.)  Communicating may be specialized in various
            ways, such  as, by the method or medium used (e.g.,
            #$AudioCommunicating,  #$NonVerbalCommunicating,
            #$FaceToFacePresenceCommunicating); by the  type of
            information involved (e.g., #$MakingAnAgreement); by the
            purpose of the communication (e.g., #$Teaching,
            #$Negotiating); by the  agents involved (e.g.,
            #$IntraOrganizationCommunication,  #$StageProduction).
            Examples of #$Communicating include a symphony  performance,
            an email message, a telephone call, a speech, a  handshake,
            issuing a traffic ticket -- all of which normally, and
            focally, involve communication between two or more agents.</rdfs:comment>
        <guid>bd589ec5-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#InformationTransferEvent"/>
        <rdfs:subClassOf rdf:resource="#Action"/>
    </daml:Class>
    <daml:Class rdf:ID="CommunicationAct-Single">
        <rdfs:label>communication acts</rdfs:label>
        <rdfs:comment>A collection of information transfer events; a
            subset of #$Communicating.  Each element of
            #$CommunicationAct-Single is a single-source transmission of
            information from ONE #$senderOfInfo to one or more
            recipients; such acts may be one-to-one or one-to-many.
            Every element of #$CommunicationAct-Single has a
            transmission sub-event (which is an element of
            #$IBTGeneration-Original) and one or more reception
            #$subEvents (which are elements of #$AccessingAnIBT).  An
            element of #$CommunicationAct-Single starts when its
            transmission sub-event starts and ends when its accessing
            sub-event(s) end. Notes: (1) For exchanges of information
            between or among multiple agents, see
            #$MultiDirectionalCommunication.  (2) An important
            distinction is made between elements of
            #$CommunicationAct-Single on the one hand, and their
            #$subEvents which are elements of #$IBTGeneration-Original
            and #$AccessingAnIBT, on the other hand; e.g., #$Speaking
            and #$Writing are NOT subsets of #$CommunicationAct-Single,
            but rather are subsets of #$IBTGeneration-Original (because
            instances of both represent only the generation of
            information and can even occur without actual communication
            of it), and #$ListeningDeliberately and #$Reading are
            subsets of #$AccessingAnIBT, NOT of
            #$CommunicationAct-Single, because instances of both
            represent only the accessing of information (even if by
            default they imply a prior generation of information).</rdfs:comment>
        <guid>bd589e83-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#Communicating"/>
        <daml:disjointWith rdf:resource="#MultiDirectionalCommunication"/>
    </daml:Class>
    <daml:Class rdf:ID="CommunicationConvention">
        <rdfs:label>communication convention</rdfs:label>
        <rdfs:comment>The collection of conventions used to encode and
            interpret things which bear information; a syntax together
            with a semantic mapping.  Instances include natural
            languages like French or English, database data formats, and
            computer languages or idiosyncratic systems of gestures or
            symbols known only by a small group of people.</rdfs:comment>
        <guid>bd58f43f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#AbstractInformationalThing"/>
        <daml:disjointWith rdf:resource="#Relation"/>
    </daml:Class>
    <daml:Class rdf:ID="CommunityOrganization">
        <rdfs:label>community groups</rdfs:label>
        <rdfs:comment>A collection of organizations.  An element of
            #$CommunityOrganization is a group that consists of
            residents of a #$Neighborhood or apartment building or
            condominium complex, and which is concerned with issues
            affecting the #$Neighborhood or complex.</rdfs:comment>
        <guid>bd58852b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="CommutativeRelation">
        <rdfs:label>commutative relation</rdfs:label>
        <rdfs:comment>An important subset of #$Relation.  Each element
            of #$CommutativeRelation is a relationship whose argument
            order can be changed without changing the value or meaning
            of the expression; e.g., #$PlusFn, #$TimesFn, #$or,
            #$bordersOn, #$temporallyIntersects, #$teammates.  Most
            #$Relations are NOT commutative: if (#$isa EL COL) is true,
            it is rare that (#$isa COL EL) is also true.</rdfs:comment>
        <guid>bd6449a2-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdf:type rdf:resource="#RelationshipType"/>
        <rdfs:subClassOf rdf:resource="#Relation"/>
        <daml:disjointWith rdf:resource="#PartiallyCommutativeRelation"/>
        <daml:disjointWith rdf:resource="#UnaryRelation"/>
    </daml:Class>
    <daml:Class rdf:ID="Competence">
        <rdfs:label>crafts</rdfs:label>
        <rdfs:comment>One of the most general attributes for describing
            the level of skill with which an agent performs some task.
            Knowledge enterers will usually want to use some more
            specific attribute.</rdfs:comment>
        <guid>bd58ade0-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ScriptPerformanceAttributeType"/>
        <rdfs:subClassOf rdf:resource="#ScriptPerformanceAttribute"/>
    </daml:Class>
    <daml:Class rdf:ID="Competition">
        <rdfs:label>competitions</rdfs:label>
        <rdfs:comment>The collection of situations in which one or more
            #$Agents are striving to be the sole exemplar of some high
            value judgement, or the highest value along some comparative
            or metric scale.  Arm wrestling, football, fighting for
            prey, competitive courting, racing, rodeo events, etc. are
            examples.  See also #$competitionExpr. Note: `striving&apos;
            may be a bit of overstatement, as sometimes the competitors
            may even be unaware that a competition has been going on
            until after it is over, such as the first year a `Best
            Restaurant in Austin&apos; award is given out.</rdfs:comment>
        <guid>bd58801a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
    </daml:Class>
    <Cloudiness rdf:ID="CompleteCloudCover">
        <rdfs:label>complete cloud cover</rdfs:label>
        <rdfs:comment>#$CompleteCloudCover is a #$WeatherAttribute
            representing a specific degree of #$Cloudiness.  This
            attribute describes a location as so clouded over with a
            uniform layer grey or white clouds that direct sunlight is
            blocked out.  There are no shadows, the shape or exact
            location of the sun or moon is impossible to identify.</rdfs:comment>
        <guid>bd588622-9c29-11b1-9dad-c379636f7270</guid>
    </Cloudiness>
    <daml:Class rdf:ID="ComplexTemporalRelation">
        <rdfs:label>complex temporal relation</rdfs:label>
        <rdfs:comment>Instances of #$ComplexTemporalRelation are
            predicates used to interrelate instances of #$TemporalThing
            in time.  Some of them (e.g., #$startsAfterEndingOf) make
            statements about the relationship of the beginning and/or
            end of their first argument to the beginning and/or end of
            their second argument.  One can think of this as an
            interval-based theory of time.  Some of them (e.g.,
            #$temporallyIntersects and #$temporallySubsumes) make
            statements about the relationship of the entire set of
            points that is their first argument to the entire set of
            points that is their second argument.  One can think of this
            as a set-theoretic theory of time.</rdfs:comment>
        <guid>bd58ec70-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="#TemporalRelation"/>
    </daml:Class>
    <daml:Class rdf:ID="CompositeAttribute">
        <rdfs:label>composite attribute</rdfs:label>
        <rdfs:comment>A collection of attributes.  Each element of
            #$CompositeAttribute is an attribute that is essentially a
            vector with many dimensions.  Instances of #$Color are good
            examples; colors have intensity, hue, and saturation as
            independent dimensions.  See also #$primitiveAttributeTypes, #$PrimitiveAttributeType.</rdfs:comment>
        <guid>bd58d8d8-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#AttributeType"/>
        <rdfs:subClassOf rdf:resource="#AttributeValue"/>
    </daml:Class>
    <daml:Class rdf:ID="CompositeAttributeType">
        <rdfs:label>composite attribute types</rdfs:label>
        <rdfs:comment>A collection of collections.  Every element of
            #$CompositeAttributeType is a collection of attributes which
            is a subset of #$CompositeAttribute (q.v.).</rdfs:comment>
        <guid>bd588238-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#AttributeType"/>
    </daml:Class>
    <daml:Class rdf:ID="CompositePhysicalAndMentalEvent">
        <rdfs:label>composite physical and mental event</rdfs:label>
        <rdfs:comment>A collection of events.  Each element of
            #$CompositePhysicalAndMentalEvent is an event that involves
            both some mental event(s) and an interaction of physical
            objects.  Examples include a news broadcast program, a court
            trial, inheriting property, writing a letter, a physical
            examination, a charity ball, traffic on some section of
            highway during rush hour.  Note that this collection does
            NOT imply that the events which are its instances have doers
            (see #$doneBy).  Subsets of
            #$CompositePhysicalAndMentalEvent whose elements all have
            doers (or performers) -- and there will be many of them --
            should have as a second genls #$Action or the appropriate
            subset of #$Action (qq.v.).</rdfs:comment>
        <guid>bd588d27-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#PhysicalEvent"/>
        <rdfs:subClassOf rdf:resource="#AtLeastPartiallyMentalEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="CompositeTangibleAndIntangibleObject">
        <rdfs:label>composite tangible and intangible object</rdfs:label>
        <rdfs:comment>The collection of things which have both a
            tangible and an intangible component -- e.g., people (with
            bodies and minds), information bearing objects (intangible
            information encoded on a tangible substrate, such as music
            on a CD, or text in a book) and so on.  Like anything else
            that has at least some tangible component, each element of
            #$CompositeTangibleAndIntangibleObject exists in time.  Our
            representation allows us to separately reify the tangible
            and intangible components of an object; this is sometimes
            necessary  (e.g., to state that the age of the Frankenstein
            monster&apos;s mind is x, the age of his body is y, and the
            age of the new composite is z) but not very often needed ---
            usually one can just reify the
            #$CompositeTangibleAndIntangibleObject and state things
            about it.</rdfs:comment>
        <guid>bd58f771-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#PartiallyIntangibleIndividual"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#PartiallyIntangible"/>
    </daml:Class>
    <daml:Class rdf:ID="CompositionPredicate">
        <rdfs:label>composition predicate</rdfs:label>
        <rdfs:comment>A collection of predicates; one of several subsets
            of #$PartPredicate.  The collection #$CompositionPredicate
            contains predicates which are used to relate
            #$PartiallyTangible things to the substances (pieces of
            stuffs) which compose them.  #$CompositionPredicates are
            instance-level (i.e, they relate #$Individuals, not
            #$Collections), although typically they are used in
            inferences about specific kinds of things.  Examples include
            #$constituents, #$mainConstituent #$solvent, #$solute,
            #$suspendingFluid, #$suspendedPart.</rdfs:comment>
        <guid>bd58f321-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="#PhysicalPartPredicate"/>
    </daml:Class>
    <daml:Class rdf:ID="Compressibility">
        <rdfs:label>levels of compressibility</rdfs:label>
        <rdfs:comment>A collection of attributes; a subset of
            #$PhysicalAttribute.   Each element of #$Compressibility
            represents a specific capacity of a physical object to be
            compressed.  Compressibility may be measured with a
            #$GenericValueFunction. Compressibilities of objects are
            indicated with the predicate #$compressibilityOfObject.</rdfs:comment>
        <guid>be00ba02-9c29-11b1-9dad-c379636f7270</guid>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </daml:Class>
    <daml:Class rdf:ID="ComputationalObject">
        <rdfs:label>computational objects</rdfs:label>
        <rdfs:comment>A collection of abstract objects; a subset of
            #$IntangibleIndividual.  Each element of
            #$ComputationalObject is a syntactically structured form,
            such as a Cyc system expression, a Lisp string, a C variable
            name, or an equation in a particular canonical form format.</rdfs:comment>
        <guid>bd58803b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#IntangibleIndividual"/>
        <rdfs:subClassOf rdf:resource="#MathematicalOrComputationalThing"/>
        <daml:disjointWith rdf:resource="#SpatialThing"/>
    </daml:Class>
    <CurvatureOfSurface rdf:ID="Concave">
        <rdfs:label>concavity</rdfs:label>
        <rdfs:comment>An attribute of a surface meaning that it is
            bumped or indented inward.  A concave surface has a pair of
            points which are both closer to a viewer than points on the
            surface between them.   Depending on the context, it may
            have relatively small subregions which have convexities
            (e.g. wrinkles, small dents, corrugations) or are flat so
            long as the overall shape is concave.  Saddle-shapes,
            although convex in certain dimensions, are concave in others
            and are therefore concave.</rdfs:comment>
        <guid>c0f2b614-9c29-11b1-9dad-c379636f7270</guid>
    </CurvatureOfSurface>
    <SharedNote rdf:ID="ConcludingEqualsNote">
        <rdfs:label>concluding equals note</rdfs:label>
        <rdfs:comment>#$differentSymbols is useful for constraining
            rules that conclude #$equals. Most rules which would
            conclude #$equals would fire for identical symbols, and
            would thus conclude superfluous identity statement, e.g.,
            (#$equals #$Cicero #$Cicero). By placing a conjunct in the
            antecedent of such rules, (#$differentSymbols ?X ?Y), such
            superfluous identity statements will not be deduced.</rdfs:comment>
        <guid>bdffd8f1-9c29-11b1-9dad-c379636f7270</guid>
    </SharedNote>
    <daml:Class rdf:ID="Concrete">
        <rdfs:label>concrete</rdfs:label>
        <rdfs:comment>A collection of tangible things.  Each element of
            #$Concrete is a piece of an artificial mixture of cement,
            gravel, sand, and (during mixture, pouring, and forming)
            water.  Used widely in construction, pieces of concrete are
            formed into the desired shape while fluid and afterward
            hardened into a sturdy, durable material.  Examples: bridge
            pilings, foundations of houses, sidewalks, pieces of IH-35.</rdfs:comment>
        <guid>bd590360-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#TangibleStuffCompositionType"/>
        <rdfs:subClassOf rdf:resource="#BuildingMaterial"/>
        <rdfs:subClassOf rdf:resource="#ArtificialMaterial"/>
    </daml:Class>
    <daml:Class rdf:ID="Condensing">
        <rdfs:label>condensation processes</rdfs:label>
        <rdfs:comment>A collection of events.  In each instance of
            #$Condensing, a gas is cooled to (or its pressure lowered
            to) the point where the relative humidity (or similar
            partial pressure measure if something other than water is
            condensing) is greater than 100%, changing part of a
            component of the gas from the #$GaseousStateOfMatter to the #$LiquidStateOfMatter.</rdfs:comment>
        <guid>be01163d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#PhysicalStateChangeEvent"/>
    </daml:Class>
    <ElectricalResistance rdf:ID="ConductorResistance">
        <rdfs:label>conductor resistance</rdfs:label>
        <rdfs:comment>A measurable physical attribute.
            #$ConductorResistance is the element of
            #$ElectricalResistance that represents a very low level of
            electrical resistance.  An object having
            #$ConductorResistance readily conducts electricity.  See
            also #$resistanceOfObject.</rdfs:comment>
        <guid>be00f83b-9c29-11b1-9dad-c379636f7270</guid>
    </ElectricalResistance>
    <ThermalConductivity rdf:ID="ConductsHeatPoorly">
        <rdfs:label>conducts heat poorly</rdfs:label>
        <rdfs:comment>A measurable physical attribute.
            #$ConductsHeatPoorly is the element of #$ThermalConductivity
            that represents the level of thermal conductivity in an
            object that conducts virtually no heat.</rdfs:comment>
        <guid>be00f69f-9c29-11b1-9dad-c379636f7270</guid>
    </ThermalConductivity>
    <ThermalConductivity rdf:ID="ConductsHeatWell">
        <rdfs:label>conducts heat well</rdfs:label>
        <rdfs:comment>A measurable physical attribute.
            #$ConductsHeatWell is the element of #$ThermalConductivity
            that represents the level of thermal conductivity in an
            object that conducts heat very quickly.</rdfs:comment>
        <guid>be00f6b5-9c29-11b1-9dad-c379636f7270</guid>
    </ThermalConductivity>
    <ThermalConductivity rdf:ID="ConductsSomeHeat">
        <rdfs:label>conducts some heat</rdfs:label>
        <rdfs:comment>A measurable physical attribute.
            #$ConductsSomeHeat is the element of #$ThermalConductivity
            that represents the level of thermal conductivity in an
            object which conducts heat, but slowly.</rdfs:comment>
        <guid>be00f6ab-9c29-11b1-9dad-c379636f7270</guid>
    </ThermalConductivity>
    <daml:Class rdf:ID="Confidence">
        <rdfs:label>certainties</rdfs:label>
        <rdfs:comment>The positive emotion felt when one is free  from
            doubt about an event or object from which the agent feeling
            #$Confidence expects positive contingencies.  For example,
            one might  say &apos;I feel confident that tomorrow it will
            not be rainy&apos;. Do not  confuse this with a personality
            disposition, e.g. &apos;Joe is a confident  person.&apos;
            (See #$PersonalityAttribute.)  This is a collection; for an
            explanation of a typical #$FeelingAttributeType, see
            #$Happiness.  More specialized #$FeelingAttributeTypes
            include #$Grief,  #$SelfConfidence, etc.</rdfs:comment>
        <guid>bd589c8b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#FeelingAttributeType"/>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </daml:Class>
    <daml:Class rdf:ID="Configuration">
        <rdfs:label>configurations</rdfs:label>
        <rdfs:comment>A specialization of #$StaticSituation.  Each
            instance of #$Configuration is a static situation involving
            two or more   #$PartiallyTangible things standing in some
            sort of spatial relationship(s).  For example, a #$Pile
            involves a bunch of things piled on top of each other,  a
            #$FlowerArrangement involves an arrangement of multiple
            #$CutFlowers, and   a #$KnotConfiguration might involve a
            particular intertwining of several   segments of a single
            #$CordlikeObject.  For configurations like the second
            example, which involve objects that are all of the same
            kind, see the   specialization #$ArrangementOfLikeObjects.
            For configurations like the   third example, which involve
            relationships between different parts of a   single salient
            object, see #$ConfigurationOfComplexObject.  Note that a
            static situation involving an #$Agent might be a
            configuration, but only so   long as it&apos;s just the
            agent&apos;s _spatial_ relationship(s) to other partially
            tangibles that matters (see e.g. #$WearingSomething); static
            situations in   which an agent&apos;s agency or sentience is
            crucial, on the other hand, are not   configurations (see
            e.g. #$AgentRelationship and #$InterAgentRelationship).</rdfs:comment>
        <guid>bd58ee23-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#StaticSituation"/>
    </daml:Class>
    <daml:Class rdf:ID="CongenitalCondition">
        <rdfs:label>congenital conditions</rdfs:label>
        <rdfs:comment>A collection of ailments.  An instance of
            #$CongenitalCondition is an #$AilmentCondition that is
            present in an afflicted organism from the time of gestation
            (i.e. before birth), whether or not it is a
            #$GeneticCondition.  Two example types of
            #$CongenitalCondition are congenital herpes and congenital
            heroin addiction.  A #$CongenitalCondition may be caused by
            behavior of the mother during pregnancy.  Birth defects
            (such as having an extra toe) are #$CongenitalConditions.
            Injuries sustained during the delivery itself are not
            #$CongenitalConditions.  Thus if forceps are used and the
            infant is scarred, brain-damaged or killed as a result, the
            situation is not an element of this collection.</rdfs:comment>
        <guid>c0fd5c28-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PhysiologicalConditionType"/>
        <rdfs:subClassOf rdf:resource="#PhysiologicalCondition"/>
    </daml:Class>
    <ThreeDimensionalShapeAttribute rdf:ID="Conical">
        <rdfs:label>conical</rdfs:label>
        <rdfs:comment>#$Conical is the instance of #$ShapeAttribute
            shared by all conical objects in virtue of their shape.</rdfs:comment>
        <guid>c150e5ed-9c29-11b1-9dad-c379636f7270</guid>
    </ThreeDimensionalShapeAttribute>
    <daml:Class rdf:ID="ConnectedPathSystem">
        <rdfs:label>connected path system</rdfs:label>
        <rdfs:comment>The collection of all connected #$PathSystems that
            are not in separate pieces.  For any different points X and
            Y in such a system SYS, there is a path PATH in SYS that
            both X and Y are on.  Another way to put this is that SYS is
            an instance of #$ConnectedPathSystem iff for any different
            points X and Y in SYS, there is a path PATH in SYS such that
            (#$pathBetweenInSystem PATH X Y SYS) holds.  Note that
            according to this definition, a connected path system does
            not have to contain a link--a path system containing a
            single node will be a connected path system.  If a connected
            path system contains a link, nevertheless, every two
            different points must be connected by a path. Note also that
            because of our treatment of path (see #$pathInSystem) and
            our restriction of points in SYS that are not nodes (see
            #$nodeInSystem), that there is a path between every two
            points in SYS is equivalent to that there is a path between
            every two nodes in Sys.</rdfs:comment>
        <guid>bd73edb5-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PathSystemType-Structural"/>
        <rdfs:subClassOf rdf:resource="#PathSystem"/>
    </daml:Class>
    <daml:Class rdf:ID="ConnectingTogether">
        <rdfs:label>links</rdfs:label>
        <rdfs:comment>A collection of events.  In a #$ConnectingTogether
            event, two or more tangible things get physically connected
            together (attached) by means of some sort of connector or
            fastener.  Some specializations of this include welding,
            buckling-up, using nailing, tying-up, etc.
            #$ConnectingTogether need not be a spec of
            #$Movement-TranslationEvent since two objects being
            connected may be already at rest with each other.</rdfs:comment>
        <guid>bd589c6d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#ActionOnObject"/>
    </daml:Class>
    <daml:Class rdf:ID="ConnectionPredicate">
        <rdfs:label>connection predicate</rdfs:label>
        <rdfs:comment>A collection of predicates.  Each element of
            #$ConnectionPredicate is a predicate that specifies physical
            connections between objects.  Examples: #$nailedTo,
            #$rivetedTo, #$connectedTo-Rigidly,
            #$rotationallyConnectedTo, #$hangsFrom, #$in-Embedded.</rdfs:comment>
        <guid>bd60da90-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdf:type rdf:resource="#RelationshipType"/>
        <rdfs:subClassOf rdf:resource="#CotemporalPredicate"/>
    </daml:Class>
    <daml:Class rdf:ID="Connector">
        <rdfs:label>clasps</rdfs:label>
        <rdfs:comment>A collection of physical devices.  An instance of
            #$Connector is a device which connects two objects.  A
            connector (or part of it) may be a part incorporated into
            one or both of the objects connected, or a connector may be
            a totally separate device.  Examples include elements of the
            collections #$ButtonTheFastener, #$Staple, #$Nail, and many more.</rdfs:comment>
        <guid>bd58b973-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#NonPoweredDevice"/>
    </daml:Class>
    <daml:Class rdf:ID="Constructing">
        <rdfs:label>construction events</rdfs:label>
        <rdfs:comment>A collection of events.  In each #$Constructing
            event, one or more #$ConstructionArtifacts, such as a house,
            are made or incrementally enlarged or remodeled.</rdfs:comment>
        <guid>bd58c896-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#MakingSomething"/>
        <rdfs:subClassOf rdf:resource="#Product"/>
        <rdfs:subClassOf rdf:resource="#ServiceEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="ConstructionArtifact">
        <rdfs:label>structures</rdfs:label>
        <rdfs:comment>A collection of artificial tangible objects.  Each
            element of #$ConstructionArtifact is a structure designed
            and built by humans.  This collection includes buildings and
            parts of buildings, as well as things like dams, railroad
            lines, and roads.  Examples: the #$RomanColiseum, the
            #$ArcDeTriomphe, #$HooverDam, the #$WorldTradeCenter,
            #$HollywoodBowl.  For further information, see
            #$FixedStructure, an important subset.</rdfs:comment>
        <guid>bd589da5-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#SolidTangibleProduct"/>
        <rdfs:subClassOf rdf:resource="#Artifact"/>
        <daml:disjointWith rdf:resource="#SomethingToWear"/>
    </daml:Class>
    <daml:Class rdf:ID="ConstructionCompany">
        <rdfs:label>construction companies</rdfs:label>
        <rdfs:comment>A collection of businesses. An element of
            #$ConstructionCompany is a business whose #$MainFunction is
            constructing or remodeling buildings, houses, dams, bridges,
            or other construction artifacts.</rdfs:comment>
        <guid>bd58f6d2-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#CommercialServiceOrganization"/>
        <rdfs:subClassOf rdf:resource="#Business"/>
    </daml:Class>
    <daml:Class rdf:ID="Consultant">
        <rdfs:label>consultants</rdfs:label>
        <rdfs:comment>A collection of persons; a subset of
            #$Professional.  Each element of #$Consultant works with
            some business in a consulting capacity.  Consultants can be
            self employed, or they can work for a consulting company.</rdfs:comment>
        <guid>c0fdc41c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#OccupationType"/>
        <rdfs:subClassOf rdf:resource="#BusinessPerson"/>
        <rdfs:subClassOf rdf:resource="#Professional"/>
    </daml:Class>
    <daml:Class rdf:ID="ConsumableProduct">
        <rdfs:label>consumable products</rdfs:label>
        <rdfs:comment>A collection of tangible stuff; a subset of
            #$TangibleProduct.  Each element of #$ConsumableProduct is a
            product of which any portion can be used only once.  A
            portion of a #$ConsumableProduct is `used up&apos;, i.e.,
            destroyed or transformed into an unusable or waste form,
            during normal use.  Note: `consumable&apos; here does not
            necessarily mean consumed by mouth; the consumption may be
            any use of the product.</rdfs:comment>
        <guid>bd58e656-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdf:type rdf:resource="#ProductType"/>
        <rdfs:subClassOf rdf:resource="#TangibleProduct"/>
    </daml:Class>
    <daml:Class rdf:ID="ConsumingFoodOrDrink">
        <rdfs:label>events in which food or drink is consumed</rdfs:label>
        <rdfs:comment>A collection of events.  Each element of
            #$ConsumingFoodOrDrink is an event in which a person or
            other animal ingests some portion of food or drink through
            its mouth.  This collection generically covers eating or
            drinking, by a single person, of a meal- or snack-sized
            portion of food.  For more detail, see the subsets
            #$EatingEvent and #$DrinkingEvent.  For eating or drinking
            with a social group, see #$HavingAMeal.  Note:
            #$ConsumingFoodOrDrink does NOT include intravenous infusion
            of nutrients or chewing of gum.</rdfs:comment>
        <guid>bd58cbb4-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#Ingesting"/>
    </daml:Class>
    <daml:Class rdf:ID="ContactLocation">
        <rdfs:label>contact locations</rdfs:label>
        <rdfs:comment>A collection of spatial objects.   Each element of
            #$ContactLocation is a point at which some particular agent
            (e.g., corporation or person) may be contacted by any of
            several means, for any of several purposes.
            #$ContactLocation includes any place to which one may direct
            one or more of the following: letters, packages, phone calls
            or voice messages, bills, email, faxes, pages, subpoenas.
            Contact locations must be particular--e.g., my house or my
            office or even my secretary, but not simply `Austin&apos;.</rdfs:comment>
        <guid>bd58d337-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ContactLocationType"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <daml:disjointWith rdf:resource="#StreetAddress"/>
        <daml:disjointWith rdf:resource="#Address-LocationDesignator"/>
        <daml:disjointWith rdf:resource="#State-Geopolitical"/>
        <daml:disjointWith rdf:resource="#PostalCode"/>
        <daml:disjointWith rdf:resource="#City"/>
    </daml:Class>
    <daml:Class rdf:ID="ContactLocationType">
        <rdfs:label>contact location type</rdfs:label>
        <rdfs:comment>A collection of collections.  Each element of
            #$ContactLocationType is a collection of places  at which a
            particular agent may be contacted; such collections may be
            characterized in several different ways: (a) by method of
            contact (e.g., #$VoicePhoneLocation, #$FaxLocation); (b) by
            purpose of contact (e.g., #$BillingLocation,
            #$ShippingLocation, #$EmergencyContact); (c) by the
            agent&apos;s relationship to those places (e.g.,
            #$HumanResidence, #$Workplace).  Note that particular places
            may fall under different subsets of #$ContactLocationType
            for different agents; for example, one person&apos;s home
            might be another&apos;s vacation location.</rdfs:comment>
        <guid>bd58d0a1-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#ExistingObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="ContainerProduct">
        <rdfs:label>container products</rdfs:label>
        <rdfs:comment>A collection of physical devices.  An instance of
            #$ContainerProduct is an object whose #$primaryFunction (or
            one of whose main functions) is to be a container.  Examples
            are of staggering variety, including storage containers for
            books, office records, food, clothing, tools, and materials;
            containers for transporting the same; passenger compartments
            of various kinds of vehicles; artificial constructs for
            housing humans and animals; etc., etc.  Instances of #$Crib,
            #$Sandbox, #$OfficeSpace, and #$Coffin.</rdfs:comment>
        <guid>bd58cd8e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#PhysicalDevice"/>
    </daml:Class>
    <daml:Class rdf:ID="Contempt">
        <rdfs:label>contempts</rdfs:label>
        <rdfs:comment>Emotion characterized by vehement condemnation of
            its object as being low, vile, feeble, or ignominious.  This
            is a #$Collection --- for an explanation of that, see
            #$Happiness.  Some more specialized #$FeelingAttributeTypes
            than #$Contempt are #$Hate, #$Abhorrence, etc. </rdfs:comment>
        <guid>bd58a597-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#FeelingAttributeType"/>
        <rdfs:subClassOf rdf:resource="#Dislike"/>
        <rdfs:subClassOf rdf:resource="#Disapproval"/>
    </daml:Class>
    <daml:Class rdf:ID="Continent">
        <rdfs:label>continents</rdfs:label>
        <rdfs:comment>A collection of topographical features.  The
            elements of #$Continent on the #$PlanetEarth are the six
            traditional main land masses on the surface of the earth
            (plus the two #$geographicalSubRegions of Eurasia, Europe
            and Asia).  Elements: #$ContinentOfAfrica,
            #$ContinentOfAntarctica, #$ContinentOfAsia,
            #$ContinentOfAustralia, #$ContinentOfEurasia,
            #$ContinentOfEurope, #$ContinentOfNorthAmerica,
            #$ContinentOfSouthAmerica.  Former elements of this
            collection include Pangaea and the two continents it broke
            up into Gondwanaland and Laurasia (all of which are
            instances of #$TrueContinent (q.v.)).</rdfs:comment>
        <guid>bd590bbb-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#LandTopographicalFeature"/>
    </daml:Class>
    <Continent rdf:ID="ContinentOfAfrica">
        <rdfs:label>Africa</rdfs:label>
        <rdfs:comment>The second largest continent, located north and
            south of the #$Equator in the #$EasternHemisphere-Region.
            Africa is connected to Asia by the narrow #$Isthmus of Suez;
            it includes #$Madagascar and other offshore islands.</rdfs:comment>
        <guid>bd58ed27-9c29-11b1-9dad-c379636f7270</guid>
    </Continent>
    <Entity rdf:ID="ContinentOfAsia">
        <rdfs:label>Asia</rdfs:label>
        <rdfs:comment>The world&apos;s largest continent, joined in the
            west with Europe (which may be considered a peninsula of
            Asia) to form the Eurasian land mass (#$ContinentOfEurasia).
            The #$ContinentOfAsia occupies much of the northern half of
            the #$EasternHemisphere-Region.</rdfs:comment>
        <guid>bd58ea12-9c29-11b1-9dad-c379636f7270</guid>
    </Entity>
    <Entity rdf:ID="ContinentOfEurope">
        <rdfs:label>Europe</rdfs:label>
        <rdfs:comment>The sixth largest continent; includes adjacent
            islands.  The #$ContinentOfEurope is separated from the
            #$ContinentOfAsia by the #$UralMountains.</rdfs:comment>
        <guid>bd58dd74-9c29-11b1-9dad-c379636f7270</guid>
    </Entity>
    <GeographicalRegion rdf:ID="ContinentOfNorthAmerica">
        <rdfs:label>North America</rdfs:label>
        <rdfs:comment>The continent in the northern and
            #$WesternHemisphere-Region. North America includes
            #$CentralAmerica as well as the #$WestIndies-Archipelago as #$geographicalSubRegions.</rdfs:comment>
        <guid>bd58f882-9c29-11b1-9dad-c379636f7270</guid>
    </GeographicalRegion>
    <GeographicalRegion rdf:ID="ContinentOfSouthAmerica">
        <rdfs:label>South America</rdfs:label>
        <rdfs:comment>The continent in the western and southern hemisphere.</rdfs:comment>
        <guid>bd59004b-9c29-11b1-9dad-c379636f7270</guid>
    </GeographicalRegion>
    <daml:Class rdf:ID="ContractNegotiation">
        <rdfs:label>contract negotiations</rdfs:label>
        <rdfs:comment>The collection of negotiations intended to lead to
            the formation of a contract between the participants (or the
            parties they represent in the negotiations).</rdfs:comment>
        <guid>bd5ad3ec-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
        <rdfs:subClassOf rdf:resource="#Negotiating"/>
    </daml:Class>
    <daml:Class rdf:ID="ControlDevice">
        <rdfs:label>control devices</rdfs:label>
        <rdfs:comment>A collection of physical devices.  An instance of
            #$ControlDevice is a device whose #$primaryFunction is to
            control the behavior/functioning/properties of another thing
            (usually another instance of #$PhysicalDevice).  Obvious
            instances of #$ControlDevice include: the remote control for
            your TV (an instance of #$RemoteControlDevice), the brake
            pedal on your car (an instance of #$Pedal-ControlDevice),
            the light switch on your bedroom wall (an instance of
            #$ElectricalSwitch); a less obvious instance of
            #$ControlDevice is #$HooverDam (an instance of #$Dam).</rdfs:comment>
        <guid>bd59097b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#PhysicalDevice"/>
    </daml:Class>
    <daml:Class rdf:ID="ControlledLand">
        <rdfs:label>controlled land</rdfs:label>
        <rdfs:comment>A collection of geopolitical entities.  Each
            element of #$ControlledLand is a geopolitical entity that is
            controlled to some extent by a foreign power.  Examples:
            #$PuertoRico, #$Bermuda, #$Guadeloupe-TheDependency, #$Tibet.</rdfs:comment>
        <guid>bd58a21e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#CountrySubsidiary"/>
    </daml:Class>
    <daml:Class rdf:ID="ControllingSomething">
        <rdfs:label>controlling events</rdfs:label>
        <rdfs:comment>A collection of events; a subset of
            #$PurposefulAction.  An instance of #$ControllingSomething
            is a purposeful action in which some #$Agent intentionally
            controls some object.  It is not necessary that the agent
            touch the #$objectControlled, only that s/he have an
            efficacious means of controlling its action -- thus,
            instances of #$ControllingSomething include all instances of
            #$GuidingAMovingObject (some of which involve a
            #$RemoteControlDevice).  Further subsets:
            #$HandlingAnObject, #$Braking, #$SteeringADeviceByHand,
            #$PlayingAMusicalInstrument, #$CuttingFabric,
            #$CarryingWhileLocomoting, #$FlushingAToilet, etc.  Whenever
            a #$ControlDevice (qv) is being used, for its primary
            function, presumably a #$ControllingSomething event is
            taking place.  Borderline examples include having a
            conversation by telephone, doing the dishes by hand, and
            having a cat as a pet.</rdfs:comment>
        <guid>bd588c1d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
    </daml:Class>
    <daml:Class rdf:ID="ConventionalClassificationSystem">
        <rdfs:label>conventional classification systems</rdfs:label>
        <rdfs:comment>The collection of all agreed-upon or conventional
            classification systems, each consisting of
            #$ConventionalClassificationTypes.  In such systems, a
            change or reclassification is possible by a decision of an
            authority, or by a changed social agreement, without
            changing the intrinsic facts about the actual objects in the
            category.  (This applies only to named or known
            classification systems or schemas, and not to everything
            under the sun as might be urged by some 1990&apos;s-era
            postmodernist deconstructionist literary criticism
            theorists.) #$ConventionalClassificationSystems would
            include biological taxonomies, standard classifications,
            data dictionaries, thesauri, cultural taboo systems,
            military doctrinal systems, calendar systems, etc.</rdfs:comment>
        <guid>c0d808c9-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#AbstractInformationalThing"/>
    </daml:Class>
    <daml:Class rdf:ID="ConventionalClassificationType">
        <rdfs:label>conventional classification type</rdfs:label>
        <rdfs:comment>The collection of all those collections that each
            correspond to a category in some agreed-upon or conventional
            classification system (a #$ConventionalClassificationSystem)
            used by people.  In such systems, a change or
            reclassification is possible by a decision of an authority,
            or by a changed social agreement or custom, without changing
            the intrinsic facts about the actual objects in the
            category.  (This applies only to named, known classification
            systems or schemas, and not to everything under the sun as
            might be urged by some 1990&apos;s-era postmodernist
            deconstructionist literary criticism theorists.)
            #$ConventionalClassificationType would include categories in
            biological taxonomy, standard classifications, data
            dictionaries, thesauri, cultural taboo classes, military
            doctrinal classes, named calendar intervals, etc.</rdfs:comment>
        <guid>bee6da31-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
    </daml:Class>
    <CurvatureOfSurface rdf:ID="Convex">
        <rdfs:label>bulge</rdfs:label>
        <rdfs:comment>A surface attribute meaning that the
            surface&apos;s overall shape is dominated by an outward
            bulge or mound, or consists of projecting corners between
            planes.  In most contexts, it may have relatively small
            subregions which are concave or flat, etc., so long as
            overall shape is convex.  Viewing something as convex
            assumes a perspective.  From the opposite perspective, on
            the `other side&apos;, a #$Convex surface would look #$Concave.</rdfs:comment>
        <guid>c0f2b67b-9c29-11b1-9dad-c379636f7270</guid>
    </CurvatureOfSurface>
    <daml:Class rdf:ID="ConvexTangibleObject">
        <rdfs:label>convex tangible object</rdfs:label>
        <rdfs:comment>The collection of all #$TangibleThings that are
            #$Convex, i.e. have no significant #$Concave surfaces,
            cavities or #$Crevices.  A #$ConvexTangibleObject occupies
            about the same space as its convex hull; see #$ConvexHullFn
            and #$ConvexHullSpaceFn.  A solid physical sphere or cube
            are #$ConvexTangibleObjects but a cup or doughnut cannot be.
            The size of allowable minor concavities depends on the context.</rdfs:comment>
        <guid>c0b9215a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <daml:disjointWith rdf:resource="#Path-Cyclic"/>
    </daml:Class>
    <daml:Class rdf:ID="Conveyance">
        <rdfs:label>conveyances</rdfs:label>
        <rdfs:comment>A collection of concrete physical objects. Each
            instance of #$Conveyance is intended for moving partially
            tangible things --- it could be a car, ship, plane, or other
            vehicle for transporting people; it could be a conveyor belt
            or a grocery bag for moving goods; it could be a gun, a bow,
            or a cannon for launching projectiles. See also
            #$TransportationDevice which are objects that actually move
            along with the thing they are transporting, and
            #$Conveyance-Stationary where the object doing the moving
            remains stationary. See #$Conveying-Generic,
            #$TransportationEvent and #$Conveying-Stationary for the
            different kinds of conveying events. Some positive
            exemplars: a gun, a car, a horse. A wire can be considered
            to be a #$Conveyance, in those microtheories were
            #$Electricity, #$Signals, etc. are considered to be things
            that move.</rdfs:comment>
        <guid>bd58d480-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#SolidTangibleThing"/>
        <daml:disjointWith rdf:resource="#InformationBearingThing"/>
    </daml:Class>
    <PreparationAttribute rdf:ID="Cooked">
        <rdfs:label>cooked</rdfs:label>
        <rdfs:comment>The attribute #$Cooked is a #$PreparationAttribute
            (q.v.), describing how a given item of #$Food has been
            prepared.  Food becomes #$Cooked as the result of an event
            of #$CookingFood.  Specialized forms of #$Cooked include
            #$Steamed, #$Baked, #$Microwaved and #$Grilled.</rdfs:comment>
        <guid>bd58f510-9c29-11b1-9dad-c379636f7270</guid>
    </PreparationAttribute>
    <daml:Class rdf:ID="CookingFood">
        <rdfs:label>cooking events</rdfs:label>
        <rdfs:comment>A collection of events.  Each element of
            #$CookingFood is an event in which some item of #$Food is
            prepared by heating it.  Typically, the foodstuff is heated
            until it reaches a certain temperature over some period of
            time, during which chemical and/or physical changes occur
            which are supposed to make the foodstuff healthier or
            tastier (or, in some cases, ethically acceptable).  A
            #$CookingFood event may last from a few minutes (e.g.,
            #$SteamingFood (vegetables), #$MakingToast) to several hours
            (e.g., #$RoastingFood).    Note:  #$SmokingFood is not a
            subset of #$CookingFood.  Food prepared by smoking (e.g.,
            smoked ham, bacon) is `cured&apos; by a chemical reaction
            with nitrates in the smoke, rather than being cooked by
            heat.  Cf. #$SmokingFood, #$SaltingFood.</rdfs:comment>
        <guid>bd58ad09-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#HeatingProcess"/>
    </daml:Class>
    <daml:Class rdf:ID="CoolingProcess">
        <rdfs:label>cooling process</rdfs:label>
        <rdfs:comment>#$CoolingProcess is a collection of events, and a
            subset of #$TemperatureChangingProcess.  During each
            #$CoolingProcess event, the temperature of the
            #$objectOfStateChange is decreased by removing heat from the object.</rdfs:comment>
        <guid>bd58f7dc-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#TemperatureChangingProcess"/>
    </daml:Class>
    <daml:Class rdf:ID="CordlikeObject">
        <rdfs:label>cords</rdfs:label>
        <rdfs:comment>Read #$cyclistNotes.  A generic long flexible
            skinny thing like string, electrical extension cords, rope, wicks.</rdfs:comment>
        <guid>bd58f581-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#StuffType"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Path-Simple"/>
        <rdfs:subClassOf rdf:resource="#Path-Customary"/>
    </daml:Class>
    <daml:Class rdf:ID="CoreConstant">
        <rdfs:label>core constant</rdfs:label>
        <rdfs:comment>The collection of constants that are required to
            be defined in order to support the implementation of CycL
            itself.  These constants are the minimal &apos;core&apos; of
            the Cyc knowledge base which must be assumed to be  defined
            in order for the inference engine to function.</rdfs:comment>
        <guid>c0dd1b7c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#CoreConstant"/>
    </daml:Class>
    <daml:Class rdf:ID="Corner-2d">
        <rdfs:label>two-dimensional corners</rdfs:label>
        <rdfs:comment>The collection of all regions wherein two linear
            edges of a two dimensional or sheet-shaped object (i.e.,
            considered in this context to be sheet shaped) meet to form
            an angle of substantially less than 180 degrees.  Polygons
            have at least three corners each.</rdfs:comment>
        <guid>c0fbbe43-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#RegionType"/>
        <rdfs:subClassOf rdf:resource="#Corner-2or3d"/>
    </daml:Class>
    <daml:Class rdf:ID="Corner-2or3d">
        <rdfs:label>corners</rdfs:label>
        <rdfs:comment>The collection of all regions centered around a
            point where two edges of a sheet-like object meet at an
            angle or where three or more surfaces (together with three
            or more solid edges dividing them) meet at one place forming
            a solid angle.  Includes 2-dimensional corners and 3
            dimensional corners.  Corners are either #$Convex or
            #$Concave with respect to some perspective.</rdfs:comment>
        <guid>c0fba90e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#RegionType"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
    </daml:Class>
    <daml:Class rdf:ID="Corner-3d">
        <rdfs:label>corner - 3d</rdfs:label>
        <rdfs:comment>The collection of all regions where three or more
            surfaces of an object (which is considered three dimensional
            in current context), and three or more #$EdgeOnObjects,
            meet.  This includes corners of boxes, the tops of pyramids,
            etc.  Each #$Corner-3d includes some solid angle of part of
            the object.</rdfs:comment>
        <guid>c0fba450-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#RegionType"/>
        <rdfs:subClassOf rdf:resource="#Corner-2or3d"/>
    </daml:Class>
    <daml:Class rdf:ID="CorporateOfficer">
        <rdfs:label>officers</rdfs:label>
        <rdfs:comment>A collection of people.  An instance of
            #$CorporateOfficer is a person who is recognized as an
            officer of a corporation, as officially recorded in the
            corporate records of that corporation.  Common types of
            #$CorporateOfficer include #$President-CorporateOfficer,
            #$VicePresident-CorporateOfficer, Secretary and Treasurer of
            a corporation.</rdfs:comment>
        <guid>c10aec18-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PositionType"/>
        <rdf:type rdf:resource="#OccupationType"/>
        <rdfs:subClassOf rdf:resource="#Administrator"/>
        <rdfs:subClassOf rdf:resource="#Leader"/>
    </daml:Class>
    <daml:Class rdf:ID="CorrosionResistance">
        <rdfs:label>corrosion resistance</rdfs:label>
        <rdfs:comment>A collection of attributes; a subset of
            #$PhysicalAttribute. Each element of #$CorrosionResistance
            represents a specific level of resistance to corrosion of
            some tangible object.  Degrees of #$CorrosionResistance may
            be represented using #$GenericValueFunctions.  Indicate a
            particular object&apos;s #$CorrosionResistance with the
            predicate #$resistanceToCorrosion.</rdfs:comment>
        <guid>be00bd14-9c29-11b1-9dad-c379636f7270</guid>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </daml:Class>
    <daml:Class rdf:ID="CostBreakdownSlot">
        <rdfs:label>cost breakdown slot</rdfs:label>
        <rdfs:comment>A collection of predicates.  Each element of
            #$CostBreakdownSlot is a binary predicate used to describe
            some pecuniary aspect of an instance of #$Buying.  The first
            argument to every #$CostBreakdownSlot is an element of
            #$Buying and the second argument is always an instance of
            #$Money.  Examples: #$moneyTransferred, #$discount,
            #$salesTax, #$salesCommission.</rdfs:comment>
        <guid>bd5896b1-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="http://www.daml.org/2001/03/daml+oil#Property"/>
    </daml:Class>
    <daml:Class rdf:ID="CotemporalObjectsSlot">
        <rdfs:label>cotemporal objects slot</rdfs:label>
        <rdfs:comment>#$CotemporalObjectsSlot is the collection of
            #$BinaryPredicates PRED such that whenever a formula without
            free variables (PRED ARG1 ARG2) is true at a moment in time,
            it will be the case that the moment belongs to the temporal
            extent of both ARG1 and ARG2 (i.e., that ARG1 and ARG2 are
            #$TemporalThings which temporally subsume the moment).  For
            example, #$owns is a #$CotemporalObjectsSlot.  So from the
            assertion (#$holdsIn (#$YearFn 1992) (#$owns Nick Spot)), we
            can conclude that Nick and Spot were alive throughout
            (temporally subsume) 1992.  In contrast, consider the
            predicate #$awareOf, which is not a #$CotemporalObjectsSlot.
            The assertion (#$holdsIn (#$YearFn 1992) (#$awareOf Fred
            #$GeorgeWashington)) doesn&apos;t justify the conclusion
            (#$temporallySubsumes #$GeorgeWashington (#$YearFn 1992)).
            In general (with the qualifications indicated below), a
            closed assertion (#$holdsIn TIME (PRED ARG1 ARG2)), with
            PRED a #$CotemporalObjectsSlot, licenses the conclusions
            (#$temporallySubsumes ARG1 TIME) and (#$temporallySubsumes
            ARG2 TIME).  And a closed assertion (#$holdsSometimeDuring
            TIME (PRED ARG1 ARG2)) licenses the conclusions
            (#$temporallyIntersects ARG1 TIME) and
            (#$temporallyIntersects ARG2 TIME).  Although what
            constitutes a moment can vary with context, for most
            microtheories explicit considerations of temporal
            granularity (in this sense) don&apos;t come into play.  In
            particular, in the case of most microtheories, one
            doesn&apos;t have to worry about the possibility of gaps in
            the fabric of time between moments.  (Such gaps would
            undermine the conclusions above about temporal subsumption.)
            Another qualification is that ARG1 and ARG2 are not
            #$TemporallyIndexicalFirstOrderTerms; in practice, they
            almost never are.  See also the generalization of
            #$CotemporalObjectsSlot, #$CotemporalPredicate, and the
            predicate #$contemporaryInArg.</rdfs:comment>
        <guid>bd58af35-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="#CotemporalPredicate"/>
        <rdfs:subClassOf rdf:resource="http://www.daml.org/2001/03/daml+oil#Property"/>
    </daml:Class>
    <daml:Class rdf:ID="CotemporalPredicate">
        <rdfs:label>cotemporal predicate</rdfs:label>
        <rdfs:comment>#$CotemporalPredicate is the collection of
            #$Predicates PRED such that whenever a formula (PRED ARG1
            ... ARGN) is true at a moment in time, it will be the case
            that the moment belongs to the temporal extent of each ARG
            among ARG1, ..., ARGN that is a #$TemporalThing (i.e., that
            each such ARG temporally subsumes the moment).  For example,
            #$owns is a #$CotemporalPredicate.  So from the assertion
            (#$holdsIn (#$YearFn 1992) (#$owns Nick Spot)), we can
            conclude (given that Nick and Spot are #$TemporalThings)
            that Nick and Spot were alive throughout (temporally
            subsume) 1992.  In contrast, consider the predicate
            #$awareOf, which is not a #$CotemporalPredicate.  The
            assertion (#$holdsIn (#$YearFn 1992) (#$awareOf Fred
            #$GeorgeWashington)) doesn&apos;t justify the conclusion
            (#$temporallySubsumes #$GeorgeWashington (#$YearFn 1992)).
            In general (with the qualifications indicated below), an
            assertion (#$holdsIn TIME (PRED ARG1 ... ARGN)), with PRED a
            #$CotemporalPredicate and ARG among ARG1, ..., ARGN a
            #$TemporalThing, licenses the conclusion
            (#$temporallySubsumes ARG TIME).  And an assertion
            (#$holdsSometimeDuring TIME (PRED ARG1 ... ARGN)) licenses
            the conclusion (#$temporallyIntersects ARG TIME).  Although
            what constitutes a moment can vary with context, for most
            microtheories explicit considerations of temporal
            granularity (in this sense) don&apos;t come into play.  In
            particular, in the case of most microtheories, one
            doesn&apos;t have to worry about the possibility of gaps in
            the fabric of time between moments.  (Such gaps would
            undermine the conclusion above about temporal subsumption.)
            Another qualification is that ARG is not a
            #$TemporallyIndexicalFirstOrderTerm; in practice, it almost
            never is.  In order to bar predicates that would otherwise
            trivially qualify as instances of #$CotemporalPredicate, the
            argument-type of at least one of the argument-places of a
            #$CotemporalPredicate PRED must be non-disjoint with
            #$TemporalThing (or, more generally, the intersection of the
            argument-types of at least one of the argument-places of
            PRED must be non-disjoint with #$TemporalThing).  See also
            the specialization of #$CotemporalPredicate,
            #$CotemporalObjectsSlot, and the predicate #$contemporaryInArg.</rdfs:comment>
        <guid>bd5981b7-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#RelationshipType"/>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
    </daml:Class>
    <daml:Class rdf:ID="CountNoun-Generic">
        <rdfs:label>count noun - generic</rdfs:label>
        <rdfs:comment>The collection of all mass nouns.  Mass nouns are
            syntactically singular, and often they denote stufflike
            things. Example: &apos;water&apos;. This collection also
            includes proper mass nouns like &apos;Pepsi&apos;, agentive
            mass nouns like &apos;moisturizer&apos;, etc.</rdfs:comment>
        <guid>c0e918e2-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#SpeechPart"/>
        <rdfs:subClassOf rdf:resource="#Noun"/>
    </daml:Class>
    <daml:Class rdf:ID="CounterfactualContext">
        <rdfs:label>counterfactual context</rdfs:label>
        <rdfs:comment>The collection of microtheories that are each
            assumed to include at least one counterfactual assertion: an
            assertion which is believed to be untrue in the real world.
            It may be, however, that there is no explicit counterfactual
            assertion in a given #$CounterfactualContext.  In
            particular, it is not required that there be any explicit
            contradiction of assertions in the #$genlMts of the
            #$CounterfactualContext.  But intuitively speaking, most
            adults would be reticent about trusting too strongly in a
            propositon whose only justification was in a
            #$CounterfactualContext.  All works of fiction relate events
            that transpire in counterfactual contexts.  Examples:
            #$WorldMythologyMt, #$PaddingtonBearStoriesMt, #$ChristmasMythologyMt.</rdfs:comment>
        <guid>bd58f4b8-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MicrotheoryType"/>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#Microtheory"/>
    </daml:Class>
    <daml:Class rdf:ID="Country">
        <rdfs:label>countries</rdfs:label>
        <rdfs:comment>A collection of geopolitical entities.  An element
            of #$Country is a nation-state having its own territory,
            population, and government, whether or not it is fully
            independent.  For example, #$Scotland is an element of
            #$Country, even though it is a part of the
            #$UnitedKingdomOfGreatBritainAndNorthernIreland.  Cf. #$IndependentCountry.</rdfs:comment>
        <guid>bd588879-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#GeopoliticalEntity"/>
        <daml:disjointWith rdf:resource="#InternationalOrganizationOfCountries"/>
    </daml:Class>
    <daml:Class rdf:ID="CountrySubsidiary">
        <rdfs:label>districts</rdfs:label>
        <rdfs:comment>A collection of geopolitical entities.  Each
            element of #$CountrySubsidiary is a political region that is
            a direct subsidiary of some country.  This collection
            includes states, provinces, territories, and some special
            districts such as Washington, D.C.  This class is somewhat
            artificial but is useful when representing addresses.</rdfs:comment>
        <guid>c0c0184c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#GeopoliticalEntity"/>
        <daml:disjointWith rdf:resource="#IndependentCountry"/>
    </daml:Class>
    <daml:Class rdf:ID="County">
        <rdfs:label>counties</rdfs:label>
        <rdfs:comment>A collection of geopolitical entities.  An element
            of #$County is a lesser geopolitical region, having an area
            typically larger than a #$City but smaller than a
            #$State-Geopolitical.  Traditionally, a #$County area was
            within one day&apos;s horseback ride from the County Seat.</rdfs:comment>
        <guid>bd58e498-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdf:type rdf:resource="#SpatiallyDisjointRegionType"/>
        <rdfs:subClassOf rdf:resource="#GeopoliticalEntity"/>
    </daml:Class>
    <daml:Class rdf:ID="CountyGovernment">
        <rdfs:label>county governments</rdfs:label>
        <rdfs:comment>The collection of all #$County governments.</rdfs:comment>
        <guid>bd67f8fe-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#RegionalGovernment"/>
    </daml:Class>
    <daml:Class rdf:ID="CourseDuringAMeal">
        <rdfs:label>course during a meal</rdfs:label>
        <rdfs:comment>A collection of events.  Each element of
            #$CourseDuringAMeal is an event in which one or more diners
            at a meal consume a single course.  Examples include the
            elements of #$AppetizerCourse, #$MainCourse, #$DessertCourse.</rdfs:comment>
        <guid>c1008170-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
    </daml:Class>
    <daml:Class rdf:ID="Court-Judicial">
        <rdfs:label>courts</rdfs:label>
        <rdfs:comment>A collection of organizations which are judicial
            agents.  An element of #$Court-Judicial is an established
            judicial court, i.e., an enduring governmental
            #$Organization whose #$primaryFunction is to settle disputes
            by means of legal reasoning by one or more #$Judges.
            Typically, a court&apos;s orders are enforced by some other
            agency belonging to the government of which that court is a
            part.  The collection #$Court-Judicial includes federal,
            state, county, and municipal courts, appellate and chancery
            courts, tax courts, courts of claims, courts-martial (if
            non-temporary), admiralty courts, courts of chivalry,
            American Indian tribal courts, and the Permanent Court of
            International Justice.  It excludes Gypsy/Rom Kris courts,
            nonjudicial administrative county courts, stannaries, and
            temporary #$Tribunals.</rdfs:comment>
        <guid>c08b79f4-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Organization"/>
    </daml:Class>
    <daml:Class rdf:ID="CourtesyTitle">
        <rdfs:label>courtesy title</rdfs:label>
        <rdfs:comment>The collection of #$Titles, such as  Mr., Ms.,
            Mrs., Miss, Dr., etc., which precede names in Anglo-American
            addressing custom.</rdfs:comment>
        <guid>bd58fa97-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#LinguisticObjectType"/>
        <rdfs:subClassOf rdf:resource="#Title"/>
    </daml:Class>
    <daml:Class rdf:ID="Cracking">
        <rdfs:label>cracking events</rdfs:label>
        <rdfs:comment>A collection of change events.  In each
            #$Cracking, something becomes cracked.  I.e., two or more
            areas of the thing are separated from one another (though
            perhaps not divided wholly into parts).  In order to undergo
            a #$Cracking, the #$objectOfStateChange must be in a #$SolidStateOfMatter.</rdfs:comment>
        <guid>bd58f8e2-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#IntrinsicStateChangeEvent"/>
        <rdfs:subClassOf rdf:resource="#SeparationEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="CreationEvent">
        <rdfs:label>creation events</rdfs:label>
        <rdfs:comment>A collection of events.  In each element of
            #$CreationEvent, at least one instance of #$Entity (the
            #$outputsCreated) is brought into existence.</rdfs:comment>
        <guid>bd58de89-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#CreationOrDestructionEvent"/>
        <rdfs:subClassOf rdf:resource="#Action"/>
    </daml:Class>
    <daml:Class rdf:ID="CreationOrDestructionEvent">
        <rdfs:label>creation or destruction events</rdfs:label>
        <rdfs:comment>A collection of events.  During each element of
            #$CreationOrDestructionEvent, one or more instances of
            #$Entity come into or go out of existence.  Elements of this
            collection are the sorts of events that have #$inputs,
            #$outputs, #$products, #$wasteProducts, and #$byProducts.
            Examples of #$CreationOrDestructionEvent would include a
            particular campfire (a #$CombustionProcess), manufacturing a
            particular car, etc.</rdfs:comment>
        <guid>bd675149-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="Credential">
        <rdfs:label>credentials</rdfs:label>
        <rdfs:comment>A collection of intangible objects which consist
            of propositional information about an agent.  #$Credential
            is a subset of #$PropositionalInformationThing (q.v.).  Each
            element of #$Credential is specific information about one
            agent, provided by another agent; the information content of
            a credential consists of favorable, enabling, or empowering
            propositional declarations.  As represented in Cyc,
            credentials are intangible information, but each element of
            #$Credential usually has some associated physical document
            (e.g., a diploma associated with a college degree, a
            driver&apos;s license).  A credential may certify that the
            holder (i.e., the subject of the credential) has a
            particular skill (e.g., legal bar certification, ability to
            drive); has completed certain training (e.g., GED schooling,
            Ph.D. requirements; is allowed to do a certain thing (e.g.,
            travel visa, permission slip); and so on.  Recommendations
            are considered a kind of credential.</rdfs:comment>
        <guid>bd58b0a1-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#TemporalThing"/>
        <rdfs:subClassOf rdf:resource="#AbstractInformationalThing"/>
        <rdfs:subClassOf rdf:resource="#PropositionalInformationThing"/>
    </daml:Class>
    <daml:Class rdf:ID="CreditCard">
        <rdfs:label>credit cards</rdfs:label>
        <rdfs:comment>A collection of plastic cards.  Each element of
            #$CreditCard is a piece of plastic that enables authorized
            users to spend the card-issuing company&apos;s money, drawn
            as a (usually unsecured) loan through an associated instance
            of #$CreditCardAccount under a pre-arranged credit
            agreement.  The credit card company credits the vendor of
            the purchased goods or services and bills the card user,
            usually with interest.</rdfs:comment>
        <guid>bd58ceea-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MoneyTenderType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Plastic"/>
        <rdfs:subClassOf rdf:resource="#IDDocument"/>
        <rdfs:subClassOf rdf:resource="#Card"/>
        <rdfs:subClassOf rdf:resource="#TenderObject"/>
        <rdfs:subClassOf rdf:resource="#FinancialAccountTenderObject"/>
    </daml:Class>
    <daml:Class rdf:ID="Crevice">
        <rdfs:label>crevices</rdfs:label>
        <rdfs:comment>The collection of all long, slender cavities or
            cracks or furrows in otherwise solid objects.  The width of
            a crevice is significantly less than its length.  The depth
            of a crevice is often greater than its width, and is never
            significantly less than its width.</rdfs:comment>
        <guid>c0fcdf4c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Cavity"/>
    </daml:Class>
    <daml:Class rdf:ID="Crevice-Topographical-Earth">
        <rdfs:label>crevice - topographical - earth</rdfs:label>
        <rdfs:comment>The collection of topographical features of the
            planet Earth characterized by long, slender cavities or
            cracks or furrows.  The width of a crevice is significantly
            less than its length.  The depth of a crevice is often
            greater than its width, and is never significantly less than
            its width.</rdfs:comment>
        <guid>bf4d23f7-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#LandTopographicalFeature"/>
    </daml:Class>
    <daml:Class rdf:ID="CrimeDetection">
        <rdfs:label>crime detection</rdfs:label>
        <rdfs:comment>This is the actual act of detecting a crime.</rdfs:comment>
        <guid>bd6857bf-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
    </daml:Class>
    <ThreeDimensionalShapeAttribute rdf:ID="CrucifixShaped">
        <rdfs:label>crucifix shaped</rdfs:label>
        <rdfs:comment>#$CrucifixShaped is the instance of
            #$ShapeAttribute shared by all three dimensional
            cross-shaped objects.</rdfs:comment>
        <guid>c0514749-9c29-11b1-9dad-c379636f7270</guid>
    </ThreeDimensionalShapeAttribute>
    <ThreeDimensionalShapeAttribute rdf:ID="Cubical">
        <rdfs:label>cubical</rdfs:label>
        <rdfs:comment>#$Cubical is the instance of #$ShapeAttribute
            shared by all three-dimensional objects for which each face
            it is the case that (#$shapeOfObject ?FACE #$SquareShaped).</rdfs:comment>
        <guid>c14b222b-9c29-11b1-9dad-c379636f7270</guid>
    </ThreeDimensionalShapeAttribute>
    <daml:Class rdf:ID="Currency">
        <rdfs:label>items of currency</rdfs:label>
        <rdfs:comment>A collection of physical objects.  An instance of
            #$Currency is a physical object generally accepted as legal
            tender (i.e., not checks or credit cards) and used as a
            means of transferring a quantity of #$Money between some
            elements of #$Agent.  Elements of #$Currency may be coins,
            items of precious metal, paper bills for which precious
            objects are payable by a government to the bearer on demand,
            or unbacked paper bills required by a government to be
            accepted for payment of debts.  Elements of #$Currency are
            typically backed by and issued by national governments.
            Note: This collection includes all instances of legal
            tender, worldwide and historically.  But, for better or
            worse, the notion of legal tender is context-dependent.
            Normally what counts as currency is relative to the country
            one is in; legal tender in the United States is not the same
            as legal tender in China.  (Though US dollars may have
            excellent value on the black market.)  What counts as legal
            tender depends on historical events as well, since a
            government may change, withdraw, or cancel some types of
            currency it previously authorized.  Also, conquest of one
            country by another usually brings about the collapse of the
            loser&apos;s currency.  A Confederate ten dollar bill, e.g.,
            is not an element of #$Currency in the context of twentieth
            century Alabama, even though it belongs to #$Currency in a
            different context.</rdfs:comment>
        <guid>bd58cc42-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdf:type rdf:resource="#MoneyTenderType"/>
        <rdfs:subClassOf rdf:resource="#TenderObject"/>
        <rdfs:subClassOf rdf:resource="#PortableObject"/>
    </daml:Class>
    <daml:Class rdf:ID="CurvatureOfSurface">
        <rdfs:label>curvature of surface</rdfs:label>
        <rdfs:comment>The collection of all surface curvature
            attributes.  These may apply to a particular piece of a
            surface of an object, or to the whole surface.  For
            real-world (non-mathematical) surfaces, there is ordinarily
            some tolerance for minor surface deviations that depends on
            the context.  Thus a &apos;flat&apos; surface may have
            relatively small bumps and crevices.</rdfs:comment>
        <guid>c0f2ab26-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#AttributeType"/>
        <rdfs:subClassOf rdf:resource="#ShapeAttribute"/>
    </daml:Class>
    <daml:Class rdf:ID="CustomarySystemOfLinks">
        <rdfs:label>customary system of links</rdfs:label>
        <rdfs:comment>The collection of all customary or conventional
            network systems consisting of interconnected links
            (instances of #$Path-Customary) and nodes of obvious types,
            where the elements of the system can be assumed without
            specifying them as sets.  Examples include pipe systems,
            road systems, vascular systems, wiring systems, mechanical
            linkages, etc.    The links of any #$CustomarySystemOfLinks
            are assumed to share characteristics, e.g. in a road system,
            pipes are not links nor are streetlights, road paint, or
            other non-roadways, just the roadways forming the network.
            Also, what constitutes a #$JunctionOfPaths or #$pathTerminus
            in the system should be obvious from the system type.   The
            links are related to the assumed system by
            #$linksOfCustomarySystem.  This is in contrast to
            #$PathSystem in which the sets of point, nodes, links, and
            loops (if any) have to be specified for the system.</rdfs:comment>
        <guid>c0ee5ac3-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#StaticSituation"/>
    </daml:Class>
    <daml:Class rdf:ID="CuttingDevice">
        <rdfs:label>cutting implements</rdfs:label>
        <rdfs:comment>A collection of devices.  An instance of
            #$CuttingDevice is a device whose #$primaryFunction is to
            (enable its user to) cut another object.  Subsets of
            #$CuttingDevice include the collections #$Razors,
            #$Scissors, #$LawnMowers,and more.</rdfs:comment>
        <guid>bd589153-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#PhysicalDevice"/>
    </daml:Class>
    <HumanCyclist rdf:ID="CycAdministrator">
        <rdfs:label>Cyc administrator</rdfs:label>
        <rdfs:comment>This constant is for use by Cyc administrators
            responsible for installation, setup and maintenance of Cyc images.</rdfs:comment>
        <guid>c0bf7a98-9c29-11b1-9dad-c379636f7270</guid>
    </HumanCyclist>
    <daml:Class rdf:ID="CycHLTruthValue">
        <rdfs:label>cyc h l truth value</rdfs:label>
        <rdfs:comment>The truth/strength combinations used in the Cyc HL
            implementation of #$CycLAssertions and arguments.</rdfs:comment>
        <guid>bd58f7f9-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#ComputationalObject"/>
    </daml:Class>
    <daml:Class rdf:ID="CycLAssertedAssertion">
        <rdfs:label>cyc l asserted assertion</rdfs:label>
        <rdfs:comment>The subcollection of semantically well-formed
            #$CycLAssertions which are supported by at least one belief
            argument, meaning that the assertion was explicitly asserted
            to Cyc, as opposed to having been deduced by Cyc&apos;s
            inference engine.  An assertion can have more than one
            argument, and can therefore be both a
            #$CycLAssertedAssertion and a #$CycLDeducedAssertion.</rdfs:comment>
        <guid>bed06ab6-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CycLAssertion"/>
    </daml:Class>
    <daml:Class rdf:ID="CycLAssertion">
        <rdfs:label>CycL assertions</rdfs:label>
        <rdfs:comment>A collection of semantically well-formed
            #$CycLSentences which express some proposition in the Cyc
            Knowledge Base.  Each instance of #$CycLAssertion is either
            (1) an #$HLAssertion: an assertion reified in the Cyc
            Knowledge Base (i.e., a formula and its associated
            datastructure, actually in the Cyc KB), or (2) an
            #$ELAssertion: an Epistemological Level #$CycLSentence that
            can be canonicalized into one or more already extant
            #$HLAssertions. #$CycLAssertion is used as an argument type
            for meta-predicates such as #$overrides.</rdfs:comment>
        <guid>bd5dbcd4-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#ComputationalObject"/>
        <rdfs:subClassOf rdf:resource="#CycLIndexedTerm"/>
        <rdfs:subClassOf rdf:resource="#AbstractInformationalThing"/>
        <rdfs:subClassOf rdf:resource="#CycLPropositionalSentence"/>
        <daml:disjointWith rdf:resource="#Relation"/>
        <daml:disjointWith rdf:resource="#HLReifiedDenotationalTerm"/>
    </daml:Class>
    <daml:Class rdf:ID="CycLAssertionDirection">
        <rdfs:label>cyc l assertion direction</rdfs:label>
        <rdfs:comment>The set of possible directions for Cyc
            #$CycLAssertions; the direction indicates how the
            #$CycLAssertion will be propagated during inference.</rdfs:comment>
        <guid>bd58e1fc-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#LinguisticObjectType"/>
        <rdf:type rdf:resource="#UnorderedAttributeType"/>
        <rdf:type rdf:resource="#SiblingDisjointAttributeType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#AttributeValue"/>
        <rdfs:subClassOf rdf:resource="#ComputationalObject"/>
    </daml:Class>
    <daml:Class rdf:ID="CycLAtomicAssertion">
        <rdfs:label>cyc l atomic assertion</rdfs:label>
        <rdfs:comment>The subcollection of #$CycLAssertions which have a
            #$Predicate as their operator. Excludes assertions with
            logical operators in the arg0 position.</rdfs:comment>
        <guid>bfd86bf1-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CycLAssertion"/>
        <rdfs:subClassOf rdf:resource="#CycLAtomicSentence"/>
    </daml:Class>
    <daml:Class rdf:ID="CycLAtomicSentence">
        <rdfs:label>cyc l atomic sentence</rdfs:label>
        <rdfs:comment>The collection of syntactically well-formed atomic
            sentences, also called &apos;atomic logical formulas&apos;,
            in the CycL language.  Each instance of #$CycLAtomicSentence
            involves the application of a #$Predicate to some arguments.</rdfs:comment>
        <guid>c130750e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdf:type rdf:resource="#LinguisticObjectType"/>
        <rdfs:subClassOf rdf:resource="#CycLSentence"/>
    </daml:Class>
    <daml:Class rdf:ID="CycLAtomicTerm">
        <rdfs:label>cyc l atomic term</rdfs:label>
        <rdfs:comment>The collection of all atomic denotational terms in
            the CycL language. All such terms may denote something in
            the universe of discourse if semantically meaningful and
            fully bound (variables are #$CycLAtomicTerms). They are also
            atomic, meaning that they cannot be broken down via the CycL
            syntax.  The string  aabaab  is a #$CycLAtomicTerm even
            though it can be broken down into substrings, just as 212 is
            a #$CycLAtomicTerm even though it can be broken down into
            digits.  This notion of atomicity is only with respect to
            the CycL grammar, and digits and substrings are not part of
            the CycL grammar.</rdfs:comment>
        <guid>be1d78c8-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CycLExpression"/>
        <rdfs:subClassOf rdf:resource="#CycLTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLDenotationalTerm"/>
    </daml:Class>
    <daml:Class rdf:ID="CycLClosedAtomicSentence">
        <rdfs:label>cyc l closed atomic sentence</rdfs:label>
        <rdfs:comment>The collection of syntactically well-formed atomic
            sentences in the CycL language which have no free variables.
            Each instance of #$CycLClosedAtomicSentence involves the
            application of a #$Predicate to some arguments.</rdfs:comment>
        <guid>bdcc8689-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CycLClosedSentence"/>
        <rdfs:subClassOf rdf:resource="#CycLAtomicSentence"/>
    </daml:Class>
    <daml:Class rdf:ID="CycLClosedAtomicTerm">
        <rdfs:label>cyc l closed atomic term</rdfs:label>
        <rdfs:comment>The collection of all atomic closed denotational
            terms in the CycL language. All such terms may denote
            something in the universe of discourse if semantically
            meaningful.  They are also atomic, meaning that they cannot
            be broken down via the CycL syntax.  The string  aabaab  is
            a #$CycLClosedAtomicTerm even though it can be broken down
            into substrings, just as 212 is a #$CycLClosedAtomicTerm
            even though it can be broken down into digits.  This notion
            of atomicity is only with respect to the CycL grammar, and
            digits and substrings are not part of the CycL grammar.</rdfs:comment>
        <guid>bda21728-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CycLClosedDenotationalTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLAtomicTerm"/>
    </daml:Class>
    <daml:Class rdf:ID="CycLClosedDenotationalTerm">
        <rdfs:label>cyc l closed denotational term</rdfs:label>
        <rdfs:comment>The collection of all CycL expressions which may
            denote something in the universe of discourse.
            #$CycLSentences are not considered part of the universe of
            discourse in this way. Not all closed denotational terms
            pick out something in the universe of discourse;
            counterexamples are (#$BorderBetweenFn #$Canada #$Mexico)
            and (#$JuvenileFn #$isa #$genls #$JuvenileFn). Other
            examples of closed denotational terms include #$Muffet,
            (#$JuvenileFn #$Dog), (#$TheSetOf ?X (#$objectHasColor ?X
            GreenColor)), and 212.</rdfs:comment>
        <guid>c04da45a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CycLClosedExpression"/>
        <rdfs:subClassOf rdf:resource="#CycLDenotationalTerm"/>
    </daml:Class>
    <daml:Class rdf:ID="CycLClosedExpression">
        <rdfs:label>cyc l closed expression</rdfs:label>
        <rdfs:comment>The collection of CycL expressions which have no
            free variables.</rdfs:comment>
        <guid>c03209e1-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CycLExpression"/>
        <rdfs:subClassOf rdf:resource="#CycLTerm"/>
        <daml:disjointWith rdf:resource="#CycLOpenExpression"/>
    </daml:Class>
    <daml:Class rdf:ID="CycLClosedFormula">
        <rdfs:label>cyc l closed formula</rdfs:label>
        <rdfs:comment>The subcollection of #$CycLFormulas which have no
            free variables.</rdfs:comment>
        <guid>c017ff79-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CycLClosedExpression"/>
        <rdfs:subClassOf rdf:resource="#CycLFormula"/>
    </daml:Class>
    <daml:Class rdf:ID="CycLClosedNonAtomicTerm">
        <rdfs:label>cyc l closed non atomic term</rdfs:label>
        <rdfs:comment>The subcollection of denotational
            #$CycLNonAtomicTerms which have no free variables.
            Examples: (#$JuvenileFn #$Platypus), (#$JuvenileFn #$isa
            #$genls), (#$TheSetOf ?X (#$objectHasColor ?X
            #$GreenColor)).  Counterexamples: (#$JuvenileFn ?X).</rdfs:comment>
        <guid>c0cc2458-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CycLNonAtomicTerm-ClosedFunctor"/>
        <rdfs:subClassOf rdf:resource="#CycLNonAtomicTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLClosedDenotationalTerm"/>
    </daml:Class>
    <daml:Class rdf:ID="CycLClosedSentence">
        <rdfs:label>cyc l closed sentence</rdfs:label>
        <rdfs:comment>The subcollection of #$CycLSentences which have no
            free variables. Implicitly universally quantified sentences
            are not instances of #$CycLClosedSentence.</rdfs:comment>
        <guid>be27a8ec-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CycLSentence"/>
        <rdfs:subClassOf rdf:resource="#CycLClosedExpression"/>
        <rdfs:subClassOf rdf:resource="#CycLSentence-ClosedPredicate"/>
    </daml:Class>
    <daml:Class rdf:ID="CycLConstant">
        <rdfs:label>ART</rdfs:label>
        <rdfs:comment>#$CycLConstant is the collection of all CycL named
            constants  used to denote terms. Colloquially, CycL
            constants are those atomic  terms which are prefixed by
            &apos;#$&apos; in their printed representation. For
            example, #$Dog is an instance of #$CycLConstant while other
            terms like  (#$GovernmentFn #$France) and the number 42 are not.</rdfs:comment>
        <guid>bf3491c4-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#HLIndexedTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLIndexedTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLAtomicTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLReifiableDenotationalTerm"/>
        <rdfs:subClassOf rdf:resource="#HLReifiedDenotationalTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLRepresentedAtomicTerm"/>
        <rdfs:subClassOf rdf:resource="#ELExpression"/>
        <rdfs:subClassOf rdf:resource="#CycLClosedAtomicTerm"/>
        <rdfs:subClassOf rdf:resource="#HLExpression"/>
        <daml:disjointWith rdf:resource="#HLNonAtomicReifiedTerm"/>
    </daml:Class>
    <daml:Class rdf:ID="CycLDeducedAssertion">
        <rdfs:label>cyc l deduced assertion</rdfs:label>
        <rdfs:comment>The subcollection of semantically well-formed
            #$CycLAssertions which are supported by at least one
            argument which is a dedction by Cyc&apos;s inference engine,
            as opposed to having been explicitly asserted to Cyc. An
            assertion can have more than one argument, and can therefore
            be both a #$CycLAssertedAssertion and a #$CycLDeducedAssertion.</rdfs:comment>
        <guid>beff1a9a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CycLAssertion"/>
    </daml:Class>
    <daml:Class rdf:ID="CycLDenotationalTerm">
        <rdfs:label>cyc l denotational term</rdfs:label>
        <rdfs:comment>The collection of all CycL expressions which may
            denote something in the universe of discourse if they are
            meaningful and closed (having no free variables). Semantic
            well-formedness is not a requirement; (#$JuvenileFn #$isa ?X
            #$genls #$JuvenileFn) is a denotational term. However, if a
            #$CycLFormula, semantic properties of the arg0 may determine
            its membership in this collection.  e.g. (#$JuvenileFn
            #$Dog) is a denotational term, but (#$Dog #$JuvenileFn) is
            not. Other examples of denotational terms include #$Muffet,
            ?X, (#$JuvenileFn ?X), (#$TheSetOf ?X (#$objectHasColor ?X
            GreenColor)), and 212.</rdfs:comment>
        <guid>bd9733c2-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CycLTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLExpression"/>
    </daml:Class>
    <daml:Class rdf:ID="CycLExpression">
        <rdfs:label>cyc l expression</rdfs:label>
        <rdfs:comment>The collection of all syntactically well-formed
            expressions in the CycL language.  This includes formulas,
            sentences, denotational terms, etc.</rdfs:comment>
        <guid>be90c21d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#CycLTerm"/>
        <daml:sameClassAs rdf:resource="#CycLTerm"/>
    </daml:Class>
    <daml:Class rdf:ID="CycLExpression-Askable">
        <rdfs:label>cyc l expression - askable</rdfs:label>
        <rdfs:comment>The subcollection of syntactically well-formed
            #$CycLExpressions  which obey arity constraints, but but do
            not necessarily obey other  semantic constraints (e.g.
            argument type constraints).   The name &apos;Askable&apos;
            derives from #$CycLSentence-Askable, but instances  of
            #$CycLExpression-Askable are not necessarily askable as a
            query unless they  are also instances of
            #$CycLSentence-Askable.  See #$CycLQuery for more details.</rdfs:comment>
        <guid>bd601781-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CycLExpression"/>
    </daml:Class>
    <daml:Class rdf:ID="CycLExpression-Assertible">
        <rdfs:label>cyc l expression - assertible</rdfs:label>
        <rdfs:comment>The subcollection of syntactically and
            semantically well-formed #$CycLExpressions.  The name
            &apos;Assertible&apos; derives from
            #$CycLSentence-Assertible, but instances  of
            #$CycLExpression-Assertible are not necessarily assertible
            into the KB unless they  are also instances of #$CycLSentence-Assertible.</rdfs:comment>
        <guid>c091e184-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CycLExpression-Askable"/>
    </daml:Class>
    <daml:Class rdf:ID="CycLFormula">
        <rdfs:label>cyc l formula</rdfs:label>
        <rdfs:comment>The collection of CycL expressions which  involve
            the application of a relation to some arguments; e.g.,
            (#$isa #$Muffet #$Poodle) and (#$BirthFn #$Muffet) are both
            instances of #$CycLFormula.  Two important specs of
            #$CycLFormula are #$CycLNonAtomicTerms, also called
            &apos;denotational formulas&apos;, and #$CycLSentences, also
            called &apos;logical formulas&apos;.  Note that this notion
            of a CycL formula may differ from standard definitions of
            &apos;formula&apos; in formal logic, which define a formula
            as either any string of symbols, or a syntactically
            well-formed string of symbols.  A CycL formula is a relation
            applied to some arguments.</rdfs:comment>
        <guid>c03ec3ba-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdf:type rdf:resource="#LinguisticObjectType"/>
        <rdfs:subClassOf rdf:resource="#CycLExpression"/>
        <rdfs:subClassOf rdf:resource="#CycLTerm"/>
    </daml:Class>
    <daml:Class rdf:ID="CycLGAFAssertion">
        <rdfs:label>cyc l g a f assertion</rdfs:label>
        <rdfs:comment>The subcollection of semantically well-formed
            atomic #$CycLAssertions which have no free variables. GAF
            stands for Ground Atomic Formula. Atomic Formula (or, more
            specifically, atomic sentence) means a #$Predicate applied
            to some arguments. Ground means no variables.  GAF
            Assertions are ground at the HL (no HL variables) and closed
            at the EL (no free EL variables).  For example, (#$isa
            (#$TheSetOf ?X (#$colorOfObject ?X #$GreenColor)) #$Thing)
            is ground at the HL and closed (but not ground) at the EL.
            GAF assertions typically express facts about the world.</rdfs:comment>
        <guid>c0f63e9a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CycLAssertion"/>
        <rdfs:subClassOf rdf:resource="#CycLClosedAtomicSentence"/>
        <rdfs:subClassOf rdf:resource="#CycLAtomicAssertion"/>
        <daml:disjointWith rdf:resource="#CycLRuleAssertion"/>
    </daml:Class>
    <daml:Class rdf:ID="CycLGenericRelationFormula">
        <rdfs:label>cyc l generic relation formula</rdfs:label>
        <rdfs:comment>The subcollection of #$CycLFormulas  which have a
            #$Relation in their arg0 position  which is not known to be
            either a function, predicate, or logical operator.
            Examples: (?RELATION #$Dog #$Cat), ((RelationDenotingFn
            #$Muffet) #$Dog).</rdfs:comment>
        <guid>be2eb4e1-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#ELFormula"/>
        <rdfs:subClassOf rdf:resource="#CycLFormula"/>
    </daml:Class>
    <daml:Class rdf:ID="CycLIndexedTerm">
        <rdfs:label>cyc l indexed term</rdfs:label>
        <rdfs:comment>Elements of #$CycLIndexedTerm are objects that are
            indexed in the Cyc kb (i.e., forts and assertions).</rdfs:comment>
        <guid>bd84623c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#CycLClosedExpression"/>
    </daml:Class>
    <daml:Class rdf:ID="CycLNonAtomicReifiedTerm">
        <rdfs:label>NART</rdfs:label>
        <rdfs:comment>The subcollection of #$CycLReifiableNonAtomicTerms
            that are reified in the KB. Example: (#$JuvenileFn #$Dog).
            Counterexample: (#$JuvenileFn #$Platypus), because that term
            is not currently reified in the KB.  These are often called
            NARTs, which stands for &apos;non-atomic reified term&apos;.</rdfs:comment>
        <guid>c0c6b0d2-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CycLReifiedDenotationalTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLReifiableNonAtomicTerm"/>
    </daml:Class>
    <daml:Class rdf:ID="CycLNonAtomicTerm">
        <rdfs:label>NAT</rdfs:label>
        <rdfs:comment>The collection of non-atomic denotational terms in
            the CycL language.  Also called &apos;denotational
            formulas&apos;. A non-atomic term, or &apos;NAT&apos;, is a
            term which is neither a variable nor a constant. NATs are
            terms formed by applying a function to its (zero or more)
            arguments. Like constants, each NAT denotes some thing in
            the universe of discourse.  Currently, there are two main
            kinds of NAT: #$HLNonAtomicReifiedTerms, or
            &apos;NARTs&apos;, which are a type of
            #$HLReifiedDenotationalTerm, and are implemented with data
            structures that have indexing allowing all uses of the NAT
            to be retrieved; and #$ELNonAtomicTerms, or
            &apos;NAUTs&apos;, which have no such indexing and remain in
            the form of an EL expression in the formulas in which they occur.</rdfs:comment>
        <guid>bf1f951d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CycLDenotationalTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLFormula"/>
        <rdfs:subClassOf rdf:resource="#CycLRepresentedTerm"/>
    </daml:Class>
    <daml:Class rdf:ID="CycLNonAtomicTerm-Askable">
        <rdfs:label>cyc l non atomic term - askable</rdfs:label>
        <rdfs:comment>The subcollection of syntactically well-formed
            #$CycLNonAtomicTerms  which obey arity constraints, but but
            do not necessarily obey other  semantic constraints (e.g.
            argument type constraints).   These terms &apos;make enough
            sense&apos; to be a term in a #$CycLQuery.  Denotational
            terms are  not askable themselves.  Each instance of this
            collection involves a #$Function-Denotational applied to
            some number of arguments, as permitted  by the arity of the
            relation.  #$CycLNonAtomicTerms are also called
            &apos;denotational formulas&apos;,  to be distinguished from
            &apos;logical formulas&apos;, also known as #$CycLSentences.
            Note that an instance of #$CycLNonAtomicTerm-Askable does
            not mean that the  term must be used in a query; only that
            it can be used in a query. See #$CycLQuery for more details.</rdfs:comment>
        <guid>bdda1e3f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CycLNonAtomicTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLExpression-Askable"/>
    </daml:Class>
    <daml:Class rdf:ID="CycLNonAtomicTerm-Assertible">
        <rdfs:label>cyc l non atomic term - assertible</rdfs:label>
        <rdfs:comment>The collection of syntactically and semantically
            well-formed #$CycLNonAtomicTerms.  These non-atomic terms
            meet the criteria necessary to be part of an assertion in
            the Cyc KB.  They are not assertible themselves.  For a
            thorough discussion of what constitutes a  well-formed CycL
            formula, see the Cyc documentation.  Each instance of
            #$CycLNonAtomicTerm-Assertible involves a
            #$Function-Denotational applied to some arguments.  Note
            that a semantically well-formed #$CycLQuery may contain
            instances  of #$CycLNonAtomicTerm-Assertible; just because a
            nat is &apos;assertible&apos; does not require it to be
            used in an assertion.  See #$CycLPropositionalSentence for
            more details.</rdfs:comment>
        <guid>be2e0d29-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CycLNonAtomicTerm-Askable"/>
        <rdfs:subClassOf rdf:resource="#CycLExpression-Assertible"/>
    </daml:Class>
    <daml:Class rdf:ID="CycLNonAtomicTerm-ClosedFunctor">
        <rdfs:label>cyc l non atomic term - closed functor</rdfs:label>
        <rdfs:comment>The subcollection of denotational
            #$CycLNonAtomicTerms which have no free variable in the arg0
            position.  Examples: (#$JuvenileFn #$Platypus),
            (#$JuvenileFn #$isa #$genls), (#$TheSetOf ?X (#$colorOfType
            ?X #$GreenColor)), (#$JuvenileFn ?X).  Counterexample:
            (?SOMEFN #$Gold).</rdfs:comment>
        <guid>bf26025d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CycLNonAtomicTerm"/>
        <daml:disjointWith rdf:resource="#CycLSentence-ClosedPredicate"/>
    </daml:Class>
    <daml:Class rdf:ID="CycLOpenDenotationalTerm">
        <rdfs:label>cyc l open denotational term</rdfs:label>
        <rdfs:comment>The collection of all CycL expressions which have
            at least one free variable, and which might denote something
            in the universe of discourse if their variable(s) were
            bound. #$CycLSentences are not considered part of the
            universe of discourse in this way. Examples include ?X,
            (#$JuvenileFn ?X), and (#$JuvenileFn #$isa ?X #$genls
            #$JuvenileFn), even though the latter is semantically ill-formed.</rdfs:comment>
        <guid>c0d211d2-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CycLOpenExpression"/>
        <rdfs:subClassOf rdf:resource="#CycLDenotationalTerm"/>
    </daml:Class>
    <daml:Class rdf:ID="CycLOpenExpression">
        <rdfs:label>cyc l open expression</rdfs:label>
        <rdfs:comment>The collection of CycL expressions which have free variables.</rdfs:comment>
        <guid>bfab7ef3-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CycLExpression"/>
        <rdfs:subClassOf rdf:resource="#CycLTerm"/>
        <daml:disjointWith rdf:resource="#CycLClosedExpression"/>
    </daml:Class>
    <daml:Class rdf:ID="CycLOpenFormula">
        <rdfs:label>cyc l open formula</rdfs:label>
        <rdfs:comment>The subcollection of #$CycLFormulas which have
            free variables.</rdfs:comment>
        <guid>be0a552b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CycLOpenExpression"/>
        <rdfs:subClassOf rdf:resource="#CycLFormula"/>
    </daml:Class>
    <daml:Class rdf:ID="CycLOpenNonAtomicTerm">
        <rdfs:label>cyc l open non atomic term</rdfs:label>
        <rdfs:comment>The subcollection of denotational
            #$CycLNonAtomicTerms which have free variables.  Examples:
            (#$JuvenileFn ?X), (#$JuvenileFn ?X ?Y ?Z).  Counterexample:
            (#$TheSetOf ?X (#$objectHasColor ?X #$GreenColor)).</rdfs:comment>
        <guid>c010ce47-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CycLNonAtomicTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLOpenDenotationalTerm"/>
    </daml:Class>
    <daml:Class rdf:ID="CycLOpenSentence">
        <rdfs:label>cyc l open sentence</rdfs:label>
        <rdfs:comment>The subcollection of #$CycLSentences which have
            free variables. This only takes into account explicit
            closure; if a sentence is implicitly universally quantified,
            it is still an instance of #$CycLOpenSentence.</rdfs:comment>
        <guid>be00bf6e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CycLSentence"/>
        <rdfs:subClassOf rdf:resource="#CycLOpenExpression"/>
    </daml:Class>
    <daml:Class rdf:ID="CycLPropositionalSentence">
        <rdfs:label>cyc l propositional sentence</rdfs:label>
        <rdfs:comment>The collection of semantically well-formed CycL
            sentences that express propositions.  Any seemingly free
            variables in such sentences are implicitly universally
            quantified at the outermost level.</rdfs:comment>
        <guid>c05a7c46-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CycLClosedSentence"/>
        <rdfs:subClassOf rdf:resource="#CycLSentence-Assertible"/>
    </daml:Class>
    <daml:Class rdf:ID="CycLQuery">
        <rdfs:label>cyc l query</rdfs:label>
        <rdfs:comment>The collection of all well-formed CycL queries.
            Example: (#$and (#$isa ?X #$Cat) (#$isa ?X #$Dog)). Weaker
            well-formedness constraints are imposed on CycL queries than
            on assertions (see #$CycLSentence-Assertible).  CycL queries
            are syntactically well-formed CycL sentences, also
            well-formed with respect to arity, which express a query in
            CycL.  Free variables are not implicitly universally
            quantified; they are interpreted as variables for which
            bindings are sought.</rdfs:comment>
        <guid>c0d57acd-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdf:type rdf:resource="#LinguisticObjectType"/>
        <rdfs:subClassOf rdf:resource="#CycLSentence"/>
        <rdfs:subClassOf rdf:resource="#CycLSentence-Askable"/>
        <rdfs:subClassOf rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
        <rdfs:subClassOf rdf:resource="#LinguisticObject"/>
    </daml:Class>
    <daml:Class rdf:ID="CycLReformulationRulePredicate">
        <rdfs:label>cyc l reformulation rule predicate</rdfs:label>
        <rdfs:comment>The collection of #$Predicates which may appear as
            the operator in a #$CycLReformulationRule.</rdfs:comment>
        <guid>c129e5bc-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
    </daml:Class>
    <daml:Class rdf:ID="CycLReifiableDenotationalTerm">
        <rdfs:label>cyc l reifiable denotational term</rdfs:label>
        <rdfs:comment>A collection of Cyc terms. All #$CycLConstants are
            elements of #$CycLReifiableDenotationalTerm, as is any NAT
            (#$CycLNonAtomicTerm, see #$Function-Denotational) whose
            functor is an instance of #$ReifiableFunction. E.g., since
            #$GovernmentFn is an instance of #$ReifiableFunction, it is
            true that (#$GovernmentFn #$France) is a
            #$CycLReifiableDenotationalTerm.  (#$JuvenileFn #$Platypus)
            is a #$CycLReifiableDenotationalTerm; it is not in the KB
            but is reifiable. #$CycLVariables are not considered reified
            or reifiable terms. These terms may denote something in the
            universe of discourse if they are semantically meaningful.
            e.g. (#$BorderBetweenFn #$Canada #$Mexico) is a
            #$CycLReifiableDenotationalTerm even though it does not
            denote anything in the universe of discourse.</rdfs:comment>
        <guid>bd63a0ce-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CycLClosedExpression"/>
        <rdfs:subClassOf rdf:resource="#CycLClosedDenotationalTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLIndexedTerm"/>
    </daml:Class>
    <daml:Class rdf:ID="CycLReifiableNonAtomicTerm">
        <rdfs:label>cyc l reifiable non atomic term</rdfs:label>
        <rdfs:comment>A collection of Cyc terms that are NATs
            (#$CycLNonAtomicTerms; see #$Function-Denotational) whose
            functor is an instance of #$ReifiableFunction. E.g., since
            #$GovernmentFn is an instance of #$ReifiableFunction, it is
            true that (#$GovernmentFn #$France) is a #$CycLReifiableNonAtomicTerm.</rdfs:comment>
        <guid>be760011-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CycLNonAtomicTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLIndexedTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLReifiableDenotationalTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLClosedNonAtomicTerm"/>
    </daml:Class>
    <daml:Class rdf:ID="CycLReifiedDenotationalTerm">
        <rdfs:label>forts</rdfs:label>
        <rdfs:comment>The collection of denotational terms in the CycL
            language which are reified in the KB.  Examples include
            #$Muffet and (#$JuvenileFn #$Dog); a counterexample would be
            (#$JuvenileFn #$Platypus) because that term is not currently
            reified in the KB.  These are often called
            &apos;FORTs&apos;, which stands for &apos;first-order
            reified terms&apos;</rdfs:comment>
        <guid>beee8a4d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CycLReifiableDenotationalTerm"/>
    </daml:Class>
    <daml:Class rdf:ID="CycLRepresentedAtomicTerm">
        <rdfs:label>cyc l represented atomic term</rdfs:label>
        <rdfs:comment>The collection of all represented atomic
            denotational terms in the CycL language. This consists of
            variables and Cyc constants.</rdfs:comment>
        <guid>bddd55a1-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CycLAtomicTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLRepresentedTerm"/>
    </daml:Class>
    <daml:Class rdf:ID="CycLRepresentedTerm">
        <rdfs:label>cyc l represented term</rdfs:label>
        <rdfs:comment>The collection of all denotational terms in the
            CycL language which are either represented atomic terms or
            are composed of represented atomic terms. This includes Cyc
            constants, variables, and NATs.</rdfs:comment>
        <guid>be920bae-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CycLDenotationalTerm"/>
    </daml:Class>
    <daml:Class rdf:ID="CycLRuleAssertion">
        <rdfs:label>cyc l rule assertion</rdfs:label>
        <rdfs:comment>The subcollection of semantically well-formed
            #$CycLAssertions whose formulas are rules. More precisely,
            the formulas are not GAFs (see #$CycLGAFAssertion), so they
            either have more than one literal (and therefore are
            non-atomic) or they quantify over some free variables (and
            therefore are non-ground). Any free variables are implicitly
            universally quantified.</rdfs:comment>
        <guid>bddb0a48-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CycLAssertion"/>
        <daml:disjointWith rdf:resource="#CycLGAFAssertion"/>
    </daml:Class>
    <daml:Class rdf:ID="CycLSentence">
        <rdfs:label>CycL sentences</rdfs:label>
        <rdfs:comment>The collection of syntactically well-formed CycL
            formulas which involve a logical relation (a #$Predicate or
            #$TruthFunction) applied to some arguments.  #$CycLSentences
            do not necessarily obey arity constraints or other semantic
            constraints (e.g. argument type constraints).
            #$CycLSentences are also called &apos;logical
            formulas&apos;, to be distinguished from &apos;denotational
            formulas&apos;, also known as NATs (#$CycLNonAtomicTerms).
            Note that this notion of a CycL sentence is broader than the
            standard definition of &apos;sentence&apos; in formal logic,
            which defines a sentence as a closed, well-formed formula.
            CycL sentences may be open (having free variables).  They
            may be semantically ill-formed but must be syntactically
            well-formed.  Also, queries (see #$CycLQuery) are CycL sentences.</rdfs:comment>
        <guid>bd5880a0-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#LinguisticObjectType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CycLTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLFormula"/>
        <rdfs:subClassOf rdf:resource="#CycLExpression"/>
    </daml:Class>
    <daml:Class rdf:ID="CycLSentence-Askable">
        <rdfs:label>cyc l sentence - askable</rdfs:label>
        <rdfs:comment>The subcollection of syntactically well-formed
            #$CycLSentences which obey arity constraints, but but do not
            necessarily obey other semantic constraints (e.g. argument
            type constraints).   These sentences &apos;make enough
            sense&apos; to be asked as a #$CycLQuery. Each instance of
            this collection involves a logical relation (a #$Predicate
            or #$TruthFunction) applied to some number of arguments, as
            permitted by the arity of the relation. #$CycLSentences are
            also called &apos;logical formulas&apos;, to be
            distinguished from &apos;denotational formulas&apos;, also
            known as NATs (#$CycLNonAtomicTerms). Note that this notion
            of a CycL sentence is broader than the standard definition
            of &apos;sentence&apos; in formal logic, which defines a
            sentence as a closed, well-formed formula.  CycL sentences
            may be open (having free variables), but if they are
            asserted to Cyc, the free variables are implicitly
            universally quantified.  Note that an instance of
            #$CycLSentence-Askable does not mean that the sentence must
            be used in a query; only that it can be used in a query. See
            #$CycLQuery for more details.</rdfs:comment>
        <guid>be7266e4-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CycLSentence"/>
        <rdfs:subClassOf rdf:resource="#CycLExpression-Askable"/>
    </daml:Class>
    <daml:Class rdf:ID="CycLSentence-Assertible">
        <rdfs:label>cyc l sentence - assertible</rdfs:label>
        <rdfs:comment>The collection of syntactically and semantically
            well-formed #$CycLSentences. These sentences meet the
            criteria necessary to be asserted into the Cyc KB. Example:
            (#$and (#$isa #$Pittman #$HumanCyclist) (#$residesInRegion
            #$Pittman #$CityOfAustinTX)). For a thorough discussion of
            what constitutes a well-formed CycL formula, see the Cyc
            documentation. Each instance of #$CycLSentence-Assertible
            involves a logical relation (a #$Predicate or
            #$TruthFunction) applied to some arguments.  #$CycLSentences
            are also called &apos;logical formulas&apos;, to be
            distinguished from &apos;denotational formulas&apos;, also
            known as NATs (#$CycLNonAtomicTerms). Note that this notion
            of a CycL sentence is broader than the standard definition
            of &apos;sentence&apos; in formal logic, which defines a
            sentence as a closed, well-formed formula.  CycL sentences
            may be open (having free variables), but if they are
            asserted to Cyc, the free variables are implicitly
            universally quantified.  Note that a semantically
            well-formed #$CycLQuery may be an instance of
            #$CycLSentence-Assertible; just because a sentence is
            assertible does not require it to be used in an assertion.
            See #$CycLPropositionalSentence for more details.</rdfs:comment>
        <guid>c1164108-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CycLSentence-Askable"/>
        <rdfs:subClassOf rdf:resource="#CycLExpression-Assertible"/>
    </daml:Class>
    <daml:Class rdf:ID="CycLSentence-ClosedPredicate">
        <rdfs:label>cyc l sentence - closed predicate</rdfs:label>
        <rdfs:comment>The subcollection of #$CycLSentences whose arg0 is
            not a free variable although free variables may occupy other
            argument positions.</rdfs:comment>
        <guid>bdb7f18f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CycLSentence"/>
        <daml:disjointWith rdf:resource="#CycLNonAtomicTerm-ClosedFunctor"/>
    </daml:Class>
    <daml:Class rdf:ID="CycLTerm">
        <rdfs:label>cyc l term</rdfs:label>
        <rdfs:comment>The collection of all syntactically well-formed
            expressions in the CycL language that can be used as terms,
            i.e. that    can serve as arguments to CycL relations.
            Since the grammar    of the CycL language allows any CycL
            expression to be used as a term,     #$CycLTerm and
            #$CycLExpression are coextensional collections.</rdfs:comment>
        <guid>c107fffb-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#CycLExpression"/>
        <rdfs:subClassOf rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
        <daml:sameClassAs rdf:resource="#CycLExpression"/>
    </daml:Class>
    <daml:Class rdf:ID="CycLUnreifiedReifiableNonAtomicTerm">
        <rdfs:label>cyc l unreified reifiable non atomic term</rdfs:label>
        <rdfs:comment>A collection of Cyc terms that are
            #$CycLReifiableNonAtomicTerms but are not meant to be
            reified at the top level (but sub-nats are still reified).
            #$CycLUnreifiedReifiableNonAtomicTerms are handled specially
            by the canonicalizer. As an example of how this works, see
            #$termOfUnit. Its arg1 is a #$CycLReifiableNonAtomicTerm and
            its arg2 is an #$CycLUnreifiedReifiableNonAtomicTerm.</rdfs:comment>
        <guid>becacce8-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CycLReifiableNonAtomicTerm"/>
        <rdfs:subClassOf rdf:resource="#ELNonAtomicTerm"/>
    </daml:Class>
    <daml:Class rdf:ID="CycLVariable">
        <rdfs:label>cyc l variable</rdfs:label>
        <rdfs:comment>The collection of all variables in the CycL
            language, such as ?WHAT or ?var0.</rdfs:comment>
        <guid>bf7800bf-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CycLOpenDenotationalTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLRepresentedAtomicTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLAtomicTerm"/>
    </daml:Class>
    <daml:Class rdf:ID="CyclicalIntervalGroupType">
        <rdfs:label>cyclical interval group type</rdfs:label>
        <rdfs:comment>(#$isa ?X #$CyclicalIntervalGroupType) means that
            ?X is a collection of interval types whose instances recur
            in a set pattern throughout all of calendar history.  ?X
            must partition all of time: the elements of ?X must be
            mutually disjoint, and unioned altogether they must
            encompass all time.  For example, ?X could be the set of the
            seven calendar days (Monday through Sunday), or the set of
            the twelve calendar months (January through December).
            I.e., (#$isa #$DayOfWeekType #$CyclicalIntervalGroupType)
            and (#$isa #$MonthOfYearType #$CyclicalIntervalGroupType).
            `Recurring in a set pattern&apos; generally means that one
            can put the elements of ?X in order, say X1, X2,..., Xn, and
            there will be an instance of X1 immediately followed by an
            instance of X2 (that instance x2a of X2 will be
            #$contiguousAfter that instance x1a of X1),  and there will
            be an instance of X3 immediately following that particular
            instance of X2, and there will be an instance of X4
            immediately following that instance of X3, etc.  One final
            note:  when we arrange elements of ?X into such a pattern
            X1,...Xn (whose repetitions then `tile&apos; all time), n
            may be larger than the cardinality of ?X.  E.g., ?X might be
            the set with just the 2 elements WeekendDay (the union of
            the set #$Saturday and the set #$Sunday) and WeekDay, and
            then the arrangement that tiles all time is 5 contiguous
            WeekDays followed by 2 contiguous WeekendDays.</rdfs:comment>
        <guid>be0113f4-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="#MutuallyDisjointIntervalCollection"/>
    </daml:Class>
    <daml:Class rdf:ID="Cyclist">
        <rdfs:label>cyclists</rdfs:label>
        <rdfs:comment>The set of actors (mostly people) entitled to
            inspect and modify the Cyc knowledge base</rdfs:comment>
        <guid>bd588068-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#IndividualAgent"/>
    </daml:Class>
    <CoreConstant rdf:ID="CyclistsMt">
        <rdfs:label>cyclists mt</rdfs:label>
        <rdfs:comment>A #$Microtheory for stating basic hierarchical
            (#$isa and #$genls) information pertaining to users of #$Cyc.</rdfs:comment>
        <guid>c0625164-9c29-11b1-9dad-c379636f7270</guid>
    </CoreConstant>
    <ThreeDimensionalShapeAttribute rdf:ID="Cylindrical">
        <rdfs:label>cylindrical</rdfs:label>
        <rdfs:comment>#$Cylindrical is the instance of #$ShapeAttribute
            shared by all cylindrical objects, i.e. all objects that
            have a circular base and for which all cross sections
            parallel to the base have the same area as the base.</rdfs:comment>
        <guid>bf57fbe1-9c29-11b1-9dad-c379636f7270</guid>
    </ThreeDimensionalShapeAttribute>
    <daml:Class rdf:ID="DailyPersonalCleaning">
        <rdfs:label>daily personal cleaning</rdfs:label>
        <rdfs:comment>A collection of events.  Each
            #$DailyPersonalCleaning encompasses the standard cleaning
            and grooming activities that an animal engages in over the
            course of a day.  Such a `daily routine&apos; is almost sure
            to include many brief grooming and cleaning actions, such as
            licking one&apos;s paws, combing one&apos;s hair, washing
            one&apos;s hands, shaving, bathing, etc., and those are
            sub-events of that #$DailyPersonalCleaning event.  For
            example, a human&apos;s #$DailyPersonalCleaning might have a
            #$TeethCleaning as one of its sub-events, along with a
            #$TakingABath, two instances of #$CombingHair, etc.   Note:
            Those specialized kinds of events, like #$CombingHair, are
            NOT subsets of #$DailyPersonalCleaning, since it would be
            abnormal for someone to JUST comb their hair each day (and
            do absolutely no other daily cleaning activity whatsoever).
            Note:  In the context #$HumanActivitiesMt --- where all the
            performers of actions are, by default, human beings ---
            #$DailyPersonalCleaning designates human grooming activities
            only.  In that microtheory, dog-grooming performed by human
            beings does not constitute #$DailyPersonalCleaning, even if
            it happens on a daily basis for some pampered poodle, as it
            is not PERSONAL (i.e, self-) cleaning.</rdfs:comment>
        <guid>bd58d05d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#Cleaning"/>
    </daml:Class>
    <daml:Class rdf:ID="DataMicrotheory">
        <rdfs:label>data microtheory</rdfs:label>
        <rdfs:comment>A collection of microtheories.  An instance of
            #$DataMicrotheory contains information about #$Individuals,
            such as specific #$Persons, #$Organizations,
            #$GeographicalRegions, #$ConceptualWorks, etc.  Assertions
            that do not refer to such individuals normally should be
            asserted in a more general microtheory.</rdfs:comment>
        <guid>be5275a8-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MicrotheoryType"/>
        <rdfs:subClassOf rdf:resource="#Microtheory"/>
    </daml:Class>
    <daml:Class rdf:ID="Database-AbstractContent">
        <rdfs:label>abstract databases</rdfs:label>
        <rdfs:comment>The collection of all databases, as abstract
            repositories of information rather than as physical storage
            devices.   A database generally has some means of accessing
            the data from structured records, frames or relational
            structures, using some query language.  A particular
            #$Database-AbstractContent may exist in multiple copies, and
            may be distributed over several different physical data
            storage sites: see also #$Database-Physical.</rdfs:comment>
        <guid>bfe46ab6-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#IndexedInfoSource"/>
    </daml:Class>
    <daml:Class rdf:ID="Database-Physical">
        <rdfs:label>databases</rdfs:label>
        <rdfs:comment>A collection of information bearing objects
            (IBOs); a subset of #$StructuredInformationSource.  Each
            element of #$Database-Physical is an IBO that stores many
            pieces of information, organized   for easy scanning and
            access.  Typically, a data base involves one or more
            formatted data record schemes, together with some device for
            searching and retrieving data.  Note that, as an IBO, a
            #$Database-Physical is some particular, tangible copy of a
            database. To refer to the abstract &apos;content&apos;  of a
            database, use #$Database-AbstractContent.    Instances
            represent databases, specifically the &apos;physical&apos;
            aspect of the database rather than its meaning. Each
            physical database will be related to its tables (represented
            as instances of #PhysicalTableSchema).  It will typically
            have information specifying access methods.  The current
            vocbulary does not make the distinction between the abstract
            structure, perhaps shared by many copies, and the copies
            themselves, perhaps containing different data.</rdfs:comment>
        <guid>bd589d12-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#InformationBearingObject"/>
        <rdfs:subClassOf rdf:resource="#StructuredInformationSource"/>
    </daml:Class>
    <daml:Class rdf:ID="Date">
        <rdfs:label>dates</rdfs:label>
        <rdfs:comment>#$Date is a subset of #$TimeInterval.  A #$Date is
            any #$TimeInterval which can be defined purely by its
            location on the calendar.  Thus a #$Date could be a
            particular calendar day, a particular calendar quarter, a
            particular calendar month, a particular decade, etc.  So the
            subsets of #$Date include #$CalendarMinute,
            #$CalendarQuarter, etc., as well as #$CalendarDay.</rdfs:comment>
        <guid>bd58ac59-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#TimeInterval"/>
    </daml:Class>
    <daml:Class rdf:ID="Dawn">
        <rdfs:label>dawns</rdfs:label>
        <rdfs:comment>Each instance of #$Dawn is a dimly-lit period
            before a #$Sunrise.</rdfs:comment>
        <guid>bd588ee3-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#Twilight"/>
        <daml:disjointWith rdf:resource="#Dusk"/>
    </daml:Class>
    <daml:Class rdf:ID="DaytimeWorkingHours">
        <rdfs:label>daytime working hours</rdfs:label>
        <rdfs:comment>#$DaytimeWorkingHours is a set of time intervals.
            The length of each of those intervals, and their
            #$startingPoint and #$endingPoint, are defined by the bulk
            of a working population performing their daily jobs.  The
            schedule varies by context -- i.e. which group of workers
            are being considered -- and the boundaries are fuzzy.  This
            fuzziness makes the concept more useful in many ways,
            though, not less useful.</rdfs:comment>
        <guid>bd58ac70-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#TimeOfDay"/>
    </daml:Class>
    <daml:Class rdf:ID="DeVerbalNoun">
        <rdfs:label>de verbal noun</rdfs:label>
        <rdfs:comment>The collection of all nouns derived from verbs,
            including (but not limited to) those ending in
            &apos;-ing&apos;, &apos;-er/or&apos;, and &apos;tion&apos;.</rdfs:comment>
        <guid>bf69785d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#LinguisticObjectType"/>
        <rdf:type rdf:resource="#SpeechPart"/>
        <rdfs:subClassOf rdf:resource="#Noun"/>
    </daml:Class>
    <daml:Class rdf:ID="DeadAnimal">
        <rdfs:label>corpses</rdfs:label>
        <rdfs:comment>A subset of #$OrganicStuff (and not, of course, of
            #$Animal, whose elements must be alive).  Each element of
            #$DeadAnimal is a corpse or partial remains of an individual
            animal, somewhat intact, and prior to any butchering,
            burning, cooking, dissolving, or fully decomposing.</rdfs:comment>
        <guid>bd5894c4-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#OrganicStuff"/>
        <daml:disjointWith rdf:resource="#Animal"/>
    </daml:Class>
    <daml:Class rdf:ID="DeadLanguage">
        <rdfs:label>dead languages</rdfs:label>
        <rdfs:comment>A subset of #$NaturalLanguage.  Each element of
            #$DeadLanguage is a natural language that is no longer
            spoken as a native language.</rdfs:comment>
        <guid>bd58a2a8-9c29-11b1-9dad-c379636f7270</guid>
        <rdfs:subClassOf rdf:resource="#NaturalLanguage"/>
        <daml:disjointWith rdf:resource="#LivingLanguage"/>
    </daml:Class>
    <TwoDimensionalShapeAttribute rdf:ID="DecagonShaped">
        <rdfs:label>decagon shaped</rdfs:label>
        <rdfs:comment>This is the shape attribute shared by all ten
            sided two dimensional figures.</rdfs:comment>
        <guid>bdcb2708-9c29-11b1-9dad-c379636f7270</guid>
    </TwoDimensionalShapeAttribute>
    <daml:Class rdf:ID="December">
        <rdfs:label>December</rdfs:label>
        <rdfs:comment>The collection of all Decembers,   the twelfth and
            final month of the year in the #$JulianCalendar.</rdfs:comment>
        <guid>bd58b8ba-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MonthOfYearType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CalendarMonth"/>
    </daml:Class>
    <SharedNote rdf:ID="DecidingWhichInstrumentPredicateToUse">
        <rdfs:label>deciding which instrument predicate to use</rdfs:label>
        <rdfs:comment>Which instrument predicate you use depends on what
            level of generality you wish your statement to apply at.
            One help is to look at the argument types of each instrument
            predicate and decide.  Do you want it to apply to every
            #$PartiallyTangible which is an instrument?  Then use
            #$instrument-Generic since #$PartiallyTangible is its
            #$arg2Isa.  Are you writing a rule which really only applies
            to #$PhysicalDevices  Then use #$deviceUsed.  But be
            careful!  When you use a more specific predicate such as
            #$deviceUsed it may have special extra conditions in its
            definition aside from the #$PhysicalDevice #$arg2Isa
            constraint.  Also if your first stab at the rule involves
            #$deviceUsed in the antecedent, see if it applies more
            generally to #$instrument-Generic.</rdfs:comment>
        <guid>bd60039d-9c29-11b1-9dad-c379636f7270</guid>
    </SharedNote>
    <daml:Class rdf:ID="DeciduousPlant">
        <rdfs:label>deciduous plants</rdfs:label>
        <rdfs:comment>A collection of plants.  Each element of
            #$DeciduousPlant is a plant which sheds all of its leaves
            once a year, seasonally, and subsequently grows new ones.</rdfs:comment>
        <guid>bd588481-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Plant-Woody"/>
    </daml:Class>
    <daml:Class rdf:ID="DecompositionEvent">
        <rdfs:label>decompose</rdfs:label>
        <rdfs:comment>The collection of events in which one or more
            objects decompose more or less completely.  See also the
            more general concept #$DecompositionProcess, in whose
            instances objects at least partially decompose.</rdfs:comment>
        <guid>bd58b357-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#DecompositionProcess"/>
    </daml:Class>
    <daml:Class rdf:ID="DecompositionProcess">
        <rdfs:label>decomposition process</rdfs:label>
        <rdfs:comment>A collection of events in which some object
            decomposes.  I.e., in a #$DecompositionProcess event, some
            object&apos;s matter undergoes chemical reactions (sometimes
            mediated by microorganisms) that eventually result in the
            object losing its shape and material characteristics.  This
            may sometimes superficially resemble #$Melting, but it is a
            different process.</rdfs:comment>
        <guid>bd58b2de-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#TransformationProcess"/>
    </daml:Class>
    <daml:Class rdf:ID="Decrypting">
        <rdfs:label>decryptions</rdfs:label>
        <rdfs:comment>The collection of actions in which an encrypted
            IBO (#$InformationBearingObject) is transformed so that it
            can be accessed.</rdfs:comment>
        <guid>bd659b49-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="DefaultDisjointFoodType">
        <rdfs:label>types of food</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$DefaultDisjointFoodType is a collection of beverages or
            foodstuffs (a subset of #$Food or #$FoodIngredientOnly).
            More to the point, this collection-of-collections is a
            #$SiblingDisjointCollection (qv).  So every two instances of
            #$DefaultDisjointFoodType are either disjoint, or are in a
            known subset/superset relationship, or have some known
            (reified) common specialization.  Virtually every
            commonly-named type of food will be an element of this
            set-of-sets.  E.g., the collections #$HotDog, #$ChickenSoup,
            #$Cocoa-ThePowder, #$Prune, #$ToasterTart, #$MilkPowder, and
            so on.  One could easily define a collection of foodstuff
            and beverages, such as
            The-Food-That-Was-Eaten-In-Dallas-Yesterday, that would not
            be a member of this set-of-sets, but most such collections
            are not worth naming and keeping around.  See the concept
            #$SiblingDisjointCollection for more information about this
            sort of arrangement.</rdfs:comment>
        <guid>bd58bd03-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#SiblingDisjointCollection"/>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#ProductType"/>
    </daml:Class>
    <daml:Class rdf:ID="DefaultDisjointScriptType">
        <rdfs:label>default disjoint script type</rdfs:label>
        <rdfs:comment>This is a  #$SiblingDisjointCollection (qv).  So
            the elements of #$DefaultDisjointScriptType are kinds of
            actions (subsets of #$Event) that can be assumed to be
            mutually disjoint from each other (unless one is known to be
            a subset of the other, or there is a known common subset.)</rdfs:comment>
        <guid>bd58efca-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#SiblingDisjointCollection"/>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
    </daml:Class>
    <CycHLTruthValue rdf:ID="DefaultFalse">
        <rdfs:label>default false</rdfs:label>
        <rdfs:comment/>
        <guid>bd8a163e-9c29-11b1-9dad-c379636f7270</guid>
    </CycHLTruthValue>
    <daml:Class rdf:ID="DefaultMonotonicPredicate">
        <rdfs:label>default monotonic predicate</rdfs:label>
        <rdfs:comment>A collection of predicates.  Each element of
            #$DefaultMonotonicPredicate is a predicate whose use as the
            predicate of a locally asserted ground formula causes that
            formula to be entered, by default, as :MONOTONIC.  Examples:
            #$isa, #$genls, #$disjointWith, #$equals, #$arity, #$arg1Isa.</rdfs:comment>
        <guid>c10c3008-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
    </daml:Class>
    <CycHLTruthValue rdf:ID="DefaultTrue">
        <rdfs:label>default true</rdfs:label>
        <rdfs:comment/>
        <guid>bf576a31-9c29-11b1-9dad-c379636f7270</guid>
    </CycHLTruthValue>
    <daml:Class rdf:ID="DegenerationEvent">
        <rdfs:label>degenerates</rdfs:label>
        <rdfs:comment>A collection of events.  In each
            #$DegenerationEvent, some object loses its function(s)
            through a process of deterioration and/or a series of
            discrete breakdowns.</rdfs:comment>
        <guid>bd58c357-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#IncurringDamage"/>
    </daml:Class>
    <daml:Class rdf:ID="Density">
        <rdfs:label>densities</rdfs:label>
        <rdfs:comment>A collection of physical attributes.  Each element
            of #$Density is a measurable physical property of a tangible
            object, namely, its mass per volume.  Densities may be
            represented relative to certain substances, e.g.,
            #$SaltWaterDensity, #$FreshWaterDensity, #$DenseAsOil.
            Densities of objects are reported using the predicate #$densityOfObject.</rdfs:comment>
        <guid>bd589819-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DerivedNumericAttributeType"/>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </daml:Class>
    <daml:Class rdf:ID="Dentist">
        <rdfs:label>dental practitioners</rdfs:label>
        <rdfs:comment>The collection of doctors that are trained with
            diagnosing and treating diseases of the gums and teeth.</rdfs:comment>
        <guid>bd58df82-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MedicalSpecialtyType"/>
        <rdfs:subClassOf rdf:resource="#MedicalCareProfessional"/>
    </daml:Class>
    <daml:Class rdf:ID="Depositing">
        <rdfs:label>deposition processes</rdfs:label>
        <rdfs:comment>A collection of events.  In each instance of
            #$Depositing, a gas is cooled to (or its pressure lowered
            to) the point where the gas molecules solidify into a solid.</rdfs:comment>
        <guid>bfe97da9-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#PhysicalStateChangeEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="DerivedNumericAttributeType">
        <rdfs:label>derived numeric attribute type</rdfs:label>
        <rdfs:comment>A collection of collections.  Each element of
            #$DerivedNumericAttributeType is a collection of measurable
            attributes that are measured in complex units, including
            #$Volume, #$Area, #$Acceleration, etc.  The types of
            attributes in #$DerivedNumericAttributeType are
            `derived&apos; from other, fundamental attributes (such as
            #$Distance and #$Mass) which are measured in simple units.
            Cf. #$FundamentalNumericAttributeType.</rdfs:comment>
        <guid>bd58dae0-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#MeasurableAttributeType"/>
        <daml:disjointWith rdf:resource="#FundamentalNumericAttributeType"/>
    </daml:Class>
    <daml:Class rdf:ID="DesertClimateCycle">
        <rdfs:label>desert climates</rdfs:label>
        <rdfs:comment>The attribute of having a desert climate.  Wide
            termperature extremes from very hot in day to cold at night.
            Very little precipitation on a year-long basis, although
            there may be desert storms.</rdfs:comment>
        <guid>bd589427-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ClimateCycleType"/>
        <rdfs:subClassOf rdf:resource="#TemperateClimateCycle"/>
    </daml:Class>
    <daml:Class rdf:ID="DeskWorker">
        <rdfs:label>office clerks</rdfs:label>
        <rdfs:comment>A collection of persons; a subset of
            #$Professional.  This is a general category of workers that
            generally sit at desks, as opposed to those who do factory
            work or outside work, etc.  Subsets include #$Administrator,
            #$ComputerOperator, and #$Secretary.</rdfs:comment>
        <guid>bd58ab18-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#OccupationType"/>
        <rdfs:subClassOf rdf:resource="#Professional"/>
    </daml:Class>
    <daml:Class rdf:ID="DestructionEvent">
        <rdfs:label>destruction events</rdfs:label>
        <rdfs:comment>A collection of events.  In each element of
            #$DestructionEvent, at least one instance of #$Entity (the
            #$inputsDestroyed) ceases to exist.</rdfs:comment>
        <guid>bd58f920-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#CreationOrDestructionEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="Device-SingleUser">
        <rdfs:label>single-user devices</rdfs:label>
        <rdfs:comment>A collection of devices.    One can classify
            devices according to how many simultaneous   users they
            typically have.  An instance of #$Device-SingleUser  is any
            device that typically has/requires exactly one (i.e.,   one
            and only one) user.  A screwdriver (an instance of
            #$Screwdriver) is a #$Device-SingleUser, but a grand piano
            (an instance of #$GrandPiano) is not.  A borderline
            non-example   is a car --- although only one person operates
            it, several can   `use&apos; it at once, i.e. derive the
            value of its primary function   which is transportation.  So
            a car is not a #$Device-SingleUser.  A borderline example is
            a telephone -- although it requires   two or more users
            (each on telephones) for meaningful use,   each phone
            generally has just one user at a time.    So a telephone is
            a #$Device-SingleUser but a telephone-circuit is not.</rdfs:comment>
        <guid>c10093ce-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#PhysicalDevice"/>
    </daml:Class>
    <daml:Class rdf:ID="Device-UserPowered">
        <rdfs:label>user-powered devices</rdfs:label>
        <rdfs:comment>An #$Artifact which has been deliberately designed
            to perform a  particular function, and which depends upon
            the physical efforts of  the user to perform that function
            in part or in whole.  A paradigm  example would be a
            bicycle.  However, the definition also leaves room  for some
            counterintuitive cases--combs and forks are also
            user-powered  devices, on this analysis.  Borderline cases
            would be devices which  require effort on the part of the
            user to perform part of the function  but not all of it.
            For example, many gas-powered lawnmowers have to be   pushed
            by hand, but use an internal combustion engine to impart the
            necessary velocity to the cutting surfaces.</rdfs:comment>
        <guid>bd5894f7-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#MusclePoweredDevice"/>
    </daml:Class>
    <daml:Class rdf:ID="DeviceRunning">
        <rdfs:label>device-running events</rdfs:label>
        <rdfs:comment>A collection of events.  An instance of
            #$DeviceRunning is an event in which some device is running.
            This collection includes events which are complete cycles of
            a device&apos;s normal function (see
            #$SingleCompleteRunOfADevice) as well as random time slices
            (#$timeSlices) of them running.  Examples include instances
            of the collections #$AirplaneTakeOff, #$SkateBoarding,
            #$OffRoadMotorcycleRiding, etc.  Some stranger examples ---
            which are not instances of #$SingleCompleteRunOfADevice ---
            include: all the the ignition phases of the firing of my
            Honda&apos;s engine during November of 1996; my TV when it
            was on and showing a commercial this year; my TV when it was
            on and I was watching it this week.</rdfs:comment>
        <guid>bd589045-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#PhysicalEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="DeviceState">
        <rdfs:label>device state</rdfs:label>
        <rdfs:comment>A collection of states that devices can be in,
            including: #$DeviceOn, #$DeviceOff, #$RecordingStates,
            #$CockedState, #$Folded, #$OffHook, #$Unlocked, and many others.</rdfs:comment>
        <guid>bd590b25-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#UnorderedAttributeType"/>
        <rdfs:subClassOf rdf:resource="#AttributeValue"/>
    </daml:Class>
    <daml:Class rdf:ID="Dexterity">
        <rdfs:label>dexterous</rdfs:label>
        <rdfs:comment>#$Dexterity is the
            #$ScriptPerformanceAttributeType for describing actions in
            which the performer&apos;s hands move accurately, quickly,
            and with economy of motion.</rdfs:comment>
        <guid>bd58ae64-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ScriptPerformanceAttributeType"/>
        <rdfs:subClassOf rdf:resource="#ScriptPerformanceAttribute"/>
    </daml:Class>
    <daml:Class rdf:ID="DiagnosingAndRepairingSomething">
        <rdfs:label>diagnosing and repairing something</rdfs:label>
        <rdfs:comment>The collection of all actions of diagnosing and
            repairing something, in a very broad sense.  Such events can
            range from fixing a #$PhysicalDevice (e.g., the last time
            you took your car in to be fixed), to killing pests that
            infest a place.  All such actions involve an intrinsic
            change in the thing which undergoes repairs.  Notice that a
            diagnosis action alone, or a repair action alone, would not
            be elements of this collection; they could be #$subEvents of
            an element of this collection.</rdfs:comment>
        <guid>bd58ab98-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#IntrinsicStateChangeEvent"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
    </daml:Class>
    <daml:Class rdf:ID="DietaryDeficiencyCondition">
        <rdfs:label>dietary deficiency conditions</rdfs:label>
        <rdfs:comment>The collection of physiological conditions brought
            on by consuming less of a nutrient than the body requires.</rdfs:comment>
        <guid>c0fd5773-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PhysiologicalConditionType"/>
        <rdfs:subClassOf rdf:resource="#Malnutrition"/>
    </daml:Class>
    <daml:Class rdf:ID="DigestionEvent">
        <rdfs:label>digestion event</rdfs:label>
        <rdfs:comment>A collection of events.  For most animals, a
            #$DigestionEvent starts at the mouth and, for most
            vertebrates, ends at the anus.  This concept should not be
            confused with #$DigestingInStomach, whose instances occur
            only in an organism&apos;s #$Stomach.  A #$DigestionEvent
            spans the whole #$DigestiveSystem, from start to
            finish.--Nichols, June 23, 1997</rdfs:comment>
        <guid>bd588d98-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#SingleDoerAction"/>
        <rdfs:subClassOf rdf:resource="#BiologicalDecompositionEvent"/>
        <rdfs:subClassOf rdf:resource="#BiologicalTransportationEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="DigestiveSystem">
        <rdfs:label>digestive systems</rdfs:label>
        <rdfs:comment>The collection of all animals&apos; digestive
            systems.  A #$DigestiveSystem is a system of organs and
            other body parts (typically of #$Vertebrates) which work
            together to accomplish the digestion function.</rdfs:comment>
        <guid>bd58b41a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#AnimalBodyPartType"/>
        <rdfs:subClassOf rdf:resource="#ConnectedPathSystem"/>
        <rdfs:subClassOf rdf:resource="#BiologicalLivingObject"/>
        <rdfs:subClassOf rdf:resource="#AnimalBodyPart"/>
    </daml:Class>
    <daml:Class rdf:ID="DimensionlessUnitOfMeasure">
        <rdfs:label>dimensionless units of measure</rdfs:label>
        <rdfs:comment>A subset of #$UnitOfMeasure.
            #$DimensionlessUnitOfMeasure is the collection of
            measurement functions whose results are elements of
            #$ScalarInterval which have no dimension; i.e., they are
            simply numbers, instances of #$IntervalOnNumberLine.
            Examples include #$Percent, #$Unity, #$Per1000.  (#$Percent
            50) returns the point-interval, one-half (0.5).  (#$Unity 3
            4) returns the interval that is the range of numbers between
            3 and 4, inclusive.</rdfs:comment>
        <guid>bd58842e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#InterconvertibleUnitType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </daml:Class>
    <daml:Class rdf:ID="DirectedAcyclicGraph">
        <rdfs:label>Directed Acyclic Graph</rdfs:label>
        <rdfs:comment>The collection of all those #$DirectedGraphs
            (node-and-link structures in which each link has one
            direction) each of which has no directed cycle in it.  This
            is the intersection of #$DirectedGraph and
            #$DirectedAcyclicPathSystem (which is the same as the
            intersection of #$SimpleGraph-GraphTheoretic and
            #$DirectedAcyclicPathSystem).  A #$DirectedAcyclicGraph is
            often used as a representation of a #$PartialOrdering.</rdfs:comment>
        <guid>bed5ca59-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PathSystemType-Structural"/>
        <rdfs:subClassOf rdf:resource="#DirectedAcyclicPathSystem"/>
        <rdfs:subClassOf rdf:resource="#DirectedGraph"/>
    </daml:Class>
    <daml:Class rdf:ID="DirectedAcyclicPathSystem">
        <rdfs:label>directed acyclic path system</rdfs:label>
        <rdfs:comment>The collection of all #$DirectedPathSystems each
            of which has no directed cycle in it (see
            #$directedCycleInSystem).  Note that each instance of
            #$DirectedAcyclicPathSystem has no loops in it, though it
            may have a (undirected) graph cycle in it.</rdfs:comment>
        <guid>bdd9cff1-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PathSystemType-Structural"/>
        <rdfs:subClassOf rdf:resource="#DirectedPathSystem"/>
    </daml:Class>
    <daml:Class rdf:ID="DirectedGraph">
        <rdfs:label>directed graph</rdfs:label>
        <rdfs:comment>The collection of all directed simple graphs,
            i.e., node-and-link structure in which every link has one
            direction and no multiple links (between a pair of nodes) or
            loops are allowed, as studied in graph theory.  This is the
            intersection of #$SimpleGraph-GraphTheoretic and
            #$DirectedMultigraph, which is the same as the intersection
            of #$SimpleGraph-GraphTheoretic and #$DirectedPathSystem.</rdfs:comment>
        <guid>beb3df26-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PathSystemType-Structural"/>
        <rdfs:subClassOf rdf:resource="#DirectedMultigraph"/>
        <rdfs:subClassOf rdf:resource="#SimpleGraph-GraphTheoretic"/>
    </daml:Class>
    <daml:Class rdf:ID="DirectedMultigraph">
        <rdfs:label>directed multigraph</rdfs:label>
        <rdfs:comment>The collection of all directed multigraphs, i.e.,
            node-and-link structures in which every link has one
            direction.  There can be loops and multiple links between a
            pair of nodes.  These are studied in graph theory.  In Cyc,
            this is the intersection of #$Multigraph and #$DirectedPathSystem.</rdfs:comment>
        <guid>c0ba0c32-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PathSystemType-Structural"/>
        <rdfs:subClassOf rdf:resource="#DirectedPathSystem"/>
        <rdfs:subClassOf rdf:resource="#Multigraph"/>
    </daml:Class>
    <daml:Class rdf:ID="DirectedPathSystem">
        <rdfs:label>directed path system</rdfs:label>
        <rdfs:comment>An instance of #$PathSystemType-Structural and a
            subcollection of #$Semi-DirectedPathSystem.  Each instance
            of #$DirectedPathSystem is a path system SYS in which every
            link LINK is given exactly one direction (specified by
            (#$linkFromToInSystem LINK X Y SYS), (#$PathFromFn LINK
            SYS), or (#$PathToFn LINK SYS)). Note that only when a
            semi-directed path system is also a directed path system
            should we use the functions #$PathFromFn and #$PathToFn.</rdfs:comment>
        <guid>c0a745ca-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PathSystemType-Structural"/>
        <rdfs:subClassOf rdf:resource="#Semi-DirectedPathSystem"/>
        <daml:disjointWith rdf:resource="#BidirectedPathSystem"/>
    </daml:Class>
    <daml:Class rdf:ID="DirectedTranslation">
        <rdfs:label>directed movements</rdfs:label>
        <rdfs:comment>A collection of events; a subset of
            #$Movement-TranslationEvent.  Each instance of
            #$DirectedTranslation is a movement event that is
            #$performedBy an #$Agent --- that agent intends for the
            #$objectMoving to reach a particular #$target.  Examples:
            William Tell shooting the apple off his son&apos;s head,
            John Wilkes Booth shooting Abraham Lincoln, the last time
            you tossed a frisbee to someone, a pilot landing an
            airplane, and a skiier skiing one run of the downhill course.</rdfs:comment>
        <guid>bdb6c421-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#ControllingSomething"/>
        <rdfs:subClassOf rdf:resource="#CausingAnotherObjectsTranslationalMotion"/>
    </daml:Class>
    <daml:Class rdf:ID="DirectionExpression">
        <rdfs:label>direction expression</rdfs:label>
        <rdfs:comment>A collection of vectors; a subset of
            #$UnitVectorInterval.  Each element of #$DirectionExpression
            is a vector representing a direction.  Typically these
            expressions are used to indicate direction between two
            objects or locations.  An important subset of this
            collection is #$GeographicalDirection; e.g.,
            #$South-Directly, #$NorthWest-Directly.</rdfs:comment>
        <guid>bd58dff3-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#UnitVectorInterval"/>
    </daml:Class>
    <daml:Class rdf:ID="Dirtiness">
        <rdfs:label>dirtiness</rdfs:label>
        <rdfs:comment>A collection of attributes.  Dirtiness is a
            measurable attribute that many tangible objects have.  Each
            element of the collection #$Dirtiness represents a specific
            level of dirtiness (or cleanliness!); e.g., #$Dirty,
            #$ReallyDirty, #$ALittleDirty, #$Clean, #$Sterile.  Indicate
            a particular object&apos;s #$Dirtiness with the predicate #$dirtinessOfObject.</rdfs:comment>
        <guid>bd58d42d-9c29-11b1-9dad-c379636f7270</guid>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </daml:Class>
    <daml:Class rdf:ID="Disappointment">
        <rdfs:label>letdowns</rdfs:label>
        <rdfs:comment>The emotion or state of feeling defeated in
            expectation or hope.  This is a collection; for an
            explanation of a typical #$FeelingAttributeType, see #$Happiness.</rdfs:comment>
        <guid>bd58b543-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#FeelingAttributeType"/>
        <rdfs:subClassOf rdf:resource="#Dissatisfaction"/>
        <rdfs:subClassOf rdf:resource="#Surprise"/>
        <rdfs:subClassOf rdf:resource="#Sadness"/>
    </daml:Class>
    <daml:Class rdf:ID="Disapproval">
        <rdfs:label>disapproving</rdfs:label>
        <rdfs:comment>The emotion or state of disapproving of something;
            a negative attitude towards some situation, proposal,
            person, or thing, implying a judgment based on explicit or
            implicit standards (rational, moral, pragmatic, or etc.).
            This is a collection; for an explanation of a typical
            #$FeelingAttributeType, see #$Happiness.  More specialized
            #$FeelingAttributeTypes than #$Disapproval are #$Contempt,
            #$Hate, #$Abhorrence, etc.  More subtly, it is often true
            that feelings of #$Jealousy or #$Envy manifest in
            superficial shows of #$Disapproval.  #$Disapproval is a
            #$Collection --- for an explanation of that, see #$Happiness.</rdfs:comment>
        <guid>be00ca70-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#FeelingAttributeType"/>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </daml:Class>
    <daml:Class rdf:ID="DisasterEvent">
        <rdfs:label>disasters</rdfs:label>
        <rdfs:comment>A collection of events.  In each #$DisasterEvent,
            a large group of people (or, in decreasing order of
            likelihood of usage of this concept, a large group of
            animals, plants, corporations, etc.) are at very high risk
            of injury or property damage, or in which a lot of injury
            and property damage occurs even though the risk was low.</rdfs:comment>
        <guid>c0fd58cc-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#DestructionEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="Disgust">
        <rdfs:label>disgust</rdfs:label>
        <rdfs:comment>A feeling of repulsion or aversion towards
            something considered distasteful or repugnant.  This is a
            #$Collection --- for an explanation of that, see
            #$Happiness.  Some more specialized #$FeelingAttributeTypes
            than #$Disgust include feelings of #$Abhorrence.</rdfs:comment>
        <guid>bd58b1cd-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#FeelingAttributeType"/>
        <rdfs:subClassOf rdf:resource="#Dislike"/>
    </daml:Class>
    <daml:Class rdf:ID="DisjointSetOrCollection">
        <rdfs:label>disjoint set or collection</rdfs:label>
        <rdfs:comment>A collection of mathematical sets and collections
            the members of which are themselves mathematical sets or
            collections.  A set or collection, SETORCOL, of sets or
            collections is an instance of #$DisjointSetOrCollection just
            in case the elements of SETORCOL are mutually disjoint --
            that is, no two elements of SETORCOL have any elements in common.</rdfs:comment>
        <guid>be13fa12-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
    </daml:Class>
    <ThreeDimensionalShapeAttribute rdf:ID="Disk3DShaped">
        <rdfs:label>disk 3 d shaped</rdfs:label>
        <rdfs:comment>#$Disk3DShaped is the instance of #$ShapeAttribute
            shared by all three dimensional cylindrical objects whose
            height is considerably less than its radius.  A coin would
            be an example. Objects having this attribute may often be
            considered as two-dimensional for the purposes of practical reasoning.</rdfs:comment>
        <guid>bdd82721-9c29-11b1-9dad-c379636f7270</guid>
    </ThreeDimensionalShapeAttribute>
    <daml:Class rdf:ID="Dislike">
        <rdfs:label>dislikes</rdfs:label>
        <rdfs:comment>A feeling of disaffection or disaffinity for a
            person or thing.  This is a #$Collection --- for an
            explanation of that, see #$Happiness.  Some more specialized
            #$FeelingAttributeTypes than #$Dislike are #$Disgust,
            #$Contempt, #$Hate, #$Resentment, etc.</rdfs:comment>
        <guid>bd58a553-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#FeelingAttributeType"/>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </daml:Class>
    <daml:Class rdf:ID="DisputeEvent">
        <rdfs:label>disputes</rdfs:label>
        <rdfs:comment>A collection of events with multiple participants.
            In each #$DisputeEvent,  some participants seek to achieve
            states of affairs that other participants seek to prevent.
            Disputes may or may not get settled.  Settlement of a
            dispute may be by fighting, by competition, by using a
            mediator or court, by chance, by mutual reasoning, etc.</rdfs:comment>
        <guid>bd58f3d7-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#HostileSocialAction"/>
    </daml:Class>
    <daml:Class rdf:ID="Dissatisfaction">
        <rdfs:label>dissatisfaction</rdfs:label>
        <rdfs:comment>Feeling of discontent, due to a lack of
            fulfillment of an agent&apos;s desires, needs, or
            requirements.  This is a collection; for an explanation of a
            typical #$FeelingAttributeType, see #$Happiness.   Some more
            specialized #$FeelingAttributeTypes than #$Dissatisfaction
            are #$Disappointment, #$Frustration, #$Impatience, #$Anger,
            etc. </rdfs:comment>
        <guid>bd58a58e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#FeelingAttributeType"/>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </daml:Class>
    <daml:Class rdf:ID="Dissolving">
        <rdfs:label>dissolving events</rdfs:label>
        <rdfs:comment>A collection of events.  In each instance of this
            collection, a solvent and a solute mix to form a solution.</rdfs:comment>
        <guid>be0116b0-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
    </daml:Class>
    <daml:Class rdf:ID="Distance">
        <rdfs:label>distances</rdfs:label>
        <rdfs:comment>A collection of physical attributes. Each element
            of #$Distance is the length of a path in space extending
            from one  point to another. In some contexts, for example as
            in the argument 2  position of #$altitudeAboveSeaLevel, this
            distance includes  directional information.  In these
            contexts, elements can take on  positive or negative values.
            Elements of #$Distance may be either a  fixed interval, such
            as the height of the  #$WashingtonMonumentInWashingtonDC or
            the altitude of the #$DeadSea,  or a range, such as
            #$WithinAudibleDistance (see #$ScalarInterval for  more
            explanation). See #$UnitOfDistance for the units used by Cyc
            to  measure distances. See #$Distance-Absolute for measures
            of distance  that necessarily do not include directional
            information, i.e. are  always non-negative.</rdfs:comment>
        <guid>bd58809a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#FundamentalNumericAttributeType"/>
        <rdfs:subClassOf rdf:resource="#PhysicalAttribute"/>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </daml:Class>
    <daml:Class rdf:ID="DistributingMetaKnowledgePredicate">
        <rdfs:label>distributing meta knowledge predicate</rdfs:label>
        <rdfs:comment>This collection is a  subset of
            #$MetaKnowledgePredicate, instances over multiple assertions
            resulting from the  polycanonicalization of an assertion.
            Suppose one asserts  (dist-mk-predicate arg1 arg2) and arg1
            polycanonicalizes into  assertion-1 and assertion-2, then
            because (isa dist-mk-pred
            #$DistributingMetaKnowledgePredicate) the kb will be
            modified to include both (dist-mk-pred assertion-1 arg2) and
            (dist-mk-pred assertion-2 arg2).   NOTE: The constant name
            might suggest that  these predicates are predicates about
            knowing, but this is not the  sense in which
            &apos;MetaKnowledge&apos; is here intended.</rdfs:comment>
        <guid>c0ab9eda-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="#MetaKnowledgePredicate"/>
    </daml:Class>
    <daml:Class rdf:ID="DistributionEvent">
        <rdfs:label>distributions</rdfs:label>
        <rdfs:comment>A collection of events.  Each element of
            #$DistributionEvent is an event in which tangible or
            intangible objects are distributed from a source to various
            destinations via some distribution network.</rdfs:comment>
        <guid>bd58fd6b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#GeneralizedTransfer"/>
        <rdfs:subClassOf rdf:resource="#TransferOut"/>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
        <rdfs:subClassOf rdf:resource="#ActionOnObject"/>
    </daml:Class>
    <daml:Class rdf:ID="Dock">
        <rdfs:label>docks</rdfs:label>
        <rdfs:comment>The collection of long flat walkways that jut out
            over water from  shorelines.  A Dock&apos;s main function is
            to provide a place to secure boats and to provide a place
            where passengers and cargo can be loaded and unloaded.</rdfs:comment>
        <guid>be0112f2-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#OutdoorLocation"/>
    </daml:Class>
    <daml:Class rdf:ID="Doctor-Medical">
        <rdfs:label>doctors</rdfs:label>
        <rdfs:comment>The collection of all medical doctors - MDs and Osteopaths.</rdfs:comment>
        <guid>bd58eb55-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#OccupationType"/>
        <rdf:type rdf:resource="#MedicalSpecialtyType"/>
        <rdfs:subClassOf rdf:resource="#Scientist"/>
        <rdfs:subClassOf rdf:resource="#Prescriber"/>
    </daml:Class>
    <daml:Class rdf:ID="DocumentationConstant">
        <rdfs:label>documentation constant</rdfs:label>
        <rdfs:comment>A constant whose purpose involves facilitating
            Cyclists in their understanding of the system, tracking work
            being done, noting cleanup work to be done, etc. Such a
            constant usually is not involved in inference.  Instances
            may be excluded from knowledge bases in which available
            memory is a premium without affecting the performance of applications.</rdfs:comment>
        <guid>bd5c5e99-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
    </daml:Class>
    <daml:Class rdf:ID="DocumentationPredicate">
        <rdfs:label>documentation predicate</rdfs:label>
        <rdfs:comment>The predicates in the system used for facilitating
            #$Cyclists in their understanding of the system, tracking
            work being done, noting cleanup work to be done, etc.  Such
            a constant usually is not involved in inference.  Instances
            may be excluded from knowledge bases in which available
            memory is a premium without affecting the performance of
            applications. #$DocumentationPredicate is used in code to
            determine which documentation to show to the user when they
            request to see documentation for a FORT.</rdfs:comment>
        <guid>be1f1654-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#DocumentationConstant"/>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
    </daml:Class>
    <daml:Class rdf:ID="Dog">
        <rdfs:label>dogs</rdfs:label>
        <rdfs:comment>The collection of all dogs of all breeds.
            Elements of #$Dog may be members of #$DomesticPet or of
            #$WildAnimal; e.g., #$Dog includes the dingo dogs of
            #$Australia.  However, #$Dog excludes the members of #$Wolf,
            #$Fox, and the other non-dog subsets of #$CanineAnimal.
            #$Dog is an instance of #$BiologicalSpecies, Canis familiaris.</rdfs:comment>
        <guid>bd58daa0-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#OrganismClassificationType"/>
        <rdf:type rdf:resource="#BiologicalSpecies"/>
        <rdf:type rdf:resource="#BiologicalTaxon"/>
        <rdfs:subClassOf rdf:resource="#DomesticatedAnimal"/>
    </daml:Class>
    <daml:Class rdf:ID="DomesticPet">
        <rdfs:label>pets</rdfs:label>
        <rdfs:comment>The subset of #$DomesticatedAnimal whose elements
            are animals kept by humans primarily for their
            companionship.  (They may, however, do some chores such as
            catching mice.)  Many members of #$DomesticPet live in the
            homes of their owners.</rdfs:comment>
        <guid>bd590532-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#HumanOccupationConstructResident"/>
        <rdfs:subClassOf rdf:resource="#DomesticatedAnimal"/>
        <rdfs:subClassOf rdf:resource="#PortableObject"/>
    </daml:Class>
    <daml:Class rdf:ID="DomesticatedAnimal">
        <rdfs:label>domesticated animals</rdfs:label>
        <rdfs:comment>A subset of #$Animal; the collection of all
            animals which are kept by humans for labor, transportation,
            food, or as pets, and whose relations with humans are more
            or less cooperative.  #$DomesticatedAnimal does NOT include
            instances of #$Tiger being kept in zoos, though it arguably
            includes Shamu or Flipper.  Cf. #$WildAnimal, #$CaptiveAnimal.</rdfs:comment>
        <guid>c10c22cd-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <daml:disjointWith rdf:resource="#WildAnimal"/>
    </daml:Class>
    <daml:Class rdf:ID="DomesticatedAnimalFood">
        <rdfs:label>domesticated animal food</rdfs:label>
        <rdfs:comment>A collection of tangible stuff; a subset of
            #$TangibleProduct.  Each element of #$DomesticatedAnimalFood
            is a foodstuff produced by human beings and intended for
            consumption by domesticated animals.  This collection
            includes feed manufactured for horses, cattle, chickens, and
            other farm animals, as well as `pet foods&apos;.</rdfs:comment>
        <guid>bd588c3b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#ExistingStuffType"/>
    </daml:Class>
    <daml:Class rdf:ID="Doorway">
        <rdfs:label>doorways</rdfs:label>
        <rdfs:comment>A collection of portals.  Each element of
            #$Doorway is a portal in some instance of
            #$ShelterConstruction, suitable for people (and perhaps
            vehicles) to enter and exit.  For example, doorways to
            houses, office buildings, elevators, automobiles, airplanes,
            garages, etc.</rdfs:comment>
        <guid>bd58f914-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Portal"/>
        <rdfs:subClassOf rdf:resource="#Artifact"/>
    </daml:Class>
    <daml:Class rdf:ID="DoorwayCovering">
        <rdfs:label>doors</rdfs:label>
        <rdfs:comment>A collection of tangible objects.  Each element of
            #$DoorwayCovering is a physical object used to cover some
            kind of portal, including but not limited to doorways in
            buildings.  This collection also includes doors of cars,
            buses, subways, elevators, garages, airplane
            hangars--coverings over any doors that people (and perhaps
            vehicles) pass through.</rdfs:comment>
        <guid>bd5899ff-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdf:type rdf:resource="#ProductType"/>
        <rdfs:subClassOf rdf:resource="#PortalCovering"/>
    </daml:Class>
    <UnitVector-Precise rdf:ID="Down-Directly">
        <rdfs:label>down - directly</rdfs:label>
        <rdfs:comment>The direction straight down.  In the terrestrial
            context, #$Down-Directly points in the same direction as
            Earth&apos;s gravitational force vector.</rdfs:comment>
        <guid>bd5889eb-9c29-11b1-9dad-c379636f7270</guid>
    </UnitVector-Precise>
    <TerrestrialDirection rdf:ID="Down-Generally">
        <rdfs:label>downward</rdfs:label>
        <rdfs:comment>The element of #$VectorInterval that comprises the
            cone-shaped set of vectors pointing (from some reference
            point) within approximately forty-five degrees of #$Down-Directly.</rdfs:comment>
        <guid>bd58a496-9c29-11b1-9dad-c379636f7270</guid>
    </TerrestrialDirection>
    <daml:Class rdf:ID="Dress">
        <rdfs:label>dresses</rdfs:label>
        <rdfs:comment>The collection of all dresses, a kind of
            women&apos;s clothing</rdfs:comment>
        <guid>bd58b437-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdf:type rdf:resource="#ProductType"/>
        <rdfs:subClassOf rdf:resource="#WomensClothing"/>
    </daml:Class>
    <daml:Class rdf:ID="Drink">
        <rdfs:label>beverages</rdfs:label>
        <rdfs:comment>The collection of drinkable substances; a
            collection of edible stuff and a subset of #$FoodAndDrink.
            Each element of the collection #$Drink is a liquid of a type
            that is ingestible and commonly consumed by humans or
            animals.  Drinks are ingested without chewing.  Examples of
            #$Drink include all elements of the collections
            #$Water-Ingestible, #$Tea-Hot, #$HotChocolate, #$Lemonade,
            #$Beer. .  By default they are liquids.  Borderline examples
            include a thick milkshake or soup, even if there are solid
            objects suspended in it.  Thus #$LiquidTangibleThing is not
            necessarily (monotonically) a #$genls of #$Drink, though it
            is true by default that a #$Drink be an instance of
            #$LiquidTangibleThing.  I.e., by default, elements of
            #$Drink are in a #$LiquidStateOfMatter.  Another borderline
            example of a #$Drink is a glassful of poison or urine; it
            may be unpalatable or unsafe to drink a #$Drink.  Note that
            the #$Drink includes the portion of liquid, but not the
            container such as the glass or coffee cup or bowl.   So one
            borderline non-example is a glass of water -- as opposed to
            a glassful of water; the former includes the glass, the
            latter doesn&apos;t.   Other borderline non-examples
            include: an ice cube, a grape sno-cone, a scoop of ice cream
            with hot fudge sauce on it, and a tiny bit of liquid such as
            a single raindrop even if it enters one&apos;s mouth.</rdfs:comment>
        <guid>bd58f408-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdfs:subClassOf rdf:resource="#LiquidTangibleThing"/>
        <rdfs:subClassOf rdf:resource="#FoodAndDrink"/>
        <daml:disjointWith rdf:resource="#Food"/>
    </daml:Class>
    <daml:Class rdf:ID="DrinkingEvent">
        <rdfs:label>drink</rdfs:label>
        <rdfs:comment>A collection of events.  In each instance of this
            collection, a single individual consumes a portion of some
            drink.  A #$DrinkingEvent typically consists of several
            instances of #$DrinkingASip.  See #$EatingEvent.</rdfs:comment>
        <guid>bd58eeee-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#ConsumingFoodOrDrink"/>
    </daml:Class>
    <daml:Class rdf:ID="DrugPrescription">
        <rdfs:label>prescriptions</rdfs:label>
        <rdfs:comment>The legal document in which a doctor authorizes a
            patient to purchase a certain amount of a drug and take it
            according to some specified schedule.</rdfs:comment>
        <guid>c0fd5806-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#OfficialDocument"/>
    </daml:Class>
    <daml:Class rdf:ID="DrugProduct">
        <rdfs:label>medications</rdfs:label>
        <rdfs:comment>The collection of all drugs produced to be
            products.  The collection includes instances of drugs
            prescribed by a physician, purchased as over-the-counter
            medicines, or used for recreational purposes
            (#$AlcoholicBeverage, #$Nicotine, #$Caffeine, or illicit
            #$DrugProducts).  Note, that this is a #$Product
            (intentionally created or used) not merely a
            #$ChemicalCompoundType.  Thus salt #$Water would not be a
            subset of #$DrugProduct, even though saline solution would be.</rdfs:comment>
        <guid>bd58aef7-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdfs:subClassOf rdf:resource="#ConsumableProduct"/>
        <rdfs:subClassOf rdf:resource="#DrugSubstance"/>
        <rdfs:subClassOf rdf:resource="#Artifact"/>
    </daml:Class>
    <daml:Class rdf:ID="DrugSubstance">
        <rdfs:label>drugs</rdfs:label>
        <rdfs:comment>The class of substances that can be introduced
            into organism&apos;s bodies to produce certain physiological
            effects.  Includes both stuffs and objects made and/or
            marketed as #$DrugProducts, as well as naturally-occurring
            stuffs and objects that have physiological effects.</rdfs:comment>
        <guid>bfc1633e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
    </daml:Class>
    <daml:Class rdf:ID="DrugTherapy">
        <rdfs:label>drug therapies</rdfs:label>
        <rdfs:comment>A collection of medical care events in which drugs
            accomplish a medical purpose.  An instance of #$DrugTherapy
            is the result of an instance of #$AdministeringADrug (q.v.).
            An instance of #$DrugTherapy is the event of the
            patient&apos;s body undergoing the physiological effects of
            the drug it was given.   Note: #$DrugTherapy events do not
            include the administration of the drug; rather, they are the
            results of such administrations.  Cf. #$AdministeringADrug.</rdfs:comment>
        <guid>c0fd5e28-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#MedicalTreatmentEvent"/>
    </daml:Class>
    <TerrainAttribute rdf:ID="DryTropicalForest">
        <rdfs:label>dry tropical forest</rdfs:label>
        <rdfs:comment>Instances are areas of semi-deciduous forest
            growing in semi-arid areas of South America and the Indian
            subcontinent. Rainfall in these areas usually averages less
            than 250mm per annum. Thorny scrub and low- to medium-sized
            trees with thick bark and deep roots characterize the
            vegetation.  Source: The Times Atlas of the World (1995).</rdfs:comment>
        <guid>bff695f9-9c29-11b1-9dad-c379636f7270</guid>
    </TerrainAttribute>
    <TerrainAttribute rdf:ID="DryTropicalScrubAndThornRegion">
        <rdfs:label>dry tropical scrub and thorn region</rdfs:label>
        <rdfs:comment>Attribute of areas of low-growing, widely spaced
            shrubs, bushes, and succulents, found in extensive areas of
            Central and South America, Africa, the Indian subcontinent,
            and Australia.  Source: The Times Atlas of the World (1995).</rdfs:comment>
        <guid>bd813f73-9c29-11b1-9dad-c379636f7270</guid>
    </TerrainAttribute>
    <daml:Class rdf:ID="Drying">
        <rdfs:label>dry</rdfs:label>
        <rdfs:comment>A collection of events in which involves a
            reduction in the moistness of something -- either its water
            content or its surface wetness -- by evaporation, absorption
            (e.g. with towels), or some other process.  Typical objects
            of a #$Drying event include instances of: paint, food,
            dishes, clothes, humans.  The event of a clothes dryer
            running is a #$Drying.</rdfs:comment>
        <guid>bd58d388-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#IntrinsicStateChangeEvent"/>
        <rdfs:subClassOf rdf:resource="#PhysicalEvent"/>
    </daml:Class>
    <SharedNote rdf:ID="Dualist-Physical-AndGenericGeographyMtNote">
        <rdfs:label>dualist - physical - and generic geography mt note</rdfs:label>
        <rdfs:comment>#$GeographicalAgents (#$Country, #$City,
            #$Neighborhood, ...) are #$Agents which can be considered to
            have a specific territorial expanse.  In some cases, it is
            useful to consider the territory and the agent to be
            different entities, while in others it is useful to use the
            agent as a referent for the territory.  CYC allows for both
            of these interpretations, in different contexts.  In a
            physical geography microtheory (#$PhysicalGeographyMt and
            its submicrotheories) #$Agents are disjoint from places and
            &apos;(#$TerritoryFn &lt;#$Agent&gt;)&apos; is used to
            specify the territory.  In &apos;dualist&apos; microtheories
            (submicrotheories of #$DualistGeopoliticalMt) the elements
            of #$GeopoliticalEntity and #$GeographicalAgent are both
            #$Agents and #$GeographicalRegions.  These microtheories
            need not reify the #$physicalExtent of the entity, but just
            state geographic aspects directly about the agent/region
            combination.  Generic geography microtheories (e.g.
            #$WorldGeographyMt and #$UnitedStatesGeographyMt) are used
            for assertions that do not require the specification of
            whether or not a #$GeographicalAgent is to be treated as a
            #$GeographicalRegion.  For example, state
            (#$geopoliticalSubdivisions COUNTRY CITY) or
            (#$surroundsHorizontally #$AtlanticOcean
            #$Iceland-TheIsland) in a generic geography microtheory,
            (#$bordersOn #$Mali #$Niger) in a &apos;dualist&apos;
            microtheory, and (#$isa #$WallisAndFutunaIslands
            #$Archipelago) in a physical geography microtheory if it is
            being defined as a colony in a dualist microthory.</rdfs:comment>
        <guid>c06f6ab5-9c29-11b1-9dad-c379636f7270</guid>
    </SharedNote>
    <daml:Class rdf:ID="Ductility">
        <rdfs:label>ductilities</rdfs:label>
        <rdfs:comment>A collection of attributes; a subset of
            #$PhysicalAttribute.  Each element of #$Ductility describes
            a specific capacity of a physical material to be stretched,
            drawn, or hammered thin without breaking.  Different degrees
            of ductility may be represented using a
            #$GenericValueFunction.  Ductilities of objects are
            indicated with the predicate #$ductilityOfObject.</rdfs:comment>
        <guid>bd589773-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MeasurableAttributeType"/>
        <rdf:type rdf:resource="#MaterialStrengthType"/>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </daml:Class>
    <daml:Class rdf:ID="Dusk">
        <rdfs:label>dusks</rdfs:label>
        <rdfs:comment>Each #$Dusk is a dimly-lit period of time which is
            #$contiguousAfter a #$Sunset, and is the #$Event which
            starts a #$Night.</rdfs:comment>
        <guid>be010707-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#Twilight"/>
        <daml:disjointWith rdf:resource="#Dawn"/>
    </daml:Class>
    <daml:Class rdf:ID="Dying">
        <rdfs:label>deaths</rdfs:label>
        <rdfs:comment>A collection of events.  Each element of #$Dying
            is an event in which a living organism (i.e., an instance of
            #$Organism-Whole) ceases to live and thus ceases to exist.
            The physical portion of the organism may remain, but that is
            not considered an instance of #$Organism-Whole (cf.
            #$DeadAnimal).  Note that the expiring animal is related to
            its dying event by #$bodilyDoer (q.v.)--in contrast to the
            role an organism plays when it is the #$objectActedOn in a
            #$Killing-Biological event (which will have some #$Dying
            event among its #$subEvents), and cf. #$bodilyActedOn.</rdfs:comment>
        <guid>bd590953-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#SingleDoerAction"/>
        <rdfs:subClassOf rdf:resource="#BiologicalEvent"/>
        <daml:disjointWith rdf:resource="#PurposefulAction"/>
    </daml:Class>
    <daml:Class rdf:ID="ELAssertion">
        <rdfs:label>e l assertion</rdfs:label>
        <rdfs:comment>The collection of assertions in the EL language.
            When EL assertions are presented to the KB, the
            #$CycCanonicalizer transforms them into #$HLAssertions.</rdfs:comment>
        <guid>c12ed6da-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#ELSentence-Assertible"/>
        <rdfs:subClassOf rdf:resource="#ELSentence"/>
        <rdfs:subClassOf rdf:resource="#CycLAssertion"/>
        <daml:disjointWith rdf:resource="#HLAssertion"/>
    </daml:Class>
    <daml:Class rdf:ID="ELExpression">
        <rdfs:label>e l expression</rdfs:label>
        <rdfs:comment>The collection of all syntactically well-formed
            expressions in the EL language.  All of their
            subexpressions, if any, must also be in the EL language.</rdfs:comment>
        <guid>c0e1b69a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CycLExpression"/>
    </daml:Class>
    <daml:Class rdf:ID="ELExpression-Askable">
        <rdfs:label>e l expression - askable</rdfs:label>
        <rdfs:comment>The subcollection of syntactically well-formed
            #$ELExpressions  which obey arity constraints, but but do
            not necessarily obey other  semantic constraints (e.g.
            argument type constraints).   The name &apos;Askable&apos;
            derives from #$ELSentence-Askable, but instances  of
            #$ELExpression-Askable are not necessarily askable as a
            query (after being converted to HL form by the
            #$CycCanonicalizer) unless they  are also instances of
            #$ELSentence-Askable.  See #$CycLQuery for more details.</rdfs:comment>
        <guid>c06a5e56-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#ELExpression"/>
        <rdfs:subClassOf rdf:resource="#CycLExpression-Askable"/>
    </daml:Class>
    <daml:Class rdf:ID="ELExpression-Assertible">
        <rdfs:label>e l expression - assertible</rdfs:label>
        <rdfs:comment>The subcollection of syntactically and
            semantically well-formed #$ELExpressions.  The name
            &apos;Assertible&apos; derives from #$ELSentence-Assertible,
            but instances  of #$ELExpression-Assertible are not
            necessarily assertible into the KB (after being converted to
            HL form by the #$CycCanonicalizer) unless they  are also
            instances of #$ELSentence-Assertible.</rdfs:comment>
        <guid>bf51a8d8-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CycLExpression-Assertible"/>
        <rdfs:subClassOf rdf:resource="#ELExpression-Askable"/>
        <rdfs:subClassOf rdf:resource="#ELExpression"/>
    </daml:Class>
    <daml:Class rdf:ID="ELFormula">
        <rdfs:label>ELF</rdfs:label>
        <rdfs:comment>The collection of expressions in the EL language
            which involve the application of a relation to some arguments.</rdfs:comment>
        <guid>be88bb87-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#ELExpression"/>
        <rdfs:subClassOf rdf:resource="#CycLFormula"/>
        <daml:disjointWith rdf:resource="#HLReifiedFormula"/>
    </daml:Class>
    <daml:Class rdf:ID="ELNonAtomicTerm">
        <rdfs:label>NAUT</rdfs:label>
        <rdfs:comment>The collection of non-atomic denotational terms in
            the EL language. Each instance of #$ELNonAtomicTerm has as
            its functor either an instance of #$Function-Denotational or
            a function-denoting function. Also it optionally has other
            EL terms as additional arguments. If the functor is an
            instance of #$ReifiableFunction, an #$ELNonAtomicTerm can be
            reified, whereupon it becomes an #$HLNonAtomicReifiedTerm,
            or &apos;NART&apos;.</rdfs:comment>
        <guid>bfbd3230-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#CycLFormula"/>
        <rdfs:subClassOf rdf:resource="#CycLNonAtomicTerm"/>
        <rdfs:subClassOf rdf:resource="#ELFormula"/>
        <daml:disjointWith rdf:resource="#HLNonAtomicReifiedTerm"/>
    </daml:Class>
    <daml:Class rdf:ID="ELNonAtomicTerm-Askable">
        <rdfs:label>e l non atomic term - askable</rdfs:label>
        <rdfs:comment>The subcollection of syntactically well-formed
            non-atomic terms in the EL language  which obey arity
            constraints, but but do not necessarily obey other  semantic
            constraints (e.g. argument type constraints).   These terms
            &apos;make enough  sense&apos; to be used as part of a
            query, after being converted into HL form by the
            #$CycCanonicalizer.  Just because a term is
            &apos;askable&apos; does not require  it to be used in a
            query, and denotational terms are not askable themselves.
            Each instance of this collection involves a
            #$Function-Denotational applied to some number of arguments,
            as permitted  by the arity of the relation.  See #$CycLQuery
            for more details.</rdfs:comment>
        <guid>bf05e356-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CycLNonAtomicTerm-Askable"/>
        <rdfs:subClassOf rdf:resource="#ELNonAtomicTerm"/>
        <rdfs:subClassOf rdf:resource="#ELExpression-Askable"/>
    </daml:Class>
    <daml:Class rdf:ID="ELNonAtomicTerm-Assertible">
        <rdfs:label>e l non atomic term - assertible</rdfs:label>
        <rdfs:comment>The collection of syntactically and semantically
            well-formed non-atomic terms in the EL language.  These
            sentences meet the criteria necessary to be part of an
            assertion into the Cyc KB,  after being converted into HL
            form by the #$CycCanonicalizer.  Instances of this
            collection are not themselves assertible.  Just because a
            non-atomic term is assertible does not require it to be
            used in an assertion.   Each instance of this collection
            involves a #$Function-Denotational applied to some number of
            arguments, as permitted by the arity of the logical
            relation.  For a thorough discussion of what constitutes a
            well-formed CycL formula, see the Cyc documentation.</rdfs:comment>
        <guid>bf7697ce-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#ELNonAtomicTerm"/>
        <rdfs:subClassOf rdf:resource="#ELExpression-Assertible"/>
        <rdfs:subClassOf rdf:resource="#CycLNonAtomicTerm-Assertible"/>
        <rdfs:subClassOf rdf:resource="#ELNonAtomicTerm-Askable"/>
    </daml:Class>
    <daml:Class rdf:ID="ELReifiableDenotationalTerm">
        <rdfs:label>e l reifiable denotational term</rdfs:label>
        <rdfs:comment/>
        <guid>c12bcd6c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
    </daml:Class>
    <daml:Class rdf:ID="ELRelation">
        <rdfs:label>e l relation</rdfs:label>
        <rdfs:comment>A subset of #$Relation such that instances are
            only permitted at  the EL; that is, the canonicalizer will
            transform expressions that  reference instances of
            #$ELRelation into equivalent expressions that do not
            reference instances of #$ELRelation; this transformation is
            guided by the  value (arg2) of #$expansion for each #$ELRelation</rdfs:comment>
        <guid>c09a6e2f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdf:type rdf:resource="#RelationshipType"/>
    </daml:Class>
    <daml:Class rdf:ID="ELSentence">
        <rdfs:label>e l sentence</rdfs:label>
        <rdfs:comment>The collection of syntactically well-formed
            sentences, also called &apos;logical formulas&apos;, in the
            EL language. Each instance of #$ELSentence involves a
            logical relation (a #$Predicate or #$TruthFunction) applied
            to some arguments. #$ELSentences do not necessarily obey
            arity constraints or other semantic constraints (e.g.
            argument type constraints).</rdfs:comment>
        <guid>bea72250-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#ELFormula"/>
        <rdfs:subClassOf rdf:resource="#CycLSentence"/>
        <daml:disjointWith rdf:resource="#HLAssertion"/>
    </daml:Class>
    <daml:Class rdf:ID="ELSentence-Askable">
        <rdfs:label>e l sentence - askable</rdfs:label>
        <rdfs:comment>The subcollection of syntactically well-formed
            sentences in the EL language which obey arity constraints,
            but but do not necessarily obey other semantic constraints
            (e.g. argument type constraints).   These sentences
            &apos;make enough sense&apos; to be asked as a query, after
            being converted into HL form by the #$CycCanonicalizer.  Of
            course, just because a sentence is askable does not require
            it to be used in a query. Each instance of this collection
            involves a logical relation (a #$Predicate or
            #$TruthFunction) applied to some number of arguments, as
            permitted by the arity of the relation. Note that an
            instance of #$ELSentence-Askable does not mean that the
            sentence must be used in a query; only that it can be used
            in a query. See #$CycLQuery for more details.</rdfs:comment>
        <guid>bf581c53-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdf:type rdf:resource="#LinguisticObjectType"/>
        <rdfs:subClassOf rdf:resource="#CycLSentence"/>
        <rdfs:subClassOf rdf:resource="#CycLSentence-Askable"/>
        <rdfs:subClassOf rdf:resource="#ELSentence"/>
        <rdfs:subClassOf rdf:resource="#ELExpression-Askable"/>
    </daml:Class>
    <daml:Class rdf:ID="ELSentence-Assertible">
        <rdfs:label>CycL formulas</rdfs:label>
        <rdfs:comment>The collection of syntactically and semantically
            well-formed sentences in the EL language. These sentences
            meet the criteria necessary to be asserted into the Cyc KB,
            after being transformed into #$HLAssertions by the
            #$CycCanonicalizer.  Of course, just because a sentence is
            assertible does not require it to be used in an assertion.
            Each instance of this collection involves a logical relation
            (a #$Predicate or #$TruthFunction) applied to some number of
            arguments, as permitted by the arity of the logical
            relation. Example: (#$and (#$isa #$Pittman #$HumanCyclist)
            (#$residesInRegion #$Pittman #$CityOfAustinTX)). For a
            thorough discussion of what constitutes a well-formed CycL
            formula, see the Cyc documentation.</rdfs:comment>
        <guid>bd58809e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#LinguisticObjectType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#ELSentence"/>
        <rdfs:subClassOf rdf:resource="#ELSentence-Askable"/>
        <rdfs:subClassOf rdf:resource="#ELExpression-Assertible"/>
        <rdfs:subClassOf rdf:resource="#CycLSentence-Assertible"/>
        <rdfs:subClassOf rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
        <rdfs:subClassOf rdf:resource="#LinguisticObject"/>
    </daml:Class>
    <daml:Class rdf:ID="ELSentenceTemplate">
        <rdfs:label>EL formula template</rdfs:label>
        <rdfs:comment>The collection of expressions which are valid CycL
            formulas except that their EL variables are not
            canonicalized into HL variables.</rdfs:comment>
        <guid>bf8471b3-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdf:type rdf:resource="#LinguisticObjectType"/>
        <rdfs:subClassOf rdf:resource="#AbstractInformationalThing"/>
        <rdfs:subClassOf rdf:resource="#ComputationalObject"/>
        <rdfs:subClassOf rdf:resource="#ELTemplate"/>
    </daml:Class>
    <daml:Class rdf:ID="ELTemplate">
        <rdfs:label>e l template</rdfs:label>
        <rdfs:comment>The collection of expressions for which EL
            variables are not canonicalized into HL variables,
            #$ELRelations are not expanded, and functions are not reified.</rdfs:comment>
        <guid>be923319-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdf:type rdf:resource="#LinguisticObjectType"/>
        <rdfs:subClassOf rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
    </daml:Class>
    <daml:Class rdf:ID="ELVariable">
        <rdfs:label>EL variables</rdfs:label>
        <rdfs:comment>The collection of all variables in the EL
            language, such as ?WHAT or ?X.</rdfs:comment>
        <guid>bd61ff36-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
        <rdfs:subClassOf rdf:resource="#SubLSymbol"/>
        <rdfs:subClassOf rdf:resource="#CycLVariable"/>
        <rdfs:subClassOf rdf:resource="#ELExpression"/>
        <rdfs:subClassOf rdf:resource="#SubLVariable"/>
        <daml:disjointWith rdf:resource="#HLVariable"/>
    </daml:Class>
    <daml:Class rdf:ID="Ear">
        <rdfs:label>ears</rdfs:label>
        <rdfs:comment>The organ of hearing, which occur in pairs on most animals</rdfs:comment>
        <guid>bd58cbd3-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#AnimalBodyPartType"/>
        <rdf:type rdf:resource="#SymmetricAnatomicalPartType"/>
        <rdfs:subClassOf rdf:resource="#VibrationThroughAMediumSensor"/>
        <rdfs:subClassOf rdf:resource="#AnimalBodyPart"/>
    </daml:Class>
    <daml:Class rdf:ID="EarthStuff">
        <rdfs:label>earth stuff</rdfs:label>
        <rdfs:comment>A collection of tangible things.  Each element in
            #$EarthStuff is a portion of the stuff that the ground of
            Earth (at or near its land surface) is made of, including
            rocks, boulders, sand grains, soil, mud, etc., and mixtures
            of those things (such as islands or whole continents).
            Examples: #$Australia, #$CapeCod, ZionHill, #$GreatSmokyMountains.</rdfs:comment>
        <guid>c0fba244-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TangibleStuffCompositionType"/>
        <daml:disjointWith rdf:resource="#Agent"/>
    </daml:Class>
    <GeographicalDirection rdf:ID="East-Directly">
        <rdfs:label>east - directly</rdfs:label>
        <rdfs:comment>Due East, an element of #$TerrestrialDirection.</rdfs:comment>
        <guid>bd58f124-9c29-11b1-9dad-c379636f7270</guid>
    </GeographicalDirection>
    <GeographicalDirection rdf:ID="East-Generally">
        <rdfs:label>East</rdfs:label>
        <rdfs:comment>The general direction of East.  The element of
            #$VectorInterval that comprises the cone-shaped set of
            vectors pointing (from some reference point) within
            approximately forty-five degrees of #$East-Directly.</rdfs:comment>
        <guid>bd58a558-9c29-11b1-9dad-c379636f7270</guid>
    </GeographicalDirection>
    <daml:Class rdf:ID="EatingEvent">
        <rdfs:label>eating event</rdfs:label>
        <rdfs:comment>A collection of events.  Each element of
            #$EatingEvent is an event which involves the consumption of
            a substantial portion of food by a single individual (human
            or other animal).   An instance of #$EatingEvent is a meal
            or snack taken in its entirety; it is a series of individual
            #$EatingAMorsel events. Note:  If a group of people gets
            together and eats lunch, that activity is represented by an
            instance of #$HavingAMeal; during that `super-event&apos;
            each participant engages in his/her own instance of
            #$EatingEvent, and all of those are #$subEvents of the
            #$HavingAMeal event.</rdfs:comment>
        <guid>bd58d570-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#ConsumingFoodOrDrink"/>
    </daml:Class>
    <daml:Class rdf:ID="EcholocationPerception">
        <rdfs:label>echolocations</rdfs:label>
        <rdfs:comment>#$EcholocationPerception is the collection of
            spatial #$Perceivings in which a #$PerceptualAgent (such as
            a bat or a submarine) generates sounds (potentially ultra-
            or sub- sonic in frequency), hears the sounds reflected from
            surfaces, and thereby acquires information about the
            position of other objects in its environment.</rdfs:comment>
        <guid>bd58fd57-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#Perceiving"/>
    </daml:Class>
    <daml:Class rdf:ID="EcologicalRegion">
        <rdfs:label>ecological regions</rdfs:label>
        <rdfs:comment>A collection of geographical regions.  Each
            element of #$EcologicalRegion is a region having one or more
            characteristic ecosystems.  From knowledge of those
            ecosystems, we can posit whether certain organisms can
            forage, reproduce, and live successfully there.  Information
            about ecological regions typically also includes what kinds
            of organisms are in fact found there.  In theory, any
            arbitrary continuous region could be analyzed as an
            ecological region, but most regions identified in practice
            have some kind of sameness or systematic interconnection in
            their topology, climate, and biology.  Examples: the
            #$WesternDesertOfEgypt, the #$GreatBarrierReef, the #$Amazon-Region.</rdfs:comment>
        <guid>bd58ca27-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdfs:subClassOf rdf:resource="#GeographicalRegion"/>
    </daml:Class>
    <daml:Class rdf:ID="EdgeOnObject">
        <rdfs:label>edges</rdfs:label>
        <rdfs:comment>The collection of all edges on objects that are
            instances of #$PartiallyTangible.  For a two-dimensional
            object, its boundaries other than corners are it edges.  For
            a three dimensional  object the edges are the outer portions
            of those extremities, excluding any corners
            (#$Corner-2or3d), that are much more acute in  cross section
            in one direction than in most other directions at the same
            point.  Some objects, like spheres, hairs, poles and typical
            burrs, have no edges.  A discus has one, round, edge has
            four edges.  A mountain ridge might have only a single edge.
            A solid  polyhedron has six or more edges.</rdfs:comment>
        <guid>bd58f6db-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#RegionType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#EdgeOnObject-Generic"/>
    </daml:Class>
    <daml:Class rdf:ID="EdgeOnObject-Generic">
        <rdfs:label>edge on object - generic</rdfs:label>
        <rdfs:comment>This is the collection of all edges on spatial
            objects, tangible or intangible.  Edges define the
            boundaries of two-dimensional objects and the edges of the
            surface boundaries of three-dimensional objects.  Corners
            define where one edge ends and another begins.  See
            #$EdgeOnObject for a discussion of some examples of edges on
            physical objects.</rdfs:comment>
        <guid>bf9014fc-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Path-Simple"/>
        <rdfs:subClassOf rdf:resource="#SpatialThing"/>
    </daml:Class>
    <daml:Class rdf:ID="EdibleStuff">
        <rdfs:label>edible things</rdfs:label>
        <rdfs:comment>A collection of partially tangible stuff which all
            normal instances of some spec of #$Organism-Whole can
            consume and successfully metabolize, with or without
            resulting harm to themselves, a significant portion of any
            instance of. This collection includes virtually all animal
            and vegetable matter and instances of #$OralDrug. It does
            not necessarily include things that are ingested but not
            metabolized, such as the stones that birds swallow to aid in
            digestion, or dirt, paint chips, and coins ingested by
            children. The function #$EdibleByFn is used to specify the
            collections of edible stuff that are ingestible by all
            normal instances of certain specs of #$Organism-Whole,
            including #$Person. Note that whether an edible substance
            *also* has a detrimental effect if eaten is a separate
            question. Something can be both edible and poisonous.</rdfs:comment>
        <guid>bd5908ef-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#ConsumableProduct"/>
        <daml:disjointWith rdf:resource="#PhysicalDevice"/>
        <daml:disjointWith rdf:resource="#Organization"/>
    </daml:Class>
    <daml:Class rdf:ID="EducationLevelAttribute">
        <rdfs:label>educational levels</rdfs:label>
        <rdfs:comment>A collection of attributes.  Each
            #$EducationLevelAttribute, when applied to a person,
            indicates their level of education or current involvement in
            a course of study; if applied to a course of study, it
            indicates the level of it.  The very same attributes apply
            in both cases, though; some sample elements of this
            collection are:  #$PhDLevel, #$TwelfthGradeLevel,
            #$BachelorOfArtsLevel, #$MedicalDegreeLevel, etc.</rdfs:comment>
        <guid>bd58dc00-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#SocialAttributeType"/>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
        <rdfs:subClassOf rdf:resource="#SocialStatusAttribute"/>
    </daml:Class>
    <daml:Class rdf:ID="EducationalDegree">
        <rdfs:label>degrees</rdfs:label>
        <rdfs:comment>A collection of abstract (intangible) objects
            which consist of information about an agent.  Each element
            of #$EducationalDegree is a credential conferred, by some
            instance of #$EducationalOrganization, on a student who has
            successfully completed a prescribed course of study there.
            #$EducationalDegree includes high school, associate,
            baccalaureate, licensate, magisterial, professional, and
            doctoral degrees, etc.</rdfs:comment>
        <guid>bd58a9fa-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#Credential"/>
    </daml:Class>
    <daml:Class rdf:ID="EducationalOrganization">
        <rdfs:label>schools</rdfs:label>
        <rdfs:comment>A collection of educational organizations.  An
            element of #$EducationalOrganization may be a school, system
            of schools, college, seminary, etc., -- a place where
            teaching and/or training are programmed and provided as a
            service for students.  An educational organization may be
            public or private.  This collection includes #$AustinISD
            (i.e., the #$CityOfAustinTX Independent School District),
            #$StanfordUniversity, #$BrynMawrCollege,
            #$UniversityOfPennsylvaniaSchoolOfMedicine, and many other institutions.</rdfs:comment>
        <guid>bd588d41-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Organization"/>
        <daml:disjointWith rdf:resource="#Pharmacy"/>
    </daml:Class>
    <Entity rdf:ID="Egypt">
        <rdfs:label>Egypt</rdfs:label>
        <rdfs:comment>Egypt is an #$IndependentCountry in the northeast
            part of the #$ContinentOfAfrica; Egypt is east of #$Libya,
            north of the #$Sudan, south of the eastern
            #$MediterraneanSea and west of the #$RedSea.  This constant
            includes Egypt throughout time, in both its political and
            physical aspects.</rdfs:comment>
        <guid>bd589383-9c29-11b1-9dad-c379636f7270</guid>
    </Entity>
    <daml:Class rdf:ID="Elasticity">
        <rdfs:label>elasticity</rdfs:label>
        <rdfs:comment>A collection of attributes; a subset of
            #$PhysicalAttribute.  Each element of #$Elasticity
            represents a specific ability of a physical material to
            quickly and completely return to its original shape after
            deformation that does not induce breakage, without permanent
            change to its original dimensions.  For example, billiard
            balls have a high degree of elasticity in this sense.
            Elasticities of objects are indicated with the predicate #$elasticityOfObject.</rdfs:comment>
        <guid>bd5884d1-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MaterialStrengthType"/>
        <rdf:type rdf:resource="#DerivedNumericAttributeType"/>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </daml:Class>
    <daml:Class rdf:ID="ElectricalCharge">
        <rdfs:label>electrical charges</rdfs:label>
        <rdfs:comment>A collection of physical attributes.  Each element
            of #$ElectricalCharge is an amount of net electrical charge
            (positive or negative) possessed by a particular instance of
            #$PartiallyTangible.  Elements of #$ElectricalCharge may be
            either a fixed interval, such as the charge on one electron,
            or a range, such as a usable charge on a flashlight battery;
            see #$ScalarInterval.  Also see #$UnitOfCharge for the units
            used by Cyc to measure electrical charges.</rdfs:comment>
        <guid>bd5905db-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#FundamentalNumericAttributeType"/>
        <rdf:type rdf:resource="#PolarAttributeType"/>
        <rdfs:subClassOf rdf:resource="#PhysicalAttribute"/>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </daml:Class>
    <daml:Class rdf:ID="ElectricalComponent">
        <rdfs:label>electrical components</rdfs:label>
        <rdfs:comment>A collection of electrical components.  An
            instance of #$ElectricalComponent is an #$ElectricalDevice
            which is normally considered to be a part of some larger,
            more clearly distinguished #$PhysicalDevice (e.g., clearly
            distinguished in the sense that it is sold, moved, etc. as a
            unit).  The #$ElectricalComponent must be connected with
            other parts in order to perform its #$primaryFunction.</rdfs:comment>
        <guid>bd58d414-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdf:type rdf:resource="#ProductType"/>
        <rdfs:subClassOf rdf:resource="#ElectricalDevice"/>
    </daml:Class>
    <daml:Class rdf:ID="ElectricalConductor">
        <rdfs:label>electrical conductor</rdfs:label>
        <rdfs:comment>A collection of tangible things; a subset of
            #$PhysicalConductingMedia.  Each element of
            #$ElectricalConductor is a physical thing that can conduct
            electricity; e.g., a power cord, an electrical plug, a piece
            of metal.</rdfs:comment>
        <guid>bd588903-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdfs:subClassOf rdf:resource="#PhysicalConductingMedia"/>
    </daml:Class>
    <daml:Class rdf:ID="ElectricalDevice">
        <rdfs:label>electrical devices</rdfs:label>
        <rdfs:comment>A collection of physical devices; the most general
            collection of electrical devices.  Such devices require an
            input of electrical current (as #$energySource) in order to
            perform their intended functions.  Instances of
            #$ElectricalDevice include both complex devices (e.g.,
            elements of the collections #$StereoSystem or #$Computer)
            and simpler ones (e.g., elements of #$ElectricalComponents).
            Note:  in some contexts, crystal radios might be classified
            as inert (unpowered) electrical devices; the same for some
            sorts of passive radar detectors.  These are exceptional
            cases, but still elements of this collection.  In other
            contexts, the power for these devices can be viewed as being
            supplied from the outside, hence they are clearly
            `powered&apos; in such contexts.</rdfs:comment>
        <guid>bd58d451-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdf:type rdf:resource="#ProductType"/>
        <rdfs:subClassOf rdf:resource="#PoweredDevice"/>
    </daml:Class>
    <daml:Class rdf:ID="ElectricalResistance">
        <rdfs:label>electrical resistance</rdfs:label>
        <rdfs:comment>A collection of attributes; a subset of
            #$PhysicalAttribute.  Each element of #$ElectricalResistance
            is an attribute which measures the resistance to electrical
            flow through an object.  Examples: #$InsulatorResistance,
            #$ConductorResistance, #$SemiconductorResistance, #$SuperconductorResistance.</rdfs:comment>
        <guid>bd589bb2-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DerivedNumericAttributeType"/>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
        <rdfs:subClassOf rdf:resource="#PhysicalAttribute"/>
    </daml:Class>
    <daml:Class rdf:ID="ElectroMagneticRadiationSensor">
        <rdfs:label>electromagnetic radiation sensors</rdfs:label>
        <rdfs:comment>A subset of #$Sensor, namely those sensors that
            detect #$ElectromagneticRadiation.</rdfs:comment>
        <guid>bd589e97-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Sensor"/>
    </daml:Class>
    <daml:Class rdf:ID="ElectromagneticRadiation">
        <rdfs:label>electromagnetic radiation</rdfs:label>
        <rdfs:comment>A collection of events; a subset of
            #$WavePropagation.  Each element of
            #$ElectromagneticRadiation is an event that arises from the
            interaction of an electrical field and a magnetic field.
            Examples include the elements of the collections
            #$VisibleLight, #$RadioWaves, and #$XRays.</rdfs:comment>
        <guid>c1009603-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#WavePropagationType"/>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdf:type rdf:resource="#StuffType"/>
        <rdfs:subClassOf rdf:resource="#WavePropagation"/>
    </daml:Class>
    <daml:Class rdf:ID="Electron">
        <rdfs:label>electrons</rdfs:label>
        <rdfs:comment>A collection of objects; a subset of
            #$SubAtomicParticle.  Every instance of #$Electron is a
            subatomic particle with an #$ElectricalCharge of -1.</rdfs:comment>
        <guid>bd5881d3-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#SubAtomicParticle"/>
    </daml:Class>
    <daml:Class rdf:ID="ElectronicDevice">
        <rdfs:label>electronic devices</rdfs:label>
        <rdfs:comment>A collection of devices which use electronic
            circuitry.  More specifically, any instance of
            #$ElectronicDevice in which electricity passes through a
            vacuum or semiconductor.</rdfs:comment>
        <guid>bd589095-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdf:type rdf:resource="#ProductType"/>
        <rdfs:subClassOf rdf:resource="#ElectricalDevice"/>
    </daml:Class>
    <daml:Class rdf:ID="ElementStuff">
        <rdfs:label>chemical elements</rdfs:label>
        <rdfs:comment>A collection of tangible substances; a subset of
            #$TangibleThing.  Every instance of #$ElementStuff is a
            piece of tangible stuff, composed of a quantity of atoms,
            all of which are of the same chemical element.  That is,
            every atom in an individual piece of #$ElementStuff has the
            same number of protons in its atomic nucleus as does every
            other atom in that piece.  For example, all pieces of carbon
            are instances of #$ElementStuff.   All pieces of two of
            #$Carbon&apos;s subsets, #$Diamond and #$Graphite, also are
            instances of #$ElementStuff.  On the other hand, instances
            of #$Water, because they are constituted of both (some)
            #$Hydrogen and (some) #$Oxygen atoms, do not belong to the
            collection #$ElementStuff.</rdfs:comment>
        <guid>bd5908b9-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TangibleStuffCompositionType"/>
        <rdfs:subClassOf rdf:resource="#InanimateThing"/>
    </daml:Class>
    <daml:Class rdf:ID="ElementStuffTypeByNumberOfProtons">
        <rdfs:label>element stuff type by number of protons</rdfs:label>
        <rdfs:comment>A collection of collections.
            #$ElementStuffTypeByNumberOfProtons partitions the
            collection #$ElementStuff.  Each instance of
            #$ElementStuffTypeByNumberOfProtons is a subset of
            #$ElementStuff which is defined ONLY by the atomic
            composition of its instances -- neither the isotopic
            composition or physical state of the substances, nor any
            other additional feature, determines membership in a
            collection which #$isa #$ElementStuffTypeByNumberOfProtons.
            All that matters is that the instances of that type (i.e.,
            collection) of stuff are entirely composed of atoms having a
            particular number of protons in each atomic nucleus.  Thus,
            the collection #$Carbon is an instance of
            #$ElementStuffTypeByNumberOfProtons, but neither the
            collection #$Diamond nor the collection #$Graphite is (even
            though they are subsets of #$Carbon), because their members
            have additional qualifications.</rdfs:comment>
        <guid>bd590830-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="#ChemicalCompoundType"/>
    </daml:Class>
    <ThreeDimensionalShapeAttribute rdf:ID="Ellipsoidal">
        <rdfs:label>ellipsoidal</rdfs:label>
        <rdfs:comment>This instance of #$ShapeAttribute is held by all
            three dimensional objects such that the planar sections
            along its respective internal axes are #$Elliptical.  In
            other words, the shape of objects with this attribute should
            be roughly describable by taking some two dimensional
            ellipse and rotating it around its major axis in three
            space. Note that #$Spherical is a specialization of this attribute.</rdfs:comment>
        <guid>bfd0a066-9c29-11b1-9dad-c379636f7270</guid>
    </ThreeDimensionalShapeAttribute>
    <TwoDimensionalShapeAttribute rdf:ID="Elliptical">
        <rdfs:label>elliptical</rdfs:label>
        <rdfs:comment>#$Elliptical is the instance of #$ShapeAttribute
            shared by all elliptical objects in virtue of being
            elliptical.  Note that #$Circular is a specialization of
            this attribute, i.e. circular things are elliptical insofar
            as they are ellipses with eccentricity zero.</rdfs:comment>
        <guid>bf6bfa19-9c29-11b1-9dad-c379636f7270</guid>
    </TwoDimensionalShapeAttribute>
    <daml:Class rdf:ID="Embarrassment">
        <rdfs:label>embarrassment</rdfs:label>
        <rdfs:comment>Mental disturbance and confusion at self-exposure.
            #$Embarrassment is often an impediment to freedom of
            thought, speech, or action.  This is a collection; for an
            explanation of a typical #$FeelingAttributeType, see
            #$Happiness.  A more specialized #$FeelingAttributeType than
            #$Embarrassment is #$Shame.</rdfs:comment>
        <guid>bd58c194-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#FeelingAttributeType"/>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </daml:Class>
    <daml:Class rdf:ID="Embassy-TheMission">
        <rdfs:label>embassies</rdfs:label>
        <rdfs:comment>The collection of all embassies, the official
            diplomatic representations of a country A in a foreign
            country B. Not to be confused with the buildings in which
            such offices are hosted. See #$Embassy-TheBuilding.</rdfs:comment>
        <guid>bd59a62b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="Embryo">
        <rdfs:label>embryos</rdfs:label>
        <rdfs:comment>The collection of not yet fully-formed organisms,
            including mammals before birth, birds before hatching, and
            plants before sprouting from their seeds.  Note that the
            criteria of the collection #$Embryo do not correspond
            exactly with the meaning of the English word
            &apos;embryo&apos;, since #$Embryo includes zygotes,
            blastulas, the set of cells derived from the embryo after
            the fetus is formed (#$AmnioticSac + #$Fetus +
            #$Placenta-FetalPortion), etc.</rdfs:comment>
        <guid>c0fd5c79-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#LifeStageType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#BiologicalLivingObject"/>
    </daml:Class>
    <daml:Class rdf:ID="Emirate-Geopolitical">
        <rdfs:label>emirates</rdfs:label>
        <rdfs:comment>The collection of all Emirates, that is, those
            geopolitical entities, or territories, each of which is
            ordinarily ruled by an #$Amir-HeadOfState or an Emir (Amir)
            who is not necessariy a #$HeadOfState of an
            #$IndependentCountry, but rules a subsidiary region.  See
            especially the #$UnitedArabEmirates.</rdfs:comment>
        <guid>be5c29ab-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#SpatiallyDisjointRegionType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#GeopoliticalEntity"/>
    </daml:Class>
    <daml:Class rdf:ID="Emission">
        <rdfs:label>emission</rdfs:label>
        <rdfs:comment>A collection of processes; a subset of
            #$GeneralizedTransfer.  Each element of #$Emission is an
            event in which something `comes out&apos; of an object that
            actively contributes to that thing&apos;s emission (e.g., it
            is a #$providerOfMotiveForce).  The source is indicated with
            the predicate #$emitter. An entire #$Translocation is
            associated with an emission, and these are related through
            the predicate #$transferOutSubEvent.  If the thing which
            `comes out&apos; is an instance of #$PartiallyTangible, then
            the event belongs to a more specific collection,
            #$EmittingAnObject (q.v.). If the associated element of
            #$Translocation is an instance of #$WavePropagation, then
            the emission belongs to the more specialized collection,
            #$EmittingAWave (q.v.).</rdfs:comment>
        <guid>bed006f8-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#TransferOut"/>
        <rdfs:subClassOf rdf:resource="#Translocation"/>
    </daml:Class>
    <daml:Class rdf:ID="EmittingAWave">
        <rdfs:label>wave emissions</rdfs:label>
        <rdfs:comment>A collection of events; a subset of #$Emission.
            Each element is an event in which a wave is emitted at a
            #$fromLocation.  For example, Themistocles ordering his
            fleet to withdraw; Miles Davis playing the trumpet; an
            emergency flare burning by the side of the road.  See also #$WavePropagation.</rdfs:comment>
        <guid>bebe7cda-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#Emission"/>
    </daml:Class>
    <daml:Class rdf:ID="EmittingAnObject">
        <rdfs:label>emissions</rdfs:label>
        <rdfs:comment>A collection of events; and a subset of
            #$Emission.  An instance of #$EmittingAnObject is an
            emission event in which there is some #$PartiallyTangible
            which is the #$objectEmitted, i.e., the thing which `comes
            out&apos; of the #$emitter of the event.  The
            #$objectEmitted goes from (#$fromLocation) a place inside of
            the #$emitter to (#$toLocation) some place that is not
            within the #$emitter.  The #$emitter plays an active role
            (#$doneBy and #$providerOfMotiveForce) in the emission.
            Examples: the birth of a baby, a bullet shot from a gun, a
            venonous snake depositing poison.  Negative examples:  a
            person leaving a building (the building is not active),
            throwing a ball (the ball was not inside the person before
            the throwing).</rdfs:comment>
        <guid>bd58e6c8-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#Translation-LocationChange"/>
        <rdfs:subClassOf rdf:resource="#Emission"/>
    </daml:Class>
    <daml:Class rdf:ID="EmittingSound">
        <rdfs:label>sound emissions</rdfs:label>
        <rdfs:comment>A collection of events; a subset of
            #$EmittingAWave.  Each element of #$EmittingSound is an
            event in which an instance of #$Sound is emitted from some
            #$waveSource.  Examples: an explosion generating a sound
            wave; a plucked violin string resonating; a baby crying; a
            person saying `Hello&apos;.</rdfs:comment>
        <guid>bd589e37-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#EmittingAWave"/>
    </daml:Class>
    <daml:Class rdf:ID="Employee">
        <rdfs:label>employees</rdfs:label>
        <rdfs:comment>A collection of persons; a subset of
            #$Professional.  Each element of #$Employee works directly
            for some business.  Disjoint with #$SelfEmployedWorker.</rdfs:comment>
        <guid>bd58ec41-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#OccupationType"/>
        <rdfs:subClassOf rdf:resource="#Professional"/>
        <daml:disjointWith rdf:resource="#SelfEmployedWorker"/>
    </daml:Class>
    <daml:Class rdf:ID="EmployeeHiring">
        <rdfs:label>employee-hiring events</rdfs:label>
        <rdfs:comment>A collection of events; a subset of
            #$MakingAnAgreement.  Each element of #$EmployeeHiring is an
            event in which some agent--either an organization or
            individual--hires a person to work as its employee. See also
            #$employees, #$WorkAgreement.</rdfs:comment>
        <guid>bd58d9c8-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#OrganizationalTransferIn"/>
        <rdfs:subClassOf rdf:resource="#MakingAnAgreement"/>
    </daml:Class>
    <daml:Class rdf:ID="EmploymentTermination">
        <rdfs:label>employment termination</rdfs:label>
        <rdfs:comment>A collection of events; a subset of
            #$EndingAnAgreement.  Each element of
            #$EmploymentTermination is an event in which some employee
            ceases to work for his or her employer.  The termination may
            be initiated by either party, or it may have been specified
            in the original #$WorkAgreement (q.v.).  Different kinds of
            #$EmploymentTermination are specified by the subsets
            #$Resigning, #$EmployeeLayoff, #$RetirementEvent, etc.</rdfs:comment>
        <guid>bd58d986-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#OrganizationalTransferOut"/>
        <rdfs:subClassOf rdf:resource="#EndingAnAgreement"/>
    </daml:Class>
    <daml:Class rdf:ID="EmptySpaceRegion">
        <rdfs:label>empty space region</rdfs:label>
        <rdfs:comment>A specialization of #$SpaceRegion whose instances
            are connected regions of empty space located in the
            empirically observable universe.  The meaning of  empty
            depends on context.  In a high-energy physics microtheory
            where  empty  is defined as containing no particles, an
            empty space region would be a complete vacuum (see also
            #$Vacuum).  In #$AmbientConditionsMt an empty space region
            would be occupied by a piece of #$Atmosphere.  An undersea
            context could treat empty space regions as filled with
            seawater.  An instance of #$EmptySpaceRegion is intangible,
            and not to be confused with the material -- if any -- that
            occupies it (cf. #$FreeSpaceContent).</rdfs:comment>
        <guid>bd58ee65-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#StuffType"/>
        <rdfs:subClassOf rdf:resource="#SpaceRegion"/>
        <daml:disjointWith rdf:resource="#Situation"/>
    </daml:Class>
    <daml:Class rdf:ID="Encrypting">
        <rdfs:label>encrypting events</rdfs:label>
        <rdfs:comment>The collection of actions in which some
            transformation is applied to an IBT
            (#$InformationBearingThing) which renders it unaccessible to
            all but the intended audience, since the method required to
            decrypt the IBT is secret.</rdfs:comment>
        <guid>bd60996f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="EndingAnAgreement">
        <rdfs:label>end of an agreements</rdfs:label>
        <rdfs:comment>A collection of events.  Each element of the
            collection #$EndingAnAgreement is an event in which some
            instance of #$Agreement comes to an end.  For example,
            instances of #$EmploymentTermination and #$EndingMembership.</rdfs:comment>
        <guid>bd589fb3-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#SocialOccurrence"/>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
    </daml:Class>
    <daml:Class rdf:ID="EnergyConversionProcess">
        <rdfs:label>energy conversion process</rdfs:label>
        <rdfs:comment>A collection of events.  In each instance of
            #$EnergyConversionProcess, energy is converted from one form
            to another.</rdfs:comment>
        <guid>bd58f827-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#TransformationEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="Engine">
        <rdfs:label>engines</rdfs:label>
        <rdfs:comment>A collection of #$PoweredDevices.  An instance of
            #$Engine is a device that changes some form of energy into
            motion (usually rotation).  An engine may operate by burning
            some type of fuel (as do jet engines and internal combustion
            engines), or it may be powered by electricity, fluid flow, etc.</rdfs:comment>
        <guid>bd58cec4-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#MechanicalDevice"/>
        <rdfs:subClassOf rdf:resource="#PoweredDevice"/>
    </daml:Class>
    <daml:Class rdf:ID="Engineer">
        <rdfs:label>engineers</rdfs:label>
        <rdfs:comment>A collection of persons; a subset of
            #$Professional.  Each element of #$Engineer is a
            professional who works in some branch of engineering.
            Elements of #$Engineer include the members of the subsets
            #$ElectricalEngineer, #$ChemicalEngineer, #$CivilEngineer,
            #$MechanicalEngineer, etc.</rdfs:comment>
        <guid>bd59015a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#OccupationType"/>
        <rdfs:subClassOf rdf:resource="#Professional"/>
    </daml:Class>
    <LivingLanguage rdf:ID="EnglishLanguage">
        <rdfs:label>English Language</rdfs:label>
        <rdfs:comment>The Germanic Language native to England, now
            spoken in the United Kindom, the United States, and many
            other countries.</rdfs:comment>
        <guid>bd58b700-9c29-11b1-9dad-c379636f7270</guid>
    </LivingLanguage>
    <GeneralMicrotheory rdf:ID="EnglishParaphraseMt">
        <rdfs:label>english paraphrase mt</rdfs:label>
        <rdfs:comment>This is the default context used for generating
            English paraphrases for CycL expressions.  Many of the
            assertions required for English paraphrase generation
            can be found in this context, including those with the
            predicates #$genFormat and #$genPhrase.</rdfs:comment>
        <guid>bda16220-9c29-11b1-9dad-c379636f7270</guid>
    </GeneralMicrotheory>
    <daml:Class rdf:ID="EnglishWord">
        <rdfs:label>English words</rdfs:label>
        <rdfs:comment>The collection of all lexical words in English; a
            subset of #$LexicalWord.  Different inflectional forms of a
            word do not count as different words; for example,
            #$Eat-TheWord encompasses the strings &apos;eat&apos;,
            &apos;eating&apos;, &apos;ate&apos;, etc.</rdfs:comment>
        <guid>bd588075-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#LinguisticObjectType"/>
        <rdfs:subClassOf rdf:resource="#LexicalWord"/>
    </daml:Class>
    <daml:Class rdf:ID="Enjoyment">
        <rdfs:label>enjoyment</rdfs:label>
        <rdfs:comment>The agreeable emotion of taking pleasure or
            satisfaction in an experience.  This is a collection; for an
            explanation of a typical #$FeelingAttributeType, see
            #$Happiness.  Some more specialized #$FeelingAttributeTypes
            are #$Delight, #$Celebratory-Emotion, etc.</rdfs:comment>
        <guid>bd589154-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#FeelingAttributeType"/>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </daml:Class>
    <daml:Class rdf:ID="EnlistedPerson">
        <rdfs:label>enlisted people</rdfs:label>
        <rdfs:comment>A collection of people, a subset   of
            #$MilitaryPerson. Each element of this collection is
            somebody who is an enlisted person in some
            #$MilitaryOrganization, such as a private.</rdfs:comment>
        <guid>bd58a708-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdf:type rdf:resource="#OccupationType"/>
        <rdfs:subClassOf rdf:resource="#MilitaryPerson"/>
    </daml:Class>
    <daml:Class rdf:ID="EntertainmentEvent">
        <rdfs:label>entertainment events</rdfs:label>
        <rdfs:comment>The collection of activities which are performed
            by one party primarily to amuse or entertain others. Every
            instance of #$EntertainmentEvent necessarily has among its
            subevents both an instance of (#$PerformingFn
            #$EntertainmentEvent) and an instance of (#$AttendingFn
            #$EntertainmentEvent). It is thus distinguished from
            #$RecreationalActivity: a #$RecreationalActivity need not
            involve any #$Entertainers, whereas an instance of
            #$EntertainmentEvent will always involve both an
            entertainer, and an entertainee. Note: This is more general
            than #$EntertainmentPerformance because it may not entail a
            formal performance per se. E.g., #$JokeTelling is a spec of
            #$EntertainmentEvent because it involves a joke-teller, the
            entertainer, and a listener, the entertainee. Such an event,
            however, can occur under informal circumstances, and need
            not be a formal performance. Thus #$JokeTelling is not a
            spec of #$EntertainmentPerformance.--Huffer, Dec 2, 1998</rdfs:comment>
        <guid>bd58e10a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#ServiceEvent"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#SocialOccurrence"/>
    </daml:Class>
    <daml:Class rdf:ID="EntertainmentOrArtsProfessional">
        <rdfs:label>entertainment or arts professional</rdfs:label>
        <rdfs:comment>A collection of persons; a subset of
            #$Professional.  Each element of
            #$EntertainmentOrArtsProfessional is a person who uses some
            sort of creative or artistic abilities in the main function
            of his or her job.  #$EntertainmentOrArtsProfessional
            includes both performing artists and producers of tangible
            artworks, either creative or commercial.  This collection
            does NOT include people working on the business side of
            those professions, such as producers or art dealers, whose
            #$jobAttributes are more similar to those of other business
            professionals (e.g., managers, marketers, sales
            representatives) than to the artists&apos;; cf. #$EntertainmentOrArtsAdministrator.</rdfs:comment>
        <guid>bd58ea20-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#OccupationType"/>
        <rdfs:subClassOf rdf:resource="#Professional"/>
    </daml:Class>
    <daml:Class rdf:ID="EntertainmentPerformance">
        <rdfs:label>performances</rdfs:label>
        <rdfs:comment>The collection of public and private entertainment
            performances, like plays, street performances, ballets,
            movies.  Each #$EntertainmentPerformance  is a presentation
            or exhibition, to a human audience, with artistic or
            entertainment value.   Note:  Movies are included even
            though the Performers aren&apos;t performing in the same
            point in space-time.  But we draw the line at still
            photographs; i.e., those are not considered #$EntertainmentPerformances.</rdfs:comment>
        <guid>bd58c027-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#EntertainmentEvent"/>
        <rdfs:subClassOf rdf:resource="#ServiceEvent"/>
        <rdfs:subClassOf rdf:resource="#AccessingAnIBT"/>
    </daml:Class>
    <daml:Class rdf:ID="Entity">
        <rdfs:label>entities</rdfs:label>
        <rdfs:comment>X is an #$Entity if it is a `maximal&apos;
            #$SomethingExisting.  What we mean by that is that there
            cannot be another #$SomethingExisting of which X is merely a
            subabstraction (see #$subAbstrac).  So #$AlbertEinstein is
            an entity, but AlbertEinsteinWhileAtPrinceton is not.  In
            other words, an #$Entity represents the entire existence of
            a thing, not just one or more `temporal chunks&apos; or
            #$timeSlices of a thing.</rdfs:comment>
        <guid>bd58dd15-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#SomethingExisting"/>
    </daml:Class>
    <TwoDimensionalShapeAttribute rdf:ID="Equiangular">
        <rdfs:label>equiangular</rdfs:label>
        <rdfs:comment>This is the attribute shared by all objects that
            are polygon shaped (see #$PolygonShaped) and in which all
            angles between edges (see #$angleBetweenEdges) have the same measure.</rdfs:comment>
        <guid>be209c21-9c29-11b1-9dad-c379636f7270</guid>
    </TwoDimensionalShapeAttribute>
    <TwoDimensionalShapeAttribute rdf:ID="EquilateralShaped">
        <rdfs:label>equilateral shaped</rdfs:label>
        <rdfs:comment>This is the instance of #$ShapeAttribute shared by
            all polygon-shaped objects each of whose edges has the same length.</rdfs:comment>
        <guid>c13f6e1c-9c29-11b1-9dad-c379636f7270</guid>
    </TwoDimensionalShapeAttribute>
    <daml:Class rdf:ID="EthnicGroupType">
        <rdfs:label>ethnic groups</rdfs:label>
        <rdfs:comment>A collection of collections.  An #$EthnicGroupType
            is a set of people whose group-organization, practices or
            characteristics are based on ethnic origins.  E.g., some
            #$EthnicGroupTypes are: #$EthnicGroupOfVietnamese,
            #$EthnicGroupOfIndiansOfTheUS, etc.</rdfs:comment>
        <guid>bd58dcae-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="#PersonTypeByCulture"/>
    </daml:Class>
    <daml:Class rdf:ID="EukaryoticCell">
        <rdfs:label>eukaryotic cells</rdfs:label>
        <rdfs:comment>The collection of eukaryotic cells, #$Cells which
            serve as the basic structural unit of eukaryotic organisms.
            These cells have a membrane-bound nucleus and other
            organelles.  Multicellular Organisms generally have
            #$EukaryoticCells; #$EukaryoticCell DNA has introns.
            Certain #$EukaryoticCells, like the red blood corpuscles of
            #$Persons with heathy #$Spleens, lack nuclei.</rdfs:comment>
        <guid>bd58eee7-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Cell"/>
        <daml:disjointWith rdf:resource="#ProkaryoticCell"/>
    </daml:Class>
    <daml:Class rdf:ID="EvaluatableFunction">
        <rdfs:label>evaluatable functions</rdfs:label>
        <rdfs:comment>A collection of Cyc functions.  Each element of
            #$EvaluatableFunction is a Cyc function which is associated
            (via #$evaluationDefn) with a piece of Heuristic Level
            (SubL) code that computes the result of applying the
            function to legal arguments.  See #$PlusFn for a good
            example.  An evaluatable function is evaluated only if none
            of its arguments is unbound.  See also the more general #$EvaluatableRelation.</rdfs:comment>
        <guid>bd58829b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdf:type rdf:resource="#RelationshipType"/>
        <rdfs:subClassOf rdf:resource="#UnreifiableFunction"/>
        <rdfs:subClassOf rdf:resource="#EvaluatableRelation"/>
        <rdfs:subClassOf rdf:resource="#Function-Denotational"/>
    </daml:Class>
    <daml:Class rdf:ID="EvaluatableRelation">
        <rdfs:label>evaluatable relation</rdfs:label>
        <rdfs:comment>Instances of #$EvaluatableRelation are functions
            and predicates for which there is some piece of system code
            that can be invoked to evaluate an expression using the
            function or predicate.  Functions having this property
            should be an instance of the more specific
            #$EvaluatableFunction; in those cases, the result of
            evaluating the expression is a new term.  For example,
            (#$PlusFn (#$Inch 3) (#$Inch 1)), when evaluated, results in
            the term (#$Inch 4).  Predicates which are evaluatable have
            a piece of system code associated which can be used to
            obtain the truth value for any ground formula formed with
            the predicate.  For example, (#$greaterThan (#$Inch 3)
            (#$Inch 1)) evaluates to ``true&apos;&apos;.  The predicate
            #$evaluationDefn is used to state the name of the piece of
            system code to be used to evaluate expressions formed with
            an #$EvaluatableRelation.</rdfs:comment>
        <guid>bfb0e3f0-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#RelationshipType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#Relation"/>
    </daml:Class>
    <daml:Class rdf:ID="Evaporating">
        <rdfs:label>evaporations</rdfs:label>
        <rdfs:comment>The collection of events in which a piece of stuff
            is transformed from a #$LiquidStateOfMatter to a
            #$GaseousStateOfMatter by evaporation as opposed to boiling.</rdfs:comment>
        <guid>be01164d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#PhysicalStateChangeEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="EvenNumber">
        <rdfs:label>even numbers</rdfs:label>
        <rdfs:comment>The set of all even numbers (integers) including
            positive and negative even numbers and zero, but not
            including any infinite &apos;numbers&apos;.</rdfs:comment>
        <guid>bff46760-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MeasurableAttributeType"/>
        <rdfs:subClassOf rdf:resource="#Integer"/>
        <daml:disjointWith rdf:resource="#OddNumber"/>
    </daml:Class>
    <daml:Class rdf:ID="Evening">
        <rdfs:label>evenings</rdfs:label>
        <rdfs:comment>Each #$Evening is started by a #$Dusk and is
            #$temporallyCoterminal with the #$CalendarDay it&apos;s a
            part of.  Each #$Evening is #$contiguousAfter an
            #$Afternoon, and each #$Overnight is #$contiguousAfter an #$Evening.</rdfs:comment>
        <guid>bd589dc7-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#QualitativeTimeOfDay"/>
    </daml:Class>
    <daml:Class rdf:ID="Event">
        <rdfs:label>events</rdfs:label>
        <rdfs:comment>This is one important subset of   #$TemporalThing.
            The elements of #$Event are events or actions,  things that
            we say are `happening&apos;, changes in the state of the
            world.  #$Event is also a subset of #$Intangible, since an
            event consists of the `actions&apos; per se, and THEY then
            refer   to the tangible objects which participate in them.
            In contrast, the collection #$SomethingExisting (another
            important subset of #$TemporalThing) has elements which have
            temporal extent yet are `static&apos;, such as a rock at the
            bottom   of a pond.          Note: While
            `#$SomethingExisting vs. #$Event&apos; might seem at   first
            to be an   obvious partition of things with temporal extent,
            there are   interesting borderline cases --   such as
            agreements -- which Cyc treats as instances of
            #$SomethingExisting, but which could also be represented as
            instances of #$Event.  And there are still other cases,
            such as the pure disembodied elements of #$TimeInterval,
            which are elements of #$TemporalThing yet belong neither to
            #$SomethingExisting nor to #$Event.</rdfs:comment>
        <guid>bd58800d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#IntangibleIndividual"/>
        <rdfs:subClassOf rdf:resource="#Situation-Temporal"/>
        <daml:disjointWith rdf:resource="#SpaceRegion"/>
        <daml:disjointWith rdf:resource="#TimeInterval"/>
        <daml:disjointWith rdf:resource="#SomethingExisting"/>
        <daml:disjointWith rdf:resource="#Microtheory"/>
        <daml:disjointWith rdf:resource="#AbstractInformationalThing"/>
    </daml:Class>
    <daml:Class rdf:ID="EvergreenPlant">
        <rdfs:label>evergreens</rdfs:label>
        <rdfs:comment>A collection of plants.  Each element of
            #$EvergreenPlant is a plant that retains leaves or needles
            throughout all the seasons of the year.  Cf. #$DeciduousPlant.</rdfs:comment>
        <guid>c0fdff40-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Plant-Woody"/>
    </daml:Class>
    <Microtheory rdf:ID="EverythingPSC">
        <rdfs:label>everything p s c</rdfs:label>
        <rdfs:comment>A problem solving context in which all assertions
            in the entire KB are visible.  This context is only
            appropriate for use in queries which do not care about the
            consequences of possible contradictions due to conflicting
            information from mutually inconsistent microtheories.  See
            also #$InferencePSC.</rdfs:comment>
        <guid>be7f041b-9c29-11b1-9dad-c379636f7270</guid>
    </Microtheory>
    <daml:Class rdf:ID="ExceptionRelation">
        <rdfs:label>exception relation</rdfs:label>
        <rdfs:comment>A collection of mathematical objects, which are
            the #$LogicalConnectives used to express exceptions to
            rules.  Elements include #$exceptWhen and #$exceptFor.</rdfs:comment>
        <guid>bec28bcc-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdf:type rdf:resource="#RelationshipType"/>
        <rdfs:subClassOf rdf:resource="#MetaKnowledgePredicate"/>
    </daml:Class>
    <daml:Class rdf:ID="ExchangeOfUserRights">
        <rdfs:label>exchange of user rights</rdfs:label>
        <rdfs:comment>A collection of events.  In an instance of
            #$ExchangeOfUserRights, two #$Agents (the #$exchangers)
            perform two distinct (though related)
            #$TransferringPossessions with each other.  Two objects are
            exchanged.  Each agent gains possession -- in the form of
            some #$UserRightsAttribute -- of something (an
            #$objectOfPossessionTransfer) from the other.  Each transfer
            is related to the other as some kind of condition, a
            precondition or an intended result; e.g., the news seller
            will hand over a paper if given fifty cents, and I give the
            news seller my fifty cents so that he will turn over a
            newspaper to me.  The two #$TransferringPossession events
            are #$subEvents of the #$ExchangeOfUserRights event.</rdfs:comment>
        <guid>bd589096-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#ChangeInUserRights"/>
        <rdfs:subClassOf rdf:resource="#SocialOccurrence"/>
        <daml:disjointWith rdf:resource="#GiftGiving"/>
    </daml:Class>
    <daml:Class rdf:ID="Excitement">
        <rdfs:label>excitement</rdfs:label>
        <rdfs:comment>A feeling of arousal that stirs up, moves
            profoundly, or serves as a challenge to one&apos;s power,
            eliciting the desire to do or perceive something.  This is a
            #$Collection --- for an explanation of that, see
            #$Happiness.  Some more specialized #$FeelingAttributeTypes
            than #$Excitement include #$Enthusiasm,
            #$Celebratory-Emotion, #$Triumph-TheFeeling, etc.</rdfs:comment>
        <guid>bd58c086-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#FeelingAttributeType"/>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </daml:Class>
    <UserRightsAttribute rdf:ID="ExclusiveUserRights">
        <rdfs:label>exclusive user rights</rdfs:label>
        <rdfs:comment>An attribute of an object with respect to an
            #$Agent, meaning that the agent who holds this kind of
            #$UserRightsAttribute to an object has the sole right to use
            that object.  There can be only one such #$Agent at a given
            time; that agent may be an #$Organization or an individual
            person.  When you rent a car, you expect
            #$ExclusiveUserRights of it for the duration of your rental,
            even though you don&apos;t own the car.</rdfs:comment>
        <guid>bd58fef2-9c29-11b1-9dad-c379636f7270</guid>
    </UserRightsAttribute>
    <daml:Class rdf:ID="Executive">
        <rdfs:label>executives</rdfs:label>
        <rdfs:comment>A collection of people.  An instance of
            #$Executive is a person who holds an executive managerial
            positions in some #$Organization.  Among the members of
            #$Executive are top managers of organizations, including
            corporate officers (#$ChiefExecutiveOfficer, etc.), Chiefs
            of Staff, Generals, Admirals and others like Chief Corporate
            Counsel, Managing Partner, Producer, Chief Scientist, Chief
            Engineer, as well as other upper and upper-middle managers.</rdfs:comment>
        <guid>bd58fadf-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#OccupationType"/>
        <rdfs:subClassOf rdf:resource="#Professional"/>
        <rdfs:subClassOf rdf:resource="#Leader"/>
    </daml:Class>
    <daml:Class rdf:ID="Exercising">
        <rdfs:label>exercises</rdfs:label>
        <rdfs:comment>The collection of events in which humans move
            their bodies for the purpose of general physical
            conditioning and/or strengthening muscles. comment by
            #$Nichols on June 25, 1996</rdfs:comment>
        <guid>bd58ac02-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#AthleticActivity"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
    </daml:Class>
    <daml:Class rdf:ID="Exhaling">
        <rdfs:label>exhalations</rdfs:label>
        <rdfs:comment>Expelling air from the lungs</rdfs:comment>
        <guid>bd589d08-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#EmittingAnObject"/>
        <rdfs:subClassOf rdf:resource="#BodilyFunctionEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="ExistingObjectType">
        <rdfs:label>existing object types</rdfs:label>
        <rdfs:comment>A collection of collections.  Almost every element
            of each element of #$ExistingObjectType (exceptions are
            allowed) is temporally stufflike yet is objectlike in other
            ways, including spatially.      ``OBJTYPE is an
            #$ExistingObjectType&apos;&apos; implies:  a) for most
            instances OBJ of OBJTYPE, for any proper physical part PART
            of OBJ, PART is not an OBJTYPE.  b) for all instances OBJ of
            OBJTYPE, for most proper physical parts PART of OBJ it will
            not be the case that PART is an OBJTYPE.       Any one of
            many #$timeSlices of a copy of `Moby Dick&apos; sitting on
            your shelf is still a copy of `Moby Dick&apos; sitting on
            your shelf.  Most tangible objects are temporally stufflike
            in this fashion.   That book is, of course, not spatially
            stufflike; spatially, it is objectlike:  if we take a
            scalpel and slice the book into ten pieces, each piece is
            not a copy of `Moby Dick&apos;.   So (#$isa #$BookCopy
            #$ExistingObjectType) is true, because each book is
            temporally stufflike but spatially objectlike. See the
            comment for #$StuffType to find out more about the
            distinctions between, and the need for, these four
            collections: #$StuffType, #$ObjectType, #$ExistingStuffType,
            and #$ExistingObjectType.</rdfs:comment>
        <guid>bd65d880-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#TemporalStuffType"/>
        <daml:disjointWith rdf:resource="#ExistingStuffType"/>
    </daml:Class>
    <daml:Class rdf:ID="ExistingStuffType">
        <rdfs:label>existing stuff types</rdfs:label>
        <rdfs:comment>A collection of collections.  Each element of
            #$ExistingStuffType is a collection of things (including
            portions of things) which are both temporally and spatially
            stufflike; they may also be stufflike in other ways, e.g.,
            in some physical property.  Division in time or space does
            not destroy the stufflike quality of the object (down to a
            certain granularity).      ``STUFF is an instance of
            #$ExistingStuffType&apos;&apos; implies:  a) for most
            instances, OBJ, of STUFF, for any proper physical part PART
            of OBJ, PART is also an instance of STUFF.  b) for all
            instances, OBJ, of STUFF, for most proper physical parts
            PART of OBJ, PART is also an instance of STUFF.       For
            example, every piece of wood is temporally stufflike: if
            W-168 is a piece of wood during 1996, then it&apos;s also a
            piece of wood for the one-minute time-slice 9:05am 7/7/96.
            It&apos;s also spatially stufflike: if we take that piece of
            wood W-168 and cut it in half, we have two things which are
            both pieces of wood.  The fact that every piece of wood is
            both temporally and spatially stufflike is represented in
            Cyc by the assertion (#$isa #$Wood #$ExistingStuffType).
            Other examples of #$ExistingStuffType: #$AppleJuice,
            #$IceCream, #$Diamond, #$WaxedPaper, #$StriatedMuscle. See
            the comment for #$StuffType to learn more about the
            distinctions between, and the need for, these four
            collections: #$StuffType, #$ObjectType, #$ExistingStuffType,
            and #$ExistingObjectType.</rdfs:comment>
        <guid>bd59f2ea-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="#TemporalStuffType"/>
        <daml:disjointWith rdf:resource="#ExistingObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="ExperiencingHunger">
        <rdfs:label>experiencing hunger</rdfs:label>
        <rdfs:comment>Being hungry</rdfs:comment>
        <guid>bd58d1d8-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#BodilyFunctionEvent-Involuntary"/>
    </daml:Class>
    <daml:Class rdf:ID="Explosion">
        <rdfs:label>explosions</rdfs:label>
        <rdfs:comment>A collection of events.  Each instance of
            #$Explosion is an event that involve an extremely violent,
            chaotic release of energy.  It is not exactly controlled,
            even in the best circumstances, though it may be contained
            and channelled to do useful work (such as within the
            cylinders of a car engine, or such as when a hole is blasted
            for a backyard swimming pool.)</rdfs:comment>
        <guid>be00f76e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#DecompositionProcess"/>
        <rdfs:subClassOf rdf:resource="#EnergyConversionProcess"/>
    </daml:Class>
    <daml:Class rdf:ID="ExtensionalRepresentationPredicate">
        <rdfs:label>extensional representation predicates</rdfs:label>
        <rdfs:comment>A collection of predicates.  Each element of
            #$ExtensionalRepresentationPredicate is a predicate used to
            form assertions about the properties of individual objects.
            These predicates implement the extensional structure of the
            Cyc ontology; e.g., #$attorneys, #$objectTakenCareOf,
            #$actorPartsAffected, #$vestedInterest.</rdfs:comment>
        <guid>bd5883cd-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
    </daml:Class>
    <daml:Class rdf:ID="ExternalSurface-WholeThing">
        <rdfs:label>exteriors</rdfs:label>
        <rdfs:comment>The collection of all entire outer physical
            surfaces of tangible objects.  Excludes mere patches or
            portions of the whole surface of an object.</rdfs:comment>
        <guid>bd589b3e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#RegionType"/>
        <rdfs:subClassOf rdf:resource="#Surface-Physical"/>
    </daml:Class>
    <daml:Class rdf:ID="Eye">
        <rdfs:label>eyes</rdfs:label>
        <rdfs:comment>The collection of all eyes of #$Animals. Eyes are
            the organs of #$VisualPerception.</rdfs:comment>
        <guid>bd5893be-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#SymmetricAnatomicalPartType"/>
        <rdf:type rdf:resource="#AnimalBodyPartType"/>
        <rdfs:subClassOf rdf:resource="#BiologicalLivingObject"/>
        <rdfs:subClassOf rdf:resource="#ElectroMagneticRadiationSensor"/>
        <rdfs:subClassOf rdf:resource="#AnimalBodyPart"/>
    </daml:Class>
    <daml:Class rdf:ID="FPSUnitOfMeasure">
        <rdfs:label>foot-pound-second units of measure</rdfs:label>
        <rdfs:comment>A subset of #$UnitOfMeasure.  #$FPSUnitOfMeasure
            is the collection of all the measurement functions whose
            results use the FPS (i.e., foot-pound-second) system of
            measure to describe physical quantities.  Examples:
            #$Gallon-US, #$SquareMile, #$CubicFtPerSec.</rdfs:comment>
        <guid>bd5904b6-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#RelationshipType"/>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </daml:Class>
    <daml:Class rdf:ID="FaceOfAnimal">
        <rdfs:label>faces</rdfs:label>
        <rdfs:comment>The collection of all faces of animals.  A
            #$FaceOfAnimal generally consists of the region where the
            eyes of the animal are located.  In most terrestrial
            animals, this is the front region of the animal&apos;s head,
            and also turns out to be where the nose, mouth, etc., are located.</rdfs:comment>
        <guid>bd58b919-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#UniqueAnatomicalPartType"/>
        <rdf:type rdf:resource="#AnimalBodyPartType"/>
        <rdfs:subClassOf rdf:resource="#BiologicalLivingObject"/>
        <rdfs:subClassOf rdf:resource="#AnimalBodyPart"/>
    </daml:Class>
    <daml:Class rdf:ID="FallSeason">
        <rdfs:label>autumns</rdfs:label>
        <rdfs:comment>The collection of Fall seasons.  In the
            #$TemperateClimateCycle, Fall is usually the time of
            harvesting and beginnings of shutting down of growth.  Also
            the time of harvest celebrations.  #$FallSeason represents
            the climatic aspects of Fall; for its purely temporal
            aspects, see #$CalendarAutumn.</rdfs:comment>
        <guid>bd58b734-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#SeasonOfYear"/>
    </daml:Class>
    <TruthValue rdf:ID="False">
        <rdfs:label>some statement in the KB is false</rdfs:label>
        <rdfs:comment>An element of #$TruthValue.  #$False is logical
            falsehood in Cyc; this is the abstract logical notion--not
            to be confused with Lisp&apos;s NIL, nor with the English
            word `false&apos;.</rdfs:comment>
        <guid>bd5880d8-9c29-11b1-9dad-c379636f7270</guid>
    </TruthValue>
    <daml:Class rdf:ID="Family-SocialEntity">
        <rdfs:label>family units</rdfs:label>
        <rdfs:comment>A collection of organizations.  Each element of
            #$Family-SocialEntity is a group of people or of animals
            related by birth and mating.  The kinship relation is closer
            than simply being members of the same species.  Such a
            family may function together as an #$Organization.  See also
            the specialization #$Family-Human.</rdfs:comment>
        <guid>c0fcdcd7-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#Group"/>
        <rdfs:subClassOf rdf:resource="#SocialBeing"/>
    </daml:Class>
    <daml:Class rdf:ID="FamilyRelationSlot">
        <rdfs:label>family relationships</rdfs:label>
        <rdfs:comment>A collection of predicates.  Each element of
            #$FamilyRelationSlot is a binary predicate used to represent
            relationships among members of human families.  Examples:
            #$spouse, #$siblings, #$grandmothers, #$grandfathers,
            #$relatives, #$cohabitingFamilyMembers.</rdfs:comment>
        <guid>bd58d96b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="#InterPersonalRelationSlot"/>
    </daml:Class>
    <daml:Class rdf:ID="Famine">
        <rdfs:label>famines</rdfs:label>
        <rdfs:comment>A collection of events; a subset of
            #$DisasterEvent.  Each instance of #$Famine is an event
            taking place in a contiguous geographical area in which a
            lot of people are undergoing #$Starvation.</rdfs:comment>
        <guid>be5bef99-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#DisasterEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="Farmer">
        <rdfs:label>farmer</rdfs:label>
        <rdfs:comment>A collection of persons; a subset of
            #$Professional.  Each element of #$Farmer is a person who
            makes (or significantly supplements) his or her income by
            farming.  This includes growing vegetables, grain, or fruit
            crops, dairy farming, or raising livestock (e.g., cattle,
            pigs, sheep, fish) for their meat or other animal products
            (e.g., wool).</rdfs:comment>
        <guid>bd58e149-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#OccupationType"/>
        <rdfs:subClassOf rdf:resource="#Professional"/>
        <rdfs:subClassOf rdf:resource="#BlueCollarWorker"/>
    </daml:Class>
    <daml:Class rdf:ID="Fear">
        <rdfs:label>scares</rdfs:label>
        <rdfs:comment>Unpleasant emotion manifested by painful agitation
            in the presence or awareness of danger.   Fear implies
            anxiety and loss of courage.  This is a collection; for an
            explanation of a typical #$FeelingAttributeType, see
            #$Happiness.   A more specialized #$FeelingAttributeType
            than #$Fear is #$Dread.</rdfs:comment>
        <guid>bd58c044-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#FeelingAttributeType"/>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </daml:Class>
    <daml:Class rdf:ID="February">
        <rdfs:label>February</rdfs:label>
        <rdfs:comment>The collection of all Februaries,   the second
            month of the year in the #$JulianCalendar.</rdfs:comment>
        <guid>bd58c2f7-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MonthOfYearType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CalendarMonth"/>
    </daml:Class>
    <daml:Class rdf:ID="FeelingAttribute">
        <rdfs:label>emotions</rdfs:label>
        <rdfs:comment>The collection of attributes describing emotions
            and mental feelings.  An element of this set would be a
            particular `amount&apos; of happiness, of confidence, of
            fear, etc.  Obviously there are no real `units of
            measure&apos; for these quantities, but one can certainly
            say that the `amount&apos; of happiness one felt at
            one&apos;s wedding was `more&apos; than the happiness they
            felt at their college graduation ceremony, etc.  There are
            functions, such as #$LowAmountFn, which take a
            #$PrimitiveAttributeType (such as the instances of
            #$FeelingAttributeType) and return as their value a
            certain-sized amount of that attribute-type; e.g.,
            (#$LowAmountFn #$Confidence) is an expression whose value is
            a low amount of confidence, and that in turn will be an
            element of #$Confidence, and also an element of
            #$FeelingAttribute, and also an element of #$AttributeValue,
            etc.  See especially the various subsets of
            #$FeelingAttribute.  Note that #$FeelingAttribute is NOT an
            element of #$FeelingAttributeType.  Since
            #$FeelingAttributeType is a subset of
            #$PrimitiveAttributeType, any element of
            #$FeelingAttributeType (such as #$Happiness) should have a
            total order among all its elements.  All the elements of
            #$FeelingAttribute can&apos;t be placed in a total order
            (for example, how can we compare &apos;low happiness&apos;
            with &apos;low contempt&apos;?), so it should not be an
            element of #$FeelingAttributeType.</rdfs:comment>
        <guid>bd5882fe-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CompositeAttributeType"/>
        <rdfs:subClassOf rdf:resource="#MentalAttribute"/>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </daml:Class>
    <daml:Class rdf:ID="FeelingAttributeType">
        <rdfs:label>types of emotion</rdfs:label>
        <rdfs:comment>A collection of collections.  Each
            #$FeelingAttributeType is a type of attribute that describes
            some sort of emotion and/or mental feeling.  Some elements
            of #$FeelingAttributeType are:  #$Envy, #$Curiosity,
            #$PrideOfAccomplishment, etc.  See also #$FeelingAttribute.</rdfs:comment>
        <guid>bd58800b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#PrimitiveAttributeType"/>
        <daml:disjointWith rdf:resource="#SensoryReactionType"/>
        <daml:disjointWith rdf:resource="#PhysiologicalConditionType"/>
    </daml:Class>
    <daml:Class rdf:ID="FemaleAnimal">
        <rdfs:label>female animals</rdfs:label>
        <rdfs:comment>The collection of all female animals.</rdfs:comment>
        <guid>bd5890f9-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Animal"/>
        <daml:disjointWith rdf:resource="#MaleAnimal"/>
    </daml:Class>
    <daml:Class rdf:ID="FemalePerson">
        <rdfs:label>human females</rdfs:label>
        <rdfs:comment>The collection of all female persons.</rdfs:comment>
        <guid>bd58d6e5-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#OrganismClassificationType"/>
        <rdfs:subClassOf rdf:resource="#FemaleAnimal"/>
        <rdfs:subClassOf rdf:resource="#Person"/>
        <daml:disjointWith rdf:resource="#MalePerson"/>
    </daml:Class>
    <GenderOfLivingThing rdf:ID="Feminine">
        <rdfs:label>feminine</rdfs:label>
        <rdfs:comment>#$Feminine is a gender, indicating either that an
            #$Animal or #$Plant is female, or that a word has what is
            called feminine gender.</rdfs:comment>
        <guid>bd58934f-9c29-11b1-9dad-c379636f7270</guid>
    </GenderOfLivingThing>
    <daml:Class rdf:ID="Ferry">
        <rdfs:label>ferries</rdfs:label>
        <rdfs:comment>The subcollection of #$Watercraft that contains
            all ferryboats, i.e., boats that are used to carry people,
            goods or vehicles across rivers, lakes, canals or channels
            etc. or even from one side of a harbor to another, but
            normally not used to cross oceans.</rdfs:comment>
        <guid>c1009ab0-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Ship"/>
    </daml:Class>
    <daml:Class rdf:ID="FictionalContext">
        <rdfs:label>fictional contexts</rdfs:label>
        <rdfs:comment>The collection of #$CounterfactualContexts which
            are (1) created intentionally, not by error or chance or
            gradual evolution and accretion in a culture, and (2)
            typically are the information content of some
            #$InformationBearingThing, and (3) are not expected (by
            their creator) to be believed as factual, nor do their
            creators believe them to be factual.  In addition to
            asserting fictional propositions about existing things, a
            #$FictionalContext may include terms for nonexistent things.
            Examples: #$LordOfTheRings, #$AdventuresOfHuckleberryFinn.</rdfs:comment>
        <guid>be011058-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MicrotheoryType"/>
        <rdfs:subClassOf rdf:resource="#Microtheory"/>
        <rdfs:subClassOf rdf:resource="#CounterfactualContext"/>
    </daml:Class>
    <daml:Class rdf:ID="FieldOfStudy">
        <rdfs:label>fields of study</rdfs:label>
        <rdfs:comment>A collection of microtheories.  Each element of
            #$FieldOfStudy is a microtheory containing the knowledge,
            theory, hypotheses, evidence, and problems covered in a
            particular field of study (in propositional form).
            Examples:  #$Linguistics, #$Ethology,
            #$ArtificialIntelligence, #$BusinessAdministration,
            #$Nursing-FieldOfStudy, etc.  Fields of study are typically
            the subject of teaching and/or research within instances of
            #$AcademicDepartment, although the correlation between
            #$AcademicDepartment and #$FieldOfStudy is not one-to-one.
            Note also that elements of #$FieldOfStudy are intangible
            objects (i.e., contexts with propositional content), while
            academic departments are partially tangible organizations.
            For the activity of specialized study in a field, see #$CourseOfStudy.</rdfs:comment>
        <guid>bd58b737-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#AbstractInformationalThing"/>
    </daml:Class>
    <daml:Class rdf:ID="FinancialAccount">
        <rdfs:label>financial accounts</rdfs:label>
        <rdfs:comment>A collection of intangible objects.  Each element
            of #$FinancialAccount is an instance of #$Account (q.v.)
            which is denominated in units of #$Money.  Examples: savings
            accounts, credit card accounts, vendor accounts.</rdfs:comment>
        <guid>bd58dcfe-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#AccountType"/>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#Account"/>
    </daml:Class>
    <daml:Class rdf:ID="FinancialAccountTenderObject">
        <rdfs:label>financial account tender object</rdfs:label>
        <rdfs:comment>A collection of objects.  Each element of
            #$FinancialAccountTenderObject is an object, e.g., a check
            or a credit card, that serves as a vehicle for offering
            payment in funds drawn on an associated instance of
            #$FinancialAccount.  The liquidity of an element of
            #$FinancialAccountTenderObject depends on the
            #$accountBalance or #$accountStatus of the financial account
            which that object legally represents.  This collection
            excludes the elements of #$Currency and #$TravellersCheck.</rdfs:comment>
        <guid>bd5902db-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#TenderObject"/>
    </daml:Class>
    <daml:Class rdf:ID="FinancialAssetHoldings">
        <rdfs:label>fidelity investments</rdfs:label>
        <rdfs:comment>A collection of partially tangibles.  An element
            of #$FinancialAssetHoldings is a group of financial assets
            (e.g., stocks, bonds, ... ) owned by individual or corporate
            #$Agent(s).  As a default, we assume that the monetary value
            of each group equals the sum of the monetary values of the
            individual assets in that group.</rdfs:comment>
        <guid>bd58a086-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Holdings"/>
    </daml:Class>
    <daml:Class rdf:ID="FinancialCompany">
        <rdfs:label>financial institutions</rdfs:label>
        <rdfs:comment>A collection of organizations engaged in financial
            activities as their main concern and as a business.  An
            element of #$FinancialCompany is a commercial service
            organization that buys, sells, trades, converts, or lends
            money, in the form of currency or negotiable financial
            instruments (such as stocks, bonds, commodities futures,
            etc.), as (one of) its major function(s).  The collection
            #$FinancialCompany does not include businesses, such as
            retailers, which simply exchange goods or non-financial
            services for money.  Examples: Chase Bank, University
            Federal Credit Union, Fidelity Investments (but NOT the
            IMF). Cf. the superset #$FinancialOrganization for
            non-business organizations engaged in financial activities
            (such as the IMF).</rdfs:comment>
        <guid>c1443e40-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#CommercialServiceOrganization"/>
        <rdfs:subClassOf rdf:resource="#FinancialOrganization"/>
    </daml:Class>
    <daml:Class rdf:ID="FinancialOrganization">
        <rdfs:label>financial organizations</rdfs:label>
        <rdfs:comment>The collection of all #$Organizations that are
            primarily or significantly engaged in the
            #$FinancialIndustry or whose activities focus on that
            industry.  Instances of both
            #$CommercialServiceOrganizations (e.g., banks and brokerage
            houses) and #$NonProfitOrganizations (e.g.,
            #$InternationalMonetaryFund) may be instances of
            #$FinancialOrganization.  Specializations of
            #$FinancialOrganization include #$BankCompany,
            #$FinancialExchange, and #$InvestmentOrganization.</rdfs:comment>
        <guid>bd590577-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Organization"/>
    </daml:Class>
    <daml:Class rdf:ID="Finger">
        <rdfs:label>fingers</rdfs:label>
        <rdfs:comment>The collection of all digits of all #$Hands
            (q.v.).  Fingers are (typically) flexibly jointed and are
            necessary to enabling the hand (and its owner) to perform
            grasping and manipulation actions.</rdfs:comment>
        <guid>bd58bf7f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#AnimalBodyPartType"/>
        <rdfs:subClassOf rdf:resource="#AnimalBodyPart"/>
        <rdfs:subClassOf rdf:resource="#Appendage-AnimalBodyPart"/>
    </daml:Class>
    <daml:Class rdf:ID="FiscalQuarter">
        <rdfs:label>fiscal quarter</rdfs:label>
        <rdfs:comment>Each instance of this collection is a 3-month-long
            interval of time kept track of by an #$Agent as part of its
            financial accounting procedures.  Since the start dates and
            end dates may vary depending on the organization, instances
            will be things like Fiscal3rdQuarterOf1995ForCycorp.</rdfs:comment>
        <guid>bd58b87d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#Date"/>
        <daml:disjointWith rdf:resource="#TimePoint"/>
    </daml:Class>
    <daml:Class rdf:ID="FiscalYear">
        <rdfs:label>fiscal years</rdfs:label>
        <rdfs:comment>Each instance of this collection is an annual,
            year-long interval of time kept track of by an #$Agent as
            part of its operational and financial accounting procedures.
            Since the start dates and end dates may vary depending on
            the organization, instances of this collection are time
            intervals like FiscalYearOf1989ForMicrosoft</rdfs:comment>
        <guid>bd58f1c1-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#Date"/>
        <daml:disjointWith rdf:resource="#TimePoint"/>
    </daml:Class>
    <daml:Class rdf:ID="Fish">
        <rdfs:label>fish</rdfs:label>
        <rdfs:comment>A collection of cold-blooded animals; a subset of
            #$Vertebrate.  Each element of #$Fish has gills, cranium,
            and fins, and spends all or almost all of its life under
            water.  The collection #$Fish excludes so-called star-fish
            and cuttle-fish, etc., as well as fish-shaped examples of
            #$Mammal such as porpoises and whales.  #$Fish is an
            instance of #$BiologicalClass.</rdfs:comment>
        <guid>bd58df53-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#BiologicalClass"/>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#OrganismClassificationType"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangibleProduct"/>
        <rdfs:subClassOf rdf:resource="#AquaticOrganism"/>
        <rdfs:subClassOf rdf:resource="#Vertebrate"/>
        <rdfs:subClassOf rdf:resource="#NonPersonAnimal"/>
    </daml:Class>
    <daml:Class rdf:ID="FixedArityRelation">
        <rdfs:label>fixed arity relation</rdfs:label>
        <rdfs:comment>The collection of all #$Relations of fixed arity
            in CycL.  This collection is disjoint with #$VariableArityRelation.</rdfs:comment>
        <guid>bff3237a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#Relation"/>
    </daml:Class>
    <daml:Class rdf:ID="FixedAritySkolemFuncN">
        <rdfs:label>fixed arity skolem func n</rdfs:label>
        <rdfs:comment>The subcollection of #$SkolemFuncNs whose arity is fixed.</rdfs:comment>
        <guid>c10c450d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#RelationshipType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#FixedAritySkolemFunction"/>
        <rdfs:subClassOf rdf:resource="#SkolemFuncN"/>
    </daml:Class>
    <daml:Class rdf:ID="FixedAritySkolemFunction">
        <rdfs:label>fixed arity skolem function</rdfs:label>
        <rdfs:comment>The subcollection of #$SkolemFunctions whose arity
            is fixed. This is by far the most common type of skolem
            function, because variable- arity skolem functions are only
            created when a sequence variable is in the scope of the skolem.</rdfs:comment>
        <guid>bd5880fe-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#RelationshipType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#FixedArityRelation"/>
        <rdfs:subClassOf rdf:resource="#SkolemFunction"/>
    </daml:Class>
    <daml:Class rdf:ID="FixedStructure">
        <rdfs:label>fixed free-standing structures</rdfs:label>
        <rdfs:comment>A collection of artifacts.  Each element of
            #$FixedStructure is a humanly-constructed, freestanding
            object that exists in a fixed location; e.g., buildings,
            pyramids, the Great Wall of China, dams, elevated roadways,
            canals, etc.  Such structures may have parts which are also
            elements of #$FixedStructure (e.g., bridge pilings) and
            parts which are not freestanding (e.g., the span of a
            bridge, or a room in a building).</rdfs:comment>
        <guid>bd58c647-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#ConstructionArtifact"/>
        <rdfs:subClassOf rdf:resource="#Place"/>
    </daml:Class>
    <daml:Class rdf:ID="Flammability">
        <rdfs:label>flammabilities</rdfs:label>
        <rdfs:comment>A collection of attributes; a subset of
            #$PhysicalAttribute.  Each element of #$Flammability
            represents a specific readiness with which some tangible
            substance burns.  Different degrees of #$Flammability are
            represented either using #$GenericValueFunctions or
            qualitatively (e.g., #$NonFlammable, #$BurnsEasily,
            #$ExplosivelyFlammable).  Flammability of an object is
            indicated with the predicate #$flammabilityOfObject.</rdfs:comment>
        <guid>bd58ff84-9c29-11b1-9dad-c379636f7270</guid>
        <rdfs:subClassOf rdf:resource="#AttributeValue"/>
    </daml:Class>
    <daml:Class rdf:ID="FlatPhysicalSurface">
        <rdfs:label>flat surfaces</rdfs:label>
        <rdfs:comment>The collection of all surfaces that are
            substantially flat (by the tolerance standards of the the
            context).  This means that there are no
            &apos;significant&apos; concave depressions or convex bulges
            or bumps, and that the surface approximates some portion of
            a Euclidian plane in space.  Note that the surface may have
            holes or cracks and may be disconnected, in multiple
            (substantially coplanar) pieces.  A typical table top is a #$FlatPhysicalSurface.</rdfs:comment>
        <guid>bd5885fe-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#RegionType"/>
        <rdfs:subClassOf rdf:resource="#Surface-Physical"/>
    </daml:Class>
    <PhysicalStructuralAttribute rdf:ID="Flexible">
        <rdfs:label>flexible</rdfs:label>
        <rdfs:comment>A physical attribute.  #$Flexible is the
            #$PhysicalStructuralAttribute of a tangible object that can
            be flexed, twisted, contorted.  #$Flexible objects which
            retain their contorted shape are described as #$Bendable (q.v.).</rdfs:comment>
        <guid>bd58c716-9c29-11b1-9dad-c379636f7270</guid>
    </PhysicalStructuralAttribute>
    <daml:Class rdf:ID="FloorInAConstruction">
        <rdfs:label>floors</rdfs:label>
        <rdfs:comment>A physical floor in a building, NOT the level
            (storey).  The latter is called #$LevelOfAConstruction.  The
            floor can include any floor in a building such as the floor
            of a room on the third floor as well as the floor covering
            the entire 1st level of the building.  This includes just
            the horizontal surface -- not the subfloor.  It also
            doesn&apos;t include floor coverings like carpet or tile.</rdfs:comment>
        <guid>bd58f893-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <daml:disjointWith rdf:resource="#WallOfAConstruction"/>
    </daml:Class>
    <daml:Class rdf:ID="FlowPath">
        <rdfs:label>paths of flow</rdfs:label>
        <rdfs:comment>A collection of pathways; a subset of
            #$Path-Generic.  Each element of #$FlowPath is a path whose
            extent is delineated by the movement of a fluid over an
            area; for example, the path of a lava flow or the
            #$AlaskanPipeline.  Elements of #$FlowPath may (but need
            not) be constrained by objects or forces that channel the
            flow of fluid; see also the subset #$FluidConduit.</rdfs:comment>
        <guid>bd589555-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#Path-Simple"/>
        <rdfs:subClassOf rdf:resource="#Path-Customary"/>
    </daml:Class>
    <daml:Class rdf:ID="FloweringPlant">
        <rdfs:label>flowering plants</rdfs:label>
        <rdfs:comment>An instance of #$BiologicalClass and a sub-taxon
            of #$PterophytinaSubdivision. Each instance of
            #$FloweringPlant is a plant whose seeds are enclosed in
            ovaries; consequently, this is the collection of flowering
            plants in the botanical sense.  For flowering plants
            actually in bloom, see #$FloweryPlant.</rdfs:comment>
        <guid>bd58c76b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#BiologicalClass"/>
        <rdfs:subClassOf rdf:resource="#Plant"/>
    </daml:Class>
    <daml:Class rdf:ID="FloweryPlant">
        <rdfs:label>flowers</rdfs:label>
        <rdfs:comment>A collection of plants.  Each element of
            #$FloweryPlant is a flowering plant that is actually and
            visibly in flower (i.e., has flowers showing).  The
            collection #$FloweryPlant includes flowering bushes and
            trees with visible flowers.  This collection represents a
            commonsense category, not the official #$BiologicalTaxon #$FloweringPlant.</rdfs:comment>
        <guid>bd58a916-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#LifeStageType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#FloweringPlant"/>
    </daml:Class>
    <daml:Class rdf:ID="FluidReservoir">
        <rdfs:label>fluid reservoirs</rdfs:label>
        <rdfs:comment>A collection of containers having an opening,
            which may be small and resealable (as in a #$Bottle) or
            large and open, as in a #$Tub; a subset of
            #$ContainerProduct.  An instance of #$FluidReservoir is a
            container which was designed to hold fluids.  These include
            elements of the collections #$Spoon, #$ToiletBowl,
            #$GlassBottle, etc.  Note a special negative case: natural
            `reservoirs&apos;, such as #$Lakes, are not
            #$ContainerProducts -- though the #$Dams that create them
            are artifacts, the reservoir water is contained in the
            natural landscape -- and hence such reservoirs are not
            subsets of #$FluidReservoir.</rdfs:comment>
        <guid>bd58f745-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdf:type rdf:resource="#ProductType"/>
    </daml:Class>
    <daml:Class rdf:ID="FluidTangibleThing">
        <rdfs:label>fluid tangible thing</rdfs:label>
        <rdfs:comment>A collection of tangibles.  Each element of
            #$FluidTangibleThing is a tangible thing that flows,
            including gases, liquids, and semisolid and granular
            tangible things which are #$Pourable (e.g., sand, see also
            #$GranularFluid).  Examples: the AirInAustin, #$LakeErie,
            the snow drifted in my driveway, the sand on the beach at
            Hippie Hollow, mercury in the thermometer on the balcony.
            Note that the granules of a granular #$FluidTangibleThing
            are not necessarily themselves #$FluidTangibleThings.  Cf. #$LiquidTangibleThing.</rdfs:comment>
        <guid>bd58d1e3-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <daml:disjointWith rdf:resource="#Agent"/>
        <daml:disjointWith rdf:resource="#SolidTangibleThing"/>
        <daml:disjointWith rdf:resource="#SemiSolidTangibleThing"/>
    </daml:Class>
    <daml:Class rdf:ID="Fog">
        <rdfs:label>fog</rdfs:label>
        <rdfs:comment>The collection of clouds (instances of
            #$CloudOfH2O) that cover a #$GeographicalRegion at ground-level.</rdfs:comment>
        <guid>bd58e147-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdfs:subClassOf rdf:resource="#CloudOfH2O"/>
    </daml:Class>
    <WeatherAttribute rdf:ID="Foggy">
        <rdfs:label>foggy</rdfs:label>
        <rdfs:comment>A current condition in which pieces of atmosphere
            near the ground that are so full of water vapor that
            visibility is noticeably reduced.  Note that when standing
            on a mountain or skysraper in the clouds, the attribute of
            the surrounding air is Foggy.</rdfs:comment>
        <guid>bd58e5f8-9c29-11b1-9dad-c379636f7270</guid>
    </WeatherAttribute>
    <PhysicalStructuralAttribute rdf:ID="Foldable">
        <rdfs:label>foldable</rdfs:label>
        <rdfs:comment>A physical attribute.  #$Foldable is the
            #$PhysicalStructuralAttribute of being foldable in a
            flexible way, like towels or paper.  Note a distinction
            between #$Foldable objects and #$Collapsible objects:
            #$Collapsible objects are #$Rigid objects collapsed by means
            of #$HingedJoints, while #$Foldable objects are flexible overall.</rdfs:comment>
        <guid>bd58b488-9c29-11b1-9dad-c379636f7270</guid>
    </PhysicalStructuralAttribute>
    <daml:Class rdf:ID="Food">
        <rdfs:label>food items</rdfs:label>
        <rdfs:comment>A collection of edible stuff; a subset of
            #$FoodAndDrink.  Each element of the collection #$Food is a
            particular portion of food of a type which can, and
            habitually is, eaten (not drunk or inhaled) by humans or
            animals.  Here the notion of ``eating&apos;&apos; is
            important --- not drinking or inhaling or osmosing; an
            element of #$Food will generally require biting, chewing,
            etc.  A borderline example is a bowl of Jello; a borderline
            non-example is a very thick milkshake.  Even closer to the
            border is a bowl of vegetable soup so thick and chunky that
            each spoonful requires chewing.  The edibles in #$Food
            provide calories and/or other nutrients that humans or
            animals need (e.g., protein, vitamins); this is often true
            with a #$Drink as well, but probably less than half the time
            (since most drinking is of water).</rdfs:comment>
        <guid>bd58bd8b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdfs:subClassOf rdf:resource="#OrganicStuff"/>
        <rdfs:subClassOf rdf:resource="#EdibleStuff"/>
        <rdfs:subClassOf rdf:resource="#FoodAndDrink"/>
        <rdfs:subClassOf rdf:resource="#TangibleProduct"/>
        <daml:disjointWith rdf:resource="#Drink"/>
    </daml:Class>
    <daml:Class rdf:ID="Food-ReadyToEat">
        <rdfs:label>dishes</rdfs:label>
        <rdfs:comment>A collection of food and drink, a specialization
            of (#$FoodOrDrinkForFn #$Person). An assertion of the form
            (#$isa FOOD #$Food-ReadyToEat) means that it is normal for
            people to eat or drink FOOD more or less in its current
            state. Instances can require unwrapping, cutting, pouring,
            buttering, or cooling before being consumed, but not cooking
            or other complex or sophisticated preparation that is
            typically done in a kitchen or other food-preparation area
            rather than at the table or site of consumption. If a cook
            would inspect it and pronounce it &apos;done,&apos; it is
            probably an instance of #$Food-ReadyToEat.</rdfs:comment>
        <guid>bd58cc94-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdfs:subClassOf rdf:resource="#OrganicStuff"/>
        <rdfs:subClassOf rdf:resource="#FoodAndDrink"/>
    </daml:Class>
    <daml:Class rdf:ID="FoodAndDrink">
        <rdfs:label>items of food or drink</rdfs:label>
        <rdfs:comment>A collection of edible stuff. Each element of
            #$FoodAndDrink is a substance which instances of some spec
            of #$Organism-Whole normally consume a significant part of.
            Thus (#$genls STUFF #$FoodAndDrink) means it is normal for
            instances of STUFF to be eaten or drunk. Instances of
            #$FoodAndDrink need not be in the state they typically are
            in when they are eaten, but they must be in an edible state.
            For substances that constitute normal food or drink for a
            particular spec of #$Organism-Whole (e.g. #$Person), use #$FoodOrDrinkForFn.</rdfs:comment>
        <guid>bd58e69c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdfs:subClassOf rdf:resource="#EdibleStuff"/>
        <daml:disjointWith rdf:resource="#FoodIngredientOnly"/>
    </daml:Class>
    <daml:Class rdf:ID="FoodGroupType">
        <rdfs:label>food group type</rdfs:label>
        <rdfs:comment>A collection of collections.  Each element of
            #$FoodGroupType is a collection of foodstuffs classified
            according to their nutritional contents.  When restricted to
            human foods, the elements of #$FoodGroupType are familiar as
            the teaching tools used in public health education in order
            to promote nutritionally balanced diets.  Examples include:
            #$DairyProduct, #$CerealFoodGroup,
            #$FruitAndVegetableFoodGroup, #$MeatAndLegumeFoodGroup.</rdfs:comment>
        <guid>bd589d1c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="#ExistingStuffType"/>
        <rdfs:subClassOf rdf:resource="#ConventionalClassificationType"/>
    </daml:Class>
    <daml:Class rdf:ID="FoodIngredientOnly">
        <rdfs:label>food ingredients</rdfs:label>
        <rdfs:comment>A collection of tangible stuff; a subset of
            #$EdibleStuff.  Each element of #$FoodIngredientOnly is an
            edible substance that is used in making other food but
            isn&apos;t eaten by itself.  These may or may not require
            some preparation.  For example, #$TableSalt, #$VegetableOil,
            and #$Ketchup are subsets of #$FoodIngredientOnly, because
            all of their instances are used only as ingredients or
            condiments.   In contrast, #$Egg-Chickens is not a subset of
            #$FoodIngredientOnly; some of its instances serve as
            ingredients in cooking other dishes, (and those instances
            are elements of #$FoodIngredientOnly,) but other eggs are
            simply eaten after poaching or frying (and those instances
            belong to the collection #$Food, not #$FoodIngredientOnly).
            Types of food, such as #$Pizza, whose instances are never
            merely ingredients, are just subsets of #$Food.--Nichols,
            Nov 22, 1996</rdfs:comment>
        <guid>bd58da2a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdf:type rdf:resource="#ProductType"/>
        <daml:disjointWith rdf:resource="#FoodAndDrink"/>
    </daml:Class>
    <daml:Class rdf:ID="FoodOrDrinkComposite">
        <rdfs:label>food or drink composite</rdfs:label>
        <rdfs:comment>A collection of edible stuff.  Each element of
            #$FoodOrDrinkComposite is an edible substance that is made
            up of two or more foodstuffs as constituents.  Typically,
            some recipe is, explicitly or implicitly, associated with
            the production of such substances.  #$FoodOrDrinkComposite
            includes both some instances of #$FoodIngredientOnly (e.g.,
            a dollop of ketchup) and some instances of #$FoodAndDrink
            (e.g., a slice of a cheese pizza).</rdfs:comment>
        <guid>bd58cda0-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#Artifact"/>
        <rdfs:subClassOf rdf:resource="#EdibleStuff"/>
    </daml:Class>
    <daml:Class rdf:ID="FoodOrDrinkPreparationDevice">
        <rdfs:label>kitchen appliances</rdfs:label>
        <rdfs:comment>A collection of objects; a subset of
            #$PhysicalDevice.  An instance of
            #$FoodOrDrinkPreparationDevice is a device whose
            #$primaryFunction is to prepare food or drink somehow, such
            as a colander, a spice mill or a pot.</rdfs:comment>
        <guid>bd588d6a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#PhysicalDevice"/>
        <rdfs:subClassOf rdf:resource="#HOCObject"/>
    </daml:Class>
    <daml:Class rdf:ID="FoodProfessional">
        <rdfs:label>food professionals</rdfs:label>
        <rdfs:comment>A collection of persons; a subset of
            #$Professional.  Each element of #$FoodProfessional is a
            worker in the food and drink industry.  This collection
            includes bakers, brewers, butchers, and bartenders--everyone
            from Julia Child to Joe the bartender.</rdfs:comment>
        <guid>bd58af0e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#OccupationType"/>
        <rdfs:subClassOf rdf:resource="#Professional"/>
    </daml:Class>
    <daml:Class rdf:ID="FoodServiceOrganization">
        <rdfs:label>food service companies</rdfs:label>
        <rdfs:comment>A collection of business organizations; a subset
            of both #$CommercialServiceOrganization and #$Business.  An
            element of #$FoodServiceOrganization is a business which
            prepares and/or serves food as its major function(s).
            Important subsets of #$FoodServiceOrganization include
            #$Restaurant and #$CateringCompany.  Note that grocery
            stores -- and airlines -- are not themselves considered
            elements of #$FoodServiceOrganization, even though some of
            those may have #$subOrganizations or sub-contractors which
            are#$FoodServiceOrganizations.  Bars or taverns, in contrast
            to #$Restaurants that also prepare and serve food, are also
            not considered #$FoodServiceOrganizations.</rdfs:comment>
        <guid>bd58f1fa-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#CommercialOrganization"/>
        <rdfs:subClassOf rdf:resource="#CommercialServiceOrganization"/>
    </daml:Class>
    <daml:Class rdf:ID="FoodUtensil">
        <rdfs:label>utensils</rdfs:label>
        <rdfs:comment>A collection of objects.  Each element of
            #$FoodUtensil is an implement or a container used in
            preparing or consuming food.  Among its subsets are:
            #$Spoon, #$CarvingKnife, #$CookingUtensil, #$FoodVessel,
            #$CuttingBoard, and #$ChopStick.</rdfs:comment>
        <guid>bd58cdce-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#HOCObject"/>
        <rdfs:subClassOf rdf:resource="#PhysicalDevice"/>
    </daml:Class>
    <daml:Class rdf:ID="FoodVessel">
        <rdfs:label>food vessel</rdfs:label>
        <rdfs:comment>A collection of container products; a subset of
            #$FoodUtensil.  An instance of #$FoodVessel is a container
            designed for holding, storing, or preparing food.   For
            example, a dinner plate, a cake pan, a wok, a plastic food
            storage container, etc.  Subsets include the collections
            #$CookingVessel, #$EatingVessel, #$FoodStorageContainer, and
            numerous others.</rdfs:comment>
        <guid>bd58a35c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#FoodUtensil"/>
    </daml:Class>
    <daml:Class rdf:ID="Foot-AnimalBodyPart">
        <rdfs:label>feet</rdfs:label>
        <rdfs:comment>The collection of all vertebrates&apos; feet.  A
            foot is a terminal part of a #$Vertebrate #$Leg.  Feet are
            used in locomotion, support, balance, kicking, etc.</rdfs:comment>
        <guid>bd58be93-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#SymmetricAnatomicalPartType"/>
        <rdf:type rdf:resource="#AnimalBodyPartType"/>
        <rdfs:subClassOf rdf:resource="#Appendage-AnimalBodyPart"/>
        <rdfs:subClassOf rdf:resource="#BiologicalLivingObject"/>
    </daml:Class>
    <daml:Class rdf:ID="Form-StandardizedIBO">
        <rdfs:label>legal forms</rdfs:label>
        <rdfs:comment>A collection of information bearing objects
            (IBOs); a subset of #$StructuredInformationSource.  Each
            element of #$Form-StandardizedIBO is an IBO having some
            standard set of labelled `fields&apos; left blank for the
            user to fill in with individualized information.  Forms
            usually accompany some sort of bureaucratic procedure, which
            they may be used to initiate or to certify.  Examples
            include the elements of #$JobApplicationForm, #$DepositSlip,
            #$InsuranceClaimForm, #$OrderForm, #$TaxReturn,
            #$BirthCertificate, #$DiplomaDocument,
            #$ATMTransactionReceipt, #$MarriageLicenseDocument,
            #$DeathCertificate, etc.</rdfs:comment>
        <guid>c0fd68b0-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#StructuredInformationSource"/>
        <rdfs:subClassOf rdf:resource="#InformationBearingObject"/>
    </daml:Class>
    <daml:Class rdf:ID="FormalCOC">
        <rdfs:label>formal codes of conduct</rdfs:label>
        <rdfs:comment>A collection of microtheories; a subset of
            #$CodeOfConduct.  Each element of #$FormalCOC is a  code of
            conduct which is imposed by an organization.   Formal codes
            of conduct typically are explicitly stated and publicly
            promulgated among the group subject to them; also, they are
            associated with prescribed methods of enforcement and
            punishment of violators.  Thus, the collection #$FormalCOC
            includes the laws of any legal jurisdiction, the rules of
            deportment imposed by educational institutions, the
            practices of some strict religious sects, etc.   In
            contrast, informal codes of conduct are norms that are not
            prescribed or enforced by formal means; for example,
            etiquette (#$MannersCodeOfConduct) and ethics (#$EthicsCodeOfConduct).</rdfs:comment>
        <guid>bd58af5f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MicrotheoryType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#CodeOfConduct"/>
    </daml:Class>
    <daml:Class rdf:ID="FormalProduct">
        <rdfs:label>packaged products</rdfs:label>
        <rdfs:comment>A collection of products.  Each element of
            #$FormalProduct is a complete packaged product, including
            everything the customer gets when the product is purchased,
            e.g., the #$mainProduct, packaging, enclosures, warranties,
            etc.  The typical packaged product as the retailer stocks it
            on the shelf and sells it at the register.</rdfs:comment>
        <guid>bd58eebe-9c29-11b1-9dad-c379636f7270</guid>
        <rdfs:subClassOf rdf:resource="#PartiallyTangibleProduct"/>
        <rdfs:subClassOf rdf:resource="#Product"/>
    </daml:Class>
    <daml:Class rdf:ID="FormalProductType">
        <rdfs:label>formal product type</rdfs:label>
        <rdfs:comment>A collection of collections.  Each element of
            #$FormalProductType is a collection of products (i.e.,
            tangible products, services, information products, etc.),
            all of which conform to a standardized product specification
            (i.e., a `form&apos;).  In Western-style capitalistic
            markets, elements of #$FormalProductType are often
            associated with a particular brand name (and perhaps model),
            since competing providers of products design them to be
            distinctive.  For example, the collection
            #$InternalCombustionEngine is not an element of
            #$FormalProductType, but a specific collection of engines
            manufactured by (e.g.) Mazda would be.  On the service side,
            the collection #$HairCuttingEvent is not a
            #$FormalProductType, but a subset of hair stylings for men
            (e.g., at a particular designer&apos;s salon) might be.</rdfs:comment>
        <guid>bd58aa7e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#SiblingDisjointCollection"/>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#ProductType"/>
    </daml:Class>
    <daml:Class rdf:ID="Format">
        <rdfs:label>format</rdfs:label>
        <rdfs:comment>Elements of the collection #$Format are attributes
            that are used to constrain the multi-valued nature of a
            #$Predicate.  Consider a predicate PRED which takes five
            arguments, and fix any four of those arguments -- say
            arguments 1, 2, 4, and 5.  The number of different legal
            values there can be for the third argument (given that
            we&apos;ve already chosen the other four) is determined by
            which #$Format attribute has been specified for the 3rd
            argument place of PRED..      (1) If the #$arg3Format for
            PRED is #$SingleEntry, then there can be at most one single
            term that&apos;s legal (and thus at most one assertion), for
            those given values of arguments 1, 2, 4, and 5.  To
            illustrate, let&apos;s consider a predicate with a lower
            #$arity, say (#$mother CHILD MOM), which says that the
            mother of CHILD is MOM.  The #$arg2Format for #$mother
            should be #$SingleEntry, since an animal can have only one
            biological mother.      (2) If the #$arg3Format of PRED is
            #$SetTheFormat, then there may be any number of assertions
            with different terms in the third argument position, but
            sharing the same values for arguments 1, 2, 4, and 5.  E.g.,
            the #$arg1Format for #$mother should be #$SetTheFormat,
            since a female can have multiple children.      (3) If the
            #$arg3Format of PRED is #$IntervalEntry, then there may be
            multiple assertions sharing the values of 1, 2, 4, and 5,
            but with different terms in the 3rd argument; however, all
            the values for the 3rd argument must be overlapping elements
            of #$ScalarInterval (q.v.).  E.g., the height of a person
            might be specified in several ways, with slightly different
            margins of error (or approximation), which is fine, but all
            those alternate values had better have SOME overlap since
            the person really just has one particular true height at any
            given time.</rdfs:comment>
        <guid>bd589a1d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#CoreConstant"/>
    </daml:Class>
    <CycLAssertionDirection rdf:ID="Forward-AssertionDirection">
        <rdfs:label>forward - assertion direction</rdfs:label>
        <rdfs:comment>The forward direction for Cyc assertions; the
            assertion is forward propagated.</rdfs:comment>
        <guid>bd681463-9c29-11b1-9dad-c379636f7270</guid>
    </CycLAssertionDirection>
    <daml:Class rdf:ID="Fragility">
        <rdfs:label>fragilities</rdfs:label>
        <rdfs:comment>A collection of attributes; a subset of
            #$PhysicalAttribute.  Each element of #$Fragility represents
            a specific property which determines how easily a physical
            object breaks.  Different fragilities may be designated
            using a #$GenericValueFunction.  Fragilities of objects are
            indicated with the predicate #$fragilityOfObject.</rdfs:comment>
        <guid>bd58f203-9c29-11b1-9dad-c379636f7270</guid>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </daml:Class>
    <daml:Class rdf:ID="FrameOfReference">
        <rdfs:label>frames of reference</rdfs:label>
        <rdfs:comment>Each element of #$FrameOfReference is a
            representation of the context in which certain data are to
            be interpreted.  Such contexts are typically physical (i.e.,
            spatiotemporal), but contexts may also be purely
            mathematical.  A Cartesian coordinate system represents a
            frame of reference.</rdfs:comment>
        <guid>bd58d4a0-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#MathematicalObject"/>
    </daml:Class>
    <Entity rdf:ID="France">
        <rdfs:label>France</rdfs:label>
        <rdfs:comment>The nation of France as it has existed throughout
            time; both political and physical aspects. Unlike other
            nations, France directly includes some overseas possessions.</rdfs:comment>
        <guid>bd58fa10-9c29-11b1-9dad-c379636f7270</guid>
    </Entity>
    <daml:Class rdf:ID="FreeSheet">
        <rdfs:label>free sheet</rdfs:label>
        <rdfs:comment>A collection of certain pieces of tangible stuff.
            A #$FreeSheet is a #$SheetOfSomeStuff which has two sides
            open to the environment.  I.e. over most of each of its
            surfaces, it is not #$sheetSurfaceConnected with something else.</rdfs:comment>
        <guid>be2a4be2-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdfs:subClassOf rdf:resource="#SheetOfSomeStuff"/>
        <daml:disjointWith rdf:resource="#SurfaceOnTangibleObject"/>
        <daml:disjointWith rdf:resource="#Layer"/>
    </daml:Class>
    <daml:Class rdf:ID="FreeSpaceContent">
        <rdfs:label>free space content</rdfs:label>
        <rdfs:comment>Instances of #$FreeSpaceContent are connected,
            tangible, fluid individuals occupying regions of  free
            space (i.e. instances  of #$EmptySpaceRegion): space regions
            through which solid objects can move more or less freely.
            Examples include the #$Air in the interior of a room or the
            sky above a city.  In an underwater context, a piece of free
            space content is likely to be an instance of #$Water. Often,
            a #$FreeSpaceContent is associated with a geographical
            region or some physical boundaries that define its edges.
            But a (partially) tangible  #$FreeSpaceContent is not to be
            confused with the intangible #$EmptySpaceRegion it occupies.</rdfs:comment>
        <guid>bd5899a9-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdfs:subClassOf rdf:resource="#FluidTangibleThing"/>
        <rdfs:subClassOf rdf:resource="#Air"/>
    </daml:Class>
    <daml:Class rdf:ID="Freezing">
        <rdfs:label>freezing events</rdfs:label>
        <rdfs:comment>A collection of events.  In each instance of this
            collection, an object is cooled to (and then below) its
            #$freezingPoint and is thereby changed from a
            #$LiquidStateOfMatter to a #$SolidStateOfMatter.</rdfs:comment>
        <guid>bd58a837-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#CoolingProcess"/>
        <rdfs:subClassOf rdf:resource="#PhysicalStateChangeEvent"/>
    </daml:Class>
    <LivingLanguage rdf:ID="FrenchLanguage">
        <rdfs:label>French Language</rdfs:label>
        <rdfs:comment>The Romance language which is the primary language
            spoken in #$France.</rdfs:comment>
        <guid>bd58b6bf-9c29-11b1-9dad-c379636f7270</guid>
    </LivingLanguage>
    <daml:Class rdf:ID="Frequency">
        <rdfs:label>frequencies</rdfs:label>
        <rdfs:comment>A collection of physical attributes; a subset of
            #$Rate.  Each element of #$Frequency is a measurement of the
            number of times something happens during some time interval.
            Elements of #$Frequency may be either fixed values, such as
            103 kiloHertz, or a range, such as #$Yearly, #$Hourly, or
            #$Rarely.  See #$UnitOfFrequency for the units used by Cyc
            to measure instances of #$Frequency, e.g. (#$TimesPerSecond
            35), (#$KiloHertz 103).  Instances of #$Frequency are
            important in the characterization of types of #$WavePropagation.</rdfs:comment>
        <guid>bd58fad4-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DerivedNumericAttributeType"/>
        <rdfs:subClassOf rdf:resource="#PhysicalAttribute"/>
        <rdfs:subClassOf rdf:resource="#Rate"/>
    </daml:Class>
    <daml:Class rdf:ID="FreshWaterLake">
        <rdfs:label>fresh water lake</rdfs:label>
        <rdfs:comment>A collection of topographical features.  Each
            instance of #$FreshWaterLake is a freshwater land-locked
            body of water [#$Lake].  Examples: #$LakeMaracaibo,
            #$LakeWinnipeg, #$LakeTanganyika, #$LochNess-Lake,
            #$LakeErie, #$LakeTahoe.  Note that inland saltwater
            #$Lakes, commonly referred to as `seas&apos;, belong to the
            collection #$InlandSea (rather than to #$FreshWaterLake);
            e.g., #$CaspianSea, #$BlackSea, #$DeadSea.</rdfs:comment>
        <guid>c10e5cfd-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#BodyOfWater"/>
        <rdfs:subClassOf rdf:resource="#Lake"/>
    </daml:Class>
    <PreparationAttribute rdf:ID="Fried">
        <rdfs:label>fried</rdfs:label>
        <rdfs:comment>The attribute #$Fried is a specialized form of
            #$Cooked.  Food that is #$Fried has been prepared in an
            event of #$Frying.</rdfs:comment>
        <guid>bd58f595-9c29-11b1-9dad-c379636f7270</guid>
    </PreparationAttribute>
    <daml:Class rdf:ID="Friendliness">
        <rdfs:label>friendliness</rdfs:label>
        <rdfs:comment>Emotion manifested by interest in another person
            (or, more rarely, in some nonhuman agent), good will towards
            that individual, and an inclination to favor him or her (or
            it).  This is a #$Collection --- for an explanation of that,
            see #$Happiness.  Some more specialized
            #$FeelingAttributeTypes than #$Friendliness are #$Love and #$Love-Romantic.</rdfs:comment>
        <guid>bd58b648-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#FeelingAttributeType"/>
        <rdfs:subClassOf rdf:resource="#Affection"/>
    </daml:Class>
    <daml:Class rdf:ID="FrontSide">
        <rdfs:label>fronts</rdfs:label>
        <rdfs:comment>The collection of all the entire front sides (as
            conventionally understood) of all objects that have distinct
            #$Sides, one of which faces in the frontwards direction.</rdfs:comment>
        <guid>bd58f6a1-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#RegionType"/>
        <rdfs:subClassOf rdf:resource="#Side"/>
    </daml:Class>
    <daml:Class rdf:ID="Fruit">
        <rdfs:label>fruits</rdfs:label>
        <rdfs:comment>A subset of #$PlantPart.  Each element of #$Fruit
            is a plant structure that contains the seeds of angiosperms.
            Many fruits have fleshy walls having high concentrations of
            sugars or fats, and these are often eaten by humans and
            other animals.  Fruits usually develop from the ovary wall,
            although some fruits include other tissues; e.g., the flesh
            of apples and of strawberries develops from the receptacle,
            and the fruits of pineapple and fig develop from a whole
            inflorescence (group of flowers).  See also #$EdibleFruit.</rdfs:comment>
        <guid>bd58e5d4-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#LifeStageType"/>
        <rdfs:subClassOf rdf:resource="#PlantPart"/>
    </daml:Class>
    <daml:Class rdf:ID="Frustration">
        <rdfs:label>frustrations</rdfs:label>
        <rdfs:comment>A feeling of irritation and dissatisfaction
            arising from unresolved problems or unfulfilled needs.  This
            is a collection; for an explanation of a typical
            #$FeelingAttributeType, see #$Happiness.</rdfs:comment>
        <guid>bd58b586-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#FeelingAttributeType"/>
        <rdfs:subClassOf rdf:resource="#Dissatisfaction"/>
    </daml:Class>
    <daml:Class rdf:ID="Frying">
        <rdfs:label>frying</rdfs:label>
        <rdfs:comment>Cooking food by partial or total immersion in hot
            oil until desired level of doneness.</rdfs:comment>
        <guid>bd58baeb-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#CookingFood"/>
    </daml:Class>
    <WorkStatus rdf:ID="FullTime">
        <rdfs:label>full time</rdfs:label>
        <rdfs:comment>Attribute of being a full-time worker.</rdfs:comment>
        <guid>bd588272-9c29-11b1-9dad-c379636f7270</guid>
    </WorkStatus>
    <UserRightsAttribute rdf:ID="FullUseRights">
        <rdfs:label>full use rights</rdfs:label>
        <rdfs:comment>An attribute of an object with respect to an
            #$Agent, meaning that if the #$Agent has this right to the
            object, it does not place any restrictions on what the
            #$Agent may do with the object.  If there are restrictions
            on what the #$Agent may do with the object, they arise from
            other sources, such as formal and informal laws of behavior.
            E.g., even if you have #$FullUseRights to your car, you
            can&apos;t violate traffic laws, kill people with it, blow
            it up in a parking lot, etc.</rdfs:comment>
        <guid>bd58928f-9c29-11b1-9dad-c379636f7270</guid>
    </UserRightsAttribute>
    <daml:Class rdf:ID="Function-Denotational">
        <rdfs:label>functions</rdfs:label>
        <rdfs:comment>#$Function-Denotational is the   collection of
            functions the CycL expressions for which can be used   to
            form non-atomic terms (NATs).  Specifically, when such a
            function-denoting   expression is appropriately combined
            with other expressions (i.e. the former  is in the 0th
            argument position and the latter are of the correct number
            and   type) the resulting expression is a new CycL term -- a
            NAT -- that may then   freely appear as a component in other
            CycL expressions.  The NAT will itself   denote the value
            (if any) of the function denoted by the former expression
            for   the sequence of arguments denoted, respectively, by
            the latter expressions.  For example, #$GovernmentFn is a
            unary denotational function, and so the  CycL constant
            &apos;#$GovernmentFn&apos; requires one (syntactic) argument
            (such as   the constant &apos;#$France&apos;) to form a NAT
            (in this case, the expression   &apos;(#$GovernmentFn
            #$France)&apos;).  This NAT, which denotes the government of
            France, can in turn serve as a (syntactic) argument in any
            CycL expression   in which (a term for) an instance of
            #$RegionalGovernment can occur.    Alternatively, we could
            have created a specific new term `GovernmentOfFrance&apos;,
            asserted that its denotation is an instance of
            #$RegionalGovernment, and so on.    But two related
            advantages to having NATs in CycL are that they (i) allow
            for   a drastic reduction in the total number of constant
            terms needed in the CycL   vocabulary and (ii) provide a
            convenient and systematic way to form appropriate   new
            terms as needed out of existing vocabulary (which terms can
            then inherit   from various existing rules and other
            assertions involving the terms&apos; component
            expressions).  &lt;PARAGRAPH&gt;  Important subcollections
            of #$Function-Denotational   include
            #$IndividualDenotingFunction (whose instances always return
            instances of  #$Individual), #$CollectionDenotingFunction,
            #$SetDenotingFunction, and   #$FunctionDenotingFunction
            (which is itself a subcollection of the first).    NATs
            formed using terms that denote instances of
            #$FunctionDenotingFunction   often denote instances of
            #$Function-Denotational themselves.  Thus, like most   other
            things, denotational functions can be denoted in CycL either
            by constants   (e.g. &apos;#$GovernmentFn&apos;) or --
            although this is less common -- by NATs (e.g.
            &apos;(#$FunctionToArg 2 #$biologicalMother)&apos;).  Note
            that the collection   #$Function-Denotational does _not_
            include all functions whatsoever.  Functions   that, given
            their natures and the nature of the CycL language, could not
            sensibly   be denoted by any NAT-forming CycL expression are
            not denotational functions.    Examples include certain
            provably-existing exotic mathematical functions, such   as
            (probably) any one-to-one function from the positive
            integers to the rational   numbers.  (For a more general
            collection that does include such functions, and for a  more
            general explication of the notion of function itself, see
            #$Function-MathematicalObject and its comment).  Note also
            that   #$Function-Denotational does not include any of the
            so-called #$TruthFunctions   (q.v.): #$Predicates,
            #$Quantifiers, or #$LogicalConnectives.  For these
            relations (as construed in CycL) are not really functions at
            all, even though   it can be heuristically useful to think
            of them as if they were functions from   sequences of
            arguments to truth values.</rdfs:comment>
        <guid>bd5c40b0-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#RelationshipType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#Relation"/>
        <rdfs:subClassOf rdf:resource="#FunctionOrFunctionalPredicate"/>
        <daml:disjointWith rdf:resource="#Predicate"/>
    </daml:Class>
    <daml:Class rdf:ID="Function-MathematicalObject">
        <rdfs:label>mathematical type of functions</rdfs:label>
        <rdfs:comment>The collection of functions and a specialization
            of  #$Relation-MathematicalObject.  Each instance of
            #$Function-MathematicalObject is a many-one relation that
            represents a mapping from one set of things (the
            function&apos;s  #$relationDomain) to another set of things
            (its #$relationRange).  As a many-one relation, a function
            maps each thing in its domain   to exactly one thing in its
            range.  A function is either unary,  binary, ternary, or
            whatever (see #$functionalArity; but cf.
            #$relationalArity), depending on the nature of the members
            of   its domain.  In general, the domain of an N-ary
            function is   a set of ordered N-tuples (construed in CycL
            as #$Lists of   length N).  The function is said to take the
            items from any   of these N-tuples as its N _arguments_ and
            to return a   member of its range as its corresponding
            _value_.  A key   specialization of
            #$Function-MathematicalObject is  #$FixedArityFunction
            (which is also a specialization of
            #$Function-Denotational).  Instances include the elements of
            #$Distribution and the (non-denumerably many) one-to-one
            correspondences that exist between the positive integers and
            the rational numbers.  See also #$valueOfFunctionForArgs,
            #$DomainOfFunctionFn, and #$RangeOfFunctionFn.</rdfs:comment>
        <guid>bee42bbb-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#MathematicalObject"/>
    </daml:Class>
    <daml:Class rdf:ID="FunctionFromQuantitiesToQuantities">
        <rdfs:label>function from quantities to quantities</rdfs:label>
        <rdfs:comment>A collection of mathematical functions.  Each
            element of #$FunctionFromQuantitiesToQuantities is a
            function that takes one or more numbers as its arguments,
            and it returns a number as its value.  Examples: subtraction
            (#$DifferenceFn), square root (#$SqrtFn), absolute value
            (#$AbsoluteValueFn), and logarithm (#$LogFn).</rdfs:comment>
        <guid>bd58daad-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#RelationshipType"/>
        <rdfs:subClassOf rdf:resource="#EvaluatableFunction"/>
    </daml:Class>
    <daml:Class rdf:ID="FunctionOrFunctionalPredicate">
        <rdfs:label>function or functional predicate</rdfs:label>
        <rdfs:comment>A collection of mathematical objects each instance
            of which is either a denotational function or a predicate
            that is functional in at least one argument place (see
            #$FunctionalPredicate).  Examples: #$SkolemFunction,
            #$IntervalMaxFn, #$ElectricalPotentialDifference,
            #$revenueFromType, #$costRateForType, #$permeabilityOfSubstThroSubst.</rdfs:comment>
        <guid>bd5880a3-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#RelationshipType"/>
        <rdfs:subClassOf rdf:resource="#Relation"/>
    </daml:Class>
    <daml:Class rdf:ID="FunctionTheMathematicalType">
        <rdfs:label>mathematical functions</rdfs:label>
        <rdfs:comment/>
        <guid>bd58809d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdf:type rdf:resource="#ObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="FunctionalPredicate">
        <rdfs:label>functional predicate</rdfs:label>
        <rdfs:comment>A specialization of #$Predicate instances of which
            are functional in  at least one argument-place (see
            #$functionalInTheNthArg).  Given any   sequence of legal
            arguments placed in such a predicate&apos;s other argument
            positions, there is at most one legal argument such that,
            when it is   placed in the predicate&apos;s functional
            position, the resulting formula   is true.  More precisely:
            Suppose PRED is an N-ary instance of   #$FunctionalPredicate
            that is functional in its Kth place.  Given any
            (N-1)-tuple &lt;O(1), ..., O(K-1), O(K+1), ..., O(N)&gt;
            consisting  of things that are, respectively, legal
            arguments (i.e. satisfy the   argument-constraints) for the
            N-1 argument-places in PRED other than   its argK-place,
            there is at most one thing -- call it O(K) -- such that
            (PRED O(1) ... O(N)) is true.  (The one exception to the
            above is  when the argument-format for PRED&apos;s
            functional argument-place is   #$IntervalEntry (q.v.).  In
            that case there might be more than one instance of
            #$ScalarInterval that, when put in this argument-place,
            yields a true   formula; but all of these scalar intervals
            must be related to one   another by #$overlapsIntervals.)
            For example, #$biologicalMother is   functional in its
            second argument-place,   since every animal has one and only
            one biological mother.  It can   happen that, for some ways
            of fixing PRED&apos;s other arguments, there   will be
            _nothing_ that would yield a true formula when put into
            PRED&apos;s   functional argument-place; for example, while
            a spatial thing has at   most one length (see
            #$lengthOfObject), if it is (say) a sphere it has   none.  A
            binary #$FunctionalPredicate that is functional in its
            second argument is an instance of #$FunctionalSlot (q.v.).</rdfs:comment>
        <guid>bd58dc77-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#RelationshipType"/>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="#FunctionOrFunctionalPredicate"/>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
    </daml:Class>
    <daml:Class rdf:ID="FunctionalSlot">
        <rdfs:label>functional slots</rdfs:label>
        <rdfs:comment>A specialization of #$FunctionalPredicate each
            instance of which is a binary predicate that is functional
            in its second argument position.  More precisely, a
            functional binary predicate PRED is an instance of
            #$FunctionalSlot if and only if, for any legal occupant
            THING1 of PRED&apos;s arg1 position, there is at most one
            legal occupant THING2 of PRED&apos;s arg2 position such that
            (PRED THING1 THING2) holds.  #$FunctionalSlot is in effect
            one  half  of the intersection of #$BinaryPredicate and
            #$FunctionalPredicate, containing those whose second
            argument is functional.  Examples: #$latitude,
            #$countryOfAddress, #$stateOfDevice, #$femaleParentActor.</rdfs:comment>
        <guid>bd5881a4-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="#FunctionalPredicate"/>
        <rdfs:subClassOf rdf:resource="http://www.daml.org/2001/03/daml+oil#Property"/>
    </daml:Class>
    <daml:Class rdf:ID="FundamentalNumericAttributeType">
        <rdfs:label>fundamental numeric attribute type</rdfs:label>
        <rdfs:comment>A collection of collections.  Each element of
            #$FundamentalNumericAttributeType is a collection of
            measurable attributes, including #$Distance,
            #$Time-Quantity, #$Currency, #$Mass, etc.  The types of
            attributes in this collection are `fundamental&apos; when
            contrasted with other attributes which are derived from them
            (such as #$Volume, #$Speed, etc.).  Cf. #$DerivedNumericAttributeType.</rdfs:comment>
        <guid>bd59059d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#SiblingDisjointCollection"/>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="#MeasurableAttributeType"/>
        <rdfs:subClassOf rdf:resource="#PrimitiveAttributeType"/>
        <daml:disjointWith rdf:resource="#DerivedNumericAttributeType"/>
    </daml:Class>
    <daml:Class rdf:ID="Fungus">
        <rdfs:label>fungus</rdfs:label>
        <rdfs:comment>The collection of fungi, the stationary,
            saprophytic, and symbiotic or parasitic eukaryotic organisms
            constituting an instance of #$BiologicalKingdom in many
            systems of classification.  #$Fungus includes as subsets the
            collections #$Mushroom, #$Yeast, and #$RingwormFungus.
            Unlike most other instances of #$Plant, mushrooms are
            incapable of performing processes of #$Photosynthesis.</rdfs:comment>
        <guid>bd589909-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#BiologicalKingdom"/>
        <rdf:type rdf:resource="#OrganismClassificationType"/>
        <rdfs:subClassOf rdf:resource="#Organism-Whole"/>
    </daml:Class>
    <daml:Class rdf:ID="FurniturePiece">
        <rdfs:label>pieces of furniture</rdfs:label>
        <rdfs:comment>A collection of durable artifacts which are used
            in #$HumanShelterConstructions to make human dwelling places
            more comfortable.  An instance of #$FurniturePiece is a
            whole piece of furniture, such as a table, chair, or chest
            of drawers; an arm of a sofa is not a #$FurniturePiece.  Its
            subsets can be classified according to the main functions
            their elements serve:  (1) providing support for
            people&apos;s bodies while they are seated or reclining
            (e.g., #$Bed-PieceOfFurniture, #$Sofa-PieceOfFurniture,
            #$FootStool, #$FixedTheaterSeat); (2) providing work/action
            surfaces (e.g., #$Desk-PieceOfFurniture, #$DiningRoomTable);
            (3) providing organized and/or protective storage for
            people&apos;s stuff (e.g., #$Dresser-PieceOfFurniture,
            #$Bookcase-PieceOfFurniture); (4) providing extra
            illumination or some other function in living and work areas
            (e.g., #$ElectricLamp).  Most pieces of furniture belong to
            the collection #$NonPoweredDevice (q.v.) in that they
            don&apos;t need any energy input in order to do their
            function.    Note: Yes, of course lamps, fancy console TVs,
            hospital beds, etc. are exceptions to that last rule -- they
            require power. But in a sense they are really objects
            performing multiple independent functions.  A fancy console
            TV is a piece of furniture even when it&apos;s turned off;
            it just so happens to fulfill two roles, one as a piece of
            furniture and one as an appliance.  When it&apos;s turned
            on, in fact, its users are intended to stop noticing it as a
            piece of furniture.)</rdfs:comment>
        <guid>bd58d01d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#SolidTangibleProduct"/>
        <rdfs:subClassOf rdf:resource="#HOCObject"/>
        <rdfs:subClassOf rdf:resource="#PhysicalDevice"/>
        <daml:disjointWith rdf:resource="#RoomInAConstruction"/>
    </daml:Class>
    <daml:Class rdf:ID="FusionEvent">
        <rdfs:label>fusion event</rdfs:label>
        <rdfs:comment>A collection of events.  In each #$FusionEvent,
            two or more objects fuse together, yielding a product.</rdfs:comment>
        <guid>bd58ad78-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="GainingUserRights">
        <rdfs:label>transfers of user rights</rdfs:label>
        <rdfs:comment>A collection of events.  In an instance of
            #$GainingUserRights, some #$Agent gains possession of
            something.  Thus, in such an event, that agent newly
            acquires a right (viz., some #$UserRightsAttribute) to use
            some item.  The item in question is identified as the
            #$objectOfPossessionTransfer, and the agent is the
            #$toPossessor (i.e., the one to whom the possession comes).
            The #$Agent may or may not be a #$deliberateActors in the
            event; e.g., buying a car is done on purpose, but receiving
            a car as a gift isn&apos;t.  If either of those two events
            happen to you, though, it is an element of the collection #$GainingUserRights.</rdfs:comment>
        <guid>bd6460d7-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#TransferIn"/>
        <rdfs:subClassOf rdf:resource="#ChangeInUserRights"/>
        <daml:disjointWith rdf:resource="#AbandoningSomething"/>
    </daml:Class>
    <daml:Class rdf:ID="GammaRay">
        <rdfs:label>gamma rays</rdfs:label>
        <rdfs:comment>A collection of events; a subset of
            #$ElectromagneticRadiation.  Each element of #$GammaRay is
            an instance of electromagnetic radiation that has a
            #$wavelength less than  1x10^-2 #$Angstroms.  Low power
            #$GammaRays overlap with high power #$XRays.</rdfs:comment>
        <guid>c05ce4b7-9c29-11b1-9dad-c379636f7270</guid>
        <rdfs:subClassOf rdf:resource="#ElectromagneticRadiation"/>
    </daml:Class>
    <StateOfMatter-SolidLiquidGaseous rdf:ID="GaseousStateOfMatter">
        <rdfs:label>gaseous</rdfs:label>
        <rdfs:comment>A basic physical state of matter.
            #$GaseousStateOfMatter characterizes pieces of matter that
            are at a high enough temperature or low enough pressure for
            the type of matter involved that the molecules are not
            bonded even weakly to their neighbors, and readily break
            free.  Gaseous objects are characterized at the macroscopic
            level by having diffuse boundaries (when outside of
            containers), no shape independent of a container, and by
            great expandability and compressibility.   Examples of
            things that typically have this attribute are:  the helium
            in a child&apos;s balloon; the oxygen in Earth&apos;s
            atmosphere; the water vapor in Earth&apos;s atmosphere.</rdfs:comment>
        <guid>bd58bd5f-9c29-11b1-9dad-c379636f7270</guid>
    </StateOfMatter-SolidLiquidGaseous>
    <daml:Class rdf:ID="GaseousTangibleThing">
        <rdfs:label>gaseous objects</rdfs:label>
        <rdfs:comment>A collection of tangible substances.  Each element
            of #$GaseousTangibleThing is a tangible thing which shares
            many of the properties that matter in a
            #$GaseousStateOfMatter exhibits; i.e., its shapes would
            completely conform to the boundaries of a vessel containing
            it, and it is compressible (however, not all instances of
            #$GaseousTangibleThing can be said to have
            #$GaseousStateOfMatter, because that&apos;s reserved for
            pure compounds).  Examples of #$GaseousTangibleThing: pieces
            of matter in #$GaseousStateOfMatter like the helium in a
            child&apos;s balloon; mixures of gasses such as
            #$TheAtmosphereQuaSinglePieceOfStuff; and suspensions of
            liquids and solids in gas such as #$Fog and #$Smoke.  Cf.
            #$FluidTangibleThing, #$LiquidTangibleThing.</rdfs:comment>
        <guid>bd58c52b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TangibleStuffStateType"/>
        <rdfs:subClassOf rdf:resource="#FluidTangibleThing"/>
        <daml:disjointWith rdf:resource="#Particle"/>
        <daml:disjointWith rdf:resource="#LiquidTangibleThing"/>
    </daml:Class>
    <daml:Class rdf:ID="GenderOfLivingThing">
        <rdfs:label>genders</rdfs:label>
        <rdfs:comment>The collection of genders that organisms can have.</rdfs:comment>
        <guid>bd58a890-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#UnorderedAttributeType"/>
        <rdf:type rdf:resource="#AttributeType"/>
        <rdf:type rdf:resource="#SiblingDisjointAttributeType"/>
        <rdfs:subClassOf rdf:resource="#AttributeValue"/>
    </daml:Class>
    <daml:Class rdf:ID="GeneralMicrotheory">
        <rdfs:label>general microtheory</rdfs:label>
        <rdfs:comment>The collection consisting of every #$Microtheory
            intended to contain general axioms useful for multiple
            purposes.  This excludes microtheories which deal with
            specific situations, such as instances of
            #$ProblemSolvingCntxt, microtheories that represent the
            information content of one specific
            #$InformationBearingObject such as the US Declaration of
            Independence, or those which are purely lexical
            microtheories.  Examples of this collection are
            #$HumanSocialLifeMt, #$BuyingMt, and #$NaiveAnimalsMt.
            Negative examples include #$GeneralLexiconMt (purely
            lexical) and #$PeopleDataMt (no general axioms).</rdfs:comment>
        <guid>bd589197-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdf:type rdf:resource="#MicrotheoryType"/>
        <rdfs:subClassOf rdf:resource="#Microtheory"/>
        <daml:disjointWith rdf:resource="#SomethingExisting"/>
    </daml:Class>
    <daml:Class rdf:ID="GeneralizedTransfer">
        <rdfs:label>transfers</rdfs:label>
        <rdfs:comment>This collection is a subset of #$Event.  Each
            element of #$GeneralizedTransfer is an event in which
            something (tangible or intangible) is transferred from one
            `place&apos; to another.  #$GeneralizedTransfer includes
            changes in physical location, in ownership or possession,
            transfer of information, and propagation of wave phenomena
            through space.  See also the related predicate
            #$transferredThing, and the specialized subsets of this collection.</rdfs:comment>
        <guid>bd588eb6-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#Path-Simple"/>
        <rdfs:subClassOf rdf:resource="#Event"/>
        <daml:disjointWith rdf:resource="#Place"/>
    </daml:Class>
    <daml:Class rdf:ID="GenericQuantity">
        <rdfs:label>extents</rdfs:label>
        <rdfs:comment>#$GenericQuantity is a specialization of
            #$ScalarInterval.  Each instance of #$GenericQuantity is a
            generic  measure that is not numerically specified.
            Examples: #$Low, #$Medium, #$High, #$HighToVeryHigh.  When
            such quantities are related to their subject by a
            specialized predicate (e.g., #$feelsTowardsEvent,
            #$goalImportance), they may represent amounts in specialized
            areas, including strength of emotional responses and
            importance of goals.  See also #$GenericValueFunction, #$followingValue.</rdfs:comment>
        <guid>bd58998e-9c29-11b1-9dad-c379636f7270</guid>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </daml:Class>
    <daml:Class rdf:ID="GenericShapeType">
        <rdfs:label>generic shape type</rdfs:label>
        <rdfs:comment>A collection of collections. Instances of
            #$GenericShapeType  are collections representing types of
            shapes that make no committment to being either purely
            abstract or to being located in the physical world.
            Therefore, each instance of GenericShapeType is going to
            have some abstract and some localized instances.
            #$GenericShapeType is distinguished from #$AbstractShapeType
            (q.v.), which is the collection of those collections that
            are instances of #$ShapeType, and all of whose elements are
            abstract. There is no &apos;LocalizedShapeType&apos;.</rdfs:comment>
        <guid>c14f9295-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="#ShapeType"/>
        <daml:disjointWith rdf:resource="#AbstractShapeType"/>
    </daml:Class>
    <daml:Class rdf:ID="GenericValueFunction">
        <rdfs:label>generic value function</rdfs:label>
        <rdfs:comment>A collection of Cyc functions; a subset of
            #$IndividualDenotingFunction.  Each element of
            #$GenericValueFunction is a function that can be applied to
            an element of #$LinearOrderAttributeType and returns some
            `generic&apos; amount (e.g., high, medium, low) of that
            attribute.  Such functions are particularly useful for
            qualitative, hard-to-quantify attribute types, e.g.,
            #$Happiness, #$Fragility, #$Absorbency, #$Glamor, etc.  They
            save us from having to create individually the various
            levels of attributes like #$Happiness, #$Fragility, etc.
            Instead, for example, we need only refer to (#$HighAmountFn
            #$Happiness) as an alternative to painstakingly reifying
            `HighHappiness&apos; and hand-entering all the formulas that
            such a constant requires (e.g. #$isa, #$followingValue,
            etc.). The compositionality afforded by the elements of
            #$GenericValueFunction allows this overhead to be taken care
            of automatically. (Rode, 11/9/1998)  See also
            #$GenericQuantity and #$GenValueFn.</rdfs:comment>
        <guid>bf2a2ba8-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#RelationshipType"/>
        <rdfs:subClassOf rdf:resource="#IndividualDenotingFunction"/>
        <rdfs:subClassOf rdf:resource="#ReifiableFunction"/>
    </daml:Class>
    <daml:Class rdf:ID="GeneticCondition">
        <rdfs:label>genetic conditions</rdfs:label>
        <rdfs:comment>A collection of physiological conditions.  An
            instance of #$GeneticCondition is an abnormal condition
            which developed in a particular organism due to that
            organism&apos;s genetic configuration.  Such conditions are
            not contagious as infections are, but they may be
            hereditary.  They are often harmful, in fact they are often
            #$AilmentConditions, such as encephalitis.  Occasionally,
            though the mutation is beneficial, in which case it would be
            wrong to also label it an #$AilmentCondition.</rdfs:comment>
        <guid>c0fd5d45-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PhysiologicalConditionType"/>
        <rdfs:subClassOf rdf:resource="#ChronicCondition"/>
        <rdfs:subClassOf rdf:resource="#CongenitalCondition"/>
        <daml:disjointWith rdf:resource="#Infection"/>
    </daml:Class>
    <Format rdf:ID="GenlAttributesFormat">
        <rdfs:label>genl attributes format</rdfs:label>
        <rdfs:comment>If a predicate P has #$GenlAttributesFormat for
            argument position N, then given some particular list of
            terms that occupy the other argument positions of P, there
            may be multiple assertions with different terms in position
            N (keeping the other arguments fixed), but only so long as
            the terms in position N are all interrelated by the
            predicate #$genlAttributes. For example, the #$arg3Format of
            #$directionBetweenObjects is #$GenlAttributesFormat.  This
            allows us to state both (#$directionBetweenObjects
            #$PotomacRiver #$HudsonBay #$North-Generally) and
            (#$directionBetweenObjects #$PotomacRiver #$HudsonBay
            #$North-Directly) in a #$Microtheory in which
            (#$genlAttributes #$North-Directly #$North-Generally).</rdfs:comment>
        <guid>bf4f4c20-9c29-11b1-9dad-c379636f7270</guid>
    </Format>
    <Format rdf:ID="GenlPredsFormat">
        <rdfs:label>genl preds format</rdfs:label>
        <rdfs:comment>If a predicate P has #$GenlPredsFormat for
            argument position N, then given some particular list of
            terms that occupy the other argument positions of P, there
            may be multiple assertions with different terms in position
            N (keeping the other arguments fixed), but only so long as
            the terms in position N are all interrelated by the
            predicate #$genlPreds. For example, the #$arg3Format of
            #$soleFunction is #$GenlPredsFormat.  This allows us to
            state both (#$typeSoleFunction #$Bus-RoadVehicle
            #$TransportInvolvingADriver #$transporter) and
            (#$typeSoleFunction #$TransportInvolvingADriver #$vehicle)
            in a #$Microtheory in which (#$genlPreds #$vehicle #$transporter).</rdfs:comment>
        <guid>c0e81674-9c29-11b1-9dad-c379636f7270</guid>
    </Format>
    <Format rdf:ID="GenlsFormat">
        <rdfs:label>genls format</rdfs:label>
        <rdfs:comment>If a predicate P has #$GenlsFormat for argument
            position N, then given some particular list of terms that
            occupy the other argument positions of P, there may be
            multiple assertions with different terms in position N
            (keeping the other arguments fixed), but only so long as the
            terms in position N are all interrelated by the predicate
            #$genls.  For example, the #$arg1Format of #$soleProductType
            is #$GenlsFormat.  This allows us to state both
            (#$soleProductType #$AlfaRomeoTheCompany #$SportsCar) and
            (#$soleProductType #$AlfaRomeoTheCompany #$AlfaRomeoCar) in
            a #$Microtheory in which (#$genls #$AlfaRomeoCar #$SportsCar).</rdfs:comment>
        <guid>c088dcf7-9c29-11b1-9dad-c379636f7270</guid>
    </Format>
    <daml:Class rdf:ID="GeographicalDirection">
        <rdfs:label>directions</rdfs:label>
        <rdfs:comment>A specialization of #$UnitVectorInterval.
            #$GeographicalDirections  derive from the
            &apos;intrinsic&apos; directional axes of a terrestrial
            frame of  reference: North, South, East, West, geographic
            &apos;Up&apos; and geographic  &apos;Down&apos;.  Like all
            #$VectorIntervals, they may be specified  precisely--e.g.,
            #$North-Directly or as intervals--e.g.,  #$North-Generally.
            With respect to &apos;up&apos; and &apos;down&apos;, care
            should be  taken to distinguish a
            #$TopAndBottomSidedObject&apos;s &apos;intrinsic&apos; up
            and  down from &apos;up&apos; and &apos;down&apos; with
            respect to the surface of the Earth or  some other planet.</rdfs:comment>
        <guid>bd58dbdb-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#TerrestrialDirection"/>
        <rdfs:subClassOf rdf:resource="#DirectionExpression"/>
    </daml:Class>
    <daml:Class rdf:ID="GeographicalRegion">
        <rdfs:label>geographical regions</rdfs:label>
        <rdfs:comment>A collection of spatial regions that include some
            piece of the surface of a planet (usually #$PlanetEarth).
            Each element of #$GeographicalRegion is a
            #$PartiallyTangible entity that may be represented on a map
            of the planet.  This includes purely topographical regions
            like mountains and underwater spaces, places defined by
            demographics, e.g., language areas, and territory otherwise
            demarcated, e.g. #$TimeZones.  In  dualist  geopolitical
            contexts [see #$DualistGeopoliticalMt], instances of
            #$GeopoliticalEntity are also considered to be instances of
            #$GeographicalRegion.  In all cases the region in question
            must contain some tangible component with which it is
            possible to make physical contact.  The elements of
            #$GeographicalRegion contrast in this respect with the
            elements of #$GeographicalThing-Intangible, which are wholly
            imaginary .  Examples of #$GeographicalRegions:
            #$RockyMountainStates-USRegion, the #$ContinentOfAustralia,
            #$SinaiPeninsula, and -- in  dualist  geopolitical contexts
            -- #$YaleUniversity and #$CityOfPittsburghPA.  Some
            important types of regions are represented by the subsets
            #$LanguageArea, #$TimeZone, #$PostalCodeRegion,
            #$EcologicalRegion, #$ConstructionSite, and -- in  dualist
            geopolitical contexts -- #$GeopoliticalEntity.  No elements
            of #$GeographicalRegion are wholly indoor locations.</rdfs:comment>
        <guid>bd588009-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Place"/>
        <rdfs:subClassOf rdf:resource="#Surface-Physical"/>
        <daml:disjointWith rdf:resource="#CommercialOrganization"/>
    </daml:Class>
    <daml:Class rdf:ID="GeometricThing">
        <rdfs:label>geometric forms</rdfs:label>
        <rdfs:comment>A subset of #$SpatialThing. Each element of
            #$GeometricThing is a spatial thing that can be described
            mathematically. Examples include spatially localized
            objects, such as the equator, and abstract objects, such as
            abstract shapes of various dimensions.</rdfs:comment>
        <guid>bd58c42e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#SpatialThing"/>
    </daml:Class>
    <daml:Class rdf:ID="GeometricThing-Abstract">
        <rdfs:label>abstract shapes</rdfs:label>
        <rdfs:comment>A specialization of #$GeometricThing each  of
            whose instances is abstract in the sense of being intangible
            (see #$Intangible) as well as lacking spatial and temporal
            location.  Each instance of #$GeometricThing-Abstract is an
            abstract region of an abstract space (the latter having two
            or more dimensions).  Geometric figures that are located in
            this (or another) universe are not instances of this
            collection, but of #$GeometricThing-Localized.</rdfs:comment>
        <guid>bd5885bc-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#GeometricThing"/>
        <rdfs:subClassOf rdf:resource="#MathematicalObject"/>
        <rdfs:subClassOf rdf:resource="#GeometricThing-Intangible"/>
        <daml:disjointWith rdf:resource="#GeometricThing-Localized"/>
    </daml:Class>
    <daml:Class rdf:ID="GeometricThing-Intangible">
        <rdfs:label>geometric thing - intangible</rdfs:label>
        <rdfs:comment>The collection of all intangible #$GeometricThings
            whether they are spatially localized or purely abstract.
            This is the #$collectionIntersection of #$GeometricThing and
            #$Intangible. Positive examples are any intangible things
            that are characterizable in geometric terms, such as the
            intangible space determined by an Egyptian pyramid, a
            platonic sphere, or the center of mass of the solar system
            at the first instant of the twentieth century (a point).
            Important specializations are #$GeometricThing-Localized
            (all spatially localized instances) and
            #$GeometricThing-Abstract (all instances not spatially
            located in any universe).</rdfs:comment>
        <guid>c12c73ef-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#Intangible"/>
        <rdfs:subClassOf rdf:resource="#GeometricThing"/>
    </daml:Class>
    <daml:Class rdf:ID="GeometricThing-Localized">
        <rdfs:label>geometric thing - localized</rdfs:label>
        <rdfs:comment>A collection of spatially localized (but
            intangible) objects #$SpatialThing-Localized. Positive
            examples are any things that both have some location or
            position in the Universe, and are characterizable in
            geometric terms, such as the intangible spaces determined
            by, for example, the pyramids of Egypt (pyramids), the Sun
            (a sphere), or the center of mass of the solar system at the
            first instant of the twentieth century (a point).
            #$GeometricThing-Localized is identical with (#$LocalizedFn
            #$GeometricThing) (see the #$cyclistNotes on this page for
            why we need this constant reified anyway).
            #$GeometricThing-Localized includes as specs (#$LocalizedFn
            #$Circle), (#$LocalizedFn #$Square), and in general all the
            &apos;localized realizations&apos; of the generic geometric collections.</rdfs:comment>
        <guid>c1350e38-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#GeometricThing"/>
        <rdfs:subClassOf rdf:resource="#Intangible"/>
        <rdfs:subClassOf rdf:resource="#GeometricThing-Intangible"/>
        <daml:disjointWith rdf:resource="#GeometricThing-Abstract"/>
    </daml:Class>
    <daml:Class rdf:ID="GeopoliticalEntity">
        <rdfs:label>political entities</rdfs:label>
        <rdfs:comment>A collection of #$LegalAgents which control
            #$GeographicalRegions.  Each element of #$GeopoliticalEntity
            includes the governing body of the institution as well as
            the institution itself.  In a  dualist  microtheory (e.g.
            #$WorldGeographyDualistMt) an instance of
            #$GeopoliticalEntity includes a politically defined
            geographical region taken together with its people,
            artificial habitats, etc., as well.  (#$TerritoryFn
            GEOPOLITICAL_ENTITY) is used to refer to the land mass of
            GEOPOLITICAL_ENTITY in #$WorldGeographyMt.  Important
            subsets include #$Country, #$IndependentCountry,
            #$State-Geopolitical, #$City, #$Province.  Examples:
            #$CityOfTokyoJapan, #$BronxNY-Borough, #$Alaska-State,
            #$Rwanda, #$Singapore, #$InnerMongolia,
            #$Somerset-CountyEngland, #$Taiwan-RepublicOfChina.
            Although the name #$GeopoliticalEntity may suggest
            otherwise, elements are not necessarily elements of #$Entity.</rdfs:comment>
        <guid>bd58e5da-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Organization"/>
        <rdfs:subClassOf rdf:resource="#LegalAgent"/>
    </daml:Class>
    <LivingLanguage rdf:ID="GermanLanguage">
        <rdfs:label>German</rdfs:label>
        <rdfs:comment>In its standard version, the dominant form of High German.</rdfs:comment>
        <guid>bd58d018-9c29-11b1-9dad-c379636f7270</guid>
    </LivingLanguage>
    <GeographicalRegion rdf:ID="Germany">
        <rdfs:label>Germany</rdfs:label>
        <rdfs:comment>Germany, a medium-sized #$IndependentCountry in
            the north of the #$ContinentOfEurope.  Germany throughout
            time, both political and physical aspects.</rdfs:comment>
        <guid>bd58f83c-9c29-11b1-9dad-c379636f7270</guid>
    </GeographicalRegion>
    <daml:Class rdf:ID="GerundiveNoun">
        <rdfs:label>gerundive noun</rdfs:label>
        <rdfs:comment>The collection of all gerunds, that is deverbal
            nouns formed (in English) with the suffix &apos;-ing&apos;.
            Gerundive nouns usually denote a type of action (with mass
            agreement) or an instance thereof (with count agreement).</rdfs:comment>
        <guid>bdde941c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#SpeechPart"/>
        <rdf:type rdf:resource="#LinguisticObjectType"/>
        <rdfs:subClassOf rdf:resource="#DeVerbalNoun"/>
    </daml:Class>
    <daml:Class rdf:ID="Gesture">
        <rdfs:label>gestures</rdfs:label>
        <rdfs:comment>A collection of configurations; a subset of
            #$VisualInformationSource.  Each element of #$Gesture is a
            configuration of animal body parts that has some meaning to
            an observer with an understanding of the interpretive
            convention.  A gesture may include some tool or prop.
            Gestures may be fleeting (e.g., a hello wave) or may last a
            long time (e.g., the gesture embodied in the
            #$StatueOfLiberty).  Note that, as defined in Cyc, a gesture
            is a meaningful configuration of body parts, NOT the actions
            producing the arrangement; for representation of the
            actions, see #$MakingAGesture.</rdfs:comment>
        <guid>bd590c05-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#VisualInformationSource"/>
        <rdfs:subClassOf rdf:resource="#Situation-Temporal"/>
    </daml:Class>
    <daml:Class rdf:ID="GiftGiving">
        <rdfs:label>gifts</rdfs:label>
        <rdfs:comment>A collection of events.  In an instance of
            #$GiftGiving, one #$Agent intentionally gives all use rights
            over an object (see #$UserRightsAttribute) to another
            #$Agent without taking payment in return.</rdfs:comment>
        <guid>bd58ee61-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#GivingSomething"/>
        <daml:disjointWith rdf:resource="#ExchangeOfUserRights"/>
    </daml:Class>
    <daml:Class rdf:ID="GivingSomething">
        <rdfs:label>giving events</rdfs:label>
        <rdfs:comment>A collection of events.  In an instance of
            #$GivingSomething, one #$Agent gives a tangible thing to
            another #$Agent.  Every #$GivingSomething event can also be
            thought of as a receiving event.   Note: The common case in
            which one #$Agent gives ownership of an object to another
            #$Agent is represented by the subset #$GiftGiving.</rdfs:comment>
        <guid>bd58c4c8-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#TransferringPossession"/>
        <rdfs:subClassOf rdf:resource="#AnimalActivity"/>
        <daml:disjointWith rdf:resource="#UnintendedLossOfUserRights"/>
    </daml:Class>
    <daml:Class rdf:ID="Glass">
        <rdfs:label>glass</rdfs:label>
        <rdfs:comment>A collection of tangible things.  Each element of
            #$Glass is a piece of glass; e.g., a wine bottle, a plate
            glass window, a microscope slide, a crystal water goblet,
            the mirrors of a reflecting telescope.</rdfs:comment>
        <guid>bd5886fb-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TangibleStuffCompositionType"/>
        <rdfs:subClassOf rdf:resource="#InorganicStuff"/>
    </daml:Class>
    <daml:Class rdf:ID="GoingToSleep">
        <rdfs:label>going to sleep</rdfs:label>
        <rdfs:comment>The collection of events in which an #$Animal goes
            from the state of being awake to being in a state of sleep.</rdfs:comment>
        <guid>bd58b14a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#SingleDoerAction"/>
        <rdfs:subClassOf rdf:resource="#IntrinsicStateChangeEvent"/>
        <rdfs:subClassOf rdf:resource="#AnimalActivity"/>
    </daml:Class>
    <daml:Class rdf:ID="GolfCart">
        <rdfs:label>golf carts</rdfs:label>
        <rdfs:comment>The collection of all motorized vehicles that are
            designed for golfers to use to drive around on #$GolfCourses
            while they are playing #$GolfGames.  GolfCarts drive very
            slowly compared with #$Automobiles.</rdfs:comment>
        <guid>c0fce4ee-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdf:type rdf:resource="#ProductType"/>
        <rdfs:subClassOf rdf:resource="#TransportationDevice-Vehicle"/>
    </daml:Class>
    <daml:Class rdf:ID="GovernmentCOC">
        <rdfs:label>governmental regulations</rdfs:label>
        <rdfs:comment>A collection of microtheories; a subset of
            #$FormalCOC (the set of formal codes of conduct).  Each
            instance of #$GovernmentCOC is a formal regulation of
            behavior imposed upon agents -- including citizens,
            tourists, businesses, government entities, etc., in so far
            as they are subject to it -- who are located within the
            legal jurisdiction where that code of conduct holds.
            #$GovernmentCOC includes both individual laws and whole
            legal codes.  Some examples of #$GovernmentCOC include: the
            Napoleonic Code, the United States Constitution and all
            Federal, State, and local laws of the United States, and the
            particular laws against stealing found in most, if not all,
            countries.  Enforcement of a particular instance of
            #$GovernmentCOC is authorized by the government associated
            with that code and carried out by its agents within their
            jurisdiction(s).  See also #$LegalCode and #$Law.</rdfs:comment>
        <guid>bd58a160-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MicrotheoryType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#FormalCOC"/>
    </daml:Class>
    <SharedNote rdf:ID="GovernmentLeaderNote">
        <rdfs:label>government leader note</rdfs:label>
        <rdfs:comment>The distinction between #$HeadOfGovernment and
            #$HeadOfState is a subtle one.  #$HeadOfGovernment is the
            set of #$Leaders who actually run the government.
            #$HeadOfState is the set of #$Leaders who are mainly
            ceremonial figures, fulfilling diplomatic roles such as
            hosting foreign dignitaries.  For a given #$Country, these
            two roles may be filled by the same person, such as
            #$BillClinton for the #$UnitedStatesOfAmerica in 1996, or by
            two separate individuals; for example, in 1996 the
            #$HeadOfState for #$GreatBritain-TheIsland would be
            #$QueenElizabethII, while the #$HeadOfGovernment would be
            John Major (#$PrimeMinister-HeadOfGovernment).  Cyc constant
            names indicate which government role is associated with a
            particular title; e.g., #$Sultan-HeadOfGovernment vs. #$Sultan-HeadOfState.</rdfs:comment>
        <guid>bd59a14c-9c29-11b1-9dad-c379636f7270</guid>
    </SharedNote>
    <daml:Class rdf:ID="GovernmentMilitaryOrganization">
        <rdfs:label>government military organizations</rdfs:label>
        <rdfs:comment>The collection of all #$MilitaryOrganizations
            which belong to, and are directed by, the governing body of
            a geographical region or international organization.  The
            government organization may be a national government, state
            or provincial government, or an international governing body
            such as the #$UnitedNationsOrganization.  The military
            forces may include armies, navies, air forces, military
            border patrols, coast guards, etc.  This collection excludes
            private armies and mercenary forces.</rdfs:comment>
        <guid>bd5f3555-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#MilitaryOrganization"/>
        <rdfs:subClassOf rdf:resource="#LegalGovernmentOrganization"/>
    </daml:Class>
    <daml:Class rdf:ID="GovernmentOfCountry">
        <rdfs:label>national governments</rdfs:label>
        <rdfs:comment>A collection of regional government organizations.
            An element of #$GovernmentOfCountry is the government of
            some element of #$Country; e.g.,
            #$UnitedStatesFederalGovernment.  See also the Cyc function
            #$GovernmentFn, which can be used to refer to the government
            of a political region.  The governments of smaller regions
            within a country may or may not be #$subOrganizations of
            that country&apos;s government; in `federal&apos; systems
            the smaller regions often have partly autonomous
            governments, as do the elements of #$State-UnitedStates.</rdfs:comment>
        <guid>c10aeef9-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#RegionalGovernment"/>
    </daml:Class>
    <PhysicalStructuralAttribute rdf:ID="Granular">
        <rdfs:label>granular</rdfs:label>
        <rdfs:comment>A physical attribute.  #$Granular is the
            #$PhysicalStructuralAttribute that describes a solid  that
            consists of granules and has a grainy texture; e.g., sand,
            sugar, salt.</rdfs:comment>
        <guid>bd58f710-9c29-11b1-9dad-c379636f7270</guid>
    </PhysicalStructuralAttribute>
    <daml:Class rdf:ID="GraspingImplement">
        <rdfs:label>grasping implements</rdfs:label>
        <rdfs:comment>A collection of tools.  An instance of
            #$GraspingImplement is a tool which is intended to be used
            to grasp (and often to subsequently immobilize or control
            the location/movement of) some other solid object.  Examples
            include each #$Vise, each pair of #$Forceps, each
            #$MonkeyWrench, each pair of #$Tweezers, etc.  But not a
            balloon, a syringe, a doorstop, a cage, etc.  A marginal
            positive example would be a magnetic tool designed to pick
            up something without actually touching it.</rdfs:comment>
        <guid>bd58c762-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#HandTool"/>
    </daml:Class>
    <daml:Class rdf:ID="GraspingSomethingWithATool">
        <rdfs:label>grasping something with a tool</rdfs:label>
        <rdfs:comment>A collection of the events in which a tool is used
            to grasp some object.</rdfs:comment>
        <guid>bd58de3e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalStuffType"/>
    </daml:Class>
    <daml:Class rdf:ID="Gratitude">
        <rdfs:label>thanksgivings</rdfs:label>
        <rdfs:comment>A feeling of appreciation towards another agent
            for a benefit or favor received from him/her.  This is a
            #$Collection --- for an explanation of that, see #$Happiness.</rdfs:comment>
        <guid>bd588970-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#FeelingAttributeType"/>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </daml:Class>
    <daml:Class rdf:ID="GreetingSomeone">
        <rdfs:label>salutes</rdfs:label>
        <rdfs:comment>The collection of actions performed by one #$Agent
            to greet another.  Includes verbal and physical greetings.</rdfs:comment>
        <guid>bd58cdbd-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#SociabilityBasedAction"/>
        <rdfs:subClassOf rdf:resource="#CommunicationAct-Single"/>
    </daml:Class>
    <PreparationAttribute rdf:ID="Grilled">
        <rdfs:label>grilled</rdfs:label>
        <rdfs:comment>The attribute #$Grilled is a specialized form of
            #$Cooked.  Food that is #$Grilled has been prepared in an
            event of #$GrillingFood, using a #$BBQGrill or an #$ElectricGrill.</rdfs:comment>
        <guid>bd58f553-9c29-11b1-9dad-c379636f7270</guid>
    </PreparationAttribute>
    <daml:Class rdf:ID="GrillingFood">
        <rdfs:label>barbecues</rdfs:label>
        <rdfs:comment>Cooking food on a #$BBQGrill or an #$ElectricGrill.</rdfs:comment>
        <guid>bd58baa8-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#CookingFood"/>
    </daml:Class>
    <daml:Class rdf:ID="GroundsOfOrganization">
        <rdfs:label>headquarters</rdfs:label>
        <rdfs:comment>A collection of smallish geographical regions.
            Each element of #$GroundsOfOrganization is an area which
            contains buildings inhabited by some organization.
            Examples: the campus of the #$UniversityOfTexasAtAustin or
            the grounds of #$SetonNorthwestHospital. Note that the
            `grounds&apos; of an organization, especially an
            organization with urban locations, might not include a yard.</rdfs:comment>
        <guid>bd58f5c9-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Place"/>
        <rdfs:subClassOf rdf:resource="#RealEstate"/>
        <rdfs:subClassOf rdf:resource="#OutdoorLocation"/>
    </daml:Class>
    <daml:Class rdf:ID="Group">
        <rdfs:label>groups</rdfs:label>
        <rdfs:comment>A collection of objects.  Each element of #$Group
            is a composite object, made up of individual members which
            may be either events or objects.  A group is related to its
            members by the predicate #$groupMembers (q.v.).  Note that
            elements of #$Group are NOT collections; consider: a group
            has temporal extent and may have spatial extent and
            location, while a collection is timeless and abstract.
            Nonetheless, it is possible to define a collection parallel
            to any group, so that the #$groupMembers of that group are
            also instances (#$isa&apos;s) of the correlated collection;
            e.g., each toe on my left foot is both an element of the
            collection of my left toes and a member of the group of toes
            on my left foot.  But that group (of my left toes) is a
            spatiotemporal thing, while the correlated collection (of my
            left toes) is NOT.  Another example: if I consider a certain
            flock of pigeons as having a location, a spatial extent, and
            a time of existence, then I am considering (the pigeon
            flock) a group and NOT a collection.  As a default, a group
            whose #$groupMembers are elements of #$SomethingExisting is
            itself an element of #$SomethingExisting; and a group whose
            #$groupMembers are elements of #$Event is itself an element
            of #$Event.  Finally, unlike a collection, a group cannot be
            empty; a group must have some #$groupMembers, or there is no
            group (at that point in time).  Examples of #$Group:
            #$QueensGuard, #$ThreeWiseMen, #$SantasReindeer, #$InternationalCommunity.</rdfs:comment>
        <guid>bd58e6a0-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#TemporalThing"/>
        <rdfs:subClassOf rdf:resource="#Situation-Temporal"/>
    </daml:Class>
    <CoreConstant rdf:ID="Guest">
        <rdfs:label>Guest</rdfs:label>
        <rdfs:comment>This constant is for use by guests (users who may
            not have full rights of access) who want to interact with Cyc.</rdfs:comment>
        <guid>bd5ad700-9c29-11b1-9dad-c379636f7270</guid>
    </CoreConstant>
    <daml:Class rdf:ID="GuidingAMovingObject">
        <rdfs:label>guide</rdfs:label>
        <rdfs:comment>A collection of events; a subset of both
            #$ControllingSomething and #$Movement-TranslationEvent.  An
            instance of #$GuidingAMovingObject is an event in which an
            agent guides or steers an object which is in motion.  For
            example, someone steering a car or a motorcycle, controlling
            a surfboard, or flying a kite.  If all you `guide&apos; is a
            rotation, then that is not quite a #$GuidingAMovingObject
            event.  Also, if no motion actually takes place, then it
            would be stretching things to call that a `guiding.&apos;
            So a marginal example is #$Running (you are guiding
            yourself) and two marginal non-examples are:  spinning in
            place, and running in place.</rdfs:comment>
        <guid>c100601b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#DirectedTranslation"/>
        <rdfs:subClassOf rdf:resource="#ControllingSomething"/>
    </daml:Class>
    <daml:Class rdf:ID="Guilt">
        <rdfs:label>guilt</rdfs:label>
        <rdfs:comment>Negative, self-accusatory feeling of
            responsibility and blameworthiness for having caused harm by
            a past action, usually with conscious intent.  Note that
            this is not `guilty vs. innocent&apos;, but rather the
            feeling of guiltiness.  An unremorseful killer, though
            guilty (as opposed to innocent) of the murder, may not feel
            any #$Guilt (i.e., guiltiness) about it.    This is a
            collection; for an explanation of a typical
            #$FeelingAttributeType, see #$Happiness.</rdfs:comment>
        <guid>bd58e14d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#FeelingAttributeType"/>
        <rdfs:subClassOf rdf:resource="#Shame"/>
    </daml:Class>
    <daml:Class rdf:ID="Gulf">
        <rdfs:label>gulfs</rdfs:label>
        <rdfs:comment>A collection of topographical features.  Each
            element of #$Gulf is a part of a sea extending into a land
            mass.  Many gulfs are the outlet for a large river system.
            Examples of #$Gulf include the #$SaronicGulf,
            #$GulfOfMexico, #$GulfOfArkangelsk, #$GulfOfCalifornia, and #$PersianGulf.</rdfs:comment>
        <guid>bd590006-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
    </daml:Class>
    <WeatherAttribute rdf:ID="Gusty">
        <rdfs:label>gusty</rdfs:label>
        <rdfs:comment>A #$WeatherAttribute indicating that the wind at
            an #$OutdoorLocation is subject to sudden changes in
            direction and intensity.</rdfs:comment>
        <guid>bd58aa29-9c29-11b1-9dad-c379636f7270</guid>
    </WeatherAttribute>
    <daml:Class rdf:ID="HLAssertion">
        <rdfs:label>h l assertion</rdfs:label>
        <rdfs:comment>The collection of assertions in the HL language,
            used internally by Cyc&apos;s inference engine.</rdfs:comment>
        <guid>c066205f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#HLIndexedTerm"/>
        <rdfs:subClassOf rdf:resource="#HLReifiedFormula"/>
        <rdfs:subClassOf rdf:resource="#CycLSentence"/>
        <rdfs:subClassOf rdf:resource="#CycLAssertion"/>
        <daml:disjointWith rdf:resource="#ELSentence"/>
        <daml:disjointWith rdf:resource="#ELAssertion"/>
    </daml:Class>
    <daml:Class rdf:ID="HLExpression">
        <rdfs:label>h l expression</rdfs:label>
        <rdfs:comment>The collection of all syntactically well-formed
            expressions in the HL language.  All of their
            subexpressions, if any, must also be in the HL language.</rdfs:comment>
        <guid>c1359f2c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CycLExpression"/>
    </daml:Class>
    <daml:Class rdf:ID="HLIndexedTerm">
        <rdfs:label>h l indexed term</rdfs:label>
        <rdfs:comment>The collection of indexed terms in the HL
            language, used by the internals of Cyc.  All these terms
            have special indexing support in Cyc&apos;s inference
            engine.  Indexed terms are currently (September 2000)
            constants, NARTs, and assertions.</rdfs:comment>
        <guid>bfff7db5-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CycLIndexedTerm"/>
        <rdfs:subClassOf rdf:resource="#HLExpression"/>
    </daml:Class>
    <daml:Class rdf:ID="HLNonAtomicReifiedTerm">
        <rdfs:label>NART</rdfs:label>
        <rdfs:comment>The collection of all non-atomic denotational
            terms in the HL language, used internally by the inference
            engine.  These are HL formulas with an instance of
            #$ReifiableFunction as their functor and optionally other HL
            terms as their arguments. These HL NATs are often called
            NARTs , which stands for Non-Atomic Reified Term. The
            difference between HL NATs and reifiable EL NATs should be
            transparent to users of Cyc, because the #$CycCanonicalizer
            automatically transforms all reifiable EL NATs into HL NATs.</rdfs:comment>
        <guid>c0dbf70e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#HLIndexedTerm"/>
        <rdfs:subClassOf rdf:resource="#HLReifiedDenotationalTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLReifiableNonAtomicTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLNonAtomicTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLNonAtomicReifiedTerm"/>
        <rdfs:subClassOf rdf:resource="#HLReifiedFormula"/>
        <daml:disjointWith rdf:resource="#CycLConstant"/>
        <daml:disjointWith rdf:resource="#ELNonAtomicTerm"/>
    </daml:Class>
    <daml:Class rdf:ID="HLReifiedDenotationalTerm">
        <rdfs:label>FORT</rdfs:label>
        <rdfs:comment>The collection of reified denotational terms in
            the HL language. These terms are used by the internals of
            Cyc, such as the inference engine. They are often called
            &apos;FORTs&apos;, which stands for &apos;first-order
            reified terms&apos;.</rdfs:comment>
        <guid>c0a890e7-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#CycLReifiableDenotationalTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLIndexedTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLReifiedDenotationalTerm"/>
        <rdfs:subClassOf rdf:resource="#HLIndexedTerm"/>
        <daml:disjointWith rdf:resource="#CycLAssertion"/>
    </daml:Class>
    <daml:Class rdf:ID="HLReifiedFormula">
        <rdfs:label>h l reified formula</rdfs:label>
        <rdfs:comment>The collection of reified formulas in the HL
            language. This includes HL NARTs and HL assertions.</rdfs:comment>
        <guid>c0f093d9-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#HLExpression"/>
        <rdfs:subClassOf rdf:resource="#HLIndexedTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLFormula"/>
        <daml:disjointWith rdf:resource="#ELFormula"/>
    </daml:Class>
    <daml:Class rdf:ID="HLVariable">
        <rdfs:label>h l variable</rdfs:label>
        <rdfs:comment>The collection of all variables in the HL
            language, used internally by the inference engine and not
            normally visible to users of Cyc.</rdfs:comment>
        <guid>bed98018-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CycLVariable"/>
        <rdfs:subClassOf rdf:resource="#HLExpression"/>
        <daml:disjointWith rdf:resource="#ELVariable"/>
    </daml:Class>
    <daml:Class rdf:ID="HOCObject">
        <rdfs:label>furnishings</rdfs:label>
        <rdfs:comment>A collection of artifacts.  #$HOCObject is a very
            general collection for all artifacts that are found in
            places where humans live or work, i.e., in some element of
            #$HumanOccupationConstruct (= HOC).  Since these objects are
            considered to be found indoors, they are all roughly
            `human-sized&apos;.  Elements include everything from
            furniture to tools, appliances to artwork, medical examining
            tables to church altars and pews.</rdfs:comment>
        <guid>bd590775-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Artifact"/>
    </daml:Class>
    <daml:Class rdf:ID="HailProcess">
        <rdfs:label>hail</rdfs:label>
        <rdfs:comment>The collection of instances of
            #$PrecipitationProcess in which solid particles or small
            chunks of water ice fall to the earth from clouds.</rdfs:comment>
        <guid>bd589b65-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#PrecipitationProcess"/>
    </daml:Class>
    <daml:Class rdf:ID="HailStone">
        <rdfs:label>hailstones</rdfs:label>
        <rdfs:comment>The collection of solid particles or small chunks
            of ice emitted from clouds in instances of #$HailProcess.</rdfs:comment>
        <guid>bd58f574-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#PrecipitationParticle"/>
    </daml:Class>
    <daml:Class rdf:ID="Hand">
        <rdfs:label>hands</rdfs:label>
        <rdfs:comment>The collection of all terminal parts of a
            #$Vertebrate forelimb which are structurally suited to
            function as a grasping organ (as in people, newts, etc.).
            E.g., FerdinandTheBull has his forelimbs end in hooves,
            which are not capable of grasping things, so those are NOT
            considered #$Hands.</rdfs:comment>
        <guid>bd588655-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#AnimalBodyPartType"/>
        <rdf:type rdf:resource="#SymmetricAnatomicalPartType"/>
        <rdfs:subClassOf rdf:resource="#BiologicalLivingObject"/>
        <rdfs:subClassOf rdf:resource="#Appendage-AnimalBodyPart"/>
    </daml:Class>
    <daml:Class rdf:ID="HandTool">
        <rdfs:label>manual tools</rdfs:label>
        <rdfs:comment>The collection #$HandTool is a subset of #$Tool.
            Each element of #$HandTool fills all the requirements for a
            generic tool, plus the requirement that a hand tool is a
            portable object which is hand-guided throughout its
            operation.  Examples include the elements of #$Screwdriver,
            #$ManualDrill, and #$BlowDryer.  See also #$Tool, #$PortableObject.</rdfs:comment>
        <guid>bd58a0fa-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Tool"/>
        <rdfs:subClassOf rdf:resource="#Device-SingleUser"/>
        <rdfs:subClassOf rdf:resource="#PortableObject"/>
    </daml:Class>
    <daml:Class rdf:ID="HandlingADevice">
        <rdfs:label>use of a device</rdfs:label>
        <rdfs:comment>A collection of #$Events; a subset of
            #$HandlingAnObject.  An instance of #$HandlingADevice is an
            event in which a device is manipulated (with the operator
            holding and touching the device) in order to use it for its
            #$primaryFunction.  Instances include elements of the
            subsets #$Pruning, #$PlayingAMusicalInstrument,
            #$OperatingAHouseholdAppliance, #$PumpingGasEvent,
            #$WritingByHand, and many more.  Just carrying pruning
            shears around is not a #$HandlingADevice event.</rdfs:comment>
        <guid>bd588c5e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#HandlingAnObject"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
    </daml:Class>
    <daml:Class rdf:ID="HandlingAnObject">
        <rdfs:label>handle</rdfs:label>
        <rdfs:comment>A collection of events; a subset of both
            #$ControllingSomething and #$PhysicalContactEvent.  An
            instance of #$HandlingAnObject is an event in which an
            object is touched and manipulated by some #$Agent.  Examples
            of #$HandlingAnObject include instances of
            #$HoldingAnObject and of
            #$CausingAnotherObjectsTranslationalMotion.  So just holding
            a rock in your hand is a #$HandlingAnObject; so is washing
            your cereal bowl (an instance of #$WashingDishes), cutting a
            loose thread on your shirt (an instance of
            #$CuttingAThread), and carrying the rock from one place to
            another (an instance of #$CarryingWhileLocomoting.)  One
            very important class of #$HandlingAnObject instances involve
            operating some hand-held device --- i.e., events which are
            instances of the collection #$HandlingADevice.   I.e., the
            performer handles an object which happens to be a device,
            but not just lugging it around but actually employing it for
            its intended #$primaryFunction --- not merely to look at it
            or rearrange or relocate it.  For example, if you move a
            fork from the dishwasher to the silverware drawer,
            that&apos;s just #$HandlingAnObject; if you use that fork to
            eat some food, though, that is an instance of #$HandlingADevice.</rdfs:comment>
        <guid>bd588ca1-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#ControllingSomething"/>
        <rdfs:subClassOf rdf:resource="#ActionOnObject"/>
    </daml:Class>
    <daml:Class rdf:ID="Happiness">
        <rdfs:label>happily</rdfs:label>
        <rdfs:comment>The enjoyment of pleasurable satisfaction that
            goes with well-being, security, effective accomplishments,
            or satisfied wishes.  As with all #$FeelingAttributeTypes,
            this is a #$Collection -- the set of all possible amounts of
            happiness one can feel.  One instance of #$Happiness is
            `extremely happy&apos;; another is `just a little bit
            happy&apos;.    Note:  Obviously there are no real units of
            measure for this quantity, ways of objectively measuring the
            amount of happiness possessed or gained or lost, etc., but
            still this has proven to be a useful way for Cyc to
            represent and reason with emotions.  E.g., one can have a
            rule that says that most people have a greater `amount&apos;
            of happiness at their wedding than at their high school
            graduation, etc.  There are functions, such as
            #$LowAmountFn, which take a #$PrimitiveAttributeType (such
            as the instances of #$FeelingAttributeType) such as
            #$Happiness and return as their value a certain-sized amount
            of that feeling; e.g., (#$LowAmountFn #$Happiness) is an
            expression whose value is a positive but small amount of
            happiness, and that in turn will be an element of
            #$Happiness (and also will be an element of
            #$FeelingAttribute and an element of #$AttributeValue, etc.)
            #$FeelingAttributeTypes organize into a lattice; e.g., there
            are several more specialized forms of #$Happiness that are
            present in Cyc&apos;s ontology, such as #$Elation,
            #$Delight, #$Triumph-TheFeeling, etc.</rdfs:comment>
        <guid>bd58b500-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#FeelingAttributeType"/>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </daml:Class>
    <daml:Class rdf:ID="Harbor">
        <rdfs:label>harbours</rdfs:label>
        <rdfs:comment>The collection of those parts of a #$BodyOfWater,
            each of which is protected from the open sea and deep enough
            to furnish fairly safe anchorage.</rdfs:comment>
        <guid>bd58cdcf-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#BodyOfWater"/>
    </daml:Class>
    <daml:Class rdf:ID="HardcopyInformationBearingObject">
        <rdfs:label>hard copies</rdfs:label>
        <rdfs:comment>A collection of information  bearing objects
            (IBOs). Each element of  #$HardcopyInformationBearingObject
            is an IBO in a `hard&apos; format, e.g.,  written on paper,
            on wood, on palm leaves, engraved in metal, carved  on
            stone. Humans can read hardcopy IBOs without using a
            computer or electronic device to access them. Thus,
            #$HardcopyInformationBearingObject does NOT include the
            tangible IBOs  which are embodied in magnetic media (e.g.,
            data or music on tapes or  disks). Examples of
            #$HardcopyInformationBearingObject: a billboard, a  greeting
            card, a restaurant check, a magazine, an engraving by
            Rembrandt, a ten dollar bill, a price tag, or a hardcopy of
            a #$Map with  no text on it.</rdfs:comment>
        <guid>bd58e00e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Artifact"/>
    </daml:Class>
    <daml:Class rdf:ID="Hardness">
        <rdfs:label>hardnesses</rdfs:label>
        <rdfs:comment>A collection of attributes; a subset of
            #$PhysicalAttribute.  Each element of #$Hardness is an
            attribute describing how much pressure a tangible material
            can withstand before deforming or fragmenting.  Hardnesses
            may be characterized using a #$GenericValueFunction (q.v.),
            or relative to certain substances, e.g., #$HardAsARock.
            Hardnesses of objects are reported using the predicate #$hardnessOfObject.</rdfs:comment>
        <guid>bd58b1c2-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MaterialStrengthType"/>
        <rdf:type rdf:resource="#MeasurableAttributeType"/>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </daml:Class>
    <daml:Class rdf:ID="HardwareTool">
        <rdfs:label>tools</rdfs:label>
        <rdfs:comment>A collection of tools.  An instance of
            #$HardwareTool is an object used to perform a task, usually
            by applying a particular kind of force on another object.
            The tool is used to produce a physical effect in the
            position, structure, or arrangement of the other object.
            Subsets of #$HardwareTool include #$Hammer, #$Screwdriver,
            #$HandSaw.  An electric drill is also a #$HardwareTool.
            Borderline nonexamples include eating utensils, robot
            servants, screws, nails, and levers.</rdfs:comment>
        <guid>bd58c122-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdf:type rdf:resource="#ProductType"/>
        <rdfs:subClassOf rdf:resource="#Tool"/>
        <rdfs:subClassOf rdf:resource="#SolidTangibleProduct"/>
        <rdfs:subClassOf rdf:resource="#PhysicalDevice"/>
    </daml:Class>
    <daml:Class rdf:ID="HarvestingAPlant">
        <rdfs:label>pick</rdfs:label>
        <rdfs:comment>A collection of events.  Each instance of
            #$HarvestingAPlant is an event in which a plant is
            harvested.  Harvesting may involve separating some part of
            the plant and leaving the rest in place (e.g., fruit trees),
            or it may involve removing the entire plant from its growing
            location (e.g., carrots).</rdfs:comment>
        <guid>bd58c0aa-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#TransportationEvent"/>
        <rdfs:subClassOf rdf:resource="#DirectedTranslation"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#RemovingSomethingByMovingIt"/>
    </daml:Class>
    <daml:Class rdf:ID="Hat">
        <rdfs:label>hats</rdfs:label>
        <rdfs:comment>A collection of objects.  Each element of #$Hat is
            either a hat or other headgear or hatlike object.  Subsets
            include #$Helmet, #$SwimmingCap, and #$Sombrero.</rdfs:comment>
        <guid>bd58a525-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdf:type rdf:resource="#ProductType"/>
        <rdfs:subClassOf rdf:resource="#ClothingAccessory"/>
    </daml:Class>
    <daml:Class rdf:ID="Hate">
        <rdfs:label>hatred</rdfs:label>
        <rdfs:comment>An intense feeling of hostility and aversion,
            usually deriving from fear, anger, or a sense of injury, and
            usually coupled with enmity and malice.  This is a
            #$Collection --- for an explanation of that, see #$Happiness.</rdfs:comment>
        <guid>bd58d9e0-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#FeelingAttributeType"/>
        <rdfs:subClassOf rdf:resource="#Hostility"/>
        <rdfs:subClassOf rdf:resource="#Contempt"/>
    </daml:Class>
    <daml:Class rdf:ID="HavingAMeal">
        <rdfs:label>mealtimes</rdfs:label>
        <rdfs:comment>A collection of events.  Each element of
            #$HavingAMeal is an event in which one or more diners
            consume a meal.  In addition to #$HavingBreakfast,
            #$HavingLunch, and #$HavingDinner, this includes
            #$HavingASnack (among other subsets).  Typically, instances
            of #$HavingAMeal include people eating some food and
            drinking one or more beverages.</rdfs:comment>
        <guid>bd58cc30-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#EatingEvent"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
    </daml:Class>
    <daml:Class rdf:ID="Head-AnimalBodyPart">
        <rdfs:label>heads</rdfs:label>
        <rdfs:comment>The collection of all heads of #$Animals. [Note:
            the hyphenated name reflects the need to have other terms in
            the knowledge base like #$Head-Vertebrate, representing a
            subset of this set, about which some useful specialized
            information is stated.]</rdfs:comment>
        <guid>bd58ba60-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#UniqueAnatomicalPartType"/>
        <rdf:type rdf:resource="#AnimalBodyPartType"/>
        <rdfs:subClassOf rdf:resource="#AnimalBodyPart"/>
        <rdfs:subClassOf rdf:resource="#BiologicalLivingObject"/>
    </daml:Class>
    <daml:Class rdf:ID="Head-Vertebrate">
        <rdfs:label>vertebrate heads</rdfs:label>
        <rdfs:comment>The collection of all heads of #$Vertebrates
            (animals with backbones).  Vertebrate heads all have faces
            (see #$FaceOfAnimal) and connect to the animal&apos;s torso
            via a neck; these things are not generally true for most non-vertebrates.</rdfs:comment>
        <guid>bd5883bf-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#UniqueAnatomicalPartType"/>
        <rdf:type rdf:resource="#AnimalBodyPartType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#BiologicalLivingObject"/>
        <rdfs:subClassOf rdf:resource="#Head-AnimalBodyPart"/>
    </daml:Class>
    <daml:Class rdf:ID="HeadOfGovernment">
        <rdfs:label>heads of government</rdfs:label>
        <rdfs:comment>A collection of persons.  Each element of
            #$HeadOfGovernment is a person who holds a political
            position as the titular head of the government in some
            element of #$Country.  Titles that such a person might hold
            include Prime Minister, President, Premier, King or Queen,
            Minister of State, Sultan, Chacellor, Chairman.  Examples:
            John Major, Benjamin Netanyahu, Bill Clinton.  See also
            #$titleOfPosition.  Cf. #$HeadOfState.</rdfs:comment>
        <guid>bd590143-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdf:type rdf:resource="#OccupationType"/>
        <rdfs:subClassOf rdf:resource="#Leader"/>
        <rdfs:subClassOf rdf:resource="#Politician"/>
    </daml:Class>
    <daml:Class rdf:ID="HeadOfState">
        <rdfs:label>heads of state</rdfs:label>
        <rdfs:comment>A collection of persons.  Each element of
            #$HeadOfState is a person who holds a political position as
            the titular leader of some element of #$Country.  Titles
            that such a person might hold include President, Premier,
            Chairman, Sultan, King or Queen, Regent.  Examples of
            #$HeadOfState: #$BillClinton, #$QueenElizabethII, Yasser
            Arafat, Hirohito, Jiang Zemin.  See also #$titleOfPosition.
            Cf. #$HeadOfGovernment.</rdfs:comment>
        <guid>bd58e773-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#OccupationType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Leader"/>
        <rdfs:subClassOf rdf:resource="#Politician"/>
    </daml:Class>
    <daml:Class rdf:ID="HealthProfessional">
        <rdfs:label>health professionals</rdfs:label>
        <rdfs:comment>The collection of all health-related professionals
            - including medical professionals as well as professionals
            not in the medical field.  For example, health inspectors.</rdfs:comment>
        <guid>bd58a4d2-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#OccupationType"/>
        <rdfs:subClassOf rdf:resource="#Professional"/>
        <rdfs:subClassOf rdf:resource="#HumanAdult"/>
    </daml:Class>
    <daml:Class rdf:ID="Hearing">
        <rdfs:label>hearing</rdfs:label>
        <rdfs:comment>The collection of sensory #$Perceivings in which,
            by means of vibratory sensors, a #$PerceptualAgent #$hears
            something that is causing (or consisting of) sound waves,
            and thereby acquires information about it.  See also:
            #$ListeningDeliberately, the subset of #$Hearing events in
            which the aural stimulus is intentionally attended to.</rdfs:comment>
        <guid>bd58dc32-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#Perceiving"/>
        <daml:disjointWith rdf:resource="#Reading"/>
    </daml:Class>
    <daml:Class rdf:ID="Heart">
        <rdfs:label>hearts</rdfs:label>
        <rdfs:comment>The collection of all hearts.  A #$Heart is an
            #$Organ that pumps blood throughout the body of an #$Animal.</rdfs:comment>
        <guid>bd58ef0e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#UniqueAnatomicalPartType"/>
        <rdf:type rdf:resource="#AnimalBodyPartType"/>
        <rdfs:subClassOf rdf:resource="#BiologicalLivingObject"/>
    </daml:Class>
    <daml:Class rdf:ID="HeatingDevice">
        <rdfs:label>heating device</rdfs:label>
        <rdfs:comment>A collection of physical devices.  The set of
            #$PhysicalDevices whose #$primaryFunction is to generate
            heat to raise the temperature of something else.  The stuff
            being heated might be gaseous (air in a room or a hair
            dryer), liquid (water in a pool or hot water tank), or solid
            (food in an oven, hair with a curling iron, plastic during
            its shaping, etc.)  An instance of #$HeatingDevice typically
            has some energy input, some way of converting that energy to
            heat, and some way of delivering the heat to the object(s)
            to be heated.  A borderline positive example of this is a
            device which absorbs heat during warm periods such as
            daytimes, and radiates it back out again during cool periods
            such as nighttimes.  Note that heating must be a primary
            function of the device; no matter how little you think of
            your personal computer, it is not a #$HeatingDevice.</rdfs:comment>
        <guid>bd58befe-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#PhysicalDevice"/>
    </daml:Class>
    <daml:Class rdf:ID="HeatingProcess">
        <rdfs:label>heating processes</rdfs:label>
        <rdfs:comment>#$HeatingProcess is a specialization of
            #$TemperatureChangingProcess -- that is, (#$genls
            #$HeatingProcess #$TemperatureChangingProcess).  During each
            #$HeatingProcess event, the temperature of the
            #$objectOfStateChange is increased by applying heat to the object.</rdfs:comment>
        <guid>bd58d2c2-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#TemperatureChangingProcess"/>
    </daml:Class>
    <daml:Class rdf:ID="HeavenlyBody">
        <rdfs:label>heavenly bodies</rdfs:label>
        <rdfs:comment>A collection of tangible objects.  Each element of
            #$HeavenlyBody is an astronomical object located in outer
            space (including the Earth).  Elements of #$HeavenlyBody are
            natural bodies, NOT artificially made objects such as
            spaceships or communications satellites.  Examples: the
            #$Sun, #$Polaris-TheStar, #$PlanetPluto, #$MoonOfEarth. See
            also: #$AstronomicalObject.</rdfs:comment>
        <guid>bd58a4b7-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#AstronomicalObject"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
    </daml:Class>
    <daml:Class rdf:ID="Helicopter">
        <rdfs:label>helicopters</rdfs:label>
        <rdfs:comment>The collection of rotary wing, self-powered
            mechanical devices that fly.</rdfs:comment>
        <guid>bd58ae10-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdf:type rdf:resource="#ProductType"/>
        <rdfs:subClassOf rdf:resource="#TransportationDevice-Vehicle"/>
    </daml:Class>
    <ThreeDimensionalShapeAttribute rdf:ID="HelixShaped">
        <rdfs:label>helix shaped</rdfs:label>
        <rdfs:comment>#$HelixShaped is the instance of #$ShapeAttribute
            shared by all typically shaped helixes (or helix-shaped objects).</rdfs:comment>
        <guid>c03f4a4d-9c29-11b1-9dad-c379636f7270</guid>
    </ThreeDimensionalShapeAttribute>
    <ThreeDimensionalShapeAttribute rdf:ID="HemisphereShaped">
        <rdfs:label>hemisphere shaped</rdfs:label>
        <rdfs:comment>#$HemisphereShaped is the instance of
            #$ShapeAttribute of three dimensional objects that can be
            described as half-spheres.</rdfs:comment>
        <guid>bfd40ec2-9c29-11b1-9dad-c379636f7270</guid>
    </ThreeDimensionalShapeAttribute>
    <SharedNote rdf:ID="HemispheresAndCalendars">
        <rdfs:label>hemispheres and calendars</rdfs:label>
        <rdfs:comment>#$CalendarSeasons are defined by the Gregorian
            calendar and are synchronized with the equinoxes and
            solstices.  #$SeasonOfYear instances are climatic seasons,
            events characterized by the weather in a given region.  The
            relationship between #$SeasonOfYear instances and
            #$CalendarSeasons depends upon the hemisphere (or, more
            precisely, upon the lattitude.)  In the northern hemisphere,
            north of the tropics, a #$CalendarSummer will significantly
            intersect with the a #$SummerSeason each year.   But in the
            southern hemisphere, that same #$CalendarSummer (which is
            the same in both hemispheres) will intersect with what is
            locally, weatherwise, a #$WinterSeason.</rdfs:comment>
        <guid>bd62ee33-9c29-11b1-9dad-c379636f7270</guid>
    </SharedNote>
    <daml:Class rdf:ID="Herbivore">
        <rdfs:label>herbivores</rdfs:label>
        <rdfs:comment>The collection of animals that do not eat other
            animals, or parts of animals, but instead eat plants or
            plant parts.  #$Ruminant and its subsets #$Deer and #$Sheep
            are subsets of #$Herbivore.</rdfs:comment>
        <guid>bd5902f1-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#OrganismClassificationType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Animal"/>
    </daml:Class>
    <daml:Class rdf:ID="HerdAnimal">
        <rdfs:label>herd animals</rdfs:label>
        <rdfs:comment>A subset of #$Animal; the collection of all large
            plant-eating animals that travel and graze in social
            groups.  Elements of #$HerdAnimal also belong to
            #$Herbivore; they include most instances of #$Ruminant and
            may also include  Triceretops.</rdfs:comment>
        <guid>bd5f5651-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#NonPersonAnimal"/>
    </daml:Class>
    <TwoDimensionalShapeAttribute rdf:ID="HexagonShaped">
        <rdfs:label>hexagon shaped</rdfs:label>
        <rdfs:comment>This is the shape attribute shared by all six
            sided two dimensional figures.</rdfs:comment>
        <guid>bf07555a-9c29-11b1-9dad-c379636f7270</guid>
    </TwoDimensionalShapeAttribute>
    <daml:Class rdf:ID="Highway">
        <rdfs:label>highways</rdfs:label>
        <rdfs:comment>The subcollection of #$Roadway that contains all
            highways, inside or outside cities.</rdfs:comment>
        <guid>bd58d561-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Path-Simple"/>
    </daml:Class>
    <NaturalLanguage rdf:ID="HindiLanguage">
        <rdfs:label>Hindi</rdfs:label>
        <rdfs:comment>Language spoken in the Indic area.</rdfs:comment>
        <guid>bd58cbdb-9c29-11b1-9dad-c379636f7270</guid>
    </NaturalLanguage>
    <daml:Class rdf:ID="Holdings">
        <rdfs:label>collections</rdfs:label>
        <rdfs:comment>A collection of sets of objects, tangible or
            intangible, which have some special financial, scientific,
            cultural, or educational value.  An instance of #$Holdings
            is a set of objects kept and usually maintained by some
            agent for their value, or to preserve the objects, or to
            make them available for public display or use (as in a
            museum&apos;s `holdings&apos; or a library&apos;s
            `holdings&apos;).  The elements in a group of holdings may
            or may not be all of a similar type (e.g., books,
            paintings).  An agent&apos;s holdings may or may not all be
            kept in the same location.</rdfs:comment>
        <guid>bd58dc8f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Group"/>
    </daml:Class>
    <daml:Class rdf:ID="Holiday">
        <rdfs:label>holidays</rdfs:label>
        <rdfs:comment>Each #$Holiday is an #$Event wherein social
            celebrations and/or rituals are performed, typically lasting
            for one #$DaysDuration and typically coinciding with a
            #$CalendarDay.  While #$Holidays are often #$AnnualEvents,
            they may also be one-time events or scheduled in some other
            manner.  They are also contextual, as different
            nationalities, eras, etc. celebrate different ones.</rdfs:comment>
        <guid>bd58a9b5-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
    </daml:Class>
    <daml:Class rdf:ID="HolidaySeason">
        <rdfs:label>holiday seasons</rdfs:label>
        <rdfs:comment>Instances of #$HolidaySeason are events which
            encompass the activities around a #$Holiday (or group of
            #$Holidays).  The clearest example is #$ChristmasSeason.
            While the exact boundaries of a #$HolidaySeason may be
            vague, it is nonethless a useful concept; in fact, much of
            the usefulness comes from that very fuzziness: it is hard to
            define exactly, but there are many things worth saying about it.</rdfs:comment>
        <guid>c1006f0c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#Event"/>
    </daml:Class>
    <daml:Class rdf:ID="Hope">
        <rdfs:label>hopeful</rdfs:label>
        <rdfs:comment>Expectation of fulfillment or success.  This is a
            collection; for an explanation of a typical
            #$FeelingAttributeType, see #$Happiness.</rdfs:comment>
        <guid>bd5889b2-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#FeelingAttributeType"/>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </daml:Class>
    <daml:Class rdf:ID="Horizon">
        <rdfs:label>horizons</rdfs:label>
        <rdfs:comment>The collection of all horizons, each being the
            far-off region within a few degrees of the horizontal plane,
            where the sky appears to join the distant landscape.   The
            horizon is always relative to a particular point of observation.</rdfs:comment>
        <guid>be00ef13-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Place"/>
    </daml:Class>
    <VectorInterval rdf:ID="HorizontalDirection">
        <rdfs:label>horizontal direction</rdfs:label>
        <rdfs:comment>The element of #$VectorInterval that comprises all
            the vectors which are perpendicular to #$Up-Directly and #$Down-Directly.</rdfs:comment>
        <guid>bd58ba3a-9c29-11b1-9dad-c379636f7270</guid>
    </VectorInterval>
    <OrientationAttribute rdf:ID="HorizontalOrientation">
        <rdfs:label>horizontal</rdfs:label>
        <rdfs:comment>(#$orientation OBJECT #$HorizontalOrientation)
            means that OBJECT is horizontal with respect to the current
            instance of #$FrameOfReference.  A linear (#$LongAndThin)
            object is horizontal if and only if its longest axis lies in
            the horizontal plane.  A planar (#$SheetShaped) object is
            horizontal if and only if its two longest axes lie in the
            horizontal plane.  Typically, horizontal objects include
            dinner plates, mousepads, ice skating rinks, parking lots,
            and stratus clouds.</rdfs:comment>
        <guid>c0fbacf8-9c29-11b1-9dad-c379636f7270</guid>
    </OrientationAttribute>
    <daml:Class rdf:ID="Hospital">
        <rdfs:label>hospitals</rdfs:label>
        <rdfs:comment>Local (at one site) organizations composed of
            physicians, support personnel, and usually also
            administrators.  The main function of the organization is to
            provide medical care (short or long term) to a number of
            patients/clients, for a fee if the patient/client is able to
            pay.  A clinic services out-patients, while a hospital has
            in-patients.  A hospital may have a clinic as a
            sub-organization, though.</rdfs:comment>
        <guid>bd5891c1-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#MedicalCareInstitution"/>
        <rdfs:subClassOf rdf:resource="#SingleSiteLocalOrganizationWithClients"/>
    </daml:Class>
    <daml:Class rdf:ID="HospitalCareEvent">
        <rdfs:label>hospital stays</rdfs:label>
        <rdfs:comment>What happens when you are in the hospital being
            treated for a disease like Cancer or Hepatitis or AIDS, or
            recovering from Surgery.  This is not just a
            #$MedicalCareEvent which happens in a hospital; it&apos;s
            the whole event meant by a hospital stay.  Also see
            #$HospitalRoomStay which only represents the stay in the room.</rdfs:comment>
        <guid>bd58d724-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#MedicalCareEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="HostileSocialAction">
        <rdfs:label>hostile actions</rdfs:label>
        <rdfs:comment>The collection of all hostile or pugnacious
            events, adverse to someone, in which multiple agents take
            part, at least one of whom is acting deliberately.  See also
            #$PurposefulAction.  An element of this collection is #$AssassinationOfPresidentLincoln.</rdfs:comment>
        <guid>bd5883e1-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#Action"/>
        <rdfs:subClassOf rdf:resource="#SocialOccurrence"/>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
    </daml:Class>
    <daml:Class rdf:ID="Hostility">
        <rdfs:label>hostile</rdfs:label>
        <rdfs:comment>A feeling of strong antagonism towards another
            agent, organization, or group, sufficient to motivate
            harmful speech or actions against them.  This is a
            #$Collection --- for an explanation of that, see
            #$Happiness.  Some more specialized #$FeelingAttributeTypes
            than #$Hostility include feelings of #$Hate.</rdfs:comment>
        <guid>c0f484eb-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#FeelingAttributeType"/>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </daml:Class>
    <daml:Class rdf:ID="HotAirBalloon">
        <rdfs:label>hot-air balloons</rdfs:label>
        <rdfs:comment>The collection of all hot-air buoyant balloons,
            #$AirTransportationDevices that usually lack a motor or a
            means of steering.  Each consistes of a gas-bag into which
            hot air is introduced, and from which a basket or passenger
            compartment hangs.</rdfs:comment>
        <guid>bd58b336-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="HourOfDayType">
        <rdfs:label>hour of day type</rdfs:label>
        <rdfs:comment>A collection of collections. Instances of
            #$HourOfDayType are 24 canonical   subsets of
            #$CalendarHour, such as #$TimeOfDay-8AM.   This is a proper
            subset of #$TimeOfDayType,  which could include larger or
            smaller times of the day,   such as `before noon&apos;
            (which in Cyc is named #$TimeOfDay-AM).</rdfs:comment>
        <guid>be011b66-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdf:type rdf:resource="#CyclicalIntervalGroupType"/>
        <rdfs:subClassOf rdf:resource="#TimeOfDayType"/>
        <rdfs:subClassOf rdf:resource="#TemporallyDisjointIntervalType"/>
    </daml:Class>
    <WorkStatus rdf:ID="HourlyWork">
        <rdfs:label>hourly work</rdfs:label>
        <rdfs:comment>An attribute; an element of #$WorkStatus.  The
            attribute of being paid an hourly rate for work done.</rdfs:comment>
        <guid>bd58b91a-9c29-11b1-9dad-c379636f7270</guid>
    </WorkStatus>
    <daml:Class rdf:ID="HouseholdAppliance">
        <rdfs:label>appliances</rdfs:label>
        <rdfs:comment>A collection of devices, a subset of
            #$MechanicalDevice. It includes those mechanical devices
            typically found inside a #$HumanResidence.  An instance of
            #$HouseholdAppliance is a device used in one of the tasks
            typically carried on in a home, such as food preparation,
            food storage, laundry, household cleaning, personal
            cleaning, cooling or heating the house for comfort, etc.
            Examples include elements of the collections #$Oven,
            #$Refrigerator, #$ClothesDryer,  #$VacuumCleaner,
            #$HotWaterHeater, #$Furnace.  Note that a bed, which naively
            is thought of as having no moving parts, is not a mechanical
            device, and hence not a #$HouseholdAppliance --- the same is
            true for most chairs, tables, sofas, and other articles of furniture.</rdfs:comment>
        <guid>bd588993-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdf:type rdf:resource="#ProductType"/>
        <rdfs:subClassOf rdf:resource="#PoweredDevice"/>
        <rdfs:subClassOf rdf:resource="#HOCObject"/>
        <rdfs:subClassOf rdf:resource="#MechanicalDevice"/>
    </daml:Class>
    <daml:Class rdf:ID="HumanActivity">
        <rdfs:label>human activities</rdfs:label>
        <rdfs:comment>A collection of events.  Each element of
            #$HumanActivity is an activity that is performed by some
            instance(s) of #$Person.</rdfs:comment>
        <guid>bd588deb-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#AnimalActivity"/>
    </daml:Class>
    <daml:Class rdf:ID="HumanAdult">
        <rdfs:label>human adults</rdfs:label>
        <rdfs:comment>The collection of human beings old enough to
            participate as independent, mature members of society.
            Since different societies have different age or maturity
            requirements for people to be considered adults, different
            axioms in various society-specific microtheories express
            these requirements.  For most modern, Western,
            middle-class,... purposes, e.g., the current view is that
            anyone over 18 is an adult.  In many cultures, adulthood
            occurs when one reaches puberty.  Adulthood is
            #$contiguousAfter childhood; that is, a #$Person is a
            #$HumanChild for a while, and then is a #$HumanAdult.</rdfs:comment>
        <guid>bd58b2f9-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdf:type rdf:resource="#LifeStageType"/>
        <rdfs:subClassOf rdf:resource="#Person"/>
        <rdfs:subClassOf rdf:resource="#AdultAnimal"/>
    </daml:Class>
    <daml:Class rdf:ID="HumanChild">
        <rdfs:label>children</rdfs:label>
        <rdfs:comment>The collection of all #$Persons in the childhood
            stage of life.  Functionally, this ends when the child
            begins to take responsibility for themselves, work, have
            children of their own,... or, at latest, when the
            person&apos;s age greatly exceeds that at which most people
            reach those milestones.  Generally, this means that it spans
            the period from birth to teenage years.   This is highly
            dependent on context, of course; childhood in
            Shakespeare&apos;s culture ended around age 12.</rdfs:comment>
        <guid>bd58cf30-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdf:type rdf:resource="#LifeStageType"/>
    </daml:Class>
    <daml:Class rdf:ID="HumanCyclist">
        <rdfs:label>human cyclists</rdfs:label>
        <rdfs:comment>Cyclists who are also human (not androids)</rdfs:comment>
        <guid>bd5897dd-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdf:type rdf:resource="#PersonByActivityType"/>
        <rdfs:subClassOf rdf:resource="#Cyclist"/>
    </daml:Class>
    <daml:Class rdf:ID="HumanFamilyNameString">
        <rdfs:label>human family name string</rdfs:label>
        <rdfs:comment>The collection of family name strings such as
            ``Lenat&apos;&apos;, ``Jones&apos;&apos;, etc., which are
            given as last names (in most Western countries), usually at
            birth.  Note: elements of this collection are really just
            character strings, not concepts like TheNameSmith that
            represent character strings.</rdfs:comment>
        <guid>bd58ead2-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#IDStringType"/>
        <rdfs:subClassOf rdf:resource="#HumanNameString"/>
    </daml:Class>
    <daml:Class rdf:ID="HumanGivenNameString">
        <rdfs:label>baby names</rdfs:label>
        <rdfs:comment>The collection of non-family name strings such
            ``Betty&apos;&apos; and ``Phillip&apos;&apos; which are
            given as first or middle names (in most Western countries),
            usually shortly after birth.   This also includes nicknames
            like ``Red&apos;&apos; or ``The Refrigerator&apos;&apos;.
            Note: elements of this collection are really just character
            strings, not reified concepts like
            &apos;&apos;TheNameBetty&apos;&apos; that might be used to
            represent character strings.</rdfs:comment>
        <guid>bd58e810-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#IDStringType"/>
        <rdfs:subClassOf rdf:resource="#HumanNameString"/>
    </daml:Class>
    <daml:Class rdf:ID="HumanInfant">
        <rdfs:label>infants</rdfs:label>
        <rdfs:comment>The collection of #$Persons in the infant stage of
            life.  Functionally, this ends when the infant learns to
            walk (even just toddle) and/or talk (even a few words)...
            or, at latest, when the person&apos;s age greatly exceeds
            that at which most people develop those skills.  Generally,
            this means that it spans the period from birth to about 12 -
            18 months old.  One of the subsets of this collection is #$NewbornBaby.</rdfs:comment>
        <guid>bd58cba5-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdf:type rdf:resource="#LifeStageType"/>
    </daml:Class>
    <daml:Class rdf:ID="HumanNameString">
        <rdfs:label>human name string</rdfs:label>
        <rdfs:comment>This is the class of names which human beings give
            themselves.  See two of its important subsets,
            #$HumanGivenNameString and #$HumanFamilyNameString, for examples.</rdfs:comment>
        <guid>bd58e854-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#IDStringType"/>
        <rdfs:subClassOf rdf:resource="#ProperNameString"/>
    </daml:Class>
    <daml:Class rdf:ID="HumanOccupationConstruct">
        <rdfs:label>human occupation construct</rdfs:label>
        <rdfs:comment>A collection of places.  Each
            #$HumanOccupationConstruct is a place where people do
            things, such as: the Empire State Building, an individual
            office in that building, the White House, the Lincoln
            Bedroom in the White House, an elevator, a tent, etc.    An
            instance of #$HumanOccupationConstruct is an artificial
            construction belonging to the collection #$ContainerProduct,
            and its #$primaryFunction is as a place in which humans
            perform activities.  Some large subsets include      (a)
            instances of #$HumanShelterConstruction (e.g., houses);
            (b) sub-regions within a #$HumanShelterConstruction or
            within any building which are intended for human use (e.g.,
            rooms, shower stalls), and      (c) regions in any
            transportation vehicle which are designed for human
            occupancy (e.g., the cockpit, passenger compartment).
            Note:  Some buildings which are not themselves instances of
            #$HumanOccupationConstruct, such as #$HooverDam, may have a
            sub-region which is a #$HumanOccupationConstruct (e.g., the
            control room at the top of the dam).    Note:  The
            collection #$HumanOccupationConstruct is broad enough to
            include tents, boiler rooms, elevator shafts, steam tunnels,
            and the space inside the #$LincolnMemorialInWashingtonDC.
            Thus, an instance of #$HumanOccupationConstruct need not be
            strictly #$Indoors-IsolatedFromOutside (q.v.), since
            #$Indoors-IsolatedFromOutside is meant to include many
            characteristics that those places do not necessarily share
            (such as humanly comfortable temperature, lighting at night,
            not terribly noisy or windy, clean).  We therefore do not
            make the default assertion that a #$HumanOccupationConstruct
            is #$Indoors-IsolatedFromOutside; however, an instance of
            #$HumanOccupationConstruct is certainly not a purely
            #$OutdoorLocation (q.v.), so we DO assert that those two
            collections are disjoint.  Certain subsets of
            #$HumanOccupationConstruct, however, do have `indoor&apos;
            characteristics, and so we assert (for example) that
            anything found inside instances of #$RoomInAConstruction or
            #$ModernShelterConstruction is found
            #$Indoors-IsolatedFromOutside.  Note:  For places designed
            to be occupied by humans but which are purely outdoor
            locations (such as elements of #$Lawn, #$ParkingLot, and
            #$Playground), see #$HumanlyOccupiedSpatialObject.</rdfs:comment>
        <guid>bd58a036-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#ContainerProduct"/>
        <rdfs:subClassOf rdf:resource="#HumanlyOccupiedSpatialObject"/>
        <rdfs:subClassOf rdf:resource="#ConstructionArtifact"/>
        <daml:disjointWith rdf:resource="#OutdoorLocation"/>
    </daml:Class>
    <daml:Class rdf:ID="HumanOccupationConstructResident">
        <rdfs:label>human occupation construct resident</rdfs:label>
        <rdfs:comment>The collection of those #$Animals that (commonly)
            reside in #$HumanOccupationConstructs -- i.e., in structures
            that also house people.  This mostly just includes domestic
            pets and people.</rdfs:comment>
        <guid>bd58a4df-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Animal"/>
    </daml:Class>
    <daml:Class rdf:ID="HumanResidence">
        <rdfs:label>homes</rdfs:label>
        <rdfs:comment>A collection of construction artifacts.  Each
            element of #$HumanResidence is a humanly constructed shelter
            (or a part of one) in which humans reside--as opposed to,
            say, their places of employment (though the two might be the
            same).  #$HumanResidence includes residential huts, igloos,
            longhouses, hotels, barracks, palaces, houseboats, mobile
            homes, as well as apartments, duplexes, and detached houses.
            A person&apos;s residence is typically the place where
            she/he usually sleeps and keeps most personal effects.</rdfs:comment>
        <guid>bd58e689-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ContactLocationType"/>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#HumanShelterConstruction"/>
        <rdfs:subClassOf rdf:resource="#PhysicalContactLocation"/>
    </daml:Class>
    <daml:Class rdf:ID="HumanResidenceArea">
        <rdfs:label>residences</rdfs:label>
        <rdfs:comment>A collection of geographical regions.  Each
            element of #$HumanResidenceArea is a region in which a
            number of people live, at least semi-permanently (i.e., for
            a year or more).  Examples: #$SanFranciscoBayArea,
            #$ResearchTrianglePark, research stations at the
            #$SouthPole, radar posts in the Aleutians.</rdfs:comment>
        <guid>bd58caab-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#OutdoorLocation"/>
        <rdfs:subClassOf rdf:resource="#HumanlyOccupiedSpatialObject"/>
    </daml:Class>
    <daml:Class rdf:ID="HumanShelterConstruction">
        <rdfs:label>human shelter constructions</rdfs:label>
        <rdfs:comment>A collection of artifacts; a subset of
            #$HumanOccupationConstruct.  An instance of
            #$HumanShelterConstruction is a place made to shelter people
            from the elements by allowing them to get indoors.  Subsets
            include #$ModernHumanResidence, #$SchoolBuilding,
            #$ShoppingMallBuilding, many others.   An instance of
            #$HumanShelterConstruction must have a roof and typically
            has sides, though the latter may be flimsy (as in elements
            of #$TentTheShelter) or even absent (as in some elements of #$ParkingGarage).</rdfs:comment>
        <guid>bd58cd3f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#HumanOccupationConstruct"/>
        <rdfs:subClassOf rdf:resource="#ShelterConstruction"/>
    </daml:Class>
    <daml:Class rdf:ID="HumanlyOccupiedSpatialObject">
        <rdfs:label>objects or locations inhabited by humans</rdfs:label>
        <rdfs:comment>A collection of places.  Each element of
            #$HumanlyOccupiedSpatialObject is a place that humans
            occupy, not restricted to (though including) the interiors
            of things built by humans, such as houses, office buildings,
            and ships.  #$HumanlyOccupiedSpatialObject also extends to
            campsites, caves, villages, and towns.  Examples: Doug
            Lenat&apos;s house, North Austin, the Five Boroughs of New
            York, Minnesota, the Vatican, an Antarctic research station,
            and (briefly) the Moon.</rdfs:comment>
        <guid>bd58d372-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
    </daml:Class>
    <daml:Class rdf:ID="HumidClimateCycle">
        <rdfs:label>humid climates</rdfs:label>
        <rdfs:comment>A collection of annual climate cycles.  Each
            element of #$HumidClimateCycle is a year-long event
            consisting of weather occurring (typically) in various
            continental and subtropical regions.  Characteristics of a
            humid climate include copious precipitation and high humidity.</rdfs:comment>
        <guid>be00c6f9-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ClimateCycleType"/>
        <rdfs:subClassOf rdf:resource="#AnnualClimateCycle"/>
    </daml:Class>
    <daml:Class rdf:ID="HumidContinentalClimateCycle">
        <rdfs:label>humid continental climates</rdfs:label>
        <rdfs:comment>A collection of annual climate cycles.  Each
            element of #$HumidContinentalClimateCycle is a year-long
            event consisting of weather occurring (typically) in
            continental interiors within a temperate climate zone.
            Characteristics of a humid continental climate cycle include
            a warm summer and cold winter, with precipitation
            throughout.  A good example of a region whose annual climate
            cycles are instances of #$HumidContinentalClimateCycle is
            the American Midwest.  Cf. #$HumidSubtropicalClimateCycle.</rdfs:comment>
        <guid>bd58b882-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ClimateCycleType"/>
        <rdfs:subClassOf rdf:resource="#HumidClimateCycle"/>
        <rdfs:subClassOf rdf:resource="#TemperateClimateCycle"/>
    </daml:Class>
    <daml:Class rdf:ID="HumidSubtropicalClimateCycle">
        <rdfs:label>humid subtropical climates</rdfs:label>
        <rdfs:comment>A collection of annual climate cycles.  Each
            element of #$HumidSubtropicalClimateCycle is a year-long
            event consisting of weather occurring (typically) within a
            temperate climate zone.  Characteristics of a humid
            subtropical climate cycle include a hot summer and a cool
            winter, with precipitation and moist air throughout.  Cycles
            of this kind occur closer to the equator than do instances
            of #$HumidContinentalClimateCycle.  For instance, the
            Southeastern United States is a good example of a region
            whose annual climate cycles are instances of #$HumidSubtropicalClimateCycle.</rdfs:comment>
        <guid>bd58c416-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ClimateCycleType"/>
        <rdfs:subClassOf rdf:resource="#HumidClimateCycle"/>
        <rdfs:subClassOf rdf:resource="#TemperateClimateCycle"/>
    </daml:Class>
    <OrderOfMagnitudeInterval rdf:ID="Hungry">
        <rdfs:label>hungry</rdfs:label>
        <rdfs:comment>Hungry</rdfs:comment>
        <guid>bd58b1b3-9c29-11b1-9dad-c379636f7270</guid>
    </OrderOfMagnitudeInterval>
    <daml:Class rdf:ID="HypotheticalContext">
        <rdfs:label>hypothetical context</rdfs:label>
        <rdfs:comment>The collection of microtheories that consist of
            assertions which are posited for the purpose of exploring
            their consequences, without alleging the actual truth of the
            assertions.  A #$HypotheticalContext may be used to analyze
            hypothetical outcomes of actions, or to examine the
            hypothetical consequences of assuming some theory to be
            true.  Sometimes the various alternatives in a decision may
            be asserted, each in their own #$HypotheticalContext, so
            their ramifications may be generated and evaluated.</rdfs:comment>
        <guid>bd58a4f1-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MicrotheoryType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#Microtheory"/>
        <daml:disjointWith rdf:resource="#SomethingExisting"/>
    </daml:Class>
    <daml:Class rdf:ID="IBOCreation">
        <rdfs:label>creations of an information-bearing object</rdfs:label>
        <rdfs:comment>A collection of events; a subset of
            #$IBTGeneration.  Each element of #$IBOCreation is an event
            which creates a new IBO (i.e., an element of
            #$InformationBearingObject).  An IBO is a relatively
            long-lasting instance of #$InformationBearingThing.
            Examples of #$IBOCreation include publishing a book, making
            a film, printing a photograph, molding a plastic credit
            card, painting a billboard, minting a coin.  When an IBO is
            created, its content may be either original or be copied
            from a prior IBO.  For creation of IBOs with new content,
            e.g., a personal letter, see the subset
            #$IBTGeneration-Original; for creation of IBOs with
            pre-existing content, e.g., reprinting a photograph, see #$IBTGeneration-Replication.</rdfs:comment>
        <guid>bd621044-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#IBTGeneration"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
    </daml:Class>
    <daml:Class rdf:ID="IBTCopying">
        <rdfs:label>events in which an Information Bearing Thing is copied</rdfs:label>
        <rdfs:comment>A collection of events; a subset of
            #$IBTGeneration-Replication.  Each element of #$IBTCopying
            is an event which generates a/some new IBT(s) (i.e., an
            element of #$InformationBearingThing) by copying the
            information and format from a source IBT (see
            #$informationOrigin).  The new IBT(s) encode(s)
            approximately the same information in approximately the same
            way as the source IBT.  Examples: photocopying a document,
            faxing a document, duplicating a videotape.  But also note
            that making twenty photocopies of the same document will
            count as an instance.</rdfs:comment>
        <guid>bd6606e6-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#IBTGeneration-Replication"/>
    </daml:Class>
    <daml:Class rdf:ID="IBTGeneration">
        <rdfs:label>generations of an Information Bearing Thing</rdfs:label>
        <rdfs:comment>A collection of information transfer events.  Each
            element of #$IBTGeneration is an event which creates some
            information-bearing thing--thus, an event in which some idea
            or information is expressed.  In elements of
            #$IBTGeneration, the particular IBT (i.e., element of
            #$InformationBearingThing) which is created may be either a
            transient wave phenomenon (e.g., made of sound, light, or
            radio waves), or it may be a relatively long-lasting
            instance of #$InformationBearingObject (cf. #$IBOCreation).
            Humans frequently generate such IBTs as spoken language,
            gestures, and handwritten notes.  It is irrelevant for
            elements of #$IBTGeneration whether there is another agent
            who immediately (or, indeed, ever) accesses the resulting
            IBTs.  Note the difference: reading is NOT an IBT generation
            event, but writing (usually) is.  IBTs may be generated
            intentionally or unintentionally.  Also, every communication
            act starts with an instance of #$IBTGeneration.  See also:
            #$Communicating and its subsets, esp. #$CommunicationAct-Single.</rdfs:comment>
        <guid>bd70d156-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#InformationTransferEvent"/>
        <rdfs:subClassOf rdf:resource="#Action"/>
        <rdfs:subClassOf rdf:resource="#TransferOut"/>
    </daml:Class>
    <daml:Class rdf:ID="IBTGeneration-Original">
        <rdfs:label>generations of an original Information Bearing Thing</rdfs:label>
        <rdfs:comment>A collection of events; a subset of
            #$IBTGeneration.  Each element of #$IBTGeneration-Original
            is an event in which some original idea is expressed; that
            is, the content of the IBT generated is not a copy of the
            content of a previously created information-bearing thing.
            See also #$IBTGeneration, #$Communicating.</rdfs:comment>
        <guid>bd58f6af-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#IBTGeneration"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <daml:disjointWith rdf:resource="#IBTGeneration-Replication"/>
    </daml:Class>
    <daml:Class rdf:ID="IBTGeneration-Replication">
        <rdfs:label>events in which an Information Bearing Thing is replicated</rdfs:label>
        <rdfs:comment>A collection of events; a subset of
            #$IBTGeneration.  Each element of
            #$IBTGeneration-Replication is an event in which a new IBT
            (i.e., an #$InformationBearingThing) is created whose
            content is based on that of a preexisting IBT (which is the
            #$informationOrigin of the generation event).  The new IBT
            contains at least part of the information content of the
            original IBT.  It may use the same or a different way of
            encoding the information.</rdfs:comment>
        <guid>bd5ea94c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#IBTGeneration"/>
        <daml:disjointWith rdf:resource="#IBTGeneration-Original"/>
    </daml:Class>
    <daml:Class rdf:ID="IBTRecoding">
        <rdfs:label>events in which an Information Bearing Thing is recoded</rdfs:label>
        <rdfs:comment>A collection of events; a subset of
            #$IBTGeneration-Replication.  Each element of #$IBTRecoding
            is an event which generates a new IBT (i.e., an element of
            #$InformationBearingThing), by taking information from a
            source IBT (see #$informationOrigin), encoding it a new way,
            and incorporating it into a new information-bearing thing
            (see #$ibtGenerated).  Elements of #$IBTRecoding may be done
            either by agents (e.g., people) or by non-agents (e.g.,
            record players, or computers running translation software).
            Recoding the content of a pre-existing IBT presupposes some
            instance of accessing it (i.e., of #$AccessingAnIBT).</rdfs:comment>
        <guid>bd5f36bb-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#IBTGeneration-Replication"/>
    </daml:Class>
    <daml:Class rdf:ID="IDDocument">
        <rdfs:label>identification cards</rdfs:label>
        <rdfs:comment>A collection of official documents.  Each element
            of #$IDDocument is an accepted credential for identifying
            some object.  Important subsets of #$IDDocument include
            #$Passport, #$DriversLicense, #$SocialSecurityCard.  Other
            examples include student ID cards, dog tags (worn by
            military personnel), dog tags (worn by dogs), authentication
            certificates for a work of art or an antique.</rdfs:comment>
        <guid>bd58903e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#OfficialDocument"/>
    </daml:Class>
    <daml:Class rdf:ID="IDString">
        <rdfs:label>identification strings</rdfs:label>
        <rdfs:comment>A collection of objects; a subset of
            #$CharacterString.  Each element of #$IDString is a
            character string which is used to denote a specific object
            in some identification mapping; for example, instances of
            #$ModelNumber (e.g., ``JHS146973S2&apos;&apos;), or
            instances of #$PostalCode (e.g., ``78751&apos;&apos;).  See
            also #$DenotedObjectFn and #$objectID.</rdfs:comment>
        <guid>bd5888ad-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#IDStringType"/>
        <rdfs:subClassOf rdf:resource="#CharacterString"/>
    </daml:Class>
    <daml:Class rdf:ID="IDStringType">
        <rdfs:label>ID string types</rdfs:label>
        <rdfs:comment>A collection of collections.  Each element in
            #$IDStringType is a collection of character strings which is
            a subset of #$IDString (q.v.).  A few instances of
            #$IDStringType: #$ProductName, #$ProductVersion,
            #$EMailAddress, #$PhoneNumber, #$PostalCode.</rdfs:comment>
        <guid>bd588b45-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#ObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="IllocutionaryForce">
        <rdfs:label>illocutionary forces</rdfs:label>
        <rdfs:comment>The collection of illocutionary force attributes
            held by illocutionary acts.  Each element of
            #$IllocutionaryForce is a specialized component of a
            communication; its function is to indicate how the speaker
            in a communication wants the agent(s) whom s/he is
            addressing to understand, and respond to, the
            situation--i.e., the state of affairs--described in that
            communication.  Isolating the `illocutionary force&apos; of
            a communication allows us to characterize the intention of a
            speaker; e.g., whether s/he means to assert that the
            described state of affairs in fact holds; or to express a
            desire that such a state of affairs hold; or to command
            someone to make that state of affairs hold; or to offer to
            make the state of affairs hold.  S/he may even intend to
            make something true by stating it (e.g., ``I name this ship
            `The Intrepid&apos;.&apos;&apos;).   Usually, apprehending a
            speaker&apos;s intention is important for understanding what
            s/he means and what s/he intends the hearer to do.  Although
            the content of an illocutionary act can be represented
            propositionally, they are not generally communicated so
            explicitly.  For example, questions in English are typically
            communicated by inverting subject-object word order and
            raising one&apos;s intonation at the end of the utterance.
            (The intonation marker so strongly indicates a question that
            it may suffice without the inverted word order, as in `You
            are going tonight&apos; uttered with a rising intonation.)
            Commands in English typically have an (unexpressed)
            understood subject and perhaps a forceful tone.  In every
            culture and language there are conventional sets of commonly
            used illocutionary forces which would be instances of
            #$IllocutionaryForce for that culture; e.g., in English,
            they include #$Inform, #$Request, #$Offer, #$Promise, and
            #$Query.  Note: although in this comment
            #$IllocutionaryForce is explained in terms of utterances, it
            applies to communication generally; so `speaker&apos; and
            `listener&apos; should be broadly interpreted to mean,
            respectively, any #$senderOfInfo and #$recipientOfInfo.  See
            also #$Communicating, #$CommunicationAct-Single.  In #$CycL,
            illocutionary forces can be related to communication acts
            having some propositional content, via
            #$iteIllocutionaryForce, or to the microtheory containing
            formulas expressing the information transferred in an
            illocutionary act with #$componentIF.</rdfs:comment>
        <guid>bd58d8c6-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#AttributeType"/>
        <rdfs:subClassOf rdf:resource="#AttributeValue"/>
    </daml:Class>
    <daml:Class rdf:ID="IlluminationModeAttribute">
        <rdfs:label>illumination mode attribute</rdfs:label>
        <rdfs:comment>A collection of attributes.  Each element of
            #$IlluminationModeAttribute describes something about the
            type of illumination falling on a region or an object.  For
            example, #$DirectIllumination, #$IndirectIllumination,
            #$ReflectedIllumination, #$PartDirectPartIndirect.</rdfs:comment>
        <guid>c0fcdd0c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#UnorderedAttributeType"/>
        <rdfs:subClassOf rdf:resource="#AttributeValue"/>
    </daml:Class>
    <daml:Class rdf:ID="ImmediateWeatherProcess">
        <rdfs:label>immediate weather process</rdfs:label>
        <rdfs:comment>The collection of meteorological events of a
            duration shorter than seasonal processes.  A particular
            hurricane event, for example, might be characteristic of a
            seasonal process for a region; but the hurricane event
            itself is an instance of #$ImmediateWeatherProcess.  Another
            example of an #$ImmediateWeatherProcess is a single
            #$LightningEvent.  (Cf. #$AnnualClimateCycle.)</rdfs:comment>
        <guid>bd58dfc6-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#WeatherEvent"/>
        <daml:disjointWith rdf:resource="#AnnualClimateCycle"/>
    </daml:Class>
    <daml:Class rdf:ID="InanimateObject-Natural">
        <rdfs:label>natural inanimate objects</rdfs:label>
        <rdfs:comment>A collection of natural (i.e. not man-made)
            objects. It is a subclass of #$InanimateThing-Natural,
            distinguished from it mainly by only having subclasses which
            are existing object-types. Thus, #$CelestialObject would be
            a subclass of this collection, but #$Dirt would not.</rdfs:comment>
        <guid>bea9777b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#InanimateThing-Natural"/>
    </daml:Class>
    <daml:Class rdf:ID="InanimateThing">
        <rdfs:label>inanimate objects</rdfs:label>
        <rdfs:comment>A collection of tangibles.  Each element of
            #$InanimateThing is a (at least partly) tangible thing which
            is not a living structure.  Examples: #$YaleUniversity, the
            #$StatueOfLiberty, a U.S. ten-dollar bill, the
            #$MoonOfEarth, a safety pin.</rdfs:comment>
        <guid>bd5905ea-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <daml:disjointWith rdf:resource="#BiologicalLivingObject"/>
    </daml:Class>
    <daml:Class rdf:ID="InanimateThing-Natural">
        <rdfs:label>natural inanimate things</rdfs:label>
        <rdfs:comment>A collection of tangibles. Each element of
            #$InanimateThing-Natural is an #$InanimateThing that is not
            man-made in a #$PurposefulAction. Thus, the #$MoonOfEarth,
            human #$Sweat staining a shirt, and most footprints left by
            people in the snow belong to this collection, but wood chips
            left around a tree being chopped down, tailings left from a
            mine, a grunt made while lifting a log, and the
            #$ArcDeTriomphe do not.</rdfs:comment>
        <guid>bda91555-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#InanimateThing"/>
        <rdfs:subClassOf rdf:resource="#NaturalTangibleStuff"/>
    </daml:Class>
    <daml:Class rdf:ID="IncurringAnInjury">
        <rdfs:label>instances of incurring an injury</rdfs:label>
        <rdfs:comment>A collection of events.  An instance of
            #$IncurringAnInjury is an event in which an animal becomes
            injured.  In such events, the animal which is hurt is the
            #$bodilyActedOn in the event.  The condition which results
            of an instance of #$IncurringAnInjury would be an instance
            of #$InjuryCondition (q.v.).  Also see the comment on #$AilmentCondition.</rdfs:comment>
        <guid>bd58c658-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#AnimalActivity"/>
        <rdfs:subClassOf rdf:resource="#SingleDoerAction"/>
        <rdfs:subClassOf rdf:resource="#IncurringDamage"/>
    </daml:Class>
    <daml:Class rdf:ID="IncurringDamage">
        <rdfs:label>instances of incurring damage</rdfs:label>
        <rdfs:comment>The collection of events in which some sort of
            damage is incurred to a person or property.</rdfs:comment>
        <guid>bd58a555-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#PhysicalEvent"/>
        <rdfs:subClassOf rdf:resource="#IntrinsicStateChangeEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="IndependentCountry">
        <rdfs:label>independent countries</rdfs:label>
        <rdfs:comment>A collection of geopolitical entities. Each
            element of #$IndependentCountry is a distinct, independent
            geopolitical entity generally recognized by the
            international community. An independent country typically
            has a (relatively) stable government and enforced borders,
            its own currency, laws, culture, etc. Examples:
            #$UnitedStatesOfAmerica, #$Germany, #$Liberia, #$Mongolia,
            #$India, #$Taiwan-RepublicOfChina, #$Honduras.</rdfs:comment>
        <guid>bd58e4e7-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#SpatiallyDisjointRegionType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#GeographicalRegion"/>
        <rdfs:subClassOf rdf:resource="#Country"/>
        <daml:disjointWith rdf:resource="#CountrySubsidiary"/>
    </daml:Class>
    <daml:Class rdf:ID="IndependentOrganization">
        <rdfs:label>independent organizations</rdfs:label>
        <rdfs:comment>A collection of organizations.  An element of
            #$IndependentOrganization is an organization which is not
            affiliated with any #$ChainOrganization and that is not a
            sub-organization of any other #$Organization.  An
            independent organization is neither the top-level
            organization of a chain, nor a lower level organization in a
            chain, nor is it an element of #$ChainOrganization.  Note,
            however, that an #$IndependentOrganization may have several
            locations within a small geographical region; e.g., Texas
            French Bread (a single, independent business) has multiple
            locations in Austin, TX.</rdfs:comment>
        <guid>c10ae581-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Organization"/>
        <daml:disjointWith rdf:resource="#ChainOrganization"/>
    </daml:Class>
    <daml:Class rdf:ID="IndexedInfoSource">
        <rdfs:label>indexed info source</rdfs:label>
        <rdfs:comment>The collection of all structured   information
            sources in which the information contained therein   is
            indexed by some set of index terms (the terms could  be
            names, phrases, #$CharacterStrings,   #$IDNumbers or codes).
            For every index term, there is one   specific part of the
            #$IndexedInfoSource associated with that   term.  Each
            instance of #$IndexedInfoSource has some format   or
            organizing structure of specified parts or
            &apos;chunks&apos;  imposed on the information.    (Although
            its indexed parts might be   be ordered in a certain
            sequence, in theory it could be indexed without   there
            being any particular sequential ordering of the parts.)   An
            instance of #$IndexedInfoSource   is the abstract
            informational content of the source, not any   particular
            physical object in which the information is stored.
            Examples include a #$Dictionary, #$Thesaurus,
            #$Database-AbstractContent, or a #$KnowledgeBase.  Some
            examples   that do not qualify are #$Painting-ArtForm, or a
            #$CharacterString   without any structuring information
            about it or that has no   structure beyond being a string of
            characters.    Thus this is not referring to unstructured
            text, even if it has an &apos;Index&apos;.  The fact that a
            book has an index does not make it an #$IndexedInfoSource.</rdfs:comment>
        <guid>c03febed-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#AbstractInformationalThing"/>
        <rdfs:subClassOf rdf:resource="#StructuredInformationSource"/>
    </daml:Class>
    <daml:Class rdf:ID="IndexicalConcept">
        <rdfs:label>indexicals</rdfs:label>
        <rdfs:comment>#$IndexicalConcepts are those   whose referent
            essentially depends on the occasion of use and   the user,
            e.g., #$Now, I, Here. When I use the word &apos;I,&apos; I
            am referring to myself (#$OKeefe), but &apos;I&apos; does
            not mean   #$OKeefe, but refers to whomever the user is.
            Similarly, #$Now denotes the moment in which it is used.</rdfs:comment>
        <guid>bf400028-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
    </daml:Class>
    <Agent rdf:ID="India">
        <rdfs:label>India</rdfs:label>
        <rdfs:comment>A #$GeopoliticalEntity in South Asia which has
            been an #$IndependentCountry since 1947.  For the preceding
            century it was a #$Territory of the
            #$UnitedKingdomOfGreatBritainAndNorthernIreland.  The
            territorial extent  of the #$GeopoliticalEntity of #$India
            occupies most of the #$IndianSubcontinent, although the
            state of Assam is not considered part of the subcontinent.</rdfs:comment>
        <guid>bd58fb5c-9c29-11b1-9dad-c379636f7270</guid>
    </Agent>
    <Entity rdf:ID="IndianOcean">
        <rdfs:label>the Indian Ocean</rdfs:label>
        <rdfs:comment>The ocean in the #$SouthernHemisphere-Region lying
            south of Asia and east of Africa, stretching to Australia.</rdfs:comment>
        <guid>bd5887df-9c29-11b1-9dad-c379636f7270</guid>
    </Entity>
    <daml:Class rdf:ID="Individual">
        <rdfs:label>objects</rdfs:label>
        <rdfs:comment>#$Individual is the collection of all things that
            are NOT sets or collections.  Thus, #$Individual includes
            (among other things) physical objects, temporal
            subabstractions of physical objects, numbers, relations, and
            groups (see #$Group).  An element of #$Individual may have
            parts or a structure (including parts that are
            discontinuous); but NO instance of #$Individual can have
            elements or subsets.    Important distinction:  Though an
            element of #$Individual may have parts (e.g.,
            #$physicalParts or #$groupMembers), that individual is NOT
            the same thing as the collection containing those same
            parts.  For example, your car is an individual, but the
            collection of all the parts of your car is an instance of
            #$Collection.  The latter -- the collection of parts of your
            car -- is an abstract collection; it doesn&apos;t have a
            location, it doesn&apos;t have a top speed, etc. --
            it&apos;s just a collection! -- but it does have subsets,
            supersets, and members.  The #$Group of parts of your car IS
            an #$Individual and has a location and mass.  Similarly:
            `Bill Clinton&apos;s immediate family&apos; is an
            #$Individual -- a #$Group of #$Persons; however, the
            #$Collection of persons who belong to that family is not.
            One final example: A company belongs to #$Individual and is
            distinct from both the #$Group of its employees (a different
            #$Individual) and the #$Collection of its employees (which
            are distict from each other.).</rdfs:comment>
        <guid>bd58da02-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
        <daml:disjointWith rdf:resource="#SetOrCollection"/>
    </daml:Class>
    <daml:Class rdf:ID="IndividualAgent">
        <rdfs:label>individuals</rdfs:label>
        <rdfs:comment>The collection of all individuals (in the sense of
            not being groups) belonging to the collection #$Agent.  Each
            person, each animal, etc., is an element of
            #$IndividualAgent, in most contexts.  Note that instances of
            #$Organization will in general NOT be elements of
            #$IndividualAgent.   Intelligent  robots are considered to
            be instances of #$IndividualAgent.</rdfs:comment>
        <guid>bd58a562-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Agent-Generic"/>
    </daml:Class>
    <daml:Class rdf:ID="IndividualDenotingFunction">
        <rdfs:label>individual denoting function</rdfs:label>
        <rdfs:comment>The subcollection of #$Function-Denotational whose
            instances, when applied to any appropriate  (sequence of)
            arguments, return instances of #$Individual.  Examples
            include #$PerimeterFn, #$MedalAwardCeremonyFn, and
            #$CavityInteriorRegionFn;  (#$CavityInteriorRegionFn
            #$LincolnMemorialInWashingtonDC) denotes the   region of
            space inside the Lincoln Memorial.  Cf.
            #$CollectionDenotingFunction and #$SetDenotingFunction.</rdfs:comment>
        <guid>bd58fad9-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#RelationshipType"/>
        <rdfs:subClassOf rdf:resource="#Function-Denotational"/>
        <daml:disjointWith rdf:resource="#CollectionDenotingFunction"/>
    </daml:Class>
    <Entity rdf:ID="Indonesia-TheNation">
        <rdfs:label>Indonesia</rdfs:label>
        <rdfs:comment>The country of Indonesia, which comprises 13500
            islands. Includes both physical and political aspects.</rdfs:comment>
        <guid>bd58b2d6-9c29-11b1-9dad-c379636f7270</guid>
    </Entity>
    <daml:Class rdf:ID="Infection">
        <rdfs:label>infectious diseases</rdfs:label>
        <rdfs:comment>A collection of ailments; a subset of
            #$AilmentCondition.  An instance of #$Infection is a disease
            condition in which microorganisms are abnormally present (or
            abnormally numerous) within an animal&apos;s body.  The
            microorganisms involved in an infection may be some instance
            of the collections #$Bacterium, #$Virus, or
            #$ProtistaKingdom.  Specialized subsets of #$Infection
            include: #$Bronchitis, #$Tonsillitis,
            #$SexuallyTransmittedInfection (which has further subsets).
            A particular case of tonsilitis is thus an element of the
            collection #$Infection.</rdfs:comment>
        <guid>c10c2f7f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PhysiologicalConditionType"/>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#AilmentCondition"/>
        <daml:disjointWith rdf:resource="#GeneticCondition"/>
    </daml:Class>
    <daml:Class rdf:ID="InfectionTransmissionEvent">
        <rdfs:label>infection transmission event</rdfs:label>
        <rdfs:comment>The collection of events in which some instance of
            #$Infection is transmitted from one member of
            #$BiologicalLivingObject to another.</rdfs:comment>
        <guid>c0fd53e7-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#GeneralizedTransfer"/>
    </daml:Class>
    <daml:Class rdf:ID="InfectionType">
        <rdfs:label>infection type</rdfs:label>
        <rdfs:comment>A collection of collections. Instances of
            #$InfectionType are collections of infections, that is to
            say, specs of #$Infection. Nonetheless, any collection of
            infection shouldn&apos;t be promoted to the rank of an
            instance of #$InfectionType. For instance,
            #$BacterialInfection is a legitimate instance, more
            precisely an instance of #$InfectionTypeByPathogenType,
            itself a spec of #$InfectionType. A negative example would
            be the collection of infections of which Bertrand Russell
            picked up an instance during the year 1918. </rdfs:comment>
        <guid>c0fd5f45-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="#PhysiologicalConditionType"/>
        <daml:disjointWith rdf:resource="#SensoryReactionType"/>
    </daml:Class>
    <Microtheory rdf:ID="InferencePSC">
        <rdfs:label>inference p s c</rdfs:label>
        <rdfs:comment>A problem solving context in which all assertions
            in the entire KB are initially visible.  However, down each
            inference path, the chain of microtheories used are required
            to have some common descendent microtheory which is capable
            of inheriting all of the microtheories in the chain.  Thus,
            queries made in #$InferencePSC in effect compute locations
            in the space of microtheories in which the query is
            satisfiable.  This context is used internally by the
            inference engine for certain recursive calls to itself,
            including forward inference.  See also #$EverythingPSC.</rdfs:comment>
        <guid>bd58915a-9c29-11b1-9dad-c379636f7270</guid>
    </Microtheory>
    <daml:Class rdf:ID="InferenceRelatedBookkeepingPredicate">
        <rdfs:label>inference related bookkeeping predicate</rdfs:label>
        <rdfs:comment>A collection of predicates.  Each element of
            #$InferenceRelatedBookkeepingPredicate is a predicate
            involved in assertions used by the Cyc application to direct
            inferencing.  Examples: #$defnIff, #$defnSufficient,
            #$termOfUnit, #$afterAdding.</rdfs:comment>
        <guid>bd58d107-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#BookkeepingPredicate"/>
    </daml:Class>
    <daml:Class rdf:ID="InflatableBoat">
        <rdfs:label>inflatable boats</rdfs:label>
        <rdfs:comment>The collection of all inflatable boats, that is,
            boats (mostly small watercraft) that are composed of some
            fabric or membrane and are inflated with air to give them
            buoyancy in water.</rdfs:comment>
        <guid>c1009ce2-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdf:type rdf:resource="#ProductType"/>
    </daml:Class>
    <daml:Class rdf:ID="Inform-CommunicationAct">
        <rdfs:label>acts of conveying information</rdfs:label>
        <rdfs:comment>The collection of acts of conveying information by
            means of intentional communication.</rdfs:comment>
        <guid>bd589e02-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
        <rdfs:subClassOf rdf:resource="#CommunicationAct-Single"/>
        <rdfs:subClassOf rdf:resource="#InformationBearingThing"/>
        <daml:disjointWith rdf:resource="#Requesting-CommunicationAct"/>
    </daml:Class>
    <daml:Class rdf:ID="InformationAdding">
        <rdfs:label>information adding</rdfs:label>
        <rdfs:comment>A collection of events; a subset of
            #$InformationUpdating.  Each element of #$InformationAdding
            is an event in which information is added to the information
            content of an IBO (i.e., an element of
            #$InformationBearingObject).  After the action, the IBO
            which is the #$informationDestination of the update
            `has&apos; the new information (i.e., #$infoAdded).  The
            resulting information content of that IBO includes both its
            content immediately prior to the addition, plus the newly
            added information.  Examples of #$InformationAdding:
            recording a check in the check register of one&apos;s
            checkbook; taking the next photograph on a roll of film;
            adding a new constant to the #$CycKB.</rdfs:comment>
        <guid>bd5e23fb-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#InformationUpdating"/>
    </daml:Class>
    <daml:Class rdf:ID="InformationBearingObject">
        <rdfs:label>information-bearing objects</rdfs:label>
        <rdfs:comment>A collection of objects which are both tangible
            and intangible.  (See also the comment for its superset
            #$CompositeTangibleAndIntangibleObject.)  Each element of
            #$InformationBearingObject is an object that can be
            interpreted, by an interpreter understanding its
            conventions, to yield a chunk or chunks of information.
            #$InformationBearingObject includes all of the following:
            (1) artifacts made solely for the purpose of conveying
            information (e.g., a newspaper, or a children&apos;s science
            video); (2) artifacts that convey information in addition to
            their intended function (e.g., Neolithic pottery); and (3)
            non-artifacts, such as a person&apos;s fingerprints,
            gestures, and utterances, which may be interpreted to yield
            information.  Note: `an IBO&apos; abbreviates `an
            information bearing object&apos;.  Cf.
            #$InformationBearingWavePropagation.  See also #$containsInformation.</rdfs:comment>
        <guid>bd58f6ac-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#InformationBearingThing"/>
        <rdfs:subClassOf rdf:resource="#CompositeTangibleAndIntangibleObject"/>
    </daml:Class>
    <daml:Class rdf:ID="InformationBearingThing">
        <rdfs:label>information-bearing things</rdfs:label>
        <rdfs:comment>A collection of temporal objects, including
            actions and events as well as physical objects.  Each
            element of #$InformationBearingThing is an item that
            contains information, for an agent who understands how to
            interpret it.  Examples: a copy of the novel `Moby
            Dick&apos;; a signal buoy; a photograph; a flag; an elevator
            sign in Braille; a map; a US dollar bill; a resume; an
            account ledger; a word in ASL; a musical score; the #$Cyc
            program itself.  Note: `an IBT&apos; abbreviates `an
            information bearing thing&apos;.  See also
            #$SpecifiedInformationBearingThingType.  For representation
            of the propositional content of information bearing things,
            see #$PropositionalInformationThing; but note that not all
            IBTs have a propositional content (cf. #$ArtObject). Also
            note that events in which information is transferred (cf.
            #$InformationTransferEvent) are not considered instances of
            #$InformationBearingThing.  Rather, such transfer events
            have, as one of their actors, some instance of
            #$InformationBearingThing which is the token considered to
            be transfered in the #$InformationTransferEvent.</rdfs:comment>
        <guid>be436e7e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <daml:disjointWith rdf:resource="#Conveyance"/>
    </daml:Class>
    <daml:Class rdf:ID="InformationBearingWavePropagation">
        <rdfs:label>information bearing wave propagation</rdfs:label>
        <rdfs:comment>A collection of information bearing things (IBTs).
            Each element of #$InformationBearingWavePropagation is a
            #$WavePropagation (q.v.) event that carries information, for
            an interpreter which understands its conventions.  Examples
            of #$InformationBearingWavePropagation include sounds, radio
            signals, and images of visible light.  These eventlike IBTs
            should be contrasted with the relatively static, persistent,
            objectlike IBTs in the collection #$InformationBearingObject.</rdfs:comment>
        <guid>bf834402-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdf:type rdf:resource="#WavePropagationType"/>
        <rdfs:subClassOf rdf:resource="#WavePropagation"/>
        <rdfs:subClassOf rdf:resource="#InformationBearingThing"/>
    </daml:Class>
    <daml:Class rdf:ID="InformationRecordingDevice">
        <rdfs:label>information recording devices</rdfs:label>
        <rdfs:comment>A collection of physical devices.  An instance of
            #$InformationRecordingDevice is a device used for the
            recording of sensory information (i.e., audio and visual,
            but not encoded as character strings.)  So an instance would
            be your answering machine at home (an #$AnsweringMachine),
            your cam-corder (a #$VideoCamera), but NOT your address book
            or your copy of the Yellow Pages.   Note: A borderline case
            is a PDA (such as an Apple Newton) used to record
            handwritten script.  If it then processes that information
            and converts it to ASCII characters, it has stopped being an
            #$InformationRecordingDevice in the currently intended
            sense.  Probably a better name for this concept, therefore,
            would be DeviceToRecordAnalogInformation.</rdfs:comment>
        <guid>bd58feeb-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#PhysicalDevice"/>
    </daml:Class>
    <daml:Class rdf:ID="InformationRecordingProcess">
        <rdfs:label>information-recording processes</rdfs:label>
        <rdfs:comment>A collection of events in which information is
            recorded, using an #$InformationRecordingDevice.  Every
            #$InformationRecordingProcess produces an #$InformationBearingObject.</rdfs:comment>
        <guid>bd58e14f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#IBOCreation"/>
    </daml:Class>
    <daml:Class rdf:ID="InformationRemoving">
        <rdfs:label>information removing</rdfs:label>
        <rdfs:comment>The collection of actions in which information is
            removed from or erased from an IBO
            (#$InformationBearingObject).  After the action, the
            remaining info content, if any, of the IBO acted on is only
            a part of what it started out to be.  The removed
            information doesn&apos;t go anywhere; after removal it
            doesn&apos;t end up encoded in something else.</rdfs:comment>
        <guid>bd642fa3-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#InformationUpdating"/>
    </daml:Class>
    <daml:Class rdf:ID="InformationTransferEvent">
        <rdfs:label>information transfers</rdfs:label>
        <rdfs:comment>A collection of events in which information is
            transferred from a source (#$informationOrigin) to one or
            more destinations (#$informationDestination), all of which
            are either intelligent agents or #$InformationBearingThings
            (IBTs).  Examples: reading a book (transfer from book to
            reader); saying something to someone (transfer from speaker
            to listener); machine translation (transfer from an encoded
            IBT in the source language to an encoded IBT in the target
            language); OCR scanning (transfer of info from visual
            information source to another IBT in different format);
            carving initials in a tree (transfer from agent to IBT),
            making a speech (transfer from agent to agents) etc.  See
            also the specialization #$InformationTransferPhysicalEvent.</rdfs:comment>
        <guid>bd589f07-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#GeneralizedTransfer"/>
    </daml:Class>
    <daml:Class rdf:ID="InformationUpdating">
        <rdfs:label>information updating</rdfs:label>
        <rdfs:comment>A collection of information transfer events.  Each
            element of #$InformationUpdating is an event in which the
            information content of an IBO (i.e., an element of
            #$InformationBearingObject) is altered, either by removing
            or by adding information, or both.  Note that this is
            possible only for tangible IBOs.</rdfs:comment>
        <guid>bd616cc0-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
    </daml:Class>
    <daml:Class rdf:ID="Ingesting">
        <rdfs:label>ingestions</rdfs:label>
        <rdfs:comment>A collection of events; a subset of
            #$BiologicalIntakeEvent.  Each element of #$Ingesting is a
            complex process in which a thing is brought into some
            organism&apos;s mouth from the outside, is swallowed, and is
            moved to the organism&apos;s stomach.  Every element of
            #$Ingesting has among its #$subEvents an instance of
            #$Swallowing which occurs after the intake.   (Thus, though
            chewing gum is a #$BiologicalIntakeEvent, it is not an
            #$Ingesting unless the gum is swallowed.)  An ingesting
            event ends when the ingested stuff reaches the
            ingester&apos;s stomach (where an instance of
            #$DigestionEvent begins -- provided that what was ingested
            is an element of #$EdibleStuff).</rdfs:comment>
        <guid>bd5888eb-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#VoluntaryBodyMovement"/>
        <rdfs:subClassOf rdf:resource="#BodilyFunctionEvent"/>
        <rdfs:subClassOf rdf:resource="#BiologicalIntakeEvent"/>
        <rdfs:subClassOf rdf:resource="#SingleDoerAction"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
    </daml:Class>
    <daml:Class rdf:ID="Inhaling">
        <rdfs:label>inhalations</rdfs:label>
        <rdfs:comment>The collection of all body movement events in
            which an animal takes air in through an appropriate portal
            (#$Mouth, #$Nose) and passes it into its #$Lungs.  The
            elements of #$Breathing all have #$subEvents which are #$Inhalings.</rdfs:comment>
        <guid>bd58f34d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#BodilyFunctionEvent"/>
        <rdfs:subClassOf rdf:resource="#BiologicalIntakeEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="InorganicStuff">
        <rdfs:label>inorganic substances</rdfs:label>
        <rdfs:comment>A collection of tangible things.  Each element of
            #$InorganicStuff is a tangible thing which is wholly
            composed of one or more types of inorganic #$Molecule.
            Instances of #$InorganicStuff usually didn&apos;t originate
            as parts or products of living things.</rdfs:comment>
        <guid>bd590a05-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#InanimateThing"/>
        <daml:disjointWith rdf:resource="#OrganicStuff"/>
    </daml:Class>
    <daml:Class rdf:ID="Insect">
        <rdfs:label>insects</rdfs:label>
        <rdfs:comment>A collection of animals; a subset of #$Arthropod.
            Each element of #$Insect is a small arthropod whose body is
            segmented into thirds, with three pairs of legs, and one or
            two pairs of wings.  The most familiar members of
            #$Arthropod are the &apos;bugs&apos; encountered in human
            daily life.  Some insects bite, some infest houses, and some
            carry disease.  #$Insect is an instance of #$BiologicalClass.</rdfs:comment>
        <guid>bd58b8f7-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#BiologicalClass"/>
        <rdf:type rdf:resource="#OrganismClassificationType"/>
        <rdfs:subClassOf rdf:resource="#Vermin"/>
        <rdfs:subClassOf rdf:resource="#Arthropod"/>
    </daml:Class>
    <daml:Class rdf:ID="InsideSurface">
        <rdfs:label>inside surface</rdfs:label>
        <rdfs:comment>The collection of all inside surfaces of (surfaces
            of the interiors of) tangible things.  The tangible thing
            may have a #$Cavity or several cavities or passageways.
            Often the tangible thing can be thought of as a container of
            some sort.</rdfs:comment>
        <guid>bd589b7d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdfs:subClassOf rdf:resource="#Surface-Physical"/>
    </daml:Class>
    <daml:Class rdf:ID="Instructions">
        <rdfs:label>instructions</rdfs:label>
        <rdfs:comment>The collection of all #$ConceptualWorks which are
            executable pieces of information.  Each element of
            #$Instructions outlines a sequence of tasks to be performed,
            such as instructions on a food package, verbal instructions,
            a musical score, etc.</rdfs:comment>
        <guid>bd58db4d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
    </daml:Class>
    <ElectricalResistance rdf:ID="InsulatorResistance">
        <rdfs:label>insulator resistance</rdfs:label>
        <rdfs:comment>A measurable physical attribute.
            #$InsulatorResistance is the element of
            #$ElectricalResistance that represents a very high level of
            electrical resistance.  An object having
            #$InsulatorResistance conducts no electricity at all.  See
            also #$resistanceOfObject.</rdfs:comment>
        <guid>be00f859-9c29-11b1-9dad-c379636f7270</guid>
    </ElectricalResistance>
    <daml:Class rdf:ID="InsuranceProvider">
        <rdfs:label>insurances</rdfs:label>
        <rdfs:comment>A collection of organizations; a subset of
            #$ServiceOrganization.  An element of #$InsuranceProvider is
            an organization whose #$MainFunction is to provide financial
            and material protection to its clients in the event of
            sickness, death, natural disaster, loss, theft, lawsuits,
            etc.  (Insurers may specialize in one or more of those
            areas.)  Elements of #$InsuranceProvider may belong to
            either #$CommercialServiceOrganization or
            #$NonProfitOrganization (including insurance providers
            belonging to #$LegalGovernmentOrganization).  Examples
            include State Farm Insurance Co., Aetna Casualty Co.,
            Lutheran Brotherhood, and all fifty members of U.S. #$StateMedicaidAdministrationOrganizations.</rdfs:comment>
        <guid>bd588b6e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#ServiceOrganization"/>
    </daml:Class>
    <daml:Class rdf:ID="Intangible">
        <rdfs:label>intangibles</rdfs:label>
        <rdfs:comment>The collection of things that are not physical --
            are not made of, or encoded in, matter.  Every #$Collection
            is an #$Intangible (even if its instances are tangible), and
            so are some #$Individuals.  Caution: do not confuse
            `tangibility&apos; with `perceivability&apos; -- humans can
            perceive light even though it&apos;s intangible--at least in
            a sense.  For more on this issue, see the relevant #$cyclistNotes.</rdfs:comment>
        <guid>bd58e3a3-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
        <rdfs:subClassOf rdf:resource="#PartiallyIntangible"/>
        <daml:disjointWith rdf:resource="#PartiallyTangible"/>
    </daml:Class>
    <daml:Class rdf:ID="IntangibleExistingThing">
        <rdfs:label>intangible existing thing</rdfs:label>
        <rdfs:comment>The set of things which are intangible yet exist
            in time.  E.g., the code of conduct for a formal dinner
            party, the standards for acceptance to Caltech as an
            undergrad, an account at Sears, etc.</rdfs:comment>
        <guid>bd58b123-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#StuffType"/>
        <rdfs:subClassOf rdf:resource="#SomethingExisting"/>
        <rdfs:subClassOf rdf:resource="#IntangibleIndividual"/>
    </daml:Class>
    <daml:Class rdf:ID="IntangibleIndividual">
        <rdfs:label>intangible individual</rdfs:label>
        <rdfs:comment>The collection of intangible   individuals, a
            subset of #$Intangible and of #$Individual.    The elements
            of #$IntangibleIndividual do not have mass, volume,   color,
            etc.  E.g., hours, ideas, algorithms, integers,   distances,
            and so on. However, as a subset of #$Individual,   this
            collection EXCLUDES sets and collections, which are
            elements of #$Intangible but not of #$IntangibleIndividual.</rdfs:comment>
        <guid>bd58e3e3-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#PartiallyIntangibleIndividual"/>
        <rdfs:subClassOf rdf:resource="#Intangible"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </daml:Class>
    <daml:Class rdf:ID="IntangibleObjectPredicate">
        <rdfs:label>intangible object predicate</rdfs:label>
        <rdfs:comment>A collection of predicates.  Each element of
            #$IntangibleObjectPredicate is a predicate used in
            assertions which describe the properties of intangible
            objects.  For example, #$arg3Isa,
            #$titleOfHeadOfPoliticalParty, #$religionOfRule, #$territoriesControlled.</rdfs:comment>
        <guid>bd58ecf0-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="#ExtensionalRepresentationPredicate"/>
    </daml:Class>
    <daml:Class rdf:ID="Integer">
        <rdfs:label>integers</rdfs:label>
        <rdfs:comment>The collection of all whole numbers; a subset of
            #$RationalNumber. Each element of #$Integer is a whole
            number,  resolvable into units with no fractional remainder.
            An integer may be  positive (e.g., 42), zero, or negative
            (e.g., -42).  Note that 42.0 is  a floating-point real
            number which is close to the integer 42 within  the
            tolerance of the floating-point representation but is not
            necessarily equal to the integer 42.  Therefore, 42.0 is not
            an  element of #$Integer.</rdfs:comment>
        <guid>bd589e12-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MeasurableAttributeType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#RationalNumber"/>
    </daml:Class>
    <daml:Class rdf:ID="IntelligentAgent">
        <rdfs:label>intelligent agents</rdfs:label>
        <rdfs:comment>The collection of all intelligent agents.  Each
            element of #$IntelligentAgent is an agent that is capable of
            having knowledge which it employs in its actions.  An
            intelligent agent #$knowsAbout certain things, and having
            #$beliefs (and possibly #$goals) concerning those things may
            influence its actions.  In addition to persons, Cyc
            considers certain social beings, such as business and
            government organizations, and intelligent machines, to be
            intelligent agents.  See also #$Agent, #$performedBy.</rdfs:comment>
        <guid>bd58a76f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Agent-Generic"/>
        <rdfs:subClassOf rdf:resource="#Agent"/>
    </daml:Class>
    <CapacityAttribute rdf:ID="IntendedFunction">
        <rdfs:label>intended function</rdfs:label>
        <rdfs:comment>An element of #$CapacityAttribute.  The attribute
            #$IntendedFunction characterizes an entity participating in
            a situation as doing so in its intended function.</rdfs:comment>
        <guid>bd588246-9c29-11b1-9dad-c379636f7270</guid>
    </CapacityAttribute>
    <daml:Class rdf:ID="IntensionalRepresentationPredicate">
        <rdfs:label>intensional representation predicate</rdfs:label>
        <rdfs:comment>A collection of predicates.  Each element of
            #$IntensionalRepresentationPredicate is a predicate used to
            form assertions about the properties of collections.  These
            predicates implement the intensional structure of the
            ontology; e.g., #$citizens, #$unitsMeasuringThisQuantity,
            #$hasDepartmentTypes, #$granuleOfTime,
            #$objectTypeTransported, #$contraryFeelings.</rdfs:comment>
        <guid>bd58b54a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
    </daml:Class>
    <daml:Class rdf:ID="InterActorSlot">
        <rdfs:label>inter actor slot</rdfs:label>
        <rdfs:comment>A collection of predicates.  Each element of
            #$InterActorSlot is a binary predicate used in assertions
            that state the relationship between two actors in some
            event, actual or implied.  The event in which the actors
            participate may or may not be explicitly represented in the
            KB.  For example, (#$authorOfPublication-IBT X Y) implies
            the existence of a #$Writing event in which X is the author
            and Y is the book written.  Examples: #$agreeingAgents,
            #$artisticWorksCreated, #$spouse, #$wornOn.</rdfs:comment>
        <guid>bd58f091-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="http://www.daml.org/2001/03/daml+oil#Property"/>
        <rdfs:subClassOf rdf:resource="#ExtensionalRepresentationPredicate"/>
    </daml:Class>
    <daml:Class rdf:ID="InterExistingObjectSlot">
        <rdfs:label>inter existing object slot</rdfs:label>
        <rdfs:comment>A collection of predicates.  Each element of
            #$InterExistingObjectSlot is a binary predicate used in
            assertions that relate two elements of #$SomethingExisting
            (i.e., two objects).  Examples: #$soldAt, #$derivedFrom,
            #$cohabitants, #$capitalCity, #$electricallyConnectedTo.</rdfs:comment>
        <guid>bd58d517-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="#ExtensionalRepresentationPredicate"/>
        <rdfs:subClassOf rdf:resource="http://www.daml.org/2001/03/daml+oil#Property"/>
    </daml:Class>
    <daml:Class rdf:ID="InterPersonalRelationSlot">
        <rdfs:label>human relationships</rdfs:label>
        <rdfs:comment>A collection of predicates.  Each element of
            #$InterPersonalRelationSlot is a binary predicate used to
            represent relationships between two instances of #$Animal.
            Examples: #$mate, #$friends.</rdfs:comment>
        <guid>be00bb8e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="#InterExistingObjectSlot"/>
    </daml:Class>
    <daml:Class rdf:ID="InterconvertibleUnitType">
        <rdfs:label>interconvertible unit types</rdfs:label>
        <rdfs:comment>A collection of collections.  Each element of
            #$InterconvertibleUnitType is a collections of functions
            (all belonging to #$UnitOfMeasure) that are used to measure
            quantities whose units are convertible into one another.
            Some collections of interconvertible units include
            #$UnitOfTime, #$UnitOfDistance, #$UnitOfCPUSpeed.   For
            example, #$UnitOfTime includes the functions #$HoursDuration
            and #$SecondsDuration (among others).  Any quantity denoted
            by applying one of those functions can also be expressed in
            terms of the other.  For example, (#$HoursDuration 1) equals
            (#$MinutesDuration 60).  On the other hand, not all the
            instances of #$UnitOfMeasure constitute types of
            interconvertible units. #$UnitOfRate is not an element of
            #$InterconvertibleUnitType; therefore, it does not
            necessarily follow that quantities denoted by its elements
            are interconvertible.  For example, #$TimesPerDay and
            #$MilesPerHour are both elements of #$UnitOfRate; however,
            quantities denoted using either function are not convertible
            into one another.</rdfs:comment>
        <guid>bd5888e2-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
    </daml:Class>
    <daml:Class rdf:ID="Interjection-SpeechPart">
        <rdfs:label>interjections</rdfs:label>
        <rdfs:comment>The collection of all interjections, also called
            exclamations. Interjections often serve a purely pragmatic
            or discourse function,   and can often stand alone as
            utterances. Examples: &apos;ugh&apos;,
            &apos;abracadabra&apos;, and &apos;wow!&apos;.</rdfs:comment>
        <guid>be0c0312-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#LinguisticObjectType"/>
        <rdf:type rdf:resource="#SpeechPart"/>
    </daml:Class>
    <daml:Class rdf:ID="InternalSensoryAttribute">
        <rdfs:label>internal sensory attribute</rdfs:label>
        <rdfs:comment>A collection of attributes.  Each element of
            #$InternalSensoryAttribute is a state of a sentient being in
            which it experiences within itself some somatic or
            psycho-somatic feeling, urge, or impulse.  An internal
            sensory attribute differs from an `external&apos; one in
            that the sensing agent refers the former to itself and the
            latter to external objects.  #$InternalSensoryAttribute
            includes states of feeling hungry, thirsty, tired, or in
            pain, as well as various bodily urges such as the urge to
            sneeze, burp, or urinate.  Sensory attributes that may occur
            with more or less intensity are represented by indicating a
            #$LevelOfPain, #$LevelOfPhysicalPleasure, #$LevelOfStress, etc.</rdfs:comment>
        <guid>bd58e809-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#UnorderedAttributeType"/>
        <rdfs:subClassOf rdf:resource="#SensoryAttribute"/>
    </daml:Class>
    <daml:Class rdf:ID="InternationalOrganization">
        <rdfs:label>international organizations</rdfs:label>
        <rdfs:comment>A collection of organizations.  An element of
            #$InternationalOrganization is an organization of
            international `scope&apos; -- that is, one which has
            substantial operations, physical facilities, or substantial
            membership in multiple countries.  International
            organizations may have individual #$Persons,
            #$Organizations, or countries as members.  They may be
            political or commercial in nature.  International
            organizations with countries as members belong to the subset
            #$InternationalOrganizationOfCountries.  Examples of
            #$InternationalOrganization: #$UnitedNationsOrganization,
            #$OPEC, #$IBMInc.  See also #$internationalOrg-MemberCountry.</rdfs:comment>
        <guid>bd5889e7-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#LegalAgent"/>
        <rdfs:subClassOf rdf:resource="#Organization"/>
    </daml:Class>
    <daml:Class rdf:ID="InternationalOrganizationOfCountries">
        <rdfs:label>organizations of countries</rdfs:label>
        <rdfs:comment>A collection of organizations; a subset of
            #$InternationalOrganization.  An element of
            #$InternationalOrganizationOfCountries is an organization
            whose members are countries (as represented by their
            goverments).  Examples: the United Nations, NATO, SEATO,
            OAU, the League of Arab States, and OPEC.</rdfs:comment>
        <guid>bdc17522-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#InternationalOrganization"/>
        <daml:disjointWith rdf:resource="#RegionalGovernment"/>
        <daml:disjointWith rdf:resource="#Country"/>
    </daml:Class>
    <daml:Class rdf:ID="InternationalWaters">
        <rdfs:label>international waters</rdfs:label>
        <rdfs:comment>The collection of all instances of #$BodyOfWater
            such that  they are considered to be accessible to
            international maritime traffic  and trade.  They may be
            subject to the customs and laws of a  particular country, or
            of the international community.  Examples  include instances
            of #$ShippingLane-International, the #$HighSeas, and,
            ordinarily, territorial waters like (#$TerritorialSeaFn
            #$UnitedStatesOfAmerica), unless these have been closed to
            shipping in  a particular context.</rdfs:comment>
        <guid>be57a01e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#GeographicalRegion"/>
        <rdfs:subClassOf rdf:resource="#BodyOfWater"/>
    </daml:Class>
    <daml:Class rdf:ID="IntervalBasedQuantitySlot">
        <rdfs:label>interval based quantity slots</rdfs:label>
        <rdfs:comment>A collection of binary predicates (i.e., slots).
            Flexibility in the representation of quantities is allowed
            in assertions made with the binary predicates that are
            elements of #$IntervalBasedQuantitySlot.  Each of these
            predicates, like those in their superset #$QuantitySlot, is
            a binary predicate whose second argument must be an element
            of #$ScalarInterval, i.e., an interval or point representing
            the value of some measurement.  For example, take the
            predicate #$heightOfObject, which relates an object to its
            vertical length.  Although we suppose that in reality there
            is only a single distance that is the height of some one
            particular object, our measurement systems are in practice
            less precise--and typically we need a measurement only
            within a certain tolerance.  For example, in measuring the
            #$heightOfObject of a person, usually a measurement to the
            nearest inch or centimeter will do.  Or we may be even less
            detailed in our descriptions, perhaps caring only whether
            someone is more than four feet tall, or `Tall enough to
            ride&apos; on an amusement park ride.  By allowing an
            #$IntervalEntry #$Format (qq.v.) in the second argument of
            the measuring predicate, we are telling Cyc that it&apos;s
            okay to describe the (e.g.) #$heightOfObject in several
            different ways, with varying levels of precision, SO LONG AS
            all of the measurements asserted for the same object
            `overlap&apos;.  For example, it is consistent to say both
            that Jenny is 4&apos;10&apos;&apos; tall, between four and
            five feet tall, and that she is `Tall enough to ride&apos;
            the Dodgems (provided that `Tall enough to ride&apos; is an
            interval whose minimum is at 4&apos;10&apos;&apos; or
            lower).  Even though there is only one height of a person in
            reality, using an #$IntervalBasedQuantitySlot allows us to
            represent that height in many different ways, avoiding
            contradictions while still checking for consistency.  For
            example, asserting both that Jeff&apos;s #$heightOfObject is
            5&apos;9&apos;&apos; and in the range 4.5-5.5 feet tall is
            an inconsistency.</rdfs:comment>
        <guid>bd588162-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="#QuantitySlot"/>
        <rdfs:subClassOf rdf:resource="#FunctionalSlot"/>
    </daml:Class>
    <Format rdf:ID="IntervalEntry">
        <rdfs:label>interval entry</rdfs:label>
        <rdfs:comment>Arguments to Cyc predicates may have specified
            formats that constrain their values.  #$IntervalEntry is the
            format used to constrain argument positions that must be
            filled with measurable quantities.  If #$IntervalEntry is
            the entry format of some Nth argument to a predicate PRED,
            then all assertions with PRED that contain the same
            particular values in their other arguments must have, in the
            Nth (i.e., #$IntervalEntry) argument, quantitative values
            that `overlap&apos;.  (See #$ScalarInterval and
            #$overlapsIntervals.)  #$IntervalEntry is provided because,
            for functional arguments like the second argument to
            #$volumeOfObject, we know that a single `real&apos; value
            does exist, though we may have various ways of concluding
            limits on that value in the form of intervals.  As long as
            all the intervals overlap, those assertions are not
            contradictory.  For more explanation, see #$Format and the
            related predicates #$arg1Format, #$arg2Format, etc.</rdfs:comment>
        <guid>bd5880e0-9c29-11b1-9dad-c379636f7270</guid>
    </Format>
    <daml:Class rdf:ID="IntervalOnNumberLine">
        <rdfs:label>intervals</rdfs:label>
        <rdfs:comment>A collection of measurable intervals; a subset of
            #$ScalarInterval.  Each element of #$IntervalOnNumberLine is
            an interval on the real number line; for example, the
            interval described by `numbers greater than zero and less
            than or equal to 10&apos;.  A common special case of such
            intervals is that of a single point on that line, viz., a
            number such as five or 125.  Note that such an interval need
            not be contiguous; e.g., `even numbers between Pi and the
            square root of 1000&apos; describes a legitimate element of
            #$IntervalOnNumberLine.  The collection #$RealNumber is a
            subset of #$IntervalOnNumberLine.  The elements of
            #$IntervalOnNumberLine are measured by elements of
            #$DimensionlessUnitOfMeasure, e.g., units or percentages.
            See also #$Unity, #$Percent, #$UnitOfMeasure.</rdfs:comment>
        <guid>bd58f32f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MeasurableAttributeType"/>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </daml:Class>
    <daml:Class rdf:ID="IntrinsicAxisOfObject">
        <rdfs:label>intrinsic axis of object</rdfs:label>
        <rdfs:comment>The collection of all intrinsic axes of objects
            (where those objects can be either spatially localized or
            abstract), being the conventional or obvious axes depending
            on shape, movement or function of the object.  For example,
            for a chest-of-drawers, the intrinsic axes are
            top-to-bottom, side-to-side, and front-to-back.  See also
            #$AxisFn.  Each intrinsic axis is a direction relative to
            the object&apos;s orientation.</rdfs:comment>
        <guid>bd58eb96-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="IntrinsicStateChangeEvent">
        <rdfs:label>changes of state</rdfs:label>
        <rdfs:comment>The collection of #$Events which are characterized
            primarily by a change in some intrinsic property of one main
            entity involved in the event (i.e., one of the #$actors).
            Such intrinsic changes may include changes of a thing&apos;s
            color, temperature, device state, size, and so on.  Events
            where the main change is extrinsic (such as a change in
            location or ownership) are not #$IntrinsicStateChangeEvents.
            In events which have more than one actor, the event may be
            an #$IntrinsicStateChangeEvent for one actor but not for
            another.  For example, in a #$FasteningSafetyBelt event, the
            #$SafetySeatBelt (the device used) goes from unconnected to
            connected (to itself), which is an intrinsic change;
            however, the agent who does the fastening (i.e., who is
            #$HandlingADevice) does not change intrinsically, but only
            in its configuration to the belt, an external object.
            Another example: in a #$HairCuttingEvent, the hair that is
            barbered undergoes an #$IntrinsicStateChangeEvent due to its
            role in that kind of event, but the barber undergoes no
            intrinsic change due to the hair cutting.  Note: Some
            events, such as an ice cube melting into a small puddle of
            water, could be represented in Cyc either as an
            #$IntrinsicStateChangeEvent or as a #$TransformationEvent
            but not (within a single micro-theory) as both; see the
            comments on those constants.</rdfs:comment>
        <guid>bd611277-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#Event"/>
    </daml:Class>
    <daml:Class rdf:ID="Invertebrate">
        <rdfs:label>invertebrates</rdfs:label>
        <rdfs:comment>A collection of animals; every element of
            #$Invertebrate is an animal that has no backbone.
            #$Invertebrate includes insects, molluscs, sea squirts,
            worms (in a large variety of worm phyla), and many others.
            Note: Although #$Invertebrate is a scientific category, it
            is not a standard taxon in the biological taxonomy, hence it
            is not an instance of #$BiologicalTaxon.</rdfs:comment>
        <guid>bd58984b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#OrganismClassificationType"/>
        <rdfs:subClassOf rdf:resource="#WildAnimal"/>
        <rdfs:subClassOf rdf:resource="#Animal"/>
        <daml:disjointWith rdf:resource="#Vertebrate"/>
    </daml:Class>
    <daml:Class rdf:ID="InvoluntaryBodyMovement">
        <rdfs:label>involuntary body movements</rdfs:label>
        <rdfs:comment>The collection of involuntary bodily movements,
            those movements in which an #$Animal&apos;s body does the
            action automatically -- the agent&apos;s consent
            doesn&apos;t enter into it.  Subsets of
            #$InvoluntaryBodyMovement include #$Heartbeating,
            #$Sneezing, #$Snoring, etc.</rdfs:comment>
        <guid>bd590662-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#BodyMovementEvent"/>
        <rdfs:subClassOf rdf:resource="#BodilyFunctionEvent-Involuntary"/>
    </daml:Class>
    <Organization rdf:ID="IranianStudentAgriculturalCenter01">
        <rdfs:label>iranian student agricultural center 01</rdfs:label>
        <rdfs:comment>The target of the Saudi Arabian  attack on Iran in
            Stage 3 of the HPKB Crisis Scenario.</rdfs:comment>
        <guid>bfdf0ffe-9c29-11b1-9dad-c379636f7270</guid>
    </Organization>
    <daml:Class rdf:ID="IrreflexiveBinaryPredicate">
        <rdfs:label>irreflexive binary predicate</rdfs:label>
        <rdfs:comment>A collection of predicates; the   subset of
            #$BinaryPredicate whose elements represent irreflexive
            relations.  A predicate F is an element of
            #$IrreflexiveBinaryPredicate if and only if F is a binary
            predicate and, for every X in the domain of F, (#$not (F X
            X)).  Examples: #$spouse, #$causes-ThingProp, #$northOf,
            #$temporallyDisjoint.   Note this additional restriction: A
            Cyc predicate F can be an element of
            #$IrreflexiveBinaryPredicate only if the type (i.e.,
            arg-Isa) constraint applicable to F&apos;s first argument is
            not disjoint with the type constraint applicable to F&apos;s
            second argument.  See also #$NoteOnArgumentTypingAndPropertiesOfRelations.</rdfs:comment>
        <guid>bd654be7-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="http://www.daml.org/2001/03/daml+oil#Property"/>
        <daml:disjointWith rdf:resource="#ReflexiveBinaryPredicate"/>
    </daml:Class>
    <SharedNote rdf:ID="IsaVsMainConstituentVsConstituents">
        <rdfs:label>isa vs main constituent vs constituents</rdfs:label>
        <rdfs:comment>When to use #$isa, #$mainConstituent, or
            #$constituents.  We develop the following example as a basis
            for explaining the differences.      Consider X, where
            (#$isa X #$Water). If we add some other substance(s) to X,
            to the point where the mixture acquires some salient
            characteristic(s) different from #$Water while retaining all
            the main properties, then we should assert
            (#$mainConstituent X W), where W is the original water --
            i.e., (#$isa W #$Water) -- and X is the whole new mixture of
            W with some other stuff(s).  Suppose we add enough enough
            other stuff that the physical properties of the mixture
            become significantly different from those of water; then we
            should assert only (#$constituents X W).      #$isa - Use
            #$isa if X would commonly be referred to as `water&apos;,
            including cases in which a small number of minor
            characteristics are different due to some admixture.
            Examples (arguably, 3 and 4 are borderline cases):     1. An
            instance of (#$PureFn #$Water) #$isa #$Water.    2. An
            instance of #$Water-Ingestible #$isa #$Water (but may have
            trace constituents).  3. An instance of #$PoolWater #$isa
            #$Water (but has some #$Chlorine as a salient
            #$constituents).   4. An instance of #$SeaWater #$isa
            #$Water (but has some #$Salt-NaCl as a salient
            #$constituents).        #$mainConstituent - Use
            #$mainConstituent when X contains other substances besides
            water, would NOT commonly referred to as `water&apos;, and
            yet has MOST of the material properties of water.  As a
            rule, most of the properties of the #$mainConstituent
            transfer to the substance it&apos;s a part of.  Often such
            substances have at least one important and/or perceptible
            characteristic (due to admixture) that is quite different
            from the properties of water.      Examples:     1. An
            instance of #$Lemonade is NOT called `water&apos; but has
            water as a #$mainConstituent.  It tastes quite different
            from water.  It has nutritional (caloric) value.  It is a
            human-made beverage.    2. An instance of #$Coffee-Beverage
            is NOT called `water&apos; but has water as a
            #$mainConstituent.  It tastes quite different from water.
            It contains caffeine.  Also, a specific inference about
            coffee&apos;s (lack of) transparency should override the
            transparency which would otherwise be inferred from the
            material properties of its #$mainConstituent.    3. Aqueous
            hydrochloric acid has many of the properties of its main
            constituent, water -- for example, transparency, viscosity,
            density, freezing point, etc.  But it also has the very
            important difference that it is highly acidic, caustic, etc.
            -- and attributing to it water&apos;s potability would be
            disastrous.    #$constituents - Use #$constituents when X is
            NOT commonly referred to as `water&apos; and has FEW
            properties of water, even though X contains water.
            Examples:    1. An instance of (#$SolidFn #$Gelatin) is NOT
            called `water&apos;, and though it has water among its
            #$constituents, gelatin has very few of the properties of
            water.   2. An instance of #$Concrete is NOT called
            `water&apos;; though it has water among its #$constituents,
            it has none of the salient characteristics of water.  3. An
            instance  of #$Mud is NOT called `water&apos; and has few
            characteristics of water, though water is among its
            #$constituents.  Its #$mainConstituent is some portion of #$Soil.</rdfs:comment>
        <guid>c0fb9e28-9c29-11b1-9dad-c379636f7270</guid>
    </SharedNote>
    <daml:Class rdf:ID="Island">
        <rdfs:label>islands</rdfs:label>
        <rdfs:comment>The collection of all islands, each being a
            #$LandBody (smaller than a #$Continent) surrounded by water.</rdfs:comment>
        <guid>bd58bb39-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#LandBody"/>
        <rdfs:subClassOf rdf:resource="#IslandsAndIslandGroup"/>
    </daml:Class>
    <SharedNote rdf:ID="IslandAndContinentNote">
        <rdfs:label>island and continent note</rdfs:label>
        <rdfs:comment>For most elements of #$GeopoliticalEntity,
            we&apos;ve been content in the #$DualistGeopoliticalMt
            simply to assert directly of the #$GeopoliticalEntity
            various geographical features, without reifying the physical
            extent of that entity. Why, then, do island-nations and
            territories like #$Iceland, #$Greenland, and #$Australia all
            have explicitly reified geographical &apos;doubles&apos;
            like #$Iceland-TheIsland,  #$Greenland-TheIsland, and
            #$ContinentOfAustralia ? Note that in the
            #$DualistGeopoliticalMt we still can assert various
            geographical properties directly of the
            #$GeopoliticalEntity. The reason for creating the
            geographical regions in addition to the geopolitical
            entities is that islands and continents have very different
            identity-conditions, ending and starting points, etc., than
            does a #$GeopoliticalEntity, even if we consider those
            geopolitical entities to be geographical regions also: the
            continent of Australia has existed for far longer than has
            the country of Australia.</rdfs:comment>
        <guid>be0b4987-9c29-11b1-9dad-c379636f7270</guid>
    </SharedNote>
    <daml:Class rdf:ID="IslandsAndIslandGroup">
        <rdfs:label>islands or island group</rdfs:label>
        <rdfs:comment>A collection of topographical features.  Each
            element of #$IslandsAndIslandGroup is either an #$Island or
            a group of islands (see #$Archipelago), or an area which
            includes part but not all of an island (#$IslandSubregion).
            Elements of #$IslandsAndIslandGroup include groups of
            scattered islands which do not form a natural geographical
            area; the chief reasons for representing such groups is that
            they are geopolitical areas and/or were historically
            significant.  Examples: #$FrenchPolynesia, #$Cyclades,
            #$OuterHebrides-Archipelago, #$Grenadines-Islands.</rdfs:comment>
        <guid>bd58bb7f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#LandTopographicalFeature"/>
    </daml:Class>
    <daml:Class rdf:ID="ItineraryDocument">
        <rdfs:label>itineraries</rdfs:label>
        <rdfs:comment>The collection of documents that contain
            information about the time/location of each leg of a trip,
            accomodations, etc.</rdfs:comment>
        <guid>c0fd5222-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="January">
        <rdfs:label>January</rdfs:label>
        <rdfs:comment>The collection of all Januaries,   the first month
            of the year in the #$JulianCalendar.</rdfs:comment>
        <guid>bd58b833-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MonthOfYearType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CalendarMonth"/>
    </daml:Class>
    <Agent rdf:ID="Japan">
        <rdfs:label>Japan</rdfs:label>
        <rdfs:comment>Japan (the Empire of Japan), a medium-sized
            #$IndependentCountry consisting of four islands off the east
            coast of the #$ContinentOfAsia, with several island
            possessions.  This includes Japan as it has been throughout
            history, geographically and politically.</rdfs:comment>
        <guid>bd5902a2-9c29-11b1-9dad-c379636f7270</guid>
    </Agent>
    <LivingLanguage rdf:ID="JapaneseLanguage">
        <rdfs:label>Japanese Language</rdfs:label>
        <rdfs:comment>The language of the people of #$Japan.</rdfs:comment>
        <guid>bd5886ea-9c29-11b1-9dad-c379636f7270</guid>
    </LivingLanguage>
    <daml:Class rdf:ID="Jealousy">
        <rdfs:label>jealousy</rdfs:label>
        <rdfs:comment>Intolerance of rivalry; feeling of suspicion and
            resentment of one&apos;s rivals.  This is a collection; for
            an explanation of a typical #$FeelingAttributeType, see
            #$Happiness. Note: #$Envy is related to covetousness,
            wanting (perhaps in the future) what someone else has;
            #$Jealousy is related to possessiveness, wanting to keep
            what is (or was or could have been) already yours.</rdfs:comment>
        <guid>bd58a4d3-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#FeelingAttributeType"/>
        <rdfs:subClassOf rdf:resource="#Resentment"/>
    </daml:Class>
    <daml:Class rdf:ID="JobAttribute">
        <rdfs:label>job attribute</rdfs:label>
        <rdfs:comment>A collection of attributes.  Each element of
            #$JobAttribute describes a general property of a job or type
            of job.  Examples of #$JobAttribute include #$BlueCollar,
            #$WhiteCollar, and #$FlexibleWorkingHours.</rdfs:comment>
        <guid>bd58c9c2-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#UnorderedAttributeType"/>
        <rdfs:subClassOf rdf:resource="#AttributeValue"/>
    </daml:Class>
    <CapacityAttribute rdf:ID="JobCapacity">
        <rdfs:label>job capacity</rdfs:label>
        <rdfs:comment>the attribute of performing something as a job</rdfs:comment>
        <guid>bd58817f-9c29-11b1-9dad-c379636f7270</guid>
    </CapacityAttribute>
    <daml:Class rdf:ID="Joint-AnimalBodyPart">
        <rdfs:label>joints</rdfs:label>
        <rdfs:comment>The collection of all joints of #$Animals.  A
            joint is the juncture between the ends or edges of abutting
            bones of the animal&apos;s skeleton.  Joints are of several
            types mechanically (e.g., ball-and-socket).  Many major
            joints function as hinges, in which the ends of the abutting
            bones are joined with ligaments and cushioned by cartilege.</rdfs:comment>
        <guid>bd58e376-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#AnimalBodyPartType"/>
        <rdfs:subClassOf rdf:resource="#SolidTangibleThing"/>
        <rdfs:subClassOf rdf:resource="#AnimalBodyPart"/>
        <rdfs:subClassOf rdf:resource="#BiologicalLivingObject"/>
    </daml:Class>
    <daml:Class rdf:ID="July">
        <rdfs:label>July</rdfs:label>
        <rdfs:comment>The collection of all Julys,   the seventh month
            of the year in the #$JulianCalendar.</rdfs:comment>
        <guid>bd58c1ad-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MonthOfYearType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CalendarMonth"/>
    </daml:Class>
    <daml:Class rdf:ID="JunctionOfPaths">
        <rdfs:label>junctions</rdfs:label>
        <rdfs:comment>The collection of junctions of paths, each
            junction being an arrangement of three or more distinct
            instances of #$Path-Customary such that they are all locally
            connected to each other by joining at the #$JunctionOfPaths.
            It includes the case of two or more paths that
            &apos;cross&apos; at a junction (because four path segments
            are thereby joined), but not the case in which the end of
            one path simply joins the end of another path, and no
            others.  For junctions in #$PathSystems, see
            #$junctionInSystem.  (Determining what constitutes a
            #$JunctionOfPaths depends on the #$PathTypes of the joined
            paths; if it is #$River then only a junction of rivers
            qualifies, not the place where a road joins a river.)</rdfs:comment>
        <guid>c0fbbdc4-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
    </daml:Class>
    <daml:Class rdf:ID="JunctionOfPipes">
        <rdfs:label>junction of pipes</rdfs:label>
        <rdfs:comment>The collection of all junctions of pipes or tubes.
            Each junction permits flow between any two
            #$Pipe-GenericConduits joined at that junction.  At any
            #$JunctionOfPipes, three or more distinct (non-overlapping)
            lengths of #$Pipe-GenericConduit must be joined at their
            ends at the junction.   (Some of the so-joined pipes may
            loop back to the same junction.)</rdfs:comment>
        <guid>bf53bf8d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#RegionType"/>
        <rdfs:subClassOf rdf:resource="#JunctionOfPaths"/>
    </daml:Class>
    <daml:Class rdf:ID="June">
        <rdfs:label>June</rdfs:label>
        <rdfs:comment>The collection of all Junes,   the sixth month of
            the year in the #$JulianCalendar.</rdfs:comment>
        <guid>bd58c1f0-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MonthOfYearType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CalendarMonth"/>
    </daml:Class>
    <daml:Class rdf:ID="JuvenileAnimal">
        <rdfs:label>young animals</rdfs:label>
        <rdfs:comment>An element of #$LifeStageType.  #$JuvenileAnimal
            is the collection of all animals that are not fully grown
            nor fully mature.</rdfs:comment>
        <guid>c10c20a8-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#LifeStageType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Animal"/>
        <rdfs:subClassOf rdf:resource="#PortableObject"/>
        <daml:disjointWith rdf:resource="#AdultAnimal"/>
    </daml:Class>
    <daml:Class rdf:ID="Killing-Biological">
        <rdfs:label>killing - biological</rdfs:label>
        <rdfs:comment>A collection of events.  In each instance of this
            collection, one living organism ends the life of another,
            either intentionally or unintentionally.</rdfs:comment>
        <guid>bd58ac2e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#AnimalActivity"/>
    </daml:Class>
    <daml:Class rdf:ID="KineticEnergyPoweredDevice">
        <rdfs:label>kinetic energy powered device</rdfs:label>
        <rdfs:comment>A collection of devices; a subset of
            #$PoweredDevice.  An instance of
            #$KineticEnergyPoweredDevice does not have an
            `on-board&apos; energy source incorporated into it, at least
            not one supplying the bulk of the power requirements of the
            device.  Instead, its operating power is supplied by the
            kinetic energy from something else in motion -- such as
            animal muscle power (including human labor), wind energy, or
            hydraulic power.  Examples include elements of the
            collections #$Hammer and #$Piano-Acoustic. (Contrast with
            #$SelfPoweredDevice --- e.g., an electric organ is a
            #$SelfPoweredDevice, not a #$KineticEnergyPoweredDevice.)</rdfs:comment>
        <guid>bd58942f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#PoweredDevice"/>
        <daml:disjointWith rdf:resource="#SelfPoweredDevice"/>
        <daml:disjointWith rdf:resource="#NuclearPoweredDevice"/>
    </daml:Class>
    <ThreeDimensionalShapeAttribute rdf:ID="KnotShaped">
        <rdfs:label>knot shaped</rdfs:label>
        <rdfs:comment>#$KnotShaped is the instance of #$ShapeAttribute
            shared by all knot-shaped objects.</rdfs:comment>
        <guid>c11652df-9c29-11b1-9dad-c379636f7270</guid>
    </ThreeDimensionalShapeAttribute>
    <daml:Class rdf:ID="KnowledgeBase">
        <rdfs:label>kb</rdfs:label>
        <rdfs:comment>A collection of intangible individuals;  a subset
            of #$Database-AbstractContent. Each element  of
            #$KnowledgeBase is a database that attempts to  represent
            the structure of at least part of the world.  Instances
            include the #$CycKB and #$SENSUS-Information1997.</rdfs:comment>
        <guid>bd58d211-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#Database-AbstractContent"/>
        <rdfs:subClassOf rdf:resource="#ConventionalClassificationSystem"/>
    </daml:Class>
    <daml:Class rdf:ID="Lake">
        <rdfs:label>lakes</rdfs:label>
        <rdfs:comment>A collection of topographical features.  Each
            instance of #$Lake is a land-locked body of water, typically
            but not necessarily of freshwater.  These are subdivided
            into freshwater [#$FreshWaterLake] and salt-water
            [#$InlandSea] lakes.  Examples: #$LakeMaracaibo,
            #$LakeWinnipeg, #$LakeTanganyika, #$LochNess-Lake,
            #$LakeErie, #$LakeTahoe, #$CaspianSea, #$BlackSea, #$DeadSea.</rdfs:comment>
        <guid>bd58b822-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#BodyOfWater"/>
    </daml:Class>
    <daml:Class rdf:ID="LandBody">
        <rdfs:label>landmasses</rdfs:label>
        <rdfs:comment>A collection of geographical regions.  Each
            element of #$LandBody is a cohesive chunk of land whose
            extent is principally defined by one or more bordering
            bodies of water (liquid or frozen).  Types of #$LandBody
            include the subsets #$Island and #$Continent.  Examples:
            #$Australia, #$ContinentOfNorthAmerica, #$Trinidad-Island,
            #$Crete-Island-Greece.  Areas of land defined by human
            occupation or political boundaries, e.g.,
            #$NorthernCalifornia or #$NorthernIreland, are elements of
            #$GeographicalRegion, but not of #$LandBody.</rdfs:comment>
        <guid>bd58e9d5-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#TopographicalFeature"/>
    </daml:Class>
    <daml:Class rdf:ID="LandTopographicalFeature">
        <rdfs:label>topographical features</rdfs:label>
        <rdfs:comment>A collection of geographical regions.  Each
            element of #$TopographicalFeature is a region of land
            distinguishable from surrounding regions by salient physical
            differences in surface texture, three-dimensional shape, or
            elevation.   For example, the #$ArabianPeninsula,
            #$MountZion, the #$SanAndreasFault, the #$GreatSmokyMountains.</rdfs:comment>
        <guid>bd58ce87-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#EarthStuff"/>
    </daml:Class>
    <daml:Class rdf:ID="LandTransportationDevice">
        <rdfs:label>land vehicles</rdfs:label>
        <rdfs:comment>A collection of physical devices. An instance of
            #$LandTransportationDevice is a device used for
            transportation on land.  Subsets of
            #$LandTransportationDevice include the collections
            #$Automobile, #$Snowmobile, #$TrainCar, #$HorseCarriage,
            #$BabyCarriage, #$Bicycle, #$SkateBoard, and more.</rdfs:comment>
        <guid>bd58d4ff-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#TransportationDevice"/>
    </daml:Class>
    <daml:Class rdf:ID="Language">
        <rdfs:label>languages</rdfs:label>
        <rdfs:comment>The collection of systems which use
            conventionalized signs or symbols. This includes dead
            languages, computer languages, unspoken languages, codes -
            anything which relates symbols to meaning.</rdfs:comment>
        <guid>bd58f489-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#CommunicationConvention"/>
        <daml:disjointWith rdf:resource="#Microtheory"/>
        <daml:disjointWith rdf:resource="#LinguisticObject"/>
        <daml:disjointWith rdf:resource="#TimeInterval"/>
        <daml:disjointWith rdf:resource="#AttributeValue"/>
    </daml:Class>
    <daml:Class rdf:ID="LawEnforcementOfficer">
        <rdfs:label>policemen</rdfs:label>
        <rdfs:comment>A collection of persons; a subset of
            #$Professional.  Each element of #$LawEnforcementOfficer is
            a person whose job is to prevent, detect, stop, and/or
            punish people committing illegal activities.  The collection
            #$LawEnforcementOfficer includes local, state, and special
            police (e.g., transit police), and federal agents (e.g.,
            border patrol, national security agents).  An instance of
            #$LawEnforcementOfficer typically also belongs to one of the
            following collections: #$StateEmployee,
            #$LocalGovernmentEmployee, or #$NationalGovernmentEmployee
            (see #$PublicSectorEmployee).</rdfs:comment>
        <guid>bd58e004-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#OccupationType"/>
        <rdfs:subClassOf rdf:resource="#Professional"/>
        <rdfs:subClassOf rdf:resource="#PublicSectorEmployee"/>
    </daml:Class>
    <daml:Class rdf:ID="LawEnforcementOrganization">
        <rdfs:label>law-enforcement organizations</rdfs:label>
        <rdfs:comment>#$LawEnforcementOrganization is the collection of
            official organizations whose purpose is to support or
            perform law enforcement.  This includes both police
            organizations, at all levels, and information agencies such
            as #$INTERPOL whose purpose is to assist and coordinate
            police activities. See the subset #$PoliceOrganization for
            only those organizations which are legally empowered to
            enforce laws.</rdfs:comment>
        <guid>bd58a14b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Organization"/>
        <rdfs:subClassOf rdf:resource="#LegalAgent"/>
    </daml:Class>
    <daml:Class rdf:ID="Layer">
        <rdfs:label>layers</rdfs:label>
        <rdfs:comment>The collection of all layers of things, each layer
            being a #$SheetOfSomeStuff that is #$sheetSurfaceConnected,
            or situated adjacent, surface-to-surface, to at least one
            surface or layer or region on one side, and possibly to
            other layers or surfaces on both sides.  A layer may be part
            of a larger object, or it may be an independent whole object
            such as a hide confined in a stack of hides.  A #$Layer is
            not a #$FreeSheet.  See the #$OneSidedVsTwoSidedObjectNote.</rdfs:comment>
        <guid>bdee251a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdfs:subClassOf rdf:resource="#SheetOfSomeStuff"/>
        <daml:disjointWith rdf:resource="#FreeSheet"/>
    </daml:Class>
    <PhysicalStructuralAttribute rdf:ID="Layered">
        <rdfs:label>layered</rdfs:label>
        <rdfs:comment>The physical structural attribute of being
            layered, laminate, or made of #$Layers, like stratified rock
            or an onion.  An object that is #$Layered has two or more
            parts that are each #$Layers.</rdfs:comment>
        <guid>be00c275-9c29-11b1-9dad-c379636f7270</guid>
    </PhysicalStructuralAttribute>
    <daml:Class rdf:ID="Leader">
        <rdfs:label>leaders</rdfs:label>
        <rdfs:comment>A collection of persons.  Each element of #$Leader
            is a person who heads an instance of #$Organization.
            Typically, a leader of an organization makes major decisions
            on behalf of the whole organization, has the authority to
            direct the organization&apos;s personnel to carry out those
            decisions, and is empowered to engage or negotiate with
            external agents to achieve the organization&apos;s goals.
            This collection includes leaders of #$subOrganizations, such
            as department heads within larger organizations.  Also, a
            single person may be a leader in more than one organization.
            In addition, see #$hasLeaders, #$Manager, and #$seniorExecutives.</rdfs:comment>
        <guid>c10af978-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PositionType"/>
        <rdfs:subClassOf rdf:resource="#Person"/>
    </daml:Class>
    <daml:Class rdf:ID="LeapYear">
        <rdfs:label>leap years</rdfs:label>
        <rdfs:comment>The collection of #$CalendarYears which are leap
            years; i.e., calendar years in which February has 29 days</rdfs:comment>
        <guid>bd58b9ba-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#CalendarYear"/>
        <daml:disjointWith rdf:resource="#NonLeapYear"/>
    </daml:Class>
    <daml:Class rdf:ID="Learning">
        <rdfs:label>learning events</rdfs:label>
        <rdfs:comment>The collection of all events, brief or extended,
            in which an agent is acquiring information or know-how.</rdfs:comment>
        <guid>bd58ef72-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#AtLeastPartiallyMentalEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="Leather">
        <rdfs:label>leather</rdfs:label>
        <rdfs:comment>A collection of tangible things.  Each element of
            #$Leather is a piece of tanned animal hide.  Pieces of
            #$Leather are commonly used as material inputs to the
            manufacture of shoes, gloves, upholstery, satchels and
            purses, saddles, etc.</rdfs:comment>
        <guid>bd58c1b3-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdfs:subClassOf rdf:resource="#FreeSheet"/>
        <rdfs:subClassOf rdf:resource="#SolidTangibleThing"/>
        <daml:disjointWith rdf:resource="#TextileProduct"/>
    </daml:Class>
    <daml:Class rdf:ID="LeftObject">
        <rdfs:label>left object</rdfs:label>
        <rdfs:comment>The collection of objects that are meant for, or
            are found on and distinctively structured for, the left side
            of some larger entity or ensemble of parts.  Examples
            include left hands, left shoes, left automobile turning signals.</rdfs:comment>
        <guid>bd58d4ba-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <daml:disjointWith rdf:resource="#RightObject"/>
    </daml:Class>
    <daml:Class rdf:ID="Leg">
        <rdfs:label>legs</rdfs:label>
        <rdfs:comment>The collection of all #$Animal appendages used for
            locomotion overland, supporting the animal and moving it
            along by walking, running, etc.  Thus wings, fins, etc., are
            not #$Legs.  The #$Foot-AnimalBodyPart is considered part of
            the #$Leg</rdfs:comment>
        <guid>bd5898cd-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#SymmetricAnatomicalPartType"/>
        <rdf:type rdf:resource="#AnimalBodyPartType"/>
        <rdfs:subClassOf rdf:resource="#BiologicalLivingObject"/>
    </daml:Class>
    <daml:Class rdf:ID="LegalAgent">
        <rdfs:label>legal agents</rdfs:label>
        <rdfs:comment>The collection of all legal agents; a subset of
            #$Agent.  A legal agent is one that has some legal status in
            a particular legal system.  At the very least, such an agent
            is recognized by some legal authority as having some kinds
            of rights and/or responsibilities as an agent (e.g.,
            #$citizens of Germany), or as being subject to certain
            restrictions and penalties (e.g., a company that has been
            blacklisted by Iraq).  Thus, instances of #$LegalAgent
            include agents that may have property rights, may be taxed,
            may have a government identification number, may be sued,
            may have an address, may buy or sell, etc.   Note:
            membership in this collection is very much dependent upon
            context.  In some societies, only adult males and various
            kinds of state-run organizations would be included in #$LegalAgents.</rdfs:comment>
        <guid>bd58a7b1-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#SocialBeing"/>
    </daml:Class>
    <daml:Class rdf:ID="LegalAgreement">
        <rdfs:label>legal agreements</rdfs:label>
        <rdfs:comment>A collection of microtheories; a subset of
            #$Agreement.  Each element of #$LegalAgreement is an
            agreement which has a legal status, i.e., is recognized as a
            valid agreement by a government.  #$LegalAgreement includes
            the elements in its subsets #$SalesContract,
            #$PublicHealthRegulations, #$Patent, #$InsurancePlan,
            #$Visa-Permit, and the different kinds of
            #$License-LegalAgreement -- among many others.</rdfs:comment>
        <guid>bd58b05e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Agreement"/>
    </daml:Class>
    <daml:Class rdf:ID="LegalCode">
        <rdfs:label>legal code</rdfs:label>
        <rdfs:comment>A collection of microtheories.  Each element of
            #$LegalCode is a microtheory for collecting all the
            instances of #$Law which hold in a given
            #$GeopoliticalEntity.  For example, #$LegalCode-ModernUnitedStates.</rdfs:comment>
        <guid>bd65c7ba-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdf:type rdf:resource="#MicrotheoryType"/>
        <rdfs:subClassOf rdf:resource="#GovernmentCOC"/>
    </daml:Class>
    <daml:Class rdf:ID="LegalCorporation">
        <rdfs:label>corporations</rdfs:label>
        <rdfs:comment>The collection of all #$Organizations which have
            been incorporated in accordance with the laws of a
            jurisdiction.  Each instance of #$LegalCorporation is a
            legal entity distinct from its owners and employees and is
            afforded certain powers both by law and by its incorporating
            documents.  Instances of #$LegalCorporation may be either
            #$CommercialOrganizations or #$NonProfitOrganizations.  Each
            instance of #$LegalCorporation organized in the
            #$UnitedStatesOfAmerica is incorporated under the laws of a
            particular state, although it may be empowered to carry on
            activities in any state.  Most American jurisdictions
            require that one of the words or abbreviations
            &apos;corporation&apos;, &apos;company&apos;,
            &apos;incorporated&apos;, &apos;corp&apos;, &apos;co&apos;,
            or &apos;inc&apos; be included in the registered name of a
            corporation.  Instances of #$LegalCorporation include
            #$IBMInc and #$Cycorp.</rdfs:comment>
        <guid>bd589295-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Organization"/>
        <rdfs:subClassOf rdf:resource="#LegalAgent"/>
        <daml:disjointWith rdf:resource="#SoleProprietorship"/>
    </daml:Class>
    <daml:Class rdf:ID="LegalGovernmentOrganization">
        <rdfs:label>government organizations</rdfs:label>
        <rdfs:comment>A collection of organizations.  An element of
            #$LegalGovernmentOrganization is an organization which is a
            part of, and funded by, the government of a geopolitical
            entity.  Examples include the #$InternalRevenueService,
            #$UnitedStatesNavy, and #$CityCouncilOfAustin (TX).  Some
            elements of #$LegalGovernmentOrganizations have legal
            standing in courts.</rdfs:comment>
        <guid>bd588aa6-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Organization"/>
        <rdfs:subClassOf rdf:resource="#LegalAgent"/>
    </daml:Class>
    <daml:Class rdf:ID="LegalHoliday">
        <rdfs:label>national holidays</rdfs:label>
        <rdfs:comment>The subset of #$Holidays which are typically
            declared to be #$Holidays by the governments of western
            countries, and which are therefore days on which most people
            governed by that government do not work and on which
            students do not attend classes.  Such #$Holidays may
            coincide with #$ReligiousHolidays, especially where there is
            a government-sanctioned religion.</rdfs:comment>
        <guid>be01edce-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#Holiday"/>
    </daml:Class>
    <daml:Class rdf:ID="LegalProfessional">
        <rdfs:label>legal professionals</rdfs:label>
        <rdfs:comment>A collection of persons; a subset of
            #$Professional.  Each element of #$LegalProfessional is a
            person working in the field of law. This collection includes
            lawyers, judges, paralegals, and law clerks.</rdfs:comment>
        <guid>bd58bab4-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#OccupationType"/>
        <rdfs:subClassOf rdf:resource="#Professional"/>
    </daml:Class>
    <daml:Class rdf:ID="LevelOfAConstruction">
        <rdfs:label>stories</rdfs:label>
        <rdfs:comment>The levels, also called floors or stories, of a
            #$ConstructionArtifact.  Levels are regions in space; they
            are not two-dimensional planes.</rdfs:comment>
        <guid>bd58ca09-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#SpaceInAHOC"/>
    </daml:Class>
    <daml:Class rdf:ID="LevelOfDiscomfort">
        <rdfs:label>levels of discomfort</rdfs:label>
        <rdfs:comment>An #$AttributeType whose elements represent the
            various levels of discomfort that may be felt by a
            perceptual agent.  Typically, the agent must be a living
            entity.  Typically, the sensation is an internal feeling,
            and is more of a long-lasting dull ache than a sharp pain
            (see: #$LevelOfPain).</rdfs:comment>
        <guid>bd588a7f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#SensoryReactionType"/>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
        <rdfs:subClassOf rdf:resource="#InternalSensoryAttribute"/>
        <rdfs:subClassOf rdf:resource="#AnimalPhysiologicalAttribute"/>
    </daml:Class>
    <daml:Class rdf:ID="LevelOfExhaustion">
        <rdfs:label>exhaustion</rdfs:label>
        <rdfs:comment>An #$AttributeType whose elements represent the
            qualitative degrees of exhaustion that an animal may feel.
            Note that this predicate is NOT properly used for any other
            purpose (e.g., to describe metal fatigue, or the depletion
            of natural resources, or the gradual inhibition that a
            single cell devlops to repeated stimuli, etc., even though
            in English the words `exhaustion&apos; and `fatigue&apos;
            have those meanings.)  This is a good example of how
            Cyc&apos;s internal representation must, and does,
            disambiguate different concepts even though they might be
            metaphors for each other, and even though those distinct
            meanings might be mixed together at a word level in a
            natural language like English.</rdfs:comment>
        <guid>bd58a0aa-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PhysicalUrgeType"/>
        <rdf:type rdf:resource="#SensoryReactionType"/>
        <rdfs:subClassOf rdf:resource="#AnimalPhysiologicalAttribute"/>
        <rdfs:subClassOf rdf:resource="#InternalSensoryAttribute"/>
    </daml:Class>
    <daml:Class rdf:ID="LevelOfHunger">
        <rdfs:label>hungers</rdfs:label>
        <rdfs:comment>A collection of #$AnimalPhysiologicalAttributes
            that express how hungry an #$Animal is (e.g., #$Hungry,
            #$NotHungry, #$Starving).  These #$LevelOfHunger attributes
            are the first argument to the predicate #$hungerLevelOf (q.v.).</rdfs:comment>
        <guid>bd58a236-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PhysicalUrgeType"/>
        <rdfs:subClassOf rdf:resource="#InternalSensoryAttribute"/>
        <rdfs:subClassOf rdf:resource="#AnimalPhysiologicalAttribute"/>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </daml:Class>
    <daml:Class rdf:ID="LevelOfPain">
        <rdfs:label>pains</rdfs:label>
        <rdfs:comment>An #$AttributeType whose elements represent the
            qualitative levels of pain that may be felt by a perceptual
            agent.  Although the agent is often a living entity, this is
            not required.  The source of the pain could be either
            external or internal; in either case, the subjective feeling
            is generally `sharper&apos; and hopefully shorter-lived than
            just `a feeling of discomfort&apos; (see: #$LevelOfDiscomfort.)</rdfs:comment>
        <guid>bd58ae66-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#SensoryReactionType"/>
        <rdfs:subClassOf rdf:resource="#SensoryAttribute"/>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
        <rdfs:subClassOf rdf:resource="#LevelOfDiscomfort"/>
    </daml:Class>
    <daml:Class rdf:ID="LevelOfRelaxationFeeling">
        <rdfs:label>level of relaxation feeling</rdfs:label>
        <rdfs:comment>An #$AttributeType whose elements represent the
            qualitative levels of comfort/relaxation/ease that an animal
            may have.  This feeling is generally internal, and
            relatively long-lasting (compared with, e.g., the duration
            of a painful twinge.)  Any positive degree of this
            #$LevelOfRelaxationFeeling is incompatible with a high level
            of #$MuscleTenseness, a high #$LevelOfPain, or a high #$LevelOfDiscomfort.</rdfs:comment>
        <guid>bd58d7e3-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#SensoryReactionType"/>
        <rdfs:subClassOf rdf:resource="#InternalSensoryAttribute"/>
    </daml:Class>
    <daml:Class rdf:ID="LexicalItem">
        <rdfs:label>lexical item</rdfs:label>
        <rdfs:comment>The collection of items which form the lexicon of
            a language. These include both free morphemes, like
            &apos;dog&apos;, and bound morphemes, like affixes.</rdfs:comment>
        <guid>be1903ee-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#LinguisticObjectType"/>
        <rdfs:subClassOf rdf:resource="#LinguisticObject"/>
        <rdfs:subClassOf rdf:resource="#HLReifiedDenotationalTerm"/>
    </daml:Class>
    <daml:Class rdf:ID="LexicalWord">
        <rdfs:label>words</rdfs:label>
        <rdfs:comment>The collection of all words. A lexical word is a
            free morpheme; it need not be bound to another lexical item.
            Note that inflectional forms of a word, if there are such,
            do not constitute distinct words.  Examples of
            #$LexicalWord: #$Aluminum-TheWord, #$Confetti-TheWord,
            #$To-TheWord, #$Confetti-TheWord, #$Hang-Glide-MWW.</rdfs:comment>
        <guid>bd58e4ae-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#LinguisticObjectType"/>
        <rdfs:subClassOf rdf:resource="#LexicalItem"/>
    </daml:Class>
    <daml:Class rdf:ID="LifeStageType">
        <rdfs:label>life stage type</rdfs:label>
        <rdfs:comment>#$LifeStageType is a collection of collections.
            Each            member of this collection is itself a
            collection whose            members are organisms which all
            share a specific level            of biological or social
            development.  One member of            #$LifeStageType is
            #$HumanChild, which has as its members            all human
            children.  Other members of #$LifeStageType
            include #$HumanAdult and #$HumanInfant.</rdfs:comment>
        <guid>bd58fab5-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#ExistingObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="LifeThreateningCondition">
        <rdfs:label>life threatening conditions</rdfs:label>
        <rdfs:comment>A collection of ailments which are distinguished
            by the shared characteristic that if left untreated, those
            ailments may cause an organism to die (but will not
            certainly do so).  Cases of #$Poisoning and of #$Pneumonia
            are often instances of #$LifeThreateningCondition.  Cf.
            #$TerminalPhysiologicalCondition.  </rdfs:comment>
        <guid>c0fd50b1-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PhysiologicalConditionType"/>
        <rdfs:subClassOf rdf:resource="#PhysiologicalCondition"/>
    </daml:Class>
    <daml:Class rdf:ID="LightIntensity">
        <rdfs:label>light intensity</rdfs:label>
        <rdfs:comment>A collection of attributes; a subset of
            #$ScalarInterval.  Each element of #$LightIntensity is a
            characterization of how brightly illuminated a location is.
            (At the low extreme is total darkness.)  The light intensity
            of a location is indicated with the predicate #$illuminationLevel.</rdfs:comment>
        <guid>bd58e0ed-9c29-11b1-9dad-c379636f7270</guid>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
        <rdfs:subClassOf rdf:resource="#PhysicalAttribute"/>
        <rdfs:subClassOf rdf:resource="#SensoryAttribute"/>
    </daml:Class>
    <daml:Class rdf:ID="LightingDevice">
        <rdfs:label>lights</rdfs:label>
        <rdfs:comment>A collection of physical devices.  An instance of
            #$LightingDevice has the #$primaryFunction of providing
            light.  The light provided may be provided in different ways
            and for different specialized purposes.  For example, it may
            be for general illumination of a fixed area (as by instances
            of #$Candle, #$Lantern, #$ElectricLamp, and #$Streetlight);
            or it may be for specially directed illumination (as by
            instances of #$AutomotiveLight and #$Flashlight); or it may
            be for use in a signal or sign (as by instances of
            #$TrafficLight and #$IndicatorLight); or it may be for some
            other special purposes (as by instances of StrobeLight).</rdfs:comment>
        <guid>bd58a5ec-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#PoweredDevice"/>
        <rdfs:subClassOf rdf:resource="#PhysicalDevice"/>
    </daml:Class>
    <daml:Class rdf:ID="LightningEvent">
        <rdfs:label>lightning</rdfs:label>
        <rdfs:comment>The collection of lightning flashes, events in
            which the atmosphere discharges electricity.</rdfs:comment>
        <guid>bd589322-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#Emission"/>
        <rdfs:subClassOf rdf:resource="#ImmediateWeatherProcess"/>
    </daml:Class>
    <daml:Class rdf:ID="Line">
        <rdfs:label>lines</rdfs:label>
        <rdfs:comment>A subset of #$GeometricThing.  Each instance of
            #$Line is a one-dimensional path through two- or
            three-dimensional space, whether curved or straight.
            Formally, this is a 1-manifold. Examples include spatially
            localized objects, such as the equator, as well as abstract lines.</rdfs:comment>
        <guid>bd5906cb-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#GenericShapeType"/>
        <rdfs:subClassOf rdf:resource="#GeometricThing"/>
        <daml:disjointWith rdf:resource="#SpacePoint"/>
        <daml:disjointWith rdf:resource="#TwoDimensionalShape"/>
        <daml:disjointWith rdf:resource="#ThreeDimensionalShape"/>
    </daml:Class>
    <ShapeAttribute rdf:ID="Linear">
        <rdfs:label>linear</rdfs:label>
        <rdfs:comment>The shape attribute shared by anything that has
            only one discernible or relevant dimension.  Examples
            include geometric lines and line segments, curved line
            segments and arcs, and physical objects whose length is the
            only relevant dimension, e.g., a length of wire, if we are
            in a context in which other dimensions of the wire are small
            enough to be ignored, or the outer rim of a glass.  Also
            note that this attribute holds of anything which is linear
            even if the object does not remain in a single plane.  For
            instance, a spiral-shaped line or a length of string wrapped
            around a pencil may be linear despite the fact that they do
            not remain in a single two dimensional plane.</rdfs:comment>
        <guid>bf628acb-9c29-11b1-9dad-c379636f7270</guid>
    </ShapeAttribute>
    <ShapeAttribute rdf:ID="Linear-Planar">
        <rdfs:label>linear - planar</rdfs:label>
        <rdfs:comment>The shape attribute shared by all lines, both
            curved and straight that belong to objects that remain in a
            single two-dimensional plane.  Spatial things in addition to
            purely geometric objects can have this attribute.  For
            instance, in some microtheories one might deem a length of
            wire to be linear insofar as width, height or radius is
            irrelevant to the kind of reasoning required.</rdfs:comment>
        <guid>bdbb00b2-9c29-11b1-9dad-c379636f7270</guid>
    </ShapeAttribute>
    <ShapeAttribute rdf:ID="Linear-Straight">
        <rdfs:label>linear - straight</rdfs:label>
        <rdfs:comment>The shape attribute shared by all one-dimensional
            objects that are not curved.  Once again, note that this is
            very context dependent.  To take a very straightforward
            example, if building a deck the standards for being deemed
            to have the attribute #$Linear-Straight may vary
            considerably from the standards for straightness when
            framing a home.</rdfs:comment>
        <guid>c0af9d58-9c29-11b1-9dad-c379636f7270</guid>
    </ShapeAttribute>
    <daml:Class rdf:ID="LinguisticObject">
        <rdfs:label>linguistic object</rdfs:label>
        <rdfs:comment>The collection of all intangible objects that are
            parts of some language or other, in a broad sense of  part
            whereby #$LinguisticObject&apos;s specializations include
            such diverse collections as #$Title, #$WordSense,
            #$SententialConstituent, #$NonlexicalLinguisticObject, and #$LinguisticAttribute.</rdfs:comment>
        <guid>bd58d0fb-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#LinguisticObjectType"/>
        <rdfs:subClassOf rdf:resource="#AbstractInformationalThing"/>
        <daml:disjointWith rdf:resource="#TimeInterval"/>
        <daml:disjointWith rdf:resource="#Microtheory"/>
        <daml:disjointWith rdf:resource="#Language"/>
        <daml:disjointWith rdf:resource="#UnitOfMeasure"/>
        <daml:disjointWith rdf:resource="#SomethingExisting"/>
    </daml:Class>
    <daml:Class rdf:ID="LinguisticObjectType">
        <rdfs:label>linguistic object type</rdfs:label>
        <rdfs:comment>#$LinguisticObjectType is the collection of
            subcollections of #$LinguisticObject.</rdfs:comment>
        <guid>bd5900f4-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#ObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="LiquidAsset">
        <rdfs:label>liquid assets</rdfs:label>
        <rdfs:comment>A collection of objects.  Each element of
            #$LiquidAsset is either an instance of #$Currency or some
            asset that is readily convertible to currency by selling or
            borrowing againstit.  Examples: stocks, bonds, money market accounts.</rdfs:comment>
        <guid>bd58afb3-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#SomethingExisting"/>
    </daml:Class>
    <StateOfMatter-SolidLiquidGaseous rdf:ID="LiquidStateOfMatter">
        <rdfs:label>liquid state of matter</rdfs:label>
        <rdfs:comment>A basic physical state of matter.
            #$LiquidStateOfMatter characterizes pieces of matter which
            are at a temperature and pressure such that the molecules of
            the matter move freely relative to their neighbors, but are
            not excited enough to break free.  Liquid objects are
            characterized at the macroscopic level by special qualities
            of flow, such as being #$Pourable and conforming to whatever
            container they occupy.  Examples of things that typically
            have this attribute are: liquid nitrogen; the water
            component of a gallon of seawater; a lump of mercury at room
            temperature; and some molten silver about to be poured into
            a teapot mold.</rdfs:comment>
        <guid>bd590948-9c29-11b1-9dad-c379636f7270</guid>
    </StateOfMatter-SolidLiquidGaseous>
    <daml:Class rdf:ID="LiquidTangibleThing">
        <rdfs:label>liquid objects</rdfs:label>
        <rdfs:comment>A collection of pieces of tangible stuff.  Each
            element of #$LiquidTangibleThing is a tangible thing which
            shares many of the properties that matter in the
            #$LiquidStateOfMatter exhibits; i.e., its volume is
            relatively constant at varying pressures, and its freely
            changes shape (e.g., to conform to the shape a vessel
            containing it). Liquids can never be said to break.  Note
            that not all instances of #$LiquidTangibleThing are in
            #$LiquidStateOfMatter, because that attribute applies to
            quantities of a single type of substance.  Examples of
            #$LiquidTangibleThing: substances in #$LiquidStateOfMatter,
            such the water in a room-temperature glass of beer;
            liquid/liquid mixtures like the beer itself; solutions of
            solids in liquids, such as sea water; emulsions such as
            milk; and suspensions of solids in liquids like blood. Cf.
            #$FluidTangibleThing and #$GaseousTangibleThing.</rdfs:comment>
        <guid>bd58d2a0-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TangibleStuffStateType"/>
        <rdfs:subClassOf rdf:resource="#FluidTangibleThing"/>
        <daml:disjointWith rdf:resource="#Molecule"/>
        <daml:disjointWith rdf:resource="#GaseousTangibleThing"/>
    </daml:Class>
    <daml:Class rdf:ID="List">
        <rdfs:label>lists</rdfs:label>
        <rdfs:comment>The collection of all lists or finite sequences of
            items, as an abstract notion.  A #$List is a special kind of
            #$Tuple that is a finite structure with a first and last
            member-position, and for each member-postion but the last,
            there is a successor member-position.   A #$List, like other
            #$Tuples, allows repetition of its members -- the same item
            can appear at multiple member-positions in the list.  A list
            can be viewed formally as a function from a finite index set
            of counting numbers, beginning with one, into the domain of
            #$Things or perhaps some more restrictive domain.  Unlike
            #$Series, #$List is purely abstract and the only implied
            relation between an item and its successor is the successor
            relation of the list itself.  #$List is, technically, more
            specific than #$Tuple only in that the index set must be the
            counting numbers in their usual order rather than some other
            index set.  Note that the operators defined on lists do not
            correspond exactly to similar operators in Common LISP;
            #$List includes commonsense lists like grocery list and the
            first item on a list is at position number 1.</rdfs:comment>
        <guid>bed50053-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#StuffType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#Tuple"/>
    </daml:Class>
    <Format rdf:ID="ListTheFormat">
        <rdfs:label>list the format</rdfs:label>
        <rdfs:comment>A Format or datatype.  Multiple copies of entries,
            &amp; any number of entries, are OK; and order matters;
            i.e., if you change the order of two different elements of a
            list, the resultant list is not equal to the original one</rdfs:comment>
        <guid>bd58f26f-9c29-11b1-9dad-c379636f7270</guid>
    </Format>
    <daml:Class rdf:ID="ListWithoutRepetition">
        <rdfs:label>OSET</rdfs:label>
        <rdfs:comment>The collection of all those #$Lists, for each of
            which, no element appears more than once in the list.  A
            #$ListWithoutRepetition is sometimes called an
            &apos;OSET&apos;.  Note that a #$ListWithoutRepetition
            amounts to a finite #$TotalOrdering-Strict.  (In general a
            #$List and #$Series may have repeated elements.)  See also #$SeriesWithoutRepetition.</rdfs:comment>
        <guid>bdb9081e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#List"/>
    </daml:Class>
    <daml:Class rdf:ID="ListeningDeliberately">
        <rdfs:label>listening</rdfs:label>
        <rdfs:comment>The collection of events in which an #$Agent
            deliberately facilitates and does #$Hearing.</rdfs:comment>
        <guid>bd58c048-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#AccessingAnIBT"/>
        <rdfs:subClassOf rdf:resource="#Hearing"/>
        <rdfs:subClassOf rdf:resource="#Perceiving-Voluntary"/>
    </daml:Class>
    <daml:Class rdf:ID="Liver">
        <rdfs:label>livers</rdfs:label>
        <rdfs:comment>The collection of all living #$Animal livers.
            Each instance of #$Liver is a large compound
            #$InternalOrgan.  A #$Liver breaks down dead
            #$RedBloodCells, removes certain poisons and waste material
            from the blood stream, creates glycogen from sugars and
            proteins, stores glycogen, removes certain chemicals from
            the blood, secretes bile (#$BileTheSecretion) which is used
            for digestion,and regulates metabolism of carbohydrates,
            #$Proteins, #$Vitamins, #$Minerals, and fats.</rdfs:comment>
        <guid>bd58a6a6-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#UniqueAnatomicalPartType"/>
        <rdf:type rdf:resource="#AnimalBodyPartType"/>
        <rdfs:subClassOf rdf:resource="#BiologicalLivingObject"/>
    </daml:Class>
    <daml:Class rdf:ID="LivingLanguage">
        <rdfs:label>living languages</rdfs:label>
        <rdfs:comment>#$LivingLanguage, a subset of #$NaturalLanguage,
            is the collection of all natural languages which have some
            native speaker(s).</rdfs:comment>
        <guid>bd58fc55-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#NaturalLanguage"/>
        <daml:disjointWith rdf:resource="#DeadLanguage"/>
    </daml:Class>
    <daml:Class rdf:ID="LocalGovernmentOrganization">
        <rdfs:label>local government organizations</rdfs:label>
        <rdfs:comment>A collection of government organizations; a subset
            of #$LocalOrganization.  An element of
            #$LocalGovernmentOrganization is any government organization
            -- whether federal, state, county, or municipal -- that is
            specific to, i.e., has jurisdiction and/or services
            generally limited to, one (local) location.  For example, a
            Board of Education of a particular school district is a
            #$LocalGovernmentOrganization, because its authority extends
            to schools in a limited (local) area; in the U.S., such a
            Board answers to another #$LocalGovernmentOrganization,
            typically a city or township government.  In another
            example, an element of #$VeteransAdministrationMedicalCenter
            is a local organization in terms of its service area, but
            bureaucratically it belongs to the U.S. Federal government;
            thus, #$VeteransAdministrationMedicalCenter is a subset of
            both #$LocalGovernmentOrganization and #$USFederalGovernmentOrganization.</rdfs:comment>
        <guid>c10c233a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#LegalGovernmentOrganization"/>
        <rdfs:subClassOf rdf:resource="#LocalOrganization"/>
    </daml:Class>
    <daml:Class rdf:ID="LocalOrganization">
        <rdfs:label>local organizations</rdfs:label>
        <rdfs:comment>A collection of organizations.  An element of
            #$LocalOrganization is an organization having local
            `scope&apos; -- that is, members distributed in a local area
            (a #$Neighborhood, #$City, rural region, etc.) or having a
            local area of activity and concern, as opposed to statewide,
            national, or international organizations.</rdfs:comment>
        <guid>bd58eedb-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Organization"/>
    </daml:Class>
    <daml:Class rdf:ID="LocomotionEvent-Animal">
        <rdfs:label>locomotion event - animal</rdfs:label>
        <rdfs:comment>A collection of events; a subset of
            #$LocomotionProcess-Generic.  In an instance of
            #$LocomotionEvent-Animal, the #$objectMoving (at least the
            object that is playing the role of #$doneBy in the event) is
            an #$Animal.  In addition to episodes of walking and
            swimming, #$LocomotionEvent-Animal includes events in which
            an agent moves itself using a device, with that agent
            supplying the motive force to the device -- as in instances
            of #$PedalingABicycle, #$IceSkating, #$InLineSkating, etc.
            Since the locomotor virtually always supplies the vast
            majority of the force required to make the motion happen, it
            is safe to infer that IF something plays the role of
            #$providerOfMotiveForce, THEN it is an #$objectMoving.  In
            certain abnormal situations this rule will make the wrong
            conclusions: e.g. if a mountain climber&apos;s assent is
            aided by another stationary person above.  Some locomotion
            events are also transportation events, e.g. when someone is
            walking while carrying something else.  Note: Elements of
            #$LocomotionEvent-Animal may be `non-homogeneous&apos; (by
            contrast, each #$LocomotionProcess-Animal is
            `homogeneous.&apos;)  That is, if you take #$timeSlices of a
            #$LocomotionEvent-Animal, they may or may not be
            #$LocomotionEvent-Animals.  E.g., even though a
            mountain-climbing event is a #$LocomotionEvent-Animal, if
            you take a time-slice of it  -- even a quite long time-slice
            of it! -- that whole time-slice could be where you were
            tying your climbing rope to a piton you&apos;d just pounded
            into the mountainside, and that tying event is not a
            #$LocomotionEvent-Animal.  Note that this is not quite the
            same thing as the granularity of a process, such as
            #$AnimalWalkingProcess, where if you take a fine enough
            time-slice you are just lifting your leg up into the air.
            In the case of a #$LocomotionEvent-Animal such as scaling a
            sheer rock wall, very little of the time actually involves
            the motion of your body up the wall. </rdfs:comment>
        <guid>bd58e64e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#AnimalActivity"/>
    </daml:Class>
    <daml:Class rdf:ID="LocomotionProcess-Animal">
        <rdfs:label>locomotion processes</rdfs:label>
        <rdfs:comment>The collection of processes in which an animal
            moves from one place to another by its own power.  A
            #$LocomotionProcess-Animal is an activity considered as a
            #$TemporalStuffType, in which any time-slice of the activity
            can also be considered an instance of that activity.
            Subsets of #$LocomotionProcess-Animal include:
            #$AnimalWalkingProcess, #$Brachiating, #$Climbing,
            #$WheelchairLocomotionEvent, #$Boring-Locomotion, etc.</rdfs:comment>
        <guid>bd58e68c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#LocomotionEvent-Animal"/>
        <rdfs:subClassOf rdf:resource="#Movement-TranslationProcess"/>
    </daml:Class>
    <daml:Class rdf:ID="LogicalConnective">
        <rdfs:label>logical connective</rdfs:label>
        <rdfs:comment>A collection of mathematical objects, including
            the basic logical connectives.  Each element of
            #$LogicalConnective is a #$Relation which takes one or more
            truth-valued expressions (sentences) as arguments and
            returns a truth-valued sentence.  The elements of
            #$LogicalConnective include #$and, #$or, #$not, and #$implies.</rdfs:comment>
        <guid>bd58b9f9-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#RelationshipType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#TruthFunction"/>
    </daml:Class>
    <daml:Class rdf:ID="Loneliness">
        <rdfs:label>lonely</rdfs:label>
        <rdfs:comment>The disagreeable feeling of being without company.
            This is a collection; for an explanation of a typical
            #$FeelingAttributeType, see #$Happiness.  Some more
            specialized #$FeelingAttributeTypes are #$Loneliness,
            #$Solitude, etc.</rdfs:comment>
        <guid>c0ed0b82-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#FeelingAttributeType"/>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </daml:Class>
    <PhysicalStructuralAttribute rdf:ID="LongAndThin">
        <rdfs:label>long and thin</rdfs:label>
        <rdfs:comment>A physical attribute.  #$LongAndThin is the
            #$PhysicalStructuralAttribute that characterizes a tangible
            object which has one dimension whose length exceeds that of
            each of the other two dimensions by at least a factor of
            three.  E.g., pencils, straws, telephone wire, submarines,
            skyscrapers. Cf. #$SheetShaped.</rdfs:comment>
        <guid>c0f2a0fe-9c29-11b1-9dad-c379636f7270</guid>
    </PhysicalStructuralAttribute>
    <daml:Class rdf:ID="LongitudeLine">
        <rdfs:label>lines of longitude</rdfs:label>
        <rdfs:comment>A line between the #$NorthPole and the
            #$SouthPole, intersecting the #$Equator at 90 degrees.</rdfs:comment>
        <guid>bddab4a1-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="LookingForSomething">
        <rdfs:label>searches</rdfs:label>
        <rdfs:comment>Searching for something with the intent to find
            it.  Instances of failure to find the object of the search
            are still instances of #$LookingForSomething.</rdfs:comment>
        <guid>bd58fb33-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#Perceiving-Voluntary"/>
    </daml:Class>
    <daml:Class rdf:ID="LosingUserRights">
        <rdfs:label>losses of user rights</rdfs:label>
        <rdfs:comment>A collection of events.  In an instance of
            #$LosingUserRights, some #$Agent loses possession of
            something.  Thus, in such an event, that agent loses a
            previously held right (viz., some #$UserRightsAttribute) to
            use some item.  The item in question is identified as the
            #$objectOfPossessionTransfer, and the agent is the
            #$fromPossessor (i.e., the one from whom possession is
            taken).  The #$Agent may or may not be a #$deliberateActors
            in the event; e.g., selling one&apos;s car is done on
            purpose, but having one&apos;s car repossessed probably
            isn&apos;t.  If either of those two events happen to you,
            though, it is an element of the collection #$LosingUserRights.</rdfs:comment>
        <guid>bd641ca1-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#ChangeInUserRights"/>
        <rdfs:subClassOf rdf:resource="#TransferOut"/>
    </daml:Class>
    <daml:Class rdf:ID="Love">
        <rdfs:label>loves</rdfs:label>
        <rdfs:comment>Strong affection for another agent arising out of
            kinship or personal ties.  Love may be felt towards things,
            too: warm attachment, enthusiasm, or devotion.  This does
            not, however, mean something as specialized/metaphorical as
            `Fred loves to eat ice cream&apos; or `Ethel loves to get
            her way.&apos;  #$Love is a collection, as further explained
            under #$Happiness.  Specialized forms of #$Love are
            #$Love-Romantic, platonic love, maternal love, infatuation,
            agape, etc.</rdfs:comment>
        <guid>bd589433-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#FeelingAttributeType"/>
        <rdfs:subClassOf rdf:resource="#Affection"/>
    </daml:Class>
    <daml:Class rdf:ID="Lung">
        <rdfs:label>lungs</rdfs:label>
        <rdfs:comment>The collection of all lungs, the primary
            respiratory organs of #$AirBreathingVertebrates.</rdfs:comment>
        <guid>bd58cacb-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#AnimalBodyPartType"/>
        <rdf:type rdf:resource="#SymmetricAnatomicalPartType"/>
        <rdfs:subClassOf rdf:resource="#BiologicalLivingObject"/>
    </daml:Class>
    <daml:Class rdf:ID="MKSUnitOfMeasure">
        <rdfs:label>meter-kilogram-second units of measure</rdfs:label>
        <rdfs:comment>A subset of #$UnitOfMeasure.  #$MKSUnitOfMeasure
            is the collection of all the measurement functions whose
            results use the MKS (i.e., meter-kilogram-second) system of
            measure to describe physical quantities.  Examples:
            #$MetersPerSecondPerSecond, #$Liter, #$MetricTon.</rdfs:comment>
        <guid>bd5901ca-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#RelationshipType"/>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </daml:Class>
    <daml:Class rdf:ID="MailingLocation">
        <rdfs:label>mailing locations</rdfs:label>
        <rdfs:comment>A collection of places; a subset of
            #$ContactLocation.  Each element of #$MailingLocation is a
            location at which an agent can be contacted by mail, e.g., a
            home, office, or post office box.</rdfs:comment>
        <guid>be01f510-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ContactLocationType"/>
        <rdfs:subClassOf rdf:resource="#ContactLocation"/>
    </daml:Class>
    <CapacityAttribute rdf:ID="MainFunction">
        <rdfs:label>main function</rdfs:label>
        <rdfs:comment>One of the attributes which characterize the
            capacity in which some agent does a kind of action.
            #$MainFunction indicates that an agent does a certain type
            of action as its main function (rather than, say, as a
            hobby).  #$MainFunction can be used to indicate the function
            that an organization was created to do; e.g., the
            #$MainFunction of the #$USBorderPatrol is #$Patrolling the
            U.S. border.  See #$actsInCapacity.</rdfs:comment>
        <guid>bd588c81-9c29-11b1-9dad-c379636f7270</guid>
    </CapacityAttribute>
    <daml:Class rdf:ID="MakingAGesture">
        <rdfs:label>gesture</rdfs:label>
        <rdfs:comment>The collection of acts of #$IBOCreation  done by
            an #$Animal (including #$Person) arranging its limbs or
            other  body parts (and whatever objects the limbs might be
            holding) in some  meaningful configuration (static or
            dynamic).  Vocal #$IBTGenerations  are not considered to be
            gestures (see #$MakingAnOralSound for this),  but they might
            be done in conjunction with gestures.    NB:
            #$MakingAGesture is NOT a subset of
            #$NonVerbalCommunicating;  at most, an instance of
            #$MakingAGesture is only half of a communication event.  And
            someone can make a gesture while alone, without using it for
            communication. Thus, only some gestures are #$subEvents of
            #$NonVerbalCommunicating. (But note that #$MakingAGesture IS
            a subset  of #$IBTGeneration-Original (q.v.), since every
            gesture encodes  information, whether or not it is used for
            communication in a  particular instance.)</rdfs:comment>
        <guid>bd58f623-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#VoluntaryBodyMovement"/>
        <rdfs:subClassOf rdf:resource="#VisualInformationConveyingAct"/>
    </daml:Class>
    <daml:Class rdf:ID="MakingAnAgreement">
        <rdfs:label>agreement-making events</rdfs:label>
        <rdfs:comment>A collection of events.  Each element in the
            collection #$MakingAnAgreement is an event in which two or
            more parties specify the terms of an #$Agreement to which
            they will be #$agreeingAgents, and enter into it.  Some
            types of #$MakingAnAgreement include its subsets
            #$EngagementEventPart-BecomingEngaged, #$EmployeeHiring,
            #$DeclaringCeaseFire, and #$MakingAReservation.</rdfs:comment>
        <guid>bd58a184-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#Communicating"/>
        <rdfs:subClassOf rdf:resource="#CreationEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="MakingAnOralSound">
        <rdfs:label>verbalize</rdfs:label>
        <rdfs:comment>The collection of actions in which the lips and
            other mouth parts are  used to make sound.
            #$MakingAnOralSound means the event in which sound  is
            produced more-or-less voluntarily, using the mouth, mouth
            portal,  lips, and tongue.--Kean, July 11, 1997</rdfs:comment>
        <guid>bd589df6-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#EmittingSound"/>
        <rdfs:subClassOf rdf:resource="#BodyMovementEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="MakingFacialExpression">
        <rdfs:label>making facial expression</rdfs:label>
        <rdfs:comment>The collection of events during which the
            configuration of an agent&apos;s face changes.  This is
            usually associated with the expression of some emotion.</rdfs:comment>
        <guid>bd58c58d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#BodyMovementEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="MakingSomething">
        <rdfs:label>making events</rdfs:label>
        <rdfs:comment>A collection of creation events.
            #$MakingSomething is a specialization of
            #$CreatingAnArtifact instances of which involve some
            partially tangible thing being made from raw materials or
            from parts. The end result (see #$productsCreated) might or
            might not be a #$Product.</rdfs:comment>
        <guid>bd58fe38-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="MakingSomethingAvailable">
        <rdfs:label>provisions of goods or services</rdfs:label>
        <rdfs:comment>The collection of all activities in which an
            #$Agent makes it possible for another #$Agent to use (but
            not necessarily own) a good or service.</rdfs:comment>
        <guid>bd58a246-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
    </daml:Class>
    <daml:Class rdf:ID="MakingTravelArrangements">
        <rdfs:label>making travel arrangements</rdfs:label>
        <rdfs:comment>The collection of all events in which an agent
            arranges for some kind of travel event.</rdfs:comment>
        <guid>bd58bd9c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
    </daml:Class>
    <LivingLanguage rdf:ID="MalayIndonesianLanguage">
        <rdfs:label>Indonesian Language</rdfs:label>
        <rdfs:comment>A Malayan language spoken in Indonesia.</rdfs:comment>
        <guid>bd58b9cd-9c29-11b1-9dad-c379636f7270</guid>
    </LivingLanguage>
    <daml:Class rdf:ID="MaleAnimal">
        <rdfs:label>males</rdfs:label>
        <rdfs:comment>The collection of all male animals.</rdfs:comment>
        <guid>bd58e943-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Animal"/>
        <daml:disjointWith rdf:resource="#FemaleAnimal"/>
    </daml:Class>
    <daml:Class rdf:ID="MalePerson">
        <rdfs:label>males</rdfs:label>
        <rdfs:comment>The collection of all male persons.</rdfs:comment>
        <guid>bd58d6a1-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#OrganismClassificationType"/>
        <rdfs:subClassOf rdf:resource="#Person"/>
        <rdfs:subClassOf rdf:resource="#MaleAnimal"/>
        <daml:disjointWith rdf:resource="#FemalePerson"/>
    </daml:Class>
    <daml:Class rdf:ID="Malleability">
        <rdfs:label>malleabilities</rdfs:label>
        <rdfs:comment>A collection of attributes; a subset of
            #$PhysicalAttribute.  Each element of #$Malleability
            represents a specific capacity of a physical material to be
            shaped or formed.  Different degrees of malleability may be
            designated using a #$GenericValueFunction.  Malleability of
            objects is indicated with the predicate #$malleabilityOfObject.</rdfs:comment>
        <guid>bd58955d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MaterialStrengthType"/>
        <rdf:type rdf:resource="#MeasurableAttributeType"/>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </daml:Class>
    <daml:Class rdf:ID="Malnutrition">
        <rdfs:label>malnutrition</rdfs:label>
        <rdfs:comment>A collection of physiological conditions caused by
            the lack of essential #$Nutrients (usually vitamins,
            minerals or proteins). Specialized forms of #$Malnutrition
            are: (1) #$DietaryDeficiencyCondition, in which the
            necessary nutrients are not ingested; and (2)
            #$Malnutrition-Secondary, in which the necessary nutrients
            are not properly metabolized.</rdfs:comment>
        <guid>be00bb98-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PhysiologicalConditionType"/>
        <rdfs:subClassOf rdf:resource="#AilmentCondition"/>
    </daml:Class>
    <daml:Class rdf:ID="Mammal">
        <rdfs:label>mammals</rdfs:label>
        <rdfs:comment>The collection of mammals; a subset of
            #$Vertebrate.  Each element of #$Mammal is an air-breathing,
            warm-blooded animal which, if female, nurses its young with
            milk secreted by mammary glands.  The collection #$Mammal
            includes the subsets #$Dog, #$Horse, #$Person, #$Elephant,
            etc.  The skin of mammals is typically covered with hair (or
            sometimes hair modified into scales or plates (e.g.
            pangolins)), but some types are almost hairless.  All
            mammals other than the Monotremes of Australia bear live
            young rather than laying eggs and have teats, which on
            females are used for nursing the young.  Monotremes do not
            have teats, but both male and female produce milk from
            #$MammaryGlands.   #$Mammal is an instance of #$BiologicalClass.</rdfs:comment>
        <guid>bd58a628-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#BiologicalClass"/>
        <rdf:type rdf:resource="#OrganismClassificationType"/>
        <rdfs:subClassOf rdf:resource="#Vertebrate"/>
    </daml:Class>
    <daml:Class rdf:ID="Manager">
        <rdfs:label>manager</rdfs:label>
        <rdfs:comment>A collection of people.  An instance of #$Manager
            is a person whose primary job is to manage other people,
            directing their work activity in an #$Organization or for a
            #$Project.  A #$Manager tells his or her subordinate workers
            what to do.</rdfs:comment>
        <guid>bd58b762-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#OccupationType"/>
    </daml:Class>
    <LivingLanguage rdf:ID="MandarinChineseLanguage">
        <rdfs:label>Mandarin Chinese</rdfs:label>
        <rdfs:comment>One of the major languages spoken in China; also
            the official language.</rdfs:comment>
        <guid>bd58a106-9c29-11b1-9dad-c379636f7270</guid>
    </LivingLanguage>
    <daml:Class rdf:ID="Manufacturing">
        <rdfs:label>fabrications</rdfs:label>
        <rdfs:comment>A collection of events.  In each #$Manufacturing
            event, raw materials or component parts are combined to
            produce a product.  In a typical #$Manufacturing process,
            the motivation of the manufacturer is that the value of the
            #$outputs should exceed the value of the #$inputs.
            #$Manufacturing does not include related or supportive
            processes such as transporting the raw materials to the
            manufacturing site, scheduling done ahead of time, etc. --
            the concept #$ProductionEvent covers that bigger picture.</rdfs:comment>
        <guid>bd58e175-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#MakingSomething"/>
    </daml:Class>
    <daml:Class rdf:ID="ManufacturingOrganization">
        <rdfs:label>manufacturing organization</rdfs:label>
        <rdfs:comment>A collection of organizations.  An element of
            #$ManufacturingOrganization is any organization whose
            #$MainFunction is #$Manufacturing or production of goods.
            These may be departments, suborganizations, companies, or
            conglomerate enterprises.</rdfs:comment>
        <guid>bd58ef23-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#CommercialOrganization"/>
        <rdfs:subClassOf rdf:resource="#Organization"/>
    </daml:Class>
    <daml:Class rdf:ID="Map">
        <rdfs:label>maps</rdfs:label>
        <rdfs:comment>A collection of #$ConceptualWorks.  Each element
            of #$Map can be properly interpreted, models a region of
            physical space which may be many times greater or smaller
            than its own size by using graphical symbols (or possibly
            another code), often in conjunction with a natural language,
            to represent features of one or more of the following kinds:
            geographical areas (#$GeographicalRegion), topographical
            features (#$TopographicalFeature), political regions
            (#$GeopoliticalEntity), climate zones (#$ClimateCycleType),
            human artifacts (#$ConstructionArtifact), population
            densities (#$populationDensity), etc.  Maps are generally
            intended to help an agent to orient itself in space or to
            understand some aspect(s) of a large spatial area.  #$Maps
            are physically instantiated in map copies, which may be on
            paper, in computerized geographical information systems, or
            in other forms.</rdfs:comment>
        <guid>bd58e7b4-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="March">
        <rdfs:label>March</rdfs:label>
        <rdfs:comment>The collection of all Marches,   the third month
            of the year in the #$JulianCalendar.</rdfs:comment>
        <guid>bd58c2bd-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MonthOfYearType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CalendarMonth"/>
    </daml:Class>
    <daml:Class rdf:ID="MarineCorps">
        <rdfs:label>Marine corps</rdfs:label>
        <rdfs:comment>A collection of military organizations.  An
            instance of #$MarineCorps is a military organization, modern
            or historical, composed mainly of soldiers (i.e., combat
            personnel) who serve on ships or in conjunction with naval
            forces, with the purpose of defending or attacking coastal areas.</rdfs:comment>
        <guid>beebd6c2-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="MarinePersonnel">
        <rdfs:label>marines</rdfs:label>
        <rdfs:comment>A soldier who is in the Marines.</rdfs:comment>
        <guid>bd58a78c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#OccupationType"/>
        <rdfs:subClassOf rdf:resource="#MilitaryPerson"/>
    </daml:Class>
    <daml:Class rdf:ID="MaritalStatusOfPeople">
        <rdfs:label>marital statuses</rdfs:label>
        <rdfs:comment>The attribute values indicating the
            #$maritalStatus of a #$Person.  Members of this collection
            include #$Divorced, #$Widowed, #$Single, and #$Married.</rdfs:comment>
        <guid>bd590574-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#UnorderedAttributeType"/>
        <rdf:type rdf:resource="#AttributeType"/>
        <rdf:type rdf:resource="#SiblingDisjointAttributeType"/>
    </daml:Class>
    <daml:Class rdf:ID="MarkingOnASurface">
        <rdfs:label>marking on a surface</rdfs:label>
        <rdfs:comment>A collection of events.  In a #$MarkingOnASurface
            event, visible markings are placed on a surface by an
            #$Agent.  The marking may be done by adding material to or
            removing material from the surface; e.g., by painting or by
            engraving the surface.</rdfs:comment>
        <guid>bd588d33-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#IBOCreation"/>
    </daml:Class>
    <GenderOfLivingThing rdf:ID="Masculine">
        <rdfs:label>masculine</rdfs:label>
        <rdfs:comment>#$Masculine is a gender, indicating either that an
            #$Animal or #$Plant is male, or that a word has what is
            called masculine gender.</rdfs:comment>
        <guid>bd590c7e-9c29-11b1-9dad-c379636f7270</guid>
    </GenderOfLivingThing>
    <daml:Class rdf:ID="Mass">
        <rdfs:label>masses</rdfs:label>
        <rdfs:comment>A collection of physical attributes.  Each element
            of #$Mass is an amount of matter present in a given object.
            Elements of #$Mass may be either a fixed interval, such as
            two pounds, or a range, such as a legal load for a certain
            type of trailer.  The more mass an object has, the greater
            is the force required to accelerate it.  See #$UnitOfMass
            for the units used by Cyc to measure mass.</rdfs:comment>
        <guid>bd58dbe6-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#FundamentalNumericAttributeType"/>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </daml:Class>
    <daml:Class rdf:ID="MassNoun">
        <rdfs:label>mass noun</rdfs:label>
        <rdfs:comment>The collection of all mass nouns.  Mass nouns are
            syntactically singular, and often they denote stufflike
            things. Example: &apos;water&apos;.</rdfs:comment>
        <guid>bd652289-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#LinguisticObjectType"/>
        <rdf:type rdf:resource="#SpeechPart"/>
        <rdfs:subClassOf rdf:resource="#MassNoun-Generic"/>
    </daml:Class>
    <daml:Class rdf:ID="MassNoun-Generic">
        <rdfs:label>mass noun - generic</rdfs:label>
        <rdfs:comment>The collection of all mass nouns.  Mass nouns are
            syntactically singular, and often they denote stufflike
            things. Example: &apos;water&apos;. This collection also
            includes proper mass nouns like &apos;Pepsi&apos;, agentive
            mass nouns like &apos;moisturizer&apos;, etc.</rdfs:comment>
        <guid>c0c8418b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#SpeechPart"/>
        <rdfs:subClassOf rdf:resource="#Noun"/>
    </daml:Class>
    <daml:Class rdf:ID="MaterialStrengthType">
        <rdfs:label>material strength type</rdfs:label>
        <rdfs:comment>A collection of collections.  Each element of
            #$MaterialStrengthType is a specific collection of
            attributes used in determining the strength of a material.
            Examples: #$Hardness, #$Malleability, #$Ductility,
            #$Elasticity, #$ShearStrength.</rdfs:comment>
        <guid>bd58d2da-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="#DerivedNumericAttributeType"/>
    </daml:Class>
    <daml:Class rdf:ID="MathematicalObject">
        <rdfs:label>mathematical object</rdfs:label>
        <rdfs:comment>A collection of intangible objects; a subset of
            #$MathematicalThing.  Each element of #$MathematicalObject
            is a purely abstract mathematical thing which is an
            individual (see #$Individual).  Examples of
            #$MathematicalObject include: #$Quantifiers, #$RealNumbers,
            #$Triangles, #$TruthValues, etc.  But instances of
            #$SetOrCollection are not #$MathematicalObjects in Cyc,
            because they are not #$Individuals.</rdfs:comment>
        <guid>bf461f37-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#IntangibleIndividual"/>
    </daml:Class>
    <daml:Class rdf:ID="MathematicalOrComputationalThing">
        <rdfs:label>mathematical or computational thing</rdfs:label>
        <rdfs:comment>A collection of abstract (#$Intangible) objects.
            Each element of #$MathematicalOrComputationalThing is a
            massless, timeless abstraction, such as an algorithm,
            logical connective, character string, assertion, integer, etc.</rdfs:comment>
        <guid>bd58e31f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#Intangible"/>
        <daml:disjointWith rdf:resource="#TemporalThing"/>
    </daml:Class>
    <daml:Class rdf:ID="MathematicalOrdering">
        <rdfs:label>mathematical ordering</rdfs:label>
        <rdfs:comment>The collection of all those #$RelationalStructures
            that are called &apos;orderings&apos;.  A
            #$MathematicalOrdering is usually described as an ordered
            pair &lt;S, R&gt; where S is a set and R is a binary
            relation on S that is transitive, i.e., for each X, Y and Z
            in S, R(X Y) and R(Y Z) imply R(X Z).  We do not have to
            define a #$MathematicalOrdering in Cyc as an ordered pair,
            but it is essential that each such #$MathematicalOrdering
            has a unique #$baseSet and a unique ordering relation.  We
            use, for each #$MathematicalOrdering ORDER,
            (#$orderingRelations ORDER PRED) to specify a binary
            predicate PRED, the restriction of which to the #$baseSet S
            of ORDER indicates the ordering relation R on S, and we
            require the collections that are used to specify the
            arguments to PRED to be supersets of S.  In principle, there
            could be different predicates PRED1 and PRED2 such that when
            restricted to the same #$baseSet S of a
            #$MathematicalOrdering ORDER, they order the elements of S
            exactly the same way.  When we said that there is a unique
            ordering relation R on S, we mean to ignore the difference
            between PRED1 and PRED2 when they are restricted to S, and
            treat the results of such restrictions the same, as far as
            they are used to talk about ORDER.  Subcollections of
            #$MathematicalOrdering include #$PartialOrdering,
            #$PartialOrdering-Strict, #$TreeOrdering,
            #$TreeOrdering-Strict, #$TotalOrdering,
            #$TotalOrdering-Strict, #$WellOrdering and
            #$Lattice-LatticeTheoretic, etc.</rdfs:comment>
        <guid>bf3b5382-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#RelationalStructure"/>
    </daml:Class>
    <daml:Class rdf:ID="May">
        <rdfs:label>May</rdfs:label>
        <rdfs:comment>The collection of all Mays, the second month to
            start after the vernal equinox (in the Northern Hemisphere)
            in the #$GregorianCalendar and #$JulianCalendar.  May is the
            fifth month of the year in the #$GregorianCalendar.  May
            started as the third month of the year in the
            #$JulianCalendar, but after the beginning of the year was
            moved to the beginning of #$January it became the fifth
            month of the year.</rdfs:comment>
        <guid>bd58c232-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MonthOfYearType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CalendarMonth"/>
    </daml:Class>
    <daml:Class rdf:ID="MeasurableAttributeType">
        <rdfs:label>measurable attribute type</rdfs:label>
        <rdfs:comment>A collection of collections.  Each element of
            #$MeasurableAttributeType is a collection of attributes, the
            members of which are quantifiable attributes, i.e., they can
            be assigned a numeric value.  For example, #$RateOfRotation
            and #$ConcentrationPerVolume.  For the units in which
            specific attributes are measured, see #$measuredIn and
            #$unitsMeasuringThisQuantity.  Note that in Cyc, numbers are
            classified as measurable attributes; see #$RealNumber, etc.</rdfs:comment>
        <guid>bd58d9b3-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#CollectionType"/>
    </daml:Class>
    <daml:Class rdf:ID="MeasuringDevice">
        <rdfs:label>measuring devices</rdfs:label>
        <rdfs:comment>A collection of physical devices.  An instance of
            #$MeasuringDevice is a device used for measuring some
            quantity such as #$Distance, #$Volume, #$Temperature, etc.
            Examples include the odometer in your car (an #$Odometer),
            the graduated glass measuring cup in your kitchen (a
            #$MeasuringCup), and the thermostat on your wall (a
            #$TemperatureMeasuringDevice, although it is also a #$ControlDevice.)</rdfs:comment>
        <guid>bd590901-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#PhysicalDevice"/>
    </daml:Class>
    <daml:Class rdf:ID="MeasuringSomething">
        <rdfs:label>measuring events</rdfs:label>
        <rdfs:comment>A collection of events.  Each element of
            #$MeasuringSomething is an event in which an agent uses a
            physical device to measure some physical attribute of a
            tangible object.  The last part of such an event involves
            the perception (and perhaps recording) of a
            #$measurementResult by some instance of#$PerceptualAgent.
            See also #$MeasurementFn.</rdfs:comment>
        <guid>bd588524-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#PurposefulCompositePhysicalAndMentalActivity"/>
    </daml:Class>
    <daml:Class rdf:ID="MechanicalDevice">
        <rdfs:label>mechanical devices</rdfs:label>
        <rdfs:comment>A collection of physical devices.  An instance of
            #$MechanicalDevice is a physical device which has at least
            one part that moves with respect to another of its parts.
            Thus a spoon is not one of these, but a pair of scissors is,
            as are more complex devices such as vacuum cleaners and the #$SpaceShuttleChallenger.</rdfs:comment>
        <guid>bd58d581-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#PhysicalDevice"/>
    </daml:Class>
    <daml:Class rdf:ID="MedicalCareEvent">
        <rdfs:label>medical care event</rdfs:label>
        <rdfs:comment>A collection of events.  When any medical care
            professional provides a medical service to patients, that is
            an instance of #$MedicalCareEvent.  An instance of
            #$MedicalCareEvent may be a diagnostic procedure, a
            treatment, a consultation, routine check-up, a medical test,
            etc. -- anything a medical care provider can bill for.
            E.g., (#$BirthFn #$NicoleLenat) represents the birth of a
            particular person; since she were born in a modern Western
            hospital, doctors, nurses, and a variety of hospital
            equipment were present and used, so this is a
            #$MedicalCareEvent. </rdfs:comment>
        <guid>bd638fc1-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#ServiceEvent"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
    </daml:Class>
    <daml:Class rdf:ID="MedicalCareInstitution">
        <rdfs:label>medical care facilities</rdfs:label>
        <rdfs:comment>Large organizations that provide medical or
            psychiatric care and have facilities for patients to stay at
            least overnight.</rdfs:comment>
        <guid>bd649710-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#MedicalCareOrganization"/>
        <daml:disjointWith rdf:resource="#Pharmacy"/>
    </daml:Class>
    <daml:Class rdf:ID="MedicalCareOrganization">
        <rdfs:label>medical care organizations</rdfs:label>
        <rdfs:comment>A collection of organizations; a subset of both
            #$MedicalCareProvider and #$ServiceOrganization.  An element
            of #$MedicalCareOrganization is any organization that
            provides some kind of medical care; it may be a
            sub-organization of a larger organization.  Examples include
            all instances of #$DoctorsOffice, #$DentistsOffice,
            #$OptometricFacility, or #$RehabilitationFacility;
            #$IndependentPracticeAssociation or #$Hospital;
            #$EmergencyRoom, #$DialysisUnit, #$AllergyTestingFacility;
            #$HomeNursingServiceOrganization or
            #$LongTermMedicalCareFacility; and #$VeterinaryHospital.</rdfs:comment>
        <guid>bd58f48e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#ServiceOrganization"/>
        <rdfs:subClassOf rdf:resource="#MedicalCareProvider"/>
    </daml:Class>
    <daml:Class rdf:ID="MedicalCareProfessional">
        <rdfs:label>medical care professionals</rdfs:label>
        <rdfs:comment>A collection of persons; a subset of
            #$Professional.  Each element of #$MedicalCareProfessional
            is a person whose occupation principally involves medical
            care of patients, including surgery, psychological care,
            physical therapy, practical nursing, and dispensing drugs.
            The collection #$MedicalCareProfessional includes members of
            the subsets #$Psychiatrist, #$Pharmacist,
            #$EmergencyMedicalTechnician, #$Nurse, #$Doctor-Medical,
            etc., as well as #$Veterinarian.</rdfs:comment>
        <guid>c10c316e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#OccupationType"/>
        <rdfs:subClassOf rdf:resource="#MedicalCareProvider"/>
        <rdfs:subClassOf rdf:resource="#HealthProfessional"/>
        <rdfs:subClassOf rdf:resource="#Professional"/>
    </daml:Class>
    <daml:Class rdf:ID="MedicalCareProvider">
        <rdfs:label>medical care provider</rdfs:label>
        <rdfs:comment>The collection of agents who provide medical care
            in a professional capacity.</rdfs:comment>
        <guid>c0fd5c00-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#SocialBeing"/>
    </daml:Class>
    <daml:Class rdf:ID="MedicalFacilityType">
        <rdfs:label>medical facility type</rdfs:label>
        <rdfs:comment>Instances are kinds of medical care facilities.
            Some may be organizations , some may be places and some are equipment.</rdfs:comment>
        <guid>bd597404-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#ExistingObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="MedicalPatient">
        <rdfs:label>patients</rdfs:label>
        <rdfs:comment>The #$Collection of instances of #$Animal while
            undergoing medical care - which includes routine
            examinations as well as treatment for injuries or illnesses.</rdfs:comment>
        <guid>bd5893d4-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#SocialBeing"/>
        <rdfs:subClassOf rdf:resource="#Animal"/>
    </daml:Class>
    <daml:Class rdf:ID="MedicalSpecialtyType">
        <rdfs:label>medical specialty type</rdfs:label>
        <rdfs:comment>The collection of all medical worker types,
            divided up by specialty.</rdfs:comment>
        <guid>c10ae933-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdf:type rdf:resource="#SiblingDisjointCollection"/>
        <rdfs:subClassOf rdf:resource="#OccupationType"/>
    </daml:Class>
    <daml:Class rdf:ID="MedicalTesting">
        <rdfs:label>medical tests</rdfs:label>
        <rdfs:comment>A collection of events in which some aspect of a
            patient&apos;s physiological condition is evaluated using
            medical procedures.  An instance of #$MedicalTesting is a
            test done on a patient -- or, often, on a sample taken from
            the patient&apos;s body -- in order to gather information
            (a) about the patient&apos;s general state of health, (b) to
            help in making a diagnosis, (c) to determine or monitor the
            severity of a known condition of the patient&apos;s.  The
            collection #$MedicalTesting includes an enormous variety of
            procedures in modern Western medicine, from simple blood
            tests to complex MRIs.</rdfs:comment>
        <guid>c0fd5389-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#MedicalCareEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="MedicalTreatmentEvent">
        <rdfs:label>medical treatments</rdfs:label>
        <rdfs:comment>A collection of medical care  events; i.e., a
            subset of #$MedicalCareEvent. In any instance of
            #$MedicalTreatmentEvent, the procedures performed by a
            medical  professional are done to alleviate or ameliorate a
            #$PhysiologicalCondition. The set of treatments for a
            specific condition may  be denoted using #$TreatmentFn (q.v.).</rdfs:comment>
        <guid>bd58ba4f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#ServiceEvent"/>
        <rdfs:subClassOf rdf:resource="#SimpleRepairing"/>
        <rdfs:subClassOf rdf:resource="#MedicalCareEvent"/>
    </daml:Class>
    <TerrainAttribute rdf:ID="MediterraneanScrub">
        <rdfs:label>mediterranean scrub</rdfs:label>
        <rdfs:comment>Attribute of areas of shrub-dominated vegetation
            located in the Mediterranean basinand similar climatic
            regions in coastal parts of California, Chile, South Africa,
            and southern Australia.  A variety of aromatic herbaceous
            plants grow beneath low shrub thickets. Source: The Times
            Atlas of the World (1995).</rdfs:comment>
        <guid>bec614ea-9c29-11b1-9dad-c379636f7270</guid>
    </TerrainAttribute>
    <InternationalWaters rdf:ID="MediterraneanSea">
        <rdfs:label>the Mediterranean Sea</rdfs:label>
        <rdfs:comment>A strategically important small sea between
            southern Europe, western Asia (the Levant), and northern Africa.</rdfs:comment>
        <guid>bd58ecea-9c29-11b1-9dad-c379636f7270</guid>
    </InternationalWaters>
    <daml:Class rdf:ID="MeetingSomeone">
        <rdfs:label>meetings</rdfs:label>
        <rdfs:comment>A collection of actions.  In a #$MeetingSomeone
            event, one #$Agent is moving and meets (comes into close
            proximity with) another #$Agent.  This may or may not be
            purposeful.  It may be performed by non-human animals, and
            occasionally by other sorts of #$Agents. Note: this does not
            mean `being introduced to someone&apos;, but rather `going
            to meet with someone&apos;.</rdfs:comment>
        <guid>c0f29aad-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#SocialOccurrence"/>
    </daml:Class>
    <daml:Class rdf:ID="MeetingTakingPlace">
        <rdfs:label>meetings</rdfs:label>
        <rdfs:comment>The collection of human meeting events, in which
            #$Persons gather intentionally at a location in order to
            communicate or share some experience; business is often
            transacted at such a meeting.  Examples include: a
            particular conference, a business lunch, etc.</rdfs:comment>
        <guid>bd590388-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#SocialGathering"/>
    </daml:Class>
    <daml:Class rdf:ID="Melting">
        <rdfs:label>melting events</rdfs:label>
        <rdfs:comment>A collection of events.  In each instance of this
            collection, an object is heated to (and then above) its
            #$freezingPoint and is thereby changed from a
            #$SolidStateOfMatter to a #$LiquidStateOfMatter.</rdfs:comment>
        <guid>bd58f9f4-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#PhysicalStateChangeEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="Memory">
        <rdfs:label>memory</rdfs:label>
        <rdfs:comment>A collection of mental information.  Each element
            of #$Memory is the propositional content of a mental state
            in which a person recalls past events.  Most commonly those
            memories concern first-person experiences, but they may
            include recollections of anything that the person has
            learned in the past.</rdfs:comment>
        <guid>bd58da47-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#MentalInformation"/>
    </daml:Class>
    <daml:Class rdf:ID="MensClothing">
        <rdfs:label>men&apos;s clothes</rdfs:label>
        <rdfs:comment>A collection of objects.  Each element of
            #$MensClothing is a clothing item worn usually by men, i.e.,
            items normally found in the men&apos;s section of department
            stores.  Subsets include #$Tuxedos and #$MensJockeyUnderwear.</rdfs:comment>
        <guid>bd5902fc-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="MentalAttribute">
        <rdfs:label>mental attributes</rdfs:label>
        <rdfs:comment>A collection of attributes.  Each element of
            #$MentalAttribute is an attribute which pertains to an
            agent&apos;s mental state or mental ability.  Examples:
            #$HighIntelligence, #$LegallyDrunk, #$VisualAwareness, #$InattentiveMentalActivityLevel.</rdfs:comment>
        <guid>bd58833e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#AttributeType"/>
        <rdfs:subClassOf rdf:resource="#AttributeValue"/>
    </daml:Class>
    <daml:Class rdf:ID="MentalInformation">
        <rdfs:label>pieces of mental information</rdfs:label>
        <rdfs:comment>A collection of information.  Each element of
            #$MentalInformation is the propositional content of a
            specific mental state of an individual person. Thus, this is
            information which is embodied in a person having a memory or
            sensory perception or other type of thought.  Note that
            elements of #$MentalInformation are the propositional
            content of memories, perceptions, judgments, etc.  For
            example, when I remember that my grandmother&apos;s eyes are
            blue, the mental information contained therein is `my [the
            rememberer&apos;s] grandmother&apos;s eyes are blue&apos;;
            it is NOT `I remember that my grandmother&apos;s eyes are
            blue&apos;.  As a consequence, mental information (as
            defined in Cyc) is not incorrigible.</rdfs:comment>
        <guid>bd58daca-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#PropositionalInformationThing"/>
    </daml:Class>
    <SharedNote rdf:ID="MetaAssertionsForPolyCanonicalizingAssertions">
        <rdfs:label>meta assertions for poly canonicalizing assertions</rdfs:label>
        <rdfs:comment>If one wishes  to state a fact M about an formula
            F, i.e. if one wishes to assert the  meta-assertion M(F) and
            if F canonicalizes into multiple assertions,  a_1,
            a_2...a_n, then one may have to do a non-standard procedure.
            If  F canonicalizes into a_1, a_2...a_n *and* when any of
            a_1, a_2...a_n  uncanonicalize back into A then the meta
            assertion M(F) gets  automatically distributed to each of
            a_1, a_2...a_n.  In such a case  M(F) ends up in the
            knowledge base as several assertions, i.e. M(a_1),  M(a_2),
            ...  M(a_n).  In other cases (i.e. where a
            polycanonicalizing  formula does not uncanonicalize back
            into itself) (typically rarer),  one will have to do the
            non-standard procedure of distributing the  meta-assertions
            by hand.      Example (of the more standard case):
            (fi-assert    &apos;(#$implies (#$isa ?x #$Animal)
            (#$thereExists ?y            (#$and (#$isa ?y
            #$FemaleAnimal) (#$mother ?x ?y))))    #$BaseKB)    produces
            in the two assertions:    #&lt;AS:(#$implies (#$and (#$isa
            ?X #$Animal) (#$termOfUnit ?Y          (#$SKF-16480338 ?X)))
            (#$mother ?X ?Y)):#$BaseKB&gt;    #&lt;AS:(#$implies (#$and
            (#$isa ?X #$Animal) (#$termOfUnit ?Y
            (#$SKF-16480338 ?X))) (#$isa ?Y
            #$FemaleAnimal)):#$BaseKB&gt;    Note that these two
            assertions share the common EL formula:   (#$implies (#$isa
            ?x #$Animal)      (#$thereExists ?y          (#$and (#$isa
            ?y #$FemaleAnimal) (#$mother ?x ?y))))    Now if we add a
            meta assertion that references this formula:    (fi-assert
            &apos;(#$salientAssertions #$mother         (#$implies
            (#$isa ?x #$Animal)            (#$thereExists ?y (#$and
            (#$isa ?y #$FemaleAnimal)
            (#$mother ?x ?y)))))    #$BaseKB)    the meta formula
            automatically distributes over the two assertions:
            #&lt;AS:(#$salientAssertions #$mother
            #&lt;AS:(#$implies (#$and (#$isa ?X #$Animal)
            (#$termOfUnit ?Y (#$SKF-16480338 ?X)))
            (#$mother ?X ?Y)):#$BaseKB):#$BaseKB&gt;
            #&lt;AS(#$salientAssertions #$mother
            #&lt;AS:(#$implies (#$and (#$isa ?X #$Animal)
            (#$termOfUnit ?Y (#$SKF-16480338 ?X)))
            (#$isa ?Y #$FemaleAnimal)):#$BaseKB):#$BaseKB&gt;      This
            new behavior was added to the system on December 9, 1998.
            It can  be turned-off by setting the parameter
            CYC::*DISTRIBUTE-META-OVER-COMMON-EL?* to nil.</rdfs:comment>
        <guid>bfb7415a-9c29-11b1-9dad-c379636f7270</guid>
    </SharedNote>
    <daml:Class rdf:ID="MetaKnowledgePredicate">
        <rdfs:label>metaknowledge predicates</rdfs:label>
        <rdfs:comment>A collection of predicates.  Each element of
            #$MetaKnowledgePredicate is a predicate used in assertions
            about the Cyc ontology itself.  Examples: #$myCreator,
            #$cyclistNotes, #$sharedNotes, #$salientAssertions, #$assertionConclusionActionType.</rdfs:comment>
        <guid>bd588097-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
    </daml:Class>
    <daml:Class rdf:ID="MetaPredicate">
        <rdfs:label>meta predicate</rdfs:label>
        <rdfs:comment>A collection of predicates. Each element of
            #$MetaPredicate can be used to define other predicates.</rdfs:comment>
        <guid>c0d662dc-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="#MetaRelation"/>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
    </daml:Class>
    <daml:Class rdf:ID="MetaRelation">
        <rdfs:label>meta relation</rdfs:label>
        <rdfs:comment>A collection of relations. Each element of
            #$MetaRelation can be used to define other relations.</rdfs:comment>
        <guid>bf4f46aa-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#RelationshipType"/>
        <rdfs:subClassOf rdf:resource="#IntangibleObjectPredicate"/>
    </daml:Class>
    <daml:Class rdf:ID="Metal">
        <rdfs:label>metals</rdfs:label>
        <rdfs:comment>A collection of tangible stuffs.  Every instance
            of #$Metal is a piece of stuff defined as a metal only by
            its chemical composition, not by its physical properties.
            Thus, #$Metal includes all instances of #$Mercury and
            #$Potassium as well as all pieces of #$Brass, #$Lead,
            #$Iron.  Cyc infers only by default that metals are solid.
            #$MetalAlloy is a subset of #$Metal.</rdfs:comment>
        <guid>bd58ac39-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TangibleStuffCompositionType"/>
        <rdfs:subClassOf rdf:resource="#InorganicStuff"/>
    </daml:Class>
    <daml:Class rdf:ID="MetalAlloy">
        <rdfs:label>alloys</rdfs:label>
        <rdfs:comment>A collection of tangible stuffs; a subset of
            #$Metal.  Each instance of #$MetalAlloy is a metallic stuff
            which is a homogeneous blend of at least one part of
            #$UnalloyedMetal with at least one other substance.
            #$MetalAlloy is not a subset of #$Mixture, because each
            instance of #$MetalAlloy is defined not only by the amounts
            and kinds of its #$constituents, but also (unlike a mixture)
            by the internal structures formed during its creation.
            Furthermore, the creation process is typically more complex
            than #$Mixing.  Common metal alloys include the instances of
            #$Bronze, #$Brass, and #$Steel.  Note that #$GalvanizedMetal
            is NOT a subset of #$MetalAlloy, because every instance of
            #$GalvanizedMetal has a coating of some #$Zinc on its
            surface, and thus (unlike an alloy) the components of
            galvanized metals are not homogenously distributed throughout.</rdfs:comment>
        <guid>bd58cc8b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TangibleStuffCompositionType"/>
        <rdfs:subClassOf rdf:resource="#Mixture"/>
        <rdfs:subClassOf rdf:resource="#ArtificialMaterial"/>
        <rdfs:subClassOf rdf:resource="#Metal"/>
    </daml:Class>
    <daml:Class rdf:ID="MicroscopicScaleObject">
        <rdfs:label>microscopic scale object</rdfs:label>
        <rdfs:comment>A collection of objects.  Every instance of
            #$MicroscopicScaleObject is a material object which is so
            small that human beings cannot perceive it, except (perhaps)
            with the use of special devices such as electron
            microscopes.  Some types of #$MicroscopicScaleObject include
            its subsets #$Molecule, #$Atom, #$SubAtomicParticle,
            #$Chloroplast, and #$Mitochondrion.</rdfs:comment>
        <guid>bd5891ac-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
    </daml:Class>
    <daml:Class rdf:ID="Microtheory">
        <rdfs:label>contexts</rdfs:label>
        <rdfs:comment>The collection of all microtheories, or `mts&apos;
            for short.  Microtheories implement contexts in Cyc.  Each
            mt serves to group a set of assertions together that share
            some common assumptions.  Thus each mt can be thought of as
            having two parts: a corpus of assertions that represent the
            `content&apos; of the mt, and a separate corpus of
            assertions that represent the `assumptions&apos; which are
            being made.  E.g., in a normal modern everyday life
            microtheory, there might be hundreds of content assertions
            such as `drivers are at least 16 years old&apos;, and there
            might be dozens of assumption assertions about that
            microtheory&apos;s content, such as `all actors are assumed
            to be law-abiding&apos;.   You can think of the assumptions
            as a set of extra conjuncts on the left hand side (the
            antecedent or `if&apos;-part) of every content assertion in
            the mt.      Each assertion in the knowledge base must be
            explicitly stated to be true in at least one mt.  It will
            then (by inference) also be true in all the more specialized
            contexts.  If something is true in the `life in North
            America&apos; mt, then it should by default be true in the
            `life in Canada&apos; mt.  I.e., the microtheories are
            organized into a generalization/specialization lattice by
            the predicate #$genlMt (q.v.), just as collections are
            organized into such a lattice by #$genls, and just as
            predicates are organized into such a lattice by #$genlPreds.
            Just as a collection may have several incommensurable
            supersets, so too a microtheory may have several
            incommensurable #$genlMts.  Just as each and every
            collection must have some explicitly recorded superset
            (except for #$Thing), each and every mt must have some
            (expicitly recorded) more general mt (except for the
            #$BaseKB, which is the most general context, containing
            universal, timeless truths).  Just as a Cyc concept may have
            multiple incommensurable sets of which it is an element (via
            #$isa), so too a Cyc assertion may be declared to be true in
            a set of incommensurable mts.    Every query is made in some
            mt, so the answer you get might very well depend on the mt
            in which you ask the question.  Let&apos;s call the current
            context C1, for the remainder of this paragraph.  The only
            assertions which can be used in C1 to answer the query are
            those assertions which were explicitly stated to be true in
            C1 or in some more general mt than C1.  But what if you want
            and need something like assertion P, to answer the question,
            but P doesn&apos;t fit that criterion, though P is true in
            some other mts that are unrelated to C1?  You can
            `import&apos; or `lift&apos; P into C1, by conjoining to its
            left hand side (if-part) the various assumptions of a
            context C999 in which P is known to be true.  I.e., what you
            actually conclude to be true in C1 is an assertion of the
            form `if a1 and a2 and... then P&apos;, where a1, a2,... are
            the assumptions of a context in which P holds (but which are
            NOT implied by assumptions of C1).  When there are several
            contexts to choose from, from which to import P, you will
            usually prefer the context whose assumptions are most
            similar to C1&apos;s assumptions, so there will be few extra
            conjuncts that need to be inserted in the `lifting&apos;
            process.    There is an implicit third component to each
            #$Microtheory, namely the Cyc terms which are `known
            about&apos; in that mt.  E.g., #$Lenat is not `known
            about&apos; in a microtheory set in prehistoric times;
            #$PhotochemicalEnergyTransduction is not `known about&apos;
            in a microtheory representing things that a toddler believes
            to be true; etc.  Unlike the content and the assumptions,
            however, there is no need to explicitly collect into one
            list all the terms which are `known about&apos;.  Rather,
            one could compute such a list by looking at all the terms
            which are mentioned anywhere in the content assertions of
            the mt.    Note that #$Microtheory is itself a `first-class
            object&apos;, as is each and every element of that
            collection --- e.g., #$CommercialBuyingMt,
            #$WorldGeographyMt, #$USHealthcareMt, #$HumanSocialLifeMt,
            etc.  The assertions about a #$Microtheory are just like any
            other Cyc assertions.      Note that one important predicate
            we haven&apos;t mentioned here yet is the one that says
            `assertion P is true in microtheory M&apos;.  That predicate
            is #$ist.  Thus:  (#$ist M P).    Note that another
            important predicate we haven&apos;t mentioned here yet is
            the one that says `microtheory M has the proposition P as a
            domain assumption&apos;.  Thus: (#$domainAssumptions M P).</rdfs:comment>
        <guid>bd5880d5-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#MicrotheoryType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
        <rdfs:subClassOf rdf:resource="#AbstractInformationalThing"/>
        <daml:disjointWith rdf:resource="#Relation"/>
        <daml:disjointWith rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <daml:disjointWith rdf:resource="#Language"/>
        <daml:disjointWith rdf:resource="#TimeInterval"/>
        <daml:disjointWith rdf:resource="#LinguisticObject"/>
        <daml:disjointWith rdf:resource="#AttributeValue"/>
        <daml:disjointWith rdf:resource="#Event"/>
    </daml:Class>
    <daml:Class rdf:ID="MicrotheoryDesignatingRelation">
        <rdfs:label>microtheory designating relation</rdfs:label>
        <rdfs:comment>The collection of #$Relations which specify that a
            #$ELSentence-Assertible  is to be interpreted in a given
            #$Microtheory.  It will be canonicalized and  checked for
            well-formedness with respect to that microtheory.  Each
            microtheory-designating relation has an  argument which
            denotes a microtheory, and another argument which denotes a
            #$ELSentence-Assertible.  It may have other arguments as
            well.  Use #$microtheoryDesignationArgnum and
            #$sentenceDesignationArgnum to specify these argument
            positions for each  microtheory-designating relation.</rdfs:comment>
        <guid>beab9388-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdf:type rdf:resource="#RelationshipType"/>
        <rdfs:subClassOf rdf:resource="#Relation"/>
    </daml:Class>
    <daml:Class rdf:ID="MicrotheoryPredicate">
        <rdfs:label>microtheory predicates</rdfs:label>
        <rdfs:comment>A collection of predicates.  Each element of
            #$MicrotheoryPredicate is a predicate used to describe the
            properties and relationships of instances of #$Microtheory.
            Examples: #$domainAssumptions, #$mtTime, #$genlMt,
            #$adheresToCodeOfConduct, #$ist-Agreement, #$ist-Obligation.</rdfs:comment>
        <guid>bd58817a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#RelationshipType"/>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
    </daml:Class>
    <daml:Class rdf:ID="MicrotheoryType">
        <rdfs:label>microtheory type</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$MicrotheoryType is a type of #$Microtheory, for example,
            #$ProblemSolvingCntxt and #$GeneralMicrotheory.</rdfs:comment>
        <guid>bd58e6e8-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
    </daml:Class>
    <PreparationAttribute rdf:ID="Microwaved">
        <rdfs:label>microwaved</rdfs:label>
        <rdfs:comment>The attribute #$Microwaved is a specialized form
            of #$Cooked.  Food that is #$Microwaved has been prepared in
            an event of #$Microwaving, using a #$MicrowaveOven.</rdfs:comment>
        <guid>bd9fc405-9c29-11b1-9dad-c379636f7270</guid>
    </PreparationAttribute>
    <daml:Class rdf:ID="Microwaving">
        <rdfs:label>microwave</rdfs:label>
        <rdfs:comment>A collection of events in which a #$MicrowaveOven
            is used to heat food (or drink). After a #$Microwaving
            event, the food involved has been #$Microwaved.</rdfs:comment>
        <guid>bff3797e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#CookingFood"/>
    </daml:Class>
    <daml:Class rdf:ID="Midday">
        <rdfs:label>middays</rdfs:label>
        <rdfs:comment>A #$Midday is the daily event where the #$Sun is
            near its `highest&apos; position in the daily cycle.  A
            #$Midday overlaps the start of an #$Afternoon, and a
            #$Morning overlaps the start of a #$Midday.</rdfs:comment>
        <guid>bd5887c3-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#QualitativeTimeOfDay"/>
    </daml:Class>
    <daml:Class rdf:ID="MigratoryAnimal">
        <rdfs:label>migratory animals</rdfs:label>
        <rdfs:comment>A subset of #$Animal; the collection of animals
            that change their dwelling place on a periodic, typically
            seasonal basis.  Such behavior is usually characteristic of
            particular types of #$BiologicalSpecies.</rdfs:comment>
        <guid>c1009f65-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Animal"/>
    </daml:Class>
    <daml:Class rdf:ID="MilitaryAircraft">
        <rdfs:label>military aircraft</rdfs:label>
        <rdfs:comment>The collection of all aircraft used for military
            purposes, or equipped to be used for such purposes.</rdfs:comment>
        <guid>bd58b375-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#AirTransportationDevice"/>
    </daml:Class>
    <daml:Class rdf:ID="MilitaryOfficer">
        <rdfs:label>officers</rdfs:label>
        <rdfs:comment>A collection of people, a subset   of
            #$MilitaryPerson. Each element of this collection is
            somebody who is an officer in some #$MilitaryOrganization.</rdfs:comment>
        <guid>bd58a748-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PositionType"/>
        <rdf:type rdf:resource="#OccupationType"/>
        <rdfs:subClassOf rdf:resource="#Leader"/>
        <rdfs:subClassOf rdf:resource="#MilitaryPerson"/>
    </daml:Class>
    <daml:Class rdf:ID="MilitaryOrganization">
        <rdfs:label>military services</rdfs:label>
        <rdfs:comment>A collection of organizations.  An element of
            #$MilitaryOrganization is an organization whose function
            (and expertise) is the use of armed force, or the threat of
            such use, against enemies, especially other organized, armed
            enemies.  A military organization includes its fighting
            forces and their command structure, together with dedicated
            support services controlled by that military command.
            Typically, there are special conditions in the relationships
            between a #$MilitaryOrganization and its workers, going
            beyond what is expected of work agreements in civilian
            settings, including strict sanctions to enforce obedience.
            This collection includes #$GovernmentMilitaryOrganizations
            such as the armies, navies, air forces, etc., of the
            world&apos;s governments, and in addition private armies,
            rebel armies, and organized mercenary units.</rdfs:comment>
        <guid>bd58f1ef-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Organization"/>
    </daml:Class>
    <daml:Class rdf:ID="MilitaryPerson">
        <rdfs:label>military people</rdfs:label>
        <rdfs:comment>A collection of persons; a subset of
            NationalGovernmentEmployee. Each element of
            ArmedServicesPersonnel is a person who belongs to any of the
            national military services of some instance of Country.</rdfs:comment>
        <guid>bd58ef05-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#OccupationType"/>
    </daml:Class>
    <daml:Class rdf:ID="Mineral">
        <rdfs:label>minerals</rdfs:label>
        <rdfs:comment>A collection of tangible things.  Each element of
            #$Mineral is a piece of homogeneous inorganic physical
            substance that has a crystalline structure.  For example,
            instances of #$Diamond, #$Turquoise-Gem, #$Jade-Gem, #$Corundum.</rdfs:comment>
        <guid>c1008900-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdfs:subClassOf rdf:resource="#SolidTangibleThing"/>
        <rdfs:subClassOf rdf:resource="#InorganicStuff"/>
        <rdfs:subClassOf rdf:resource="#NaturalTangibleStuff"/>
    </daml:Class>
    <daml:Class rdf:ID="MineralOre">
        <rdfs:label>mineral ore</rdfs:label>
        <rdfs:comment>A collection of tangible things; a subset of
            #$EarthStuff.  Each element of #$MineralOre is a piece of
            substance from which some useful #$Mineral can be extracted.
            For example, elements of #$IronOre, #$BauxiteOre, and #$CopperOre.</rdfs:comment>
        <guid>bd588750-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdf:type rdf:resource="#TangibleStuffCompositionType"/>
        <rdfs:subClassOf rdf:resource="#SolidTangibleThing"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#EarthStuff"/>
    </daml:Class>
    <PhysicalStructuralAttribute rdf:ID="Misty-PhysicalState">
        <rdfs:label>misty - physical state</rdfs:label>
        <rdfs:comment>A physical attribute.  #$Misty-PhysicalState is
            the #$PhysicalStructuralAttribute that characterizes mist;
            i.e., being a mixture of a gaseous substance with suspended
            particles of liquid.</rdfs:comment>
        <guid>bd58d50d-9c29-11b1-9dad-c379636f7270</guid>
    </PhysicalStructuralAttribute>
    <daml:Class rdf:ID="Mixing">
        <rdfs:label>mix</rdfs:label>
        <rdfs:comment>A collection of events.  In each #$Mixing, two or
            more substances are combined to form a #$Mixture.</rdfs:comment>
        <guid>bd58e9f0-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
    </daml:Class>
    <daml:Class rdf:ID="Mixture">
        <rdfs:label>mixtures</rdfs:label>
        <rdfs:comment>A collection of tangibles.  Every instance of
            #$Mixture is an at-least-partially tangible thing composed
            of two or more different #$constituents which have been
            mixed.  The stuffs which were inputs to the mixing do not
            form chemical bonds between them, and at a later time the
            mixture may be resolved by some #$SeparationEvent.  Examples
            include all elements of the collections #$Blood, #$Mud,
            #$Air, and #$CarbonatedBeverage.  A mixture has a
            composition but not a structure; thus, the following are NOT
            mixtures, since all have some structure: a wet sponge, a
            person, or a portion of plywood.  Note: By default, mixtures
            are assumed to be stable, i.e., they won&apos;t separate on
            their own.  Use #$separatingConstituent to override this
            default for a constituent that does separate out
            spontaneously (e.g. a #$CarbonatedBeverage going flat).</rdfs:comment>
        <guid>bd58e89f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <daml:disjointWith rdf:resource="#PureCompound"/>
    </daml:Class>
    <daml:Class rdf:ID="Mob">
        <rdfs:label>mobs</rdfs:label>
        <rdfs:comment>A specialization of #$Group.  Each instance of
            #$Mob is a group that contains a large number of objects or
            events of the same type.  Mobs typically have more members
            than would be feasible to enumerate or reify.   One rarely
            refers to particular members of a given mob; and when one
            does, it is usually only to relatively few of them.
            Examples: the #$Andes-Mountains is a mob of mountains; each
            instance of #$Galaxy is a mob of stars; a cupful of sand is
            a mob of grains of sand; and making popcorn involves a mob
            of corn kernel bursting events.</rdfs:comment>
        <guid>bd58ed36-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdfs:subClassOf rdf:resource="#Group"/>
    </daml:Class>
    <daml:Class rdf:ID="Modal">
        <rdfs:label>modal</rdfs:label>
        <rdfs:comment>The collection of all modal auxiliary verbs.
            Modals have only tensed forms, do not inflect for person and
            number, and can take contracted negation. Example: `should&apos;.</rdfs:comment>
        <guid>bd5884c6-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#LinguisticObjectType"/>
        <rdf:type rdf:resource="#SpeechPart"/>
    </daml:Class>
    <Alertness rdf:ID="ModeratelyAlert">
        <rdfs:label>moderately alert</rdfs:label>
        <rdfs:comment>#$ModeratelyAlert is an #$Alertness attribute
            which is a specialization of #$Awake.  It is the normal
            state of an #$Animal which is awake but paying particular
            attention to its environment.  It is a higher
            #$alertnessLevel than #$Sleepy, but lower than #$VeryAlert.</rdfs:comment>
        <guid>bd58a6bc-9c29-11b1-9dad-c379636f7270</guid>
    </Alertness>
    <daml:Class rdf:ID="ModernHumanResidence">
        <rdfs:label>modern residences</rdfs:label>
        <rdfs:comment>A collection of objects; a subset of both
            #$HumanResidence and #$ModernShelterConstruction.  Each
            element of #$ModernHumanResidence is a humanly constructed
            shelter of a modern type, in which people live.  Such
            residences are the typical dwellings in the developed world
            of the late 20th century and may be found in the more
            affluent regions of the developing world.  Examples include
            houses in suburban `developments&apos;, modern apartment
            buildings, `modular&apos; homes, etc.</rdfs:comment>
        <guid>bd58f076-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#ModernShelterConstruction"/>
        <rdfs:subClassOf rdf:resource="#HumanResidence"/>
    </daml:Class>
    <daml:Class rdf:ID="ModernNavalShip">
        <rdfs:label>modern naval ships</rdfs:label>
        <rdfs:comment>The collection of all #$Ships that have been used
            since the Nineteenth Century primarily for naval purposes,
            including military attack and defense, reconnaisance,
            support, rescue, coastal monitoring, etc.  Such a ship is
            naval in this sense even if it is not operated by a #$Navy.
            Most ModernNavalShips are specifically constructed for naval purposes.</rdfs:comment>
        <guid>bd58f0f3-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Ship"/>
    </daml:Class>
    <daml:Class rdf:ID="ModernShelterConstruction">
        <rdfs:label>modern shelter constructions</rdfs:label>
        <rdfs:comment>A collection of construction artifacts; a subset
            of #$Building (q.v.).  An instance of
            #$ModernShelterConstruction is a building that provides
            comfortable shelter for humans during some of their daily
            activities.  Elements of #$ModernShelterConstruction have
            the kinds of features found in modern-day buildings in
            Europe, the USA, and other technologically developed parts
            of the world, namely, amenities like doors, plumbing,
            electricity, and probably some kind of climate control
            system for maintaining humanly comfortable conditions
            indoors.  Examples include the #$NewYorkHiltonAtBroadway,
            the #$SydneyOperaHouse, and instances of the collection
            #$ModernHumanResidence (e.g., a newly built home in a
            suburban development or a renovated brownstone in NYC).</rdfs:comment>
        <guid>bd58a081-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#RealEstate"/>
        <rdfs:subClassOf rdf:resource="#Building"/>
    </daml:Class>
    <daml:Class rdf:ID="MolecularStuff">
        <rdfs:label>molecular stuff</rdfs:label>
        <rdfs:comment>A collection of tangible stuff.  Every instance of
            #$MolecularStuff is a portion of stuff composed of
            covalently-bonded molecules.  Thus, #$Water and #$DNAStuff
            are subsets of #$MolecularStuff; each of their instances
            consists of covalently bonded molecules.  But instances of
            #$Salt-NaCl are not examples of #$MolecularStuff.  Also,
            #$Oxygen is not a subset of #$MolecularStuff, since #$Oxygen
            denotes anything composed of that element, not just O2
            (molecular oxygen) and O3 (ozone). </rdfs:comment>
        <guid>bd59e38c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TangibleStuffCompositionType"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
    </daml:Class>
    <daml:Class rdf:ID="Molecule">
        <rdfs:label>molecules</rdfs:label>
        <rdfs:comment>A collection of microscopic-scale objects; a
            subset of #$ChemicalObject.  Every instance of #$Molecule is
            a microscopic object whose component atoms are all
            chemically bonded to each other; typically, this means that
            the atoms are covalently bonded.  Examples: some instances
            of #$Molecule, including molecules of oxygen (O2), ozone
            (O3), water (H2O), carbon monoxide (CO), carbon dioxide
            (CO2), etc., contain covalently bonded atoms belonging to
            the collection #$Oxygen.  Some highly complex examples of
            #$Molecule are those belonging to the collection
            #$DNAMolecule.  See also #$MoleculeFn.  Note: #$Diamond and
            other macroscopic covalent solids are excluded from
            belonging to #$Molecule by the constraint that instances of
            #$Molecule are microscopic.</rdfs:comment>
        <guid>bd58f0b2-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#ChemicalObject"/>
        <daml:disjointWith rdf:resource="#Solution"/>
        <daml:disjointWith rdf:resource="#LiquidTangibleThing"/>
    </daml:Class>
    <daml:Class rdf:ID="MoneraKingdom">
        <rdfs:label>Monera</rdfs:label>
        <rdfs:comment>A biological kingdom including bacteria, blue
            green algae, and prochlorophytes (recently discovered).  All
            members are prokaryotes - their cells lack a nuclear
            membrane and other internal organelles.</rdfs:comment>
        <guid>bd58cb4b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#BiologicalKingdom"/>
        <rdfs:subClassOf rdf:resource="#ProkaryoticCell"/>
        <rdfs:subClassOf rdf:resource="#Organism-Whole"/>
    </daml:Class>
    <daml:Class rdf:ID="MonetaryExchangeOfUserRights">
        <rdfs:label>monetary exchange of user rights</rdfs:label>
        <rdfs:comment>The collection of events in which two #$Agents
            (#$exchangers) perform two #$TransferringPossessions with
            each other, one of which is a #$MoneyTransfer.  The #$buyer
            gains possession (i.e., some #$UserRightsAttribute) of the
            #$objectPaidFor  from the #$seller, who gains possession of
            the #$objectTendered.  Note that #$Renting, as well as
            #$Buying, is a #$MonetaryExchangeOfUserRights</rdfs:comment>
        <guid>bffb86d0-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#MoneyTransaction"/>
        <rdfs:subClassOf rdf:resource="#ExchangeOfUserRights"/>
        <daml:disjointWith rdf:resource="#Bartering"/>
    </daml:Class>
    <daml:Class rdf:ID="MonetaryFlowRate">
        <rdfs:label>monetary flow rate</rdfs:label>
        <rdfs:comment>A collection of rates; a subset of
            #$ScalarInterval.  Each element of #$MonetaryFlowRate is a
            rate at which money is earned, spent, transferred, lost,
            invested, etc. It is a measurable quantity, expressed as a
            rate of units of money per unit of time, such as
            #$DollarsPerHour (see #$UnitOfMonetaryFlowRate).
            #$MonetaryFlowRate includes generic intervals, such as those
            which describe (in a particular context) #$HighIncomeLevel,
            #$LowIncomeLevel, etc.</rdfs:comment>
        <guid>bd58eb7f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DerivedNumericAttributeType"/>
        <rdfs:subClassOf rdf:resource="#MoneyRate"/>
        <rdfs:subClassOf rdf:resource="#Rate"/>
    </daml:Class>
    <daml:Class rdf:ID="Money">
        <rdfs:label>money</rdfs:label>
        <rdfs:comment>The collection of amounts of currency or debt, by
            which payments, wealth, capital, assets, etc., are measured.
            An instance of #$Money may be considered as either (1) an
            amount of actual, valuable tangible goods (such as gold) or
            (2) a purely abstract quantity.  That is, from one
            perspective, elements of #$Money represent the amount of a
            debt (or credit), while from another perspective, they
            represent what is actually transferred to create or
            discharge a debt.  In either case it is an abstract thing.
            Either (a) money is a backed claim for a certain amount of
            precious physical wealth payable by the government on demand
            (e.g., the gold standard), or (b) money is a legally
            enforced means of debt payment without any backing.  In the
            past, money was created by national governments; today some
            currencies like the Euro or the CFA Franc are created by
            multi-government entities.         Elements of #$Money in
            Cyc may be either a fixed amount, such as five  U.S.
            dollars, or a range, such as `the price of a 1997 Mazda
            Protege&apos;.  See #$UnitOfMoney for the units used by Cyc
            to measure instances of #$Money.         Note: The tangible
            coins, bills, checks, etc., that represent certain amounts
            of #$Money (but which as physical objects may have little
            value) are elements of #$TenderObject, not of #$Money.
            Elements of #$TenderObject which also belong to #$Currency
            are typically associated with some instance of #$UnitOfMoney
            (e.g., #$Dollar-UnitedStates) and have a fixed value.</rdfs:comment>
        <guid>bd58d4d8-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#FundamentalNumericAttributeType"/>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </daml:Class>
    <daml:Class rdf:ID="MoneyRate">
        <rdfs:label>money rates</rdfs:label>
        <rdfs:comment>A collection of rates; a subset of
            #$ScalarInterval.  Each element of #$MoneyRate is a
            measurement applied to something that is measured by
            money-per-amount; e.g., $1.14 per gallon, $10,000 per acre,
            $250 per week, $0.89 per pound.  Important subsets of
            #$MoneyRate include: #$MoneyPerVolumeRate,
            #$MoneyPerAreaRate, #$MoneyPerMassRate, #$MonetaryFlowRate.
            The units for #$MoneyRate measures are terms such as
            #$DollarsPerSquareFoot, #$DollarsPerHour, Yen per kilo, etc.</rdfs:comment>
        <guid>bd58d145-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#AttributeType"/>
        <rdf:type rdf:resource="#DerivedNumericAttributeType"/>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </daml:Class>
    <daml:Class rdf:ID="MoneyTenderType">
        <rdfs:label>money tender type</rdfs:label>
        <rdfs:comment>A collection of collections.  Each element of
            #$MoneyTenderType is a collection of objects of a type
            commonly offered in payment for goods, services, fees,
            wage-work, etc.  Examples include #$Currency, #$CreditCard,
            #$TravellersCheck, #$MoneyOrder, #$PostageStamp,
            #$Check-TenderObject, etc.</rdfs:comment>
        <guid>bd58d8e4-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#ExistingObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="MoneyTransaction">
        <rdfs:label>money transactions</rdfs:label>
        <rdfs:comment>A collection of events.  Each element of
            #$MoneyTransaction is an event in which a transfer of money
            occurs.  Thus, buying something, investing, making a
            donation, executing a bequest and exchanging currency, are
            all examples of #$MoneyTransaction events.</rdfs:comment>
        <guid>bd589db3-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#CommercialActivity"/>
        <rdfs:subClassOf rdf:resource="#MoneyTransfer"/>
    </daml:Class>
    <daml:Class rdf:ID="MoneyTransfer">
        <rdfs:label>money transfer</rdfs:label>
        <rdfs:comment>The most generic collection of events in which
            #$Money changes hands.  Thus, in an instance of
            #$MoneyTransfer, there is some way in which money transfers
            possession -- though `ownership&apos; of the funds may or
            may not be transferred from and/or to the agents involved.
            E.g., an ATM withdrawal from the user&apos;s own account, a
            utility payment made at one&apos;s local grocery store,
            buying a newspaper, getting change for a dollar from a
            cashier, are all examples of #$MoneyTransfer events.
            Compare this collection with its subset #$MoneyTransaction;
            in money #$Transactions, which are also elements of
            #$CommercialActivity, not only is there a transfer of money,
            but it is done as part of an agreement (explicit or
            implicit) between the two participating agents that one will
            do something for the other -- something more than
            bookkeeping -- contingent upon the transfer of funds.</rdfs:comment>
        <guid>bd590a32-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#ChangeInUserRights"/>
        <rdfs:subClassOf rdf:resource="#TransferringPossession"/>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
    </daml:Class>
    <CycHLTruthValue rdf:ID="MonotonicallyFalse">
        <rdfs:label>monotonically false</rdfs:label>
        <rdfs:comment/>
        <guid>bd58f8bc-9c29-11b1-9dad-c379636f7270</guid>
    </CycHLTruthValue>
    <CycHLTruthValue rdf:ID="MonotonicallyTrue">
        <rdfs:label>monotonically true</rdfs:label>
        <rdfs:comment/>
        <guid>bd58f87a-9c29-11b1-9dad-c379636f7270</guid>
    </CycHLTruthValue>
    <TerrainAttribute rdf:ID="MonsoonForest">
        <rdfs:label>monsoon forest</rdfs:label>
        <rdfs:comment>Attribute of deciduous forest areas in eastern
            India, in parts of Southeast Asia, and in northeastern
            Australia.  Growth is associated with the
            #$MonsoonClimateCycles prevailing in those regions.  Source:
            The Times Atlas of the World (1995).</rdfs:comment>
        <guid>c0ec4f7a-9c29-11b1-9dad-c379636f7270</guid>
    </TerrainAttribute>
    <daml:Class rdf:ID="MonthOfYearType">
        <rdfs:label>month of year type</rdfs:label>
        <rdfs:comment>A collection of #$Collections.  Instances of
            #$MonthOfYearType are the canonical subsets of
            #$CalendarMonth.  There are twelve of these in the
            #$JulianCalendar; for example,  #$September is the set of
            all Septembers.</rdfs:comment>
        <guid>bd58ce5e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdf:type rdf:resource="#CyclicalIntervalGroupType"/>
        <rdf:type rdf:resource="#SiblingDisjointCollection"/>
        <rdf:type rdf:resource="#MutuallyDisjointIntervalCollection"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#AnnualEventType"/>
        <rdfs:subClassOf rdf:resource="#ConventionalClassificationType"/>
    </daml:Class>
    <daml:Class rdf:ID="Morning">
        <rdfs:label>mornings</rdfs:label>
        <rdfs:comment>A #$Morning is an #$Event where the #$Sun
            apparently `rises&apos; and `moves&apos; to its
            `highest&apos; position in the daily cycle, i.e. from a
            #$Sunrise or #$MidnightSun to the ensuing noon (the latter
            of which is the #$startingPoint of a #$TimeOfDay-NoonHour)
            Each instance of #$Morning is #$contiguousAfter an
            #$Overnight or #$startsDuring a #$MidnightSun.  An
            #$Afternoon is #$contiguousAfter each #$Morning, and if the
            #$Morning #$startsDuring a #$MidnightSun, that #$Morning is
            #$contiguousAfter an #$Afternoon as well.</rdfs:comment>
        <guid>bd588885-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#QualitativeTimeOfDay"/>
    </daml:Class>
    <daml:Class rdf:ID="Motorboat">
        <rdfs:label>motorboats</rdfs:label>
        <rdfs:comment>The collection of all boats usually powered by
            motors (including in-board and out-board motors).  If a boat
            is primarily a #$Sailboat, but has a back-up motor to use
            when becalmed or piloting, that is not enough to make it a
            Motorboat.  To be more precise, this collection is the
            intersection of #$Watercraft-Surface,
            #$InternalCombustionPoweredDevice and #$TransportationDevice-Vehicle.</rdfs:comment>
        <guid>bd58d72d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#TransportationDevice-Vehicle"/>
        <daml:disjointWith rdf:resource="#Rowboat"/>
    </daml:Class>
    <daml:Class rdf:ID="Motorcycle">
        <rdfs:label>motorcycles</rdfs:label>
        <rdfs:comment>The collection of all motorcycles, two-wheeled
            motorized personal transport devices.  A motorcycle lacks a
            cab or compartment to protect the driver from wind and
            weather.  Since motorcycles are used both on and off road,
            this is not a spec of #$RoadVehicle.</rdfs:comment>
        <guid>bd590474-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#TransportationDevice-Vehicle"/>
        <rdfs:subClassOf rdf:resource="#RoadVehicle"/>
    </daml:Class>
    <daml:Class rdf:ID="Mountain">
        <rdfs:label>mountains</rdfs:label>
        <rdfs:comment>A collection of topographical features.  Each
            element of #$Mountain is a topographical region on the
            planet Earth of significantly higher elevation than its
            surrounding area.  Mountains may occur individually or as
            part of a chain (see #$MountainRange).  Examples:
            #$MountWhitney, #$DiamondHead-Mountain, #$MountKosciusko,
            #$AyersRock, #$MountOlympus.</rdfs:comment>
        <guid>bd58ce0d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#LandTopographicalFeature"/>
    </daml:Class>
    <daml:Class rdf:ID="MountainRange">
        <rdfs:label>mountain ranges</rdfs:label>
        <rdfs:comment>A collection of topographical features.  Each
            element of #$MountainRange is a natural group of mountains.
            Examples: the #$RockyMountains, #$Andes-Mountains, #$Alps-Mountains.</rdfs:comment>
        <guid>bd58e52f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#LandTopographicalFeature"/>
    </daml:Class>
    <daml:Class rdf:ID="Mouth">
        <rdfs:label>mouths</rdfs:label>
        <rdfs:comment>The collection of all animal mouths.  A mouth is a
            container #$AnimalBodyPart of an #$Animal.  It has an
            opening (a #$Portal) to the region outside the organism.
            Through that opening, the animal ingests tangible substances
            from the environment, such as food, water, air, etc.
            Additional activities, such as #$Chewing, may occur in the
            #$Mouth, and it may participate in other activities such as
            talking, kissing, etc.</rdfs:comment>
        <guid>bd589d87-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#UniqueAnatomicalPartType"/>
        <rdf:type rdf:resource="#AnimalBodyPartType"/>
        <rdfs:subClassOf rdf:resource="#BiologicalLivingObject"/>
        <rdfs:subClassOf rdf:resource="#AnimalBodyPart"/>
    </daml:Class>
    <daml:Class rdf:ID="Movement-NonPeriodic">
        <rdfs:label>non-periodic movements</rdfs:label>
        <rdfs:comment>#$Movement-NonPeriodic is a subset of
            #$MovementEvent.  Each element of this collection is an
            #$Event in which the #$objectMoving does not return to a
            previous location or orientation (either not at all or only
            in a chaotic fashion).  E.g., the motion of a basketball
            being dribbled by Magic Johnson as he runs downcourt.  For
            contrast, see #$Movement-Periodic.</rdfs:comment>
        <guid>bd5dac56-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#MovementEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="Movement-Periodic">
        <rdfs:label>movement - periodic</rdfs:label>
        <rdfs:comment>A collection of events, and a subset of
            #$MovementEvent.  An element of this collection is an
            #$Event in which the #$objectMoving returns repeatedly to a
            certain location or orientation at more or less regular time
            intervals.  E.g., the motion of a seesaw one afternoon; the
            dribbling of a basketball in place by Magic Johnson; the
            motion of a slinky going down a staircase as it periodically
            changes its orientation through a fixed, repetive series of orientations.</rdfs:comment>
        <guid>bd658729-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#MovementEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="Movement-Rotation">
        <rdfs:label>rotations</rdfs:label>
        <rdfs:comment>#$Movement-Rotation is a subset of
            #$MovementEvent. Elements of #$Movement-Rotation are those
            moving  events in which the #$primaryObjectMoving is an
            #$objectRotating,  i.e., it rotates about an axis that
            spatially intersects it (or that  goes through a hole in
            it).  For example, the daily rotation of the  #$PlanetEarth
            on its axis, or the rotation of a clock hand about its
            fastened end. A negative example is the orbiting of
            #$PlanetEarth  around the #$Sun - the axis does not
            spatially intersect the  object.</rdfs:comment>
        <guid>bd58cb0a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#MovementEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="Movement-TranslationEvent">
        <rdfs:label>movements from one place to another</rdfs:label>
        <rdfs:comment>This collection is a subset of #$MovementEvent.
            An element of this set is an #$Event in which the center of
            mass of the #$objectMoving changes location, with respect to
            the relevant frame of reference.  Moreover, the whole moving
            object travels along some #$motionPathway-Complete from its
            origin (#$fromLocation) to its stopping place (#$toLocation)
            and must, at some point during the movement, be in a
            different location than it was at the start of motion (even
            if it ultimately returns to the origin).  The moving object
            need not move completely out of its original spatial extent,
            thus a building moving one foot to the left undergoes a
            #$Movement-TranslationEvent. So:  One special subset of
            translational movements includes those in which the movement
            ends in the same place it started from (e.g., one lap of a
            race car around the Indianapolis race track; a trip to the
            grocery store and back); this subset is
            #$Translation-NoLocationChange (including its subset
            #$Translation-RoundTrip).  The other case is where the
            #$fromLocation and #$toLocation of a
            #$Movement-TranslationEvent are different; in that case, the
            movement event is also an element of
            #$Translation-LocationChange (e.g., the movement of the
            baseball during a home run hit by Roger Maris.)     Note
            that a #$Stationary object cannot be an #$objectMoving in a
            #$Movement-TranslationEvent, because it has a zero
            translational velocity.  A swinging pendulum does not
            translate as a whole, because there is a part of the
            pendulum (the fulcrum) that stays in the same  place.
            However, some parts of the pendulum (e.g. the weight at the
            bottom) do undergo translation.--BillJ, Feb 25, 1999</rdfs:comment>
        <guid>bd588e70-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#Translocation"/>
    </daml:Class>
    <daml:Class rdf:ID="Movement-TranslationProcess">
        <rdfs:label>movement processes</rdfs:label>
        <rdfs:comment>#$Movement-TranslationProcess is the subset of
            #$Movement-TranslationEvent whose elements can be
            pragmatically considered to be continuous processes.  In any
            instance of #$Movement-TranslationProcess, all time-slices
            of that process are also themselves elements of
            #$Movement-TranslationProcess.   Note that walking is a type
            of #$Movement-TranslationProcess, even though it involves
            some nonzero accelerations and jerks. A non-example would be
            a plot of the various residences you&apos;ve lived in
            (``moved to&apos;&apos;) over the course of your lifetime;
            another non-example would be Captain Kirk beaming up to the
            Enterprise; another would be the ``tunneling&apos;&apos; of
            an electron in a tunnel diode. Note:  If you believe in
            quantum mechanics, then ultimately all physical motion is
            series of discrete, discontinous ``hops&apos;&apos;.   This
            is where ``PRAGMATICALLY&apos;&apos; continuous vs.
            discontinuous comes in; i.e., in a quantum physics context
            some particular motion might be considered discontinuous,
            whereas in some naive everyday context that same motion is
            considered continuous.</rdfs:comment>
        <guid>bd588e2f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#Movement-TranslationEvent"/>
        <rdfs:subClassOf rdf:resource="#MovementProcess"/>
    </daml:Class>
    <daml:Class rdf:ID="MovementEvent">
        <rdfs:label>moves</rdfs:label>
        <rdfs:comment>#$MovementEvent is the collection of events which
            are principally about an  object or set of objects going
            from one place or set of places to another  place or set of
            places, or from one rotational orientation to another
            rotational orientation. Note that shape changes (see
            #$ShapingSomething) are not a kind of  #$MovementEvent. Each
            instance of #$MovementEvent is a rotation or translation of
            some instance of #$PartiallyTangible, where movement occurs
            relative to a frame of reference which is not part of the
            #$objectMoving.  Thus, Neil Armstrong&apos;s stepping onto
            the Moon&apos;s surface from the lunar landing module is an
            element of #$MovementEvent. Such movements may be periodic
            (e.g., the turning of the Earth on its axis 31 times during
            the month of August 1996) or complex (e.g., Li
            Xiaoshuang&apos;s compulsory floor exercise in the 1996
            Olympics Men&apos;s Gymnastics Team Competition).  Note:
            #$MovementEvent is the most generic collection for physical
            movements.  For representing specific events, one or more of
            the following subsets of #$MovementEvent may be more
            precise: #$Movement-TranslationEvent, #$Movement-Rotation,
            #$Movement-Periodic, #$Movement-NonPeriodic,
            #$Translation-Flow, #$Translation-Complete,
            #$Translation-SingleTrajectory,
            #$Translation-MultiTrajectory.  Some questions to consider
            in selecting the best collection to represent a physical
            movement include: (1) is the movement translational or
            rotational motion? (2) is it periodic or nonperiodic? (3)
            does it involve a discrete motion (i.e., an object&apos;s
            moving completely from one place to another) or a continuous
            flow? (4) does it involve a change of location or no
            location change? (5) does it involve a single pathway or
            more than one?  Note on what is NOT included in
            #$MovementEvent: Consider a person&apos;s raising her hand
            and waving, or a tree&apos;s bending as its branches sway in
            a strong wind, while the person and the tree remain in the
            same place. The movements of the person and the tree do NOT
            qualify as instances of #$MovementEvent, because the
            `doer&apos; in any element of #$MovementEvent must rotate or
            translate as a whole.  The hand movement and the movement of
            the branches do, however, qualify as objects moving in the
            proper sense.  So, for example, an instance of #$WavingAHand
            (done by a person) would have#$subEvents which ARE elements
            of #$MovementEvent, in which the person&apos;s hand is the #$objectMoving.</rdfs:comment>
        <guid>bd590401-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#GeneralizedTransfer"/>
    </daml:Class>
    <daml:Class rdf:ID="MovementProcess">
        <rdfs:label>movements</rdfs:label>
        <rdfs:comment>#$MovementProcess is a subset of #$MovementEvent.
            Its elements are those #$MovementEvents which can be
            considered as continuous motions.  That is, (1) motion
            happens without interruption throughout a #$MovementProcess,
            and thus (2) every time-slice of a #$MovementProcess is also
            a #$MovementProcess.</rdfs:comment>
        <guid>bd5890cd-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#MovementEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="MultiDirectionalCommunication">
        <rdfs:label>dialogues</rdfs:label>
        <rdfs:comment>A collection of complex information transfer
            events.  Each element of #$MultiDirectionalCommunication is
            an event in which more than one agent is involved as a
            #$senderOfInfo.  For example, a conversation or a debate, as
            opposed to a speech or lecture.  The predicate
            #$infoContributed is used to correlate each sending agent
            with the information s/he transmits in such an event.  For
            communication acts having only one sender, see #$CommunicationAct-Single.</rdfs:comment>
        <guid>bd5891c4-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#Communicating"/>
        <daml:disjointWith rdf:resource="#CommunicationAct-Single"/>
    </daml:Class>
    <daml:Class rdf:ID="Multigraph">
        <rdfs:label>multigraph</rdfs:label>
        <rdfs:comment>An instance of #$PathSystemType-Structural and a
            subcollection of #$PathSystem.  Each instance of
            #$Multigraph is an instance of #$PathSystem in which the
            only points are nodes in the system and all paths are made
            of links (i.e., no intermediate points along links).
            Sometime such a system is called a graph or multi-graph in
            graph theory.  A #$Multigraph consists of nodes
            interconnected by links, with loops on single nodes allowed,
            and with multiple links between the same two nodes also
            allowed.  (For a graph with no parallel links and no loops,
            see #$SimpleGraph-GraphTheoretic.</rdfs:comment>
        <guid>bde212ef-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PathSystemType-Structural"/>
        <rdfs:subClassOf rdf:resource="#PathSystem"/>
        <rdfs:subClassOf rdf:resource="#RelationalStructure"/>
    </daml:Class>
    <daml:Class rdf:ID="MusclePoweredDevice">
        <rdfs:label>muscle powered devices</rdfs:label>
        <rdfs:comment>A collection of physical devices.  An instance of
            #$MusclePoweredDevice is a device which is powered by animal
            muscle power (including human labor); e.g., hammers,
            horse-drawn carriages, etc.</rdfs:comment>
        <guid>bd5893ed-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#KineticEnergyPoweredDevice"/>
    </daml:Class>
    <daml:Class rdf:ID="MuscleTissue">
        <rdfs:label>muscle</rdfs:label>
        <rdfs:comment>The collection of all instances of muscle tissue,
            considered as an #$OrganicStuff; that is, the collection of
            all tissue composing the biological organs that convert
            chemical energy into mechanical energy.  E.g., the elements
            of #$Biceps, #$Triceps, #$Heart, #$Stomach, all consist of
            some type of #$MuscleTissue.</rdfs:comment>
        <guid>bd58cc38-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdfs:subClassOf rdf:resource="#BiologicalLivingObject"/>
    </daml:Class>
    <daml:Class rdf:ID="MuscularSystem">
        <rdfs:label>musculatures</rdfs:label>
        <rdfs:comment>The collection of all animals&apos; muscle
            systems.  A #$MuscularSystem of an animal is composed of all
            its muscles, considered as a functional whole.  As a system,
            they work together to enable foot motions in locomotion,
            pumping in circulation, breathing in respiration, biting and
            chewing and swallowing in eating, etc.</rdfs:comment>
        <guid>bd58e6af-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#AnimalBodyPartType"/>
        <rdfs:subClassOf rdf:resource="#AnimalBodyPart"/>
        <rdfs:subClassOf rdf:resource="#BiologicalLivingObject"/>
    </daml:Class>
    <daml:Class rdf:ID="Music">
        <rdfs:label>musica</rdfs:label>
        <rdfs:comment>A collection of sounds; a subset of
            #$SoundInformationBearingThing.  Each element of #$Music is
            a sound produced by actions such as singing, whistling,
            playing an instrument, playing recorded music, etc.  Music
            has certain features that distinguish it from random noise
            (though recognizing them may depend upon a specific cultural
            background); such features usually include variations of
            pitch over time (i.e., melody), multiple (somehow) related
            pitches sounding at one time (i.e., some kind of harmony),
            and/or some regular temporal pattern to the component sounds
            (i.e., rhythm).  Examples of #$Music include: the debut
            performance of Beethoven&apos;s Fifth Symphony; Leonard
            Bernstein&apos;s rendition of the Ninth Symphony with the
            BPO in Berlin in 1989; a particular playing of a particular
            CD of Bernstein&apos;s 1989 Ninth in Berlin; the Messiah
            sing-in in Austin, TX, in 1995.</rdfs:comment>
        <guid>bd58ce26-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#AudibleSound"/>
        <rdfs:subClassOf rdf:resource="#SoundInformationBearingThing"/>
    </daml:Class>
    <daml:Class rdf:ID="MutuallyDisjointIntervalCollection">
        <rdfs:label>mutually disjoint interval collection</rdfs:label>
        <rdfs:comment>A collection of collections.  Any element, X,
            which is an element of #$MutuallyDisjointIntervalCollection
            is a collection of interval types X1, X2, X3,..., whose
            instances are #$temporallyDisjoint; that is, each instance
            of X1 has no temporal intersection with any instance of X2
            or X3 or...; each instance of X2 has no temporal
            intersection with any instance of X1 or X3 or...; etc.  For
            example, consider #$DayOfWeekType, whose instances are
            #$Monday, #$Tuesday,...   It is true that (#$isa
            #$DayOfWeekType #$MutuallyDisjointIntervalCollection),
            because no Monday can temporally intersect any Tuesday or
            Wednesday or....; no Tuesday can temporally intersect any
            Monday or Wednesday or...; etc.  Other elements of
            #$MutuallyDisjointIntervalCollection include
            #$DayOfWeekType, #$CalendarSeasonType, #$HourOfDayType, and
            so on.  See also #$TemporallyDisjointIntervalType.</rdfs:comment>
        <guid>be0111d4-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
    </daml:Class>
    <daml:Class rdf:ID="NLPhraseType">
        <rdfs:label>n l phrase type</rdfs:label>
        <rdfs:comment/>
        <guid>bf03912a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="#LinguisticObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="NTupleInterval">
        <rdfs:label>n tuple interval</rdfs:label>
        <rdfs:comment>A collection of mathematical objects; a subset of
            #$Tuple.  Each element of #$NTupleInterval is a tuple (an
            ordered list of items) whose items are intervals.  For
            example, vectors and complex numbers, as well as scalar
            intervals (which are one-tuples).  Note that intervals in
            Cyc may be numerical, or they may be intervals along any
            scale with distinguishable gradations (e.g., riskiness,
            alertness, roughness of texture).</rdfs:comment>
        <guid>bd58ec55-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#AttributeValue"/>
        <rdfs:subClassOf rdf:resource="#Tuple"/>
    </daml:Class>
    <daml:Class rdf:ID="NamedRoadway">
        <rdfs:label>named roadways</rdfs:label>
        <rdfs:comment>The collection of named parts (stretches or
            segments) of roadways.  (Not roadway the stuff.)  Instances
            are named pieces of roadways (or highways or streets) which
            have names and lengths, and (usually) intersect with other
            roads. </rdfs:comment>
        <guid>bd589614-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Street-Generic"/>
    </daml:Class>
    <daml:Class rdf:ID="Narrative">
        <rdfs:label>narratives</rdfs:label>
        <rdfs:comment>The collection of all
            #$PropositionalConceptualWorks that recount a sequence of
            events (in chronological order or in such a manner that
            their temporal order can be ascertained) involving some
            agent or agents.  Instances of #$Narrative may be fictional
            or factual and, accordingly, may involve #$Persons or
            #$FictionalCharacters.  Important specializations of
            #$Narrative include #$Novel-CW and #$Biography.</rdfs:comment>
        <guid>bd58886c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="NationalOrganization">
        <rdfs:label>national organizations</rdfs:label>
        <rdfs:comment>A collection of organizations.  An element of
            #$NationalOrganization is an organization which has
            nationwide `scope&apos; -- that is, nationwide distribution
            (throughout some #$Country) of members and/or activities, as
            opposed to to local, state-wide or international
            organizations.  Examples: the National Association for the
            Advancement of Colored People and the Daughters of the
            American Revolution in the United States; the Red Guards and
            the Young Pioneers in China (PROC).</rdfs:comment>
        <guid>c0fde577-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Organization"/>
    </daml:Class>
    <daml:Class rdf:ID="NationalPostalService">
        <rdfs:label>national postal services</rdfs:label>
        <rdfs:comment>A collection of national postal services run by
            the governments of their particular countries.  The United
            States Postal Service would be an example, but United Parcel
            Service, since it is a private business, wouldn&apos;t be.</rdfs:comment>
        <guid>bd590797-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="NationalTaxAgency">
        <rdfs:label>national tax agencies</rdfs:label>
        <rdfs:comment>A collection of government organizations.  An
            element of #$NationalTaxAgency is a revenue agency that is
            part of the government of a #$Country and which is concerned
            primarily with collecting tax money (from national taxes)
            from the residents of that #$Country.  This collection does
            NOT include customs agencies and agencies that collect minor
            fees only.</rdfs:comment>
        <guid>bd58d47a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#LegalGovernmentOrganization"/>
    </daml:Class>
    <daml:Class rdf:ID="Nationality">
        <rdfs:label>nationalities</rdfs:label>
        <rdfs:comment>A collection of collections.  Each #$Nationality
            is the set of people resident in (or visiting for a long
            term) some country -- e.g., #$AmericanPerson,
            #$TrinidadAndTobagoPerson, etc.</rdfs:comment>
        <guid>bd58961d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#CollectionType"/>
    </daml:Class>
    <daml:Class rdf:ID="NaturalLanguage">
        <rdfs:label>languages</rdfs:label>
        <rdfs:comment>The collection of languages which are used for
            human communication and evolved naturally. This includes
            dead languages such as Ancient Greek and Latin but excludes
            concocted languages such as Esperanto.</rdfs:comment>
        <guid>bd58f37a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="NaturalTangibleStuff">
        <rdfs:label>natural tangible stuff</rdfs:label>
        <rdfs:comment>A collection of naturally occurring things which
            are at least partly tangible.  Each element of
            #$NaturalTangibleStuff is a naturally occurring tangible
            thing, including, for example, elements of its subsets
            #$EarthStuff, #$Wood, and #$Air.  Man-made materials are NOT
            included in #$NaturalTangibleStuff.</rdfs:comment>
        <guid>bd58d55a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <daml:disjointWith rdf:resource="#ArtificialMaterial"/>
    </daml:Class>
    <daml:Class rdf:ID="NavalShipBase">
        <rdfs:label>naval bases</rdfs:label>
        <rdfs:comment>The collection of all naval bases with facilities
            for #$ModernNavalShips, or operated by a #$Navy.</rdfs:comment>
        <guid>bd624901-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="Navigating">
        <rdfs:label>navigating events</rdfs:label>
        <rdfs:comment>The collection of all events in which the
            performer determines the location of an object in some frame
            of reference, and determines the direction the object should
            travel to reach some destination.  Navigating usually
            involves using some devices (compass, clock, etc.) as aids</rdfs:comment>
        <guid>c0fd6e5f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
    </daml:Class>
    <daml:Class rdf:ID="NavigationDevice">
        <rdfs:label>navigational devices</rdfs:label>
        <rdfs:comment>A collection of physical devices.  An instance of
            #$NavigationDevice is a device used for #$Navigating, i.e.,
            for taking the bearings and plotting the course of someone
            or something travelling through some medium, usually in some
            transportation device.  Instances include the simplest
            elements of #$Compass, but also sophisticated GPS
            (geopositioning systems utilizing satellites.)</rdfs:comment>
        <guid>bd58db99-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#PhysicalDevice"/>
    </daml:Class>
    <daml:Class rdf:ID="Navy">
        <rdfs:label>navies</rdfs:label>
        <rdfs:comment>A collection of military organizations.  An
            element of #$Navy is a military organization, modern or
            historical, composed mainly of seaborne forces and/or forces
            responsible for military operations on water and adjacent
            coastal areas.  Includes battleships and aircraft carriers
            (with their battle groups), submarines, shore patrol
            vessels, and special forces, as well as the support
            personnel of naval bases.</rdfs:comment>
        <guid>bf23bde1-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <daml:disjointWith rdf:resource="#Army-BranchOfService"/>
    </daml:Class>
    <daml:Class rdf:ID="NavyPersonnel">
        <rdfs:label>naval people</rdfs:label>
        <rdfs:comment>A collection of people, a subset   of
            #$MilitaryPerson. Each element of this collection is
            somebody who works for a #$Navy.</rdfs:comment>
        <guid>bd58b598-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#OccupationType"/>
        <rdfs:subClassOf rdf:resource="#MilitaryPerson"/>
    </daml:Class>
    <daml:Class rdf:ID="NegativeInteger">
        <rdfs:label>negative integers</rdfs:label>
        <rdfs:comment>#$NegativeInteger is a subset of #$Integer.  Each
            element of #$NegativeInteger is a whole number less than
            zero; thus, -4, but not 0 or 4 or -4.3.</rdfs:comment>
        <guid>c0fe031d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MeasurableAttributeType"/>
        <rdfs:subClassOf rdf:resource="#Integer"/>
        <rdfs:subClassOf rdf:resource="#NegativeNumber"/>
        <daml:disjointWith rdf:resource="#NonNegativeInteger"/>
    </daml:Class>
    <daml:Class rdf:ID="NegativeNumber">
        <rdfs:label>negative numbers</rdfs:label>
        <rdfs:comment>#$NegativeNumber is a subset of #$RealNumber.
            Each element of #$NegativeNumber is a real number that is
            less than zero; thus, it includes -0.17, but not 0 or 5 or 0.17.</rdfs:comment>
        <guid>c0fe03e3-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MeasurableAttributeType"/>
        <rdfs:subClassOf rdf:resource="#RealNumber"/>
        <daml:disjointWith rdf:resource="#NonNegativeNumber"/>
    </daml:Class>
    <daml:Class rdf:ID="Negotiating">
        <rdfs:label>negotiations</rdfs:label>
        <rdfs:comment>A collection of #$Communicating events.  In a
            #$Negotiating, an #$Agent communicates facts and changes in
            the #$Agent&apos;s attitude or conditions to another
            #$Agent, with the (ostensible) purpose of their reaching an #$Agreement.</rdfs:comment>
        <guid>bd58edff-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#MultiDirectionalCommunication"/>
        <rdfs:subClassOf rdf:resource="#SocialOccurrence"/>
    </daml:Class>
    <daml:Class rdf:ID="Nerve">
        <rdfs:label>nerves</rdfs:label>
        <rdfs:comment>The collection of all nerves.  Each #$Nerve is a
            bundle of many nerve fibers (#$Axons) covered with a
            wrapping of #$ConnectiveTissue.  #$SensoryNerves carry nerve
            impulses to the CNS; #$MotorNerves carry impulses to the
            #$Muscles.  Most #$Nerves are mixed, containing  #$Axons of
            both motor and sensory neurons.</rdfs:comment>
        <guid>c0fde592-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#AnimalBodyPartType"/>
        <rdfs:subClassOf rdf:resource="#Tree-PathSystem"/>
        <rdfs:subClassOf rdf:resource="#AnimalBodyPart"/>
        <rdfs:subClassOf rdf:resource="#CordlikeObject"/>
        <rdfs:subClassOf rdf:resource="#SimplePathSystem"/>
    </daml:Class>
    <daml:Class rdf:ID="NervousSystem">
        <rdfs:label>nervous systems</rdfs:label>
        <rdfs:comment>The collection of all #$Animals&apos; nervous
            systems.  A #$NervousSystem is composed of all the #$Nerves,
            #$Brain, and #$SpinalCord of an animal, and enables the
            animal to sense (#$perceives) things and react to them
            reflexively (from the spine), by instinct (in the
            #$BrainStem, #$Cerebellum, or #$Cerebrum), and or by
            deliberation (in the #$Cerebrum).</rdfs:comment>
        <guid>bd5893fe-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#UniqueAnatomicalPartType"/>
        <rdf:type rdf:resource="#AnimalBodyPartType"/>
        <rdfs:subClassOf rdf:resource="#ConnectedPathSystem"/>
        <rdfs:subClassOf rdf:resource="#BiologicalLivingObject"/>
        <rdfs:subClassOf rdf:resource="#AnimalBodyPart"/>
    </daml:Class>
    <daml:Class rdf:ID="Nervousness">
        <rdfs:label>jitters</rdfs:label>
        <rdfs:comment>Feeling of nervousness and excitability.  One can
            be nervous ABOUT something in particular, or one can have
            undirected feelings of anxiety.   For the former, state an
            assertion of the form (#$feelsTowardsObject ?AGT ?OBJ
            #$Nervousness ?DEGREE) or (#$feelsTowardsEvent ?AGT ?EVNT
            #$Nervousness ?DEGREE); but for the latter (undirected
            feelings of anxiety) use (#$feelsEmotion ?AGT
            #$Nervousness). Note: This is a collection; for an
            explanation of a typical #$FeelingAttributeType, see
            #$Happiness.  A more specialized #$FeelingAttributeType than
            #$Nervousness is #$Panic.</rdfs:comment>
        <guid>bd58c25a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#FeelingAttributeType"/>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </daml:Class>
    <daml:Class rdf:ID="Neutron">
        <rdfs:label>neutrons</rdfs:label>
        <rdfs:comment>A collection of objects; a subset of #$Nucleon.
            Each instance of #$Neutron is a nucleon which has an
            #$ElectricalCharge of 0.</rdfs:comment>
        <guid>bd588216-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Nucleon"/>
    </daml:Class>
    <daml:Class rdf:ID="News">
        <rdfs:label>news</rdfs:label>
        <rdfs:comment>A collection of abstract (intangible)
            informational items.  Each element of #$News consists of
            some factual information about recent events in the world
            (or #$geographicalSubRegions thereof).  News is commonly
            embodied in newspapers and communicated through radio and
            television news broadcasts. Note that #$News does not
            include any #$NewsArticle. Rather, an element of #$News
            might be the content of a #$NewsArticle, and could be the
            content of distinct #$NewsArticles</rdfs:comment>
        <guid>bd58dbd1-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#AbstractInformationalThing"/>
    </daml:Class>
    <daml:Class rdf:ID="Night">
        <rdfs:label>nights</rdfs:label>
        <rdfs:comment>#$Night is the temporal complement of
            #$DaytimeHours:  each #$Night is #$contiguousAfter one
            #$DaytimeHours, and vice versa.  Each #$Night intersects two
            different #$CalendarDays.  Each #$Night is
            #$temporallyStartedBy a #$Dusk, #$temporallyFinishedBy a
            #$Dawn, #$contiguousAfter a #$Sunset, and has a #$Sunrise
            which is #$contiguousAfter it.</rdfs:comment>
        <guid>bd589e0b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#QualitativeTimeOfDay"/>
    </daml:Class>
    <daml:Class rdf:ID="NobleGas">
        <rdfs:label>inert gases</rdfs:label>
        <rdfs:comment>All pieces of all substances that are comprised of
            one type of noble gas</rdfs:comment>
        <guid>bd58c01f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TangibleStuffCompositionType"/>
        <rdfs:subClassOf rdf:resource="#ElementStuff"/>
    </daml:Class>
    <UserRightsAttribute rdf:ID="NonExclusiveUserRights">
        <rdfs:label>non exclusive user rights</rdfs:label>
        <rdfs:comment>An attribute of an object with respect to an
            #$Agent, meaning that the #$Agent has non-exclusive use of
            the object.  All #$Agents can claim this use-right to an
            object if any #$Agent can.  This attribute is not the same
            as #$GroupUserRightsAttribute, as there is no specific group
            to which #$Agents must belong in order to claim this right.
            This is typically used for things so fundamental we hardly
            consider them `rights.&apos;  E.g., the right to breathe
            air, use public parking lots, walk the streets as a free
            person, drive on public roads, etc.  If you think about it,
            though, you&apos;ll realize that there is an implicit
            `group&apos; that can exercise each of those rights.  So
            think of it this way:  one can define the group explicitly
            as a group, and then assert that each member has
            #$GroupUserRightsAttribute (e.g., the group of licensed
            drivers has the right to drive on public roads), or one
            could define a context, a #$Microtheory, in which performers
            of actions defaulted to members of that group, and in that
            context the right (e.g., the right to drive on a public
            road) would be a #$NonExclusiveUserRights.</rdfs:comment>
        <guid>bd58e39b-9c29-11b1-9dad-c379636f7270</guid>
    </UserRightsAttribute>
    <daml:Class rdf:ID="NonLeapYear">
        <rdfs:label>non leap year</rdfs:label>
        <rdfs:comment>The collection of #$CalendarYears which are not
            leap years; i.e., calendar years in which February has 28 days</rdfs:comment>
        <guid>bd58b979-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#CalendarYear"/>
        <daml:disjointWith rdf:resource="#LeapYear"/>
    </daml:Class>
    <daml:Class rdf:ID="NonNegativeInteger">
        <rdfs:label>non-negative integers</rdfs:label>
        <rdfs:comment>#$NonNegativeInteger is the subset of #$Integer
            that excludes the negative integers.  Each element of
            #$NonNegativeInteger is a whole number greater than or equal
            to zero, e.g., 0, 1, 2, 3, ....</rdfs:comment>
        <guid>bd58bf69-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#MeasurableAttributeType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#Integer"/>
        <rdfs:subClassOf rdf:resource="#NonNegativeNumber"/>
        <daml:disjointWith rdf:resource="#NegativeInteger"/>
    </daml:Class>
    <daml:Class rdf:ID="NonNegativeNumber">
        <rdfs:label>non-negative numbers</rdfs:label>
        <rdfs:comment>#$NonNegativeNumber is the subset of #$RealNumber
            that excludes the negative reals.  Each element of
            #$NonNegativeNumber is a  number greater than or equal to
            zero, e.g., 0, 0.173, Pi, 4, 101, ....  Quantities measured
            in units e.g. (#$SecondsDuration 4), (#$Mile 42) are not
            elements of #$NonNegativeNumber but are elements of its
            superset #$NonNegativeScalarInterval.</rdfs:comment>
        <guid>bd58f22b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MeasurableAttributeType"/>
        <rdfs:subClassOf rdf:resource="#RealNumber"/>
        <rdfs:subClassOf rdf:resource="#NonNegativeScalarInterval"/>
        <daml:disjointWith rdf:resource="#NegativeNumber"/>
    </daml:Class>
    <daml:Class rdf:ID="NonNegativeScalarInterval">
        <rdfs:label>non negative scalar interval</rdfs:label>
        <rdfs:comment>For a measurable non-negative quantity, the
            ordered sequence of possible values may be thought of as a
            line. #$NonNegativeScalarIntervals are the line segments (or
            points) on such a line,  representing a range of consecutive
            values, all equal to or greater than 0.  An important subset
            is #$NonNegativeNumber the elements of which correspond to
            the non-negative part of the Real Number Line.  Elements of
            #$NonNegativeNumber are either contiguous sets of points
            there (i.e., a range of numbers) or just  single points
            there (i.e., a number).  Elements of
            #$NonNegativeScalarInterval for which there is some unit of
            measure (e.g. meters, seconds, volts) are not elements of #$NonNegativeNumber.</rdfs:comment>
        <guid>bf7a1c90-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </daml:Class>
    <daml:Class rdf:ID="NonPersonAnimal">
        <rdfs:label>non-human animals</rdfs:label>
        <rdfs:comment>The collection of all #$Animals that are not #$Persons.</rdfs:comment>
        <guid>bd58e066-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Animal"/>
        <daml:disjointWith rdf:resource="#Person"/>
    </daml:Class>
    <daml:Class rdf:ID="NonPhysicalPartPredicate">
        <rdfs:label>nonphysical part predicates</rdfs:label>
        <rdfs:comment>A collection of predicates. Instances of
            #$NonPhysicalPartPredicate are used to describe the
            relationship between a #$PartiallyIntangible and its
            non-physical parts.</rdfs:comment>
        <guid>bd588411-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="#PartPredicate"/>
    </daml:Class>
    <daml:Class rdf:ID="NonPoweredDevice">
        <rdfs:label>non-powered devices</rdfs:label>
        <rdfs:comment>A collection of tangible objects; a subset of
            #$PhysicalDevice.  An instance of #$NonPoweredDevice is a
            device which is `inert&apos; as opposed to being powered in
            any way.  Non-powered devices do not need to have any kind
            of energy supplied to them in order to function -- not even
            kinetic energy supplied by a user (except perhaps to move
            them into place).  E.g., a coat hanger.  Once you hang a
            coat up on it, it does its function without any motion,
            without any energy being converted or used, etc.  So this
            collection is a much smaller collection that than consisting
            merely of devices which don&apos;t require fuel or
            electricity (e.g., a hammer).  It should be noted that an
            inert device need not be #$Stationary during use (though
            many are); for example, tires are inert devices in the sense
            that once they are placed on a vehicle they don&apos;t
            require any energy input to do their job, which is, in
            essence `hanging onto a wheel no matter what!&apos;.  A
            steering wheel, on the other hand, is not a
            #$NonPoweredDevice.  Further examples of #$NonPoweredDevices
            include a table, a floor mat, a bookshelf, an auto ramp, a
            bookmark, a support column, and a shirt.</rdfs:comment>
        <guid>bd59041c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#PhysicalDevice"/>
        <daml:disjointWith rdf:resource="#PoweredDevice"/>
    </daml:Class>
    <daml:Class rdf:ID="NonProfitCorporation">
        <rdfs:label>non-profit corporations</rdfs:label>
        <rdfs:comment>A collection of corporations; a subset of both
            #$LegalCorporation and #$NonProfitOrganization.  An element
            of #$NonProfitCorporation is a #$LegalCorporation which is
            engaged in non-profit or not-for-profit activities.
            Typically, (unlike commercial corporations,) non-profit
            corporations have no shareholders or owners, although they
            are commonly governed by a board (cf. #$BoardOfDirectors).
            Many non-profit organizations are incorporated, including
            charities, political action groups, clubs, and political
            parties.  Most have official non-profit standing with a
            government.  Because they are non-profit organizations,
            non-profit corporations do not pay corporate income taxes.
            For the broader class of non-profit entities, see #$NonProfitOrganization.</rdfs:comment>
        <guid>bd589d6b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#LegalCorporation"/>
        <rdfs:subClassOf rdf:resource="#NonProfitOrganization"/>
    </daml:Class>
    <daml:Class rdf:ID="NonProfitEmployee">
        <rdfs:label>non profit employee</rdfs:label>
        <rdfs:comment>A collection of persons; a subset of
            #$Professional.  Each element of #$NonProfitEmployee is a
            worker who is employed by a non-profit organization such as
            a college, museum, or charity foundation.</rdfs:comment>
        <guid>bd58f621-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#OccupationType"/>
        <rdfs:subClassOf rdf:resource="#Professional"/>
    </daml:Class>
    <daml:Class rdf:ID="NonProfitOrganization">
        <rdfs:label>non profits</rdfs:label>
        <rdfs:comment/>
        <guid>bd58aee8-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Organization"/>
        <daml:disjointWith rdf:resource="#CommercialOrganization"/>
    </daml:Class>
    <daml:Class rdf:ID="NonPublishedText">
        <rdfs:label>unpublished texts</rdfs:label>
        <rdfs:comment>A collection of information bearing things (IBTs).
            #$NonPublishedText is that subset of #$TextualMaterial whose
            elements are text that has not yet been published (such as a
            rejected book manuscript) and may not even be intended for
            publication (such as a memo or personal letter).</rdfs:comment>
        <guid>bd58c599-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#TextualMaterial"/>
        <daml:disjointWith rdf:resource="#PublishedMaterial"/>
    </daml:Class>
    <daml:Class rdf:ID="NonVerbalCommunicating">
        <rdfs:label>nonverbal communicating</rdfs:label>
        <rdfs:comment>A collection of information  transfer events; a
            subset of #$Communicating.  Each element of
            #$NonVerbalCommunicating is a transmission of information by
            means of  some bodily movement other than speaking.  Subsets
            include  #$ShakingHands and #$Cuddling, since such actions
            by definition are  communications involving two actors.
            (Note that #$MakingAGesture  (q.v.) is NOT a subset of
            #$NonVerbalCommunicating; instances of  #$MakingAGesture are
            merely information-encodings.  They may or may  not be
            #$subEvents of #$NonVerbalCommunicating events.)</rdfs:comment>
        <guid>bd588f6b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#Communicating"/>
    </daml:Class>
    <daml:Class rdf:ID="NonlexicalLinguisticObject">
        <rdfs:label>nonlexical linguistic objects</rdfs:label>
        <rdfs:comment>The collection of linguistic objects which are not
            morphemes, but which nonetheless make up part of a language
            system; e.g., the parts of speech.</rdfs:comment>
        <guid>bd588258-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#LinguisticObjectType"/>
        <rdfs:subClassOf rdf:resource="#LinguisticObject"/>
    </daml:Class>
    <GeographicalDirection rdf:ID="North-Directly">
        <rdfs:label>north - directly</rdfs:label>
        <rdfs:comment>Due North, an element of #$TerrestrialDirection.</rdfs:comment>
        <guid>bd58fb02-9c29-11b1-9dad-c379636f7270</guid>
    </GeographicalDirection>
    <GeographicalDirection rdf:ID="North-Generally">
        <rdfs:label>Norths</rdfs:label>
        <rdfs:comment>The general direction of North.  The element of
            #$VectorInterval that comprises the cone-shaped set of
            vectors pointing (from some reference point) within
            approximately forty-five degrees of #$North-Directly.</rdfs:comment>
        <guid>bd588776-9c29-11b1-9dad-c379636f7270</guid>
    </GeographicalDirection>
    <GeographicalDirection rdf:ID="NorthEast-Directly">
        <rdfs:label>north east - directly</rdfs:label>
        <rdfs:comment>The precise Northeast direction from any
            geographic point other than a pole.</rdfs:comment>
        <guid>bd588d73-9c29-11b1-9dad-c379636f7270</guid>
    </GeographicalDirection>
    <GeographicalDirection rdf:ID="NorthEast-Generally">
        <rdfs:label>Northeasts</rdfs:label>
        <rdfs:comment>The general direction of NorthEast.  The
            #$VectorInterval comprising the cone-shaped set of vectors
            pointing (from some reference point) within approximately
            forty-five degrees of pointing in the same direction as #$NorthEast-Directly.</rdfs:comment>
        <guid>c107ca50-9c29-11b1-9dad-c379636f7270</guid>
    </GeographicalDirection>
    <GeographicalDirection rdf:ID="NorthWest-Directly">
        <rdfs:label>north west - directly</rdfs:label>
        <rdfs:comment>The precise Northwest direction from any
            geographic point other than a pole.</rdfs:comment>
        <guid>bd588aad-9c29-11b1-9dad-c379636f7270</guid>
    </GeographicalDirection>
    <GeographicalDirection rdf:ID="NorthWest-Generally">
        <rdfs:label>northwest</rdfs:label>
        <rdfs:comment>The general direction of NorthWest.  The
            #$VectorInterval comprising the cone-shaped set of vectors
            pointing (from some reference point) within approximately
            forty-five degrees of pointing in the same direction as #$NorthWest-Directly.</rdfs:comment>
        <guid>c090ff2d-9c29-11b1-9dad-c379636f7270</guid>
    </GeographicalDirection>
    <daml:Class rdf:ID="Nose">
        <rdfs:label>noses</rdfs:label>
        <rdfs:comment>Facial organ used in smelling and breathing</rdfs:comment>
        <guid>bd58826c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#UniqueAnatomicalPartType"/>
        <rdf:type rdf:resource="#AnimalBodyPartType"/>
        <rdfs:subClassOf rdf:resource="#AnimalBodyPart"/>
        <rdfs:subClassOf rdf:resource="#BiologicalLivingObject"/>
    </daml:Class>
    <SharedNote rdf:ID="NoteAboutArgIsaCycIndexedTerm">
        <rdfs:label>note about arg isa cyc indexed term</rdfs:label>
        <rdfs:comment>Warning! Any time that you make the argIsa of a
            predicate #$CycLIndexedTerm or any spec of #$CycLIndexedTerm
            (#$CycLAssertion or #$CycLReifiableDenotationalTerm), it
            will be concluded that that argument place is a
            #$quotedArgument, i.e., it is the term itself that is being
            referred to in that argument place, not  what the term
            denotes. If you don&apos;t think this should be the cases
            write an exception (see #$exceptFor) to the relevant rule.
            See also #$opaqueArgument.</rdfs:comment>
        <guid>c0ac6b00-9c29-11b1-9dad-c379636f7270</guid>
    </SharedNote>
    <SharedNote rdf:ID="NoteAboutGivingGenericValueFunctionsNumericValues">
        <rdfs:label>note about giving generic value functions numeric values</rdfs:label>
        <rdfs:comment>In some contexts, users may wish to ground
            elements of #$GenericValueFunction by linking them to
            numeric `real world&apos; measurements.  E.g. In a
            driving-on-the-highway-context, one might wish to define
            (#$MediumAmountFn #$Speed) as `between 50 and 60 miles per
            hour&apos;.  The way to assert this is as follows:  (#$and
            (#$minQuantValue (#$MediumAmountFn #$Speed) (#$MilesPerHour
            50))(#$maxQuantValue (#$MediumAmountFn
            #$Speed)(#$MilesPerHour 60))).</rdfs:comment>
        <guid>c030907d-9c29-11b1-9dad-c379636f7270</guid>
    </SharedNote>
    <SharedNote rdf:ID="NoteAboutPredicateCategories">
        <rdfs:label>note about predicate categories</rdfs:label>
        <rdfs:comment>Predicates in Cyc are organized into collections.
            While some, like #$BinaryPredicate, are logically
            well-founded and are referenced in axioms and in the code
            which implements Cyc, others, though based on some
            intuitively plausible criteria, are involved in few (if any)
            axioms and are therefore not integral to Cyc&apos;s
            ontology.  Collections which fall into the latter class are
            generally under review at this time and are flagged with
            this #$sharedNotes.</rdfs:comment>
        <guid>bf8a0b3b-9c29-11b1-9dad-c379636f7270</guid>
    </SharedNote>
    <SharedNote rdf:ID="NoteAboutPurposeSpecificationSlots">
        <rdfs:label>note about purpose specification slots</rdfs:label>
        <rdfs:comment>An instance of #$PurposeSpecificationSlot is a
            #$BinaryPredicate that is used to state the purpose of an
            instance of #$Plan or an instance of #$Event in a planning
            context.  More specifically, instances are used to indicate
            what is supposed to be maintained, insured, prevented,
            stopped, achieved, interrupted, upheld, or thwarted in the
            #$Plan or #$Event in question.  An instance of
            #$PurposeSpecificationSlot does NOT state success criteria
            for the #$Plan or #$Event in question (for identifying
            success criteria, see #$SuccessCriterionSlot).  Also,
            instances of #$PurposeSpecificationSlot do not state
            necessary conditions for instances of #$Plan and #$Event,
            but only goals: an instance of #$Plan may be executed, or an
            instance of #$Situation may &apos;happen&apos;, even though
            the goal is not achieved.</rdfs:comment>
        <guid>beab908e-9c29-11b1-9dad-c379636f7270</guid>
    </SharedNote>
    <SharedNote rdf:ID="NoteAboutScalarIntervalMaxAndMin">
        <rdfs:label>note about scalar interval max and min</rdfs:label>
        <rdfs:comment>If there are two arguments to a #$UnitOfMeasure
            function, as in (#$Meter 5 6), the first number is
            interpreted as the (inclusive) minimum, and the second
            number as the (inclusive) maximum.  Thus, (#$Meter 5 6)
            means `between 5 and 6 meters long, inclusive&apos;.  If
            only one argument follows an element of #$UnitOfMeasure, as
            in (#$Meter 3), it is interpreted as a shorthand for
            (#$Meter 3 3).  In other words, (#$Meter 3 3) means `exactly
            3 meters&apos;.  When a function belonging to
            #$UnitOfMeasure is applied to a single argument, the value
            it returns must be an element of #$ScalarPointValue.</rdfs:comment>
        <guid>bd72a273-9c29-11b1-9dad-c379636f7270</guid>
    </SharedNote>
    <SharedNote rdf:ID="NoteAboutStatingExceptionsInCycL">
        <rdfs:label>note about stating exceptions in cyc l</rdfs:label>
        <rdfs:comment>The formula    (#$exceptWhen      P(?x0 ... ?xn)
            Q(?x0 ... ?xn)))    states that, in situations where
            assertion Q would apply to a set of  bindings for variables
            ?x0 ... ?xn, the conclusion is allowed   `except when&apos;
            P(?x0 ... ?xn)  is true for these variable bindings.  The
            formula    (#$exceptFor [term] Q(?x0))  states that, in
            situations where assertion Q would apply to a variable  ?x0,
            the conclusion is allowed `except for&apos; the situations
            where [term]  is the binding for ?x0.  To be well-formed, Q
            must be a rule with  exactly one free variable.    By
            definition, #$exceptFor is merely syntactic sugar:
            (#$exceptFor [term] Q(?x0))     &lt;=&gt;     (#$exceptWhen
            (equals ?x0 [term]) Q(?x0))  Since an #$exceptWhen statement
            is a meta-statement about some rule   Q(?x0 ... ?xn), the
            statement is not well-formed if Q(?x0 ... ?xn) is  not
            already an assertion in the KB.  Also, strictly speaking, P
            and Q in  the #$exceptWhen merely must share some variables
            rather than all  variables as it&apos;s been written above.
            These constructs replace `abnormal&apos; at the EL
            (epistemological level).  Old assertions of the form:
            (#$implies      P(?x0 ... ?xn)      (abnormal R(?x0 ... ?xn)
            Q(?x0 ... ?xn)))    become:      (#$exceptWhen      P(?x0
            ... ?xn)      Q(?x0 ... ?xn))    The predicate
            `abnormal&apos; has not actually gone away, but was modified
            for use as the HL (Heuristic Level) implementation of
            #$exceptWhen.  Like #$termOfUnit, `abnormal&apos; should be
            viewed as an inference-maintained predicate, and human
            beings should not be manually asserting things using
            `abnormal.&apos;     ;;;  ;; EXAMPLES  ;;;    Rule1: `birds
            fly&apos;  (#$implies    (#$isa ?BIRD #$Bird)
            (#$behaviorCapable ?BIRD #$Flying-FlappingWings
            #$performedBy))    Exception1: `for penguins, the ``birds
            fly&apos;&apos; rule does not apply&apos;  (#$exceptWhen
            (#$isa ?BIRD #$Penguin) [Rule1])    Exception2: `the ``birds
            fly&apos;&apos; rule does not apply to Tweety&apos;
            (#$exceptFor Tweety [Rule1])    Exception3: `for an animal
            with an injured wing, the ``birds fly&apos;&apos; rule does
            not apply&apos;  (#$exceptWhen    (#and (#$anatomicalParts
            ?BIRD ?WING) (#$isa ?WING #$Wing-AnimalBodyPart)
            (#$hasPhysiologicalAttributes ?WING #$Injured))    [Rule1])
            Rule2: ``dogs who like the same cat like each
            other&apos;&apos;  (#$implies   (?and  (#$isa ?DOG1 #$Dog)
            (#$isa ?DOG2 #$Dog) (#$isa ?CAT #$Cat) (#$likesAsFriend
            ?DOG1 ?CAT) (#$likesAsFriend ?DOG2 ?CAT))   (#$likesAsFriend
            ?DOG1 ?DOG2))    Exception3: `Rex does not like other dogs
            according to ``Rule2&apos;&apos;&apos;  (#$exceptWhen
            (#$equals ?DOG1 Rex) [Rule2])    Exception4: `Fifi is not
            liked by other dogs according to `Rule2&apos;&apos;&apos;
            (#$exceptWhen (#$equals ?DOG2 Fifi) [Rule2])    Exception5:
            `Morris is not such a cat according to
            ``Rule2&apos;&apos;&apos;  (#$exceptWhen (#$equals ?CAT
            Morris) [Rule2])</rdfs:comment>
        <guid>be660580-9c29-11b1-9dad-c379636f7270</guid>
    </SharedNote>
    <SharedNote rdf:ID="NoteAboutSuccessCriterionSlots">
        <rdfs:label>note about success criterion slots</rdfs:label>
        <rdfs:comment>An instance of #$SuccessCriterionSlot is a
            #$BinaryPredicate that is used to give a criterion for
            success for an instance of #$Plan or an instance of #$Event
            in a planning context.  More specifically, instances are
            used to indicate what must be maintained, insured,
            prevented, stopped, achieved, interrupted, upheld, or
            thwarted in the #$Plan or #$Event in question, in order for
            it to count as a &apos;success&apos;.  An instance of
            #$SuccessCriterionSlot does NOT give the purpose or goal of
            the instance of #$Plan or #$Event in question, nor does it
            say anything explicitly about that goal or purpose, if it
            exists (for identifying planning purposes, see
            #$PurposeSpecificationSlot).  Also, instances of
            #$SuccessCriterionSlot do not state necessary conditions for
            instances of #$Plan and #$Event, but only criteria for
            success: an instance of #$Plan may be executed, or an
            instance of #$Situation may &apos;happen&apos;, even though
            not all of the success criteria are met.  It does seem to be
            the case that known preconditions for an #$Event instance
            would count as success criteria, and success criteria in
            general may be considered necessary conditions for
            &apos;authorities&apos; believing that a plan&apos;s
            execution was &apos;successful&apos;.</rdfs:comment>
        <guid>beafa170-9c29-11b1-9dad-c379636f7270</guid>
    </SharedNote>
    <SharedNote rdf:ID="NoteAboutTrajectoriesTraversalsAndPaths">
        <rdfs:label>note about trajectories traversals and paths</rdfs:label>
        <rdfs:comment>#$Trajectory, #$Traversal, and #$Path-Generic need
            to be understood as separate concepts.  A motion through
            space always has a #$Trajectory, indicated by
            #$trajectory-Complete.  The trajectory may or may not follow
            some pre-existing or pre-defined #$Path-Generics.  If the
            #$Trajectory does in fact follow a sequence of one or more
            #$Path-Generics, it #$traverses-Complete the #$Traversal
            made of those paths.  A #$Traversal corresponds to a
            sequence of #$Path-Generics linked end-to-end.  Thus if a
            car drives along a road and then a highway, it traverses the
            #$Traversal consisting of the road and the highway linked
            end-to-end.  A #$Path-Generic cannot cross itself, go back
            along itself, or go around a cycle several times, but a
            #$Trajectory or #$Traversal can do these things.   A
            #$Path-Generic may have no (begin-to-end) direction
            associated with it, but a #$Traversal always has one
            particular direction from beginning to end.  A motion&apos;s
            #$Trajectory (#$trajectory-Complete) may follow a particular
            #$Traversal (#$traverses-Complete) of paths within a network
            made of #$Path-Generics.   If the motion goes along a
            #$Traversal consisting of just one #$Path-Generic, then
            #$motionPathway-Complete is used to relate the motion to the
            pre-existing path.  (One way of representing a particular
            #$Traversal of a path system is to represent it with a
            #$PathChain.)  A #$Path-Generic can be part of a specified
            #$PathSystem, or it be part of some (formally-unspecified)
            #$CustomarySystemOfLinks in the real world.</rdfs:comment>
        <guid>c1302845-9c29-11b1-9dad-c379636f7270</guid>
    </SharedNote>
    <SharedNote rdf:ID="NoteForUnitOfMeasureWithPrefixAndNoPrefix">
        <rdfs:label>note for unit of measure with prefix and no prefix</rdfs:label>
        <rdfs:comment>Elements of #$UnitOfMeasureNoPrefix denote units
            of measure that don&apos;t have a multiplicative prefix
            (e.g. `kilo&apos;, `micro&apos;, `billion&apos;).  #$Inch
            and #$MetersPerSecond are such elements.  On the other hand,
            elements of #$UnitOfMeasureWithPrefix do have multiplicative
            prefixes; examples include #$CentimetersPerSecond, (#$Micro
            #$Gram), #$KiloWatt, and #$GramsPerMilliliter.  We need
            these constants in order to prevent references to terms such
            as ((#$Micro (#$Micro #$Gram)) 5) or ((#$Kilo
            (#$CentimetersPerSecond)) 3.2).  If we didn&apos;t have
            these restrictions, equal quantities would allow for an
            undesirable level of possible names for a quantity, e.g.
            ((#$Micro (#$Kilo #$Gram)) 1) would refer to the same
            quantity as ((#$Kilo (#$Micro #$Gram)) 1) would refer to the
            same quantity as (#$Gram .001), etc.</rdfs:comment>
        <guid>c03dd762-9c29-11b1-9dad-c379636f7270</guid>
    </SharedNote>
    <SharedNote rdf:ID="NoteOnArgumentTypingAndPropertiesOfRelations">
        <rdfs:label>note on argument typing and properties of relations</rdfs:label>
        <rdfs:comment>The five collections which share this note are
            defined so that a binary predicate being evaluated for,
            e.g., asymmetry, anti-reflexivity, etc., must NOT have
            argument types which are disjoint with each other.  The
            restriction to non-disjoint argument types (i.e., arg-Isa
            constraints) is to facilitate heuristic expediency in the
            inference engine. (March 1997)  Contact Keith #$Goolsbey if
            you have questions about this restriction.</rdfs:comment>
        <guid>bd65bbc6-9c29-11b1-9dad-c379636f7270</guid>
    </SharedNote>
    <SharedNote rdf:ID="NoteOnCycMergedOntologyConstants">
        <rdfs:label>note on cyc merged ontology constants</rdfs:label>
        <rdfs:comment>This constant represents an important concept in
            the SENSUS Ontology developed by ISI, and has been
            tentatively adopted to fit into the CYC Merged Ontology for
            the DARPA HPKB Project.  These terms are not necessarily
            completely integrated into the Upper Cyc Ontology as of yet (12/97).</rdfs:comment>
        <guid>c02ee79d-9c29-11b1-9dad-c379636f7270</guid>
    </SharedNote>
    <SharedNote rdf:ID="NoteOnOrganismClassification">
        <rdfs:label>note on organism classification</rdfs:label>
        <rdfs:comment>There are two organism classification techniques
            in CYC.  One uses #$BiologicalTaxons (#$BiologicalClass,
            #$BiologicalDivision, #$BiologicalFamily,
            #$BiologicalGenus, #$BiologicalKingdom, #$BiologicalOrder,
            #$BiologicalPhylum,  #$BiologicalSpecies,
            #$BiologicalSubclass, #$BiologicalSubdivision,
            #$BiologicalSubkingdom, #$BiologicalSubspecies) while types
            that cannnot be set within this classification system can be
            instances of the broader concept,
            #$OrganismClassificationType.     If an organism&apos;s
            #$scientificName has been defined (in
            #$AnimalClassificationLexicalMt or
            #$PlantClassificationLexicalMt) then the #$Collection should
            be an instance of the appropriate #$BiologicalTaxon.    It
            may be appropriate to define organism types as instances of
            #$OrganismClassificationType in the #$BaseKB and as
            instances of the appropriate #$BiologicalTaxon in
            #$BiologyMt.     Not all #$OrganismClassificationTypes are
            also #$BiologicalTaxons.   #$TropicalFish,
            #$AirBreathingVertebrate, #$FemaleAnimal, and #$Pachyderm
            would not be #$BiologicalTaxons, while #$BettaSplendens,
            #$Mammal, #$Hippopotamus, and #$Anthrax-Bacterium would be.
            If the knowledge enterer does not know if something is a
            #$BiologicalSpecies or a #$BiologicalGenus (and can not
            easily find out), the concept should be  made an instance of
            #$BiologicalTaxon (if it is known to be one).</rdfs:comment>
        <guid>bde1b771-9c29-11b1-9dad-c379636f7270</guid>
    </SharedNote>
    <SharedNote rdf:ID="NoteOnTypeLevelVsInstanceLevel">
        <rdfs:label>note on type level vs instance level</rdfs:label>
        <rdfs:comment>Quite often we have a property that applies to all
            instances of a collection. The way we represent this in Cyc
            is by a rule saying: &apos;if ?X is an instance of this
            collection, then it has this property&apos;. It is useful
            and common to describe such properties at the collection
            level, but we do not want to create a type level dual for
            each instance level predicate. That is why we have
            #$RuleMacroPredicates. These predicates (along with a axioms
            defining them, and, eventually, coded support for quick
            inferencing), allow one to state those rules more tersely
            and make reasoning at the  collection level possible.</rdfs:comment>
        <guid>c128342c-9c29-11b1-9dad-c379636f7270</guid>
    </SharedNote>
    <daml:Class rdf:ID="Noun">
        <rdfs:label>nouns</rdfs:label>
        <rdfs:comment>The collection of all nouns.</rdfs:comment>
        <guid>be88cb3a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#SpeechPart"/>
        <rdf:type rdf:resource="#LinguisticObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="November">
        <rdfs:label>November</rdfs:label>
        <rdfs:comment>The collection of all Novembers,   the eleventh
            month of the year in the #$JulianCalendar.</rdfs:comment>
        <guid>bd58c0a5-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MonthOfYearType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CalendarMonth"/>
    </daml:Class>
    <TimePoint rdf:ID="Now">
        <rdfs:label>the present</rdfs:label>
        <rdfs:comment>#$Now is a special #$TimePoint which denotes the
            current moment from the perspective of the instantiation of
            #$CycTheCollection that is currently being run (i.e. #$Cyc).
            If one asks (#$indexicalReferent #$Now ?X) one will get an
            answer in which ?X is bound to whatever the time is
            according to the central processing unit of #$Cyc.  Thus the
            referent of #$Now does not vary with the #$Microtheory in
            which one asks (#$indexicalReferent #$Now ?X).  Instead the
            referent of #$Now varies from moment to moment down to the
            resolution of #$Cyc&apos;s central processing unit.  See
            also #$Now-Generally which is not necessarily a #$TimePoint.
            See #$RealTimeMt for a microtheory in which #$Now-Generally
            #$temporallySubsumes #$Now.</rdfs:comment>
        <guid>bd58a068-9c29-11b1-9dad-c379636f7270</guid>
    </TimePoint>
    <daml:Class rdf:ID="NuclearPoweredDevice">
        <rdfs:label>nuclear powered device</rdfs:label>
        <rdfs:comment>A collection of physical devices; a subset of
            #$PoweredDevice.  An instance of #$NuclearPoweredDevice is a
            device which uses nuclear fission or nuclear fusion
            reactions as a source of power.  Examples include elements
            of #$NuclearSubmarine and #$NuclearWeapon.</rdfs:comment>
        <guid>c1009f53-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#PoweredDevice"/>
        <daml:disjointWith rdf:resource="#KineticEnergyPoweredDevice"/>
    </daml:Class>
    <daml:Class rdf:ID="Nucleon">
        <rdfs:label>nucleons</rdfs:label>
        <rdfs:comment>A collection of objects; a subset of
            #$SubAtomicParticle.  Each instance of #$Nucleon is a
            subatomic particle normally found in some atomic nucleus.
            #$Nucleon has two subsets, #$Proton and #$Neutron.  Every
            instance of #$AtomicNucleus is composed of some number of #$Nucleons.</rdfs:comment>
        <guid>bd588191-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#SubAtomicParticle"/>
    </daml:Class>
    <daml:Class rdf:ID="Number-General">
        <rdfs:label>numbers</rdfs:label>
        <rdfs:comment>A collection of mathematical  objects. This is the
            most general class of numbers,  including #$RealNumbers,
            #$ComplexNumbers, various  values of infinity such as Aleph
            Null, and whatever else might count  as a number in mathematics.</rdfs:comment>
        <guid>bf1c02f9-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#MathematicalObject"/>
    </daml:Class>
    <daml:Class rdf:ID="NumericComparison">
        <rdfs:label>numeric comparison</rdfs:label>
        <rdfs:comment>A collection comprising the predicates used to
            compare elements of #$ScalarInterval.  Examples:
            #$greaterThanOrEqualTo, #$greaterThan, #$numericallyEqual.
            Note that `less than&apos; and `less than or equal to&apos;
            are simply inverses of #$greaterThan and
            #$greaterThanOrEqualTo.  E.g., in Cyc `A is less than
            B&apos; is written as (#$greaterThan B A).</rdfs:comment>
        <guid>bd588cf9-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#RelationshipType"/>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="http://www.daml.org/2001/03/daml+oil#Property"/>
    </daml:Class>
    <daml:Class rdf:ID="Nurse">
        <rdfs:label>nurses</rdfs:label>
        <rdfs:comment>The class of health professionals who provide
            various aspects of hands-on health care to patients.  Nurses
            do not usually diagnose or decide on treatments, but they
            administer medicines and treatments, perform medical tests,
            give regular care to hospitalized patients, etc.</rdfs:comment>
        <guid>bd5895de-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MedicalSpecialtyType"/>
        <rdf:type rdf:resource="#OccupationType"/>
        <rdfs:subClassOf rdf:resource="#MedicalCareProfessional"/>
    </daml:Class>
    <daml:Class rdf:ID="Nutrient">
        <rdfs:label>nutrients</rdfs:label>
        <rdfs:comment>A collection of tangible stuff.  Each element of
            #$Nutrient is a substances considered necessary or
            beneficial in the diet of a person or animal.  Nutrients in
            food or pills are often listed on the package label.  Some
            types of #$Nutrient include its subsets #$EdibleSodium,
            #$Protein, #$EdibleCalcium, #$EdibleIron, #$Vitamin.</rdfs:comment>
        <guid>bd58d3c5-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TangibleStuffCompositionType"/>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdfs:subClassOf rdf:resource="#EdibleStuff"/>
    </daml:Class>
    <daml:Class rdf:ID="ObjectType">
        <rdfs:label>types of objects</rdfs:label>
        <rdfs:comment>A collection of collections. If COL is an element
            of #$ObjectType, and ITEM is any element of COL, then if you
            conceptually divide ITEM into two pieces, you do NOT
            generally end up with two elements of COL.  Similarly, for
            most specs SPEC of COL, if you conceptually divide any
            instance of it in two, you do not end up two instances of
            COL.  Another way of thinking of this is:  If you take
            several elements of COL, and put them together, the result
            is generally not another element of COL.  A collection can
            be spatially object-like temporally stuff-like (e.g.
            #$Automobile -- the set of all cars) or spatially stuff-like
            and temporally object-like (e.g. a total eclipse).  See the
            comment for #$StuffType to find out more about the
            distinctions between, and the need for, these four
            collections: #$StuffType, #$ObjectType, #$ExistingStuffType,
            and #$ExistingObjectType.</rdfs:comment>
        <guid>bd58ab9d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
    </daml:Class>
    <daml:Class rdf:ID="ObtainingPermission">
        <rdfs:label>obtaining permission</rdfs:label>
        <rdfs:comment>The collection of events in which one #$Agent gets
            permission from another #$Agent to do something.</rdfs:comment>
        <guid>bd58ee41-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#Transaction"/>
    </daml:Class>
    <daml:Class rdf:ID="OccupationType">
        <rdfs:label>occupations</rdfs:label>
        <rdfs:comment>A collection of collections.  Each element of
            #$OccupationType is a collection of workers, based on their
            kinds of work; each of those workers is an element of
            (#$isa) #$Professional.  Elements of #$OccupationType
            represent all kinds of jobs, not just the kinds of
            occupations colloquially considered `professional&apos;.
            Elements of #$OccupationType include the collections
            #$ComputerProgrammerProfessional, #$FoodServiceEmployee,
            #$MedicalCareProfessional, #$BaseballUmpire,
            #$SalesRepresentative, #$Brewer, #$Gymnast, and many others.
            Also see #$Professional, #$PositionType.</rdfs:comment>
        <guid>bd58a2d9-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="#PersonByActivityType"/>
        <rdfs:subClassOf rdf:resource="#PositionType"/>
    </daml:Class>
    <daml:Class rdf:ID="Ocean">
        <rdfs:label>oceans</rdfs:label>
        <rdfs:comment>A collection of topographical features.  Each
            instance of #$Ocean is one of the oceans of the world.  This
            includes #$TheOceanSea, the interconnected expanse of salt
            water covering 71% of the Earth&apos;s surface, and of which
            the other oceans are subregions.  Examples: #$AtlanticOcean,
            #$ArcticOcean, #$IndianOcean, #$PacificOcean.</rdfs:comment>
        <guid>bd58e4b6-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#SpatiallyDisjointRegionType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Sea"/>
    </daml:Class>
    <daml:Class rdf:ID="OceanLiner">
        <rdfs:label>ocean liner</rdfs:label>
        <rdfs:comment>The subcollection of #$Ship that contains all
            ocean liners, i.e., ships that by design can transport a
            large number of people across oceans.</rdfs:comment>
        <guid>c10088c3-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Ship"/>
    </daml:Class>
    <TwoDimensionalShapeAttribute rdf:ID="OctagonShaped">
        <rdfs:label>octagon shaped</rdfs:label>
        <rdfs:comment>This is the   shape attribute shared by all eight
            sided two dimensional figures.</rdfs:comment>
        <guid>c14d55f8-9c29-11b1-9dad-c379636f7270</guid>
    </TwoDimensionalShapeAttribute>
    <daml:Class rdf:ID="October">
        <rdfs:label>October</rdfs:label>
        <rdfs:comment>The collection of all Octobers,   the tenth month
            of the year in the #$JulianCalendar.</rdfs:comment>
        <guid>bd58c0ef-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MonthOfYearType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CalendarMonth"/>
    </daml:Class>
    <daml:Class rdf:ID="OddNumber">
        <rdfs:label>odd numbers</rdfs:label>
        <rdfs:comment>The set of all odd numbers (integers) including
            positive and negative odd numbers, but not including any
            infinite &apos;numbers&apos;.</rdfs:comment>
        <guid>becb081f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MeasurableAttributeType"/>
        <rdfs:subClassOf rdf:resource="#Integer"/>
        <daml:disjointWith rdf:resource="#EvenNumber"/>
    </daml:Class>
    <daml:Class rdf:ID="Offering-CommunicationAct">
        <rdfs:label>offers</rdfs:label>
        <rdfs:comment>A collection of actions, many of which are speech
            acts.  In each element of this collection,  somebody offers
            to do something, furnish something, make  something the
            case, etc. See also the  #$IllocutionaryForce associated
            with these actions,  #$Offer.</rdfs:comment>
        <guid>bd58eb0b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#CommunicationAct-Single"/>
    </daml:Class>
    <daml:Class rdf:ID="OfficialDocument">
        <rdfs:label>official documents</rdfs:label>
        <rdfs:comment>A collection of #$InformationBearingObjects
            (IBOs).  Each element of #$OfficialDocument is a document
            that can be used as the basis, proof, or support of some
            fact (such as a person&apos;s nationality, marital status,
            credit, or qualifications; or the ownership or transfer of
            property; etc.).  Official documents are typically
            generated, issued, and/or certified by the relevant
            institutions (as with #$Passports or #$StockCertificates),
            but they also include unique personal documents (such as
            wills [#$WillAndTestament]) which meet certain standards to
            be accepted in support of facts. Examples of
            #$OfficialDocument: #$BirthCertificates, #$TaxReturns,
            insurance policies, #$PostageStamps, receipts,
            #$PackingSlips, student ID cards, etc.</rdfs:comment>
        <guid>bd58971b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#TextualMaterial"/>
        <rdfs:subClassOf rdf:resource="#InformationBearingObject"/>
    </daml:Class>
    <daml:Class rdf:ID="Oil">
        <rdfs:label>oil</rdfs:label>
        <rdfs:comment>A collection of tangible things.  Each element of
            #$Oil is a piece of some type of typically viscous,
            primarily hydrophobic liquid hydrocarbon.    For example,
            portions of #$HeatingOil, #$MotorOil, #$PeanutOil,
            #$OliveOil, etc.   NB:  This constant should NOT be used to
            refer to #$Petroleum-CrudeOil   or #$PetroleumProducts (q.v.).</rdfs:comment>
        <guid>bd58d9e9-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TangibleStuffCompositionType"/>
        <rdfs:subClassOf rdf:resource="#LiquidTangibleThing"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangibleProduct"/>
        <rdfs:subClassOf rdf:resource="#OrganicStuff"/>
    </daml:Class>
    <daml:Class rdf:ID="Omnivore">
        <rdfs:label>omnivores</rdfs:label>
        <rdfs:comment>The collection of organisms that feed on both
            plants and animals, and possibly other things.  Subsets of
            #$Omnivore include, for example, #$Person, #$Pig, and #$Bear.</rdfs:comment>
        <guid>bd58a5e1-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
    </daml:Class>
    <ShapeAttribute rdf:ID="OneDimensional">
        <rdfs:label>one dimensional</rdfs:label>
        <rdfs:comment>The shape attribute (see #$ShapeAttribute) shared
            by all objects that have only one dimension, i.e. objects
            which have some discernible form but whose only relevant
            dimension is length (#$lengthOfObject).  Note that both
            curved lines and straight physical linear objects can have
            this attribute as can line segments and geometric lines.
            Also note that the dimension of some things may be deemed to
            be one, two or three dimensional depending upon the context.
            For instance, we may deem a thin wire to be one-dimensional
            insofar as its diameter or thickness are many orders of
            magnitude smaller than its length.  In one microtheory the
            wire might be deemed to be one-dimensional. However, we
            might also imagine contexts in which the other dimensions of
            the wire are relevant and in such contexts the wire might
            have the attribute of being cylindrical.</rdfs:comment>
        <guid>be482e94-9c29-11b1-9dad-c379636f7270</guid>
    </ShapeAttribute>
    <daml:Class rdf:ID="OneStoryBuilding">
        <rdfs:label>one story buildings</rdfs:label>
        <rdfs:comment>Collection of all one story buildings.</rdfs:comment>
        <guid>bd58c60d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Building"/>
        <daml:disjointWith rdf:resource="#ThreeStoryBuilding"/>
        <daml:disjointWith rdf:resource="#TwoStoryBuilding"/>
    </daml:Class>
    <PhysicalAttribute rdf:ID="Opaque">
        <rdfs:label>opaque</rdfs:label>
        <rdfs:comment>#$Opaque is a #$PhysicalAttribute representing a
            specific degree of #$Transparency.  #$Opaque objects do not
            transmit light.  See also #$transparencyOfObject.</rdfs:comment>
        <guid>bd58fa7e-9c29-11b1-9dad-c379636f7270</guid>
    </PhysicalAttribute>
    <daml:Class rdf:ID="OrderOfMagnitudeInterval">
        <rdfs:label>magnitudes</rdfs:label>
        <rdfs:comment>#$OrderOfMagnitudeInterval, a subset of
            #$ScalarInterval, is the collection of intervals which
            represent significant differences in quantity, for the
            various types of measurable properties.  The most familiar
            case is for numbers, in which orders of magnitudes typically
            correspond with powers of 10; thus, in any given numerical
            quantity, the 100&apos;s dominate the 10&apos;s or the
            units, which are negligible with respect to the hundreds.
            In Cyc, we can identify the significant intervals for any
            measurable property.  For example, for #$Time-Quantity, some
            intervals which represent orders of magnitude are:
            #$AFewSecondsDuration, #$AFewMinutesDuration,
            #$AFewHoursDuration, #$AFewDaysDuration,
            #$AFewWeeksDuration, etc.  Similar scales could be
            identified for any measurable property.  Moreover, orders of
            magnitude for the same measurable property may differ
            between microtheories; e.g., the orders of magnitude for
            #$Time-Quantity in a `GeologicalTimeMt&apos; would be much
            larger than those listed above, which are relevant for human
            perceptions and activities.          Any two attributes
            which represent amounts of the same kind of property (e.g.,
            time, distance) and which are also elements of
            #$OrderOfMagnitudeInterval will be assumed to differ so
            substantially in size that the smaller one (and values
            associated with it) will be insignificant compared to the
            larger interval (and values associated with it).  That is,
            in general and as a default, if ORD1 and ORD2 are two
            different elements of #$OrderOfMagnitudeInterval which are
            also elements of the same type of #$AttributeValue (e.g.,
            #$Speed, #$Mass, #$Density), then one is negligible with
            respect to the other.  To know which dominates the other, we
            need additional knowledge about their relative size, e.g.,
            that ORD2 is a #$followingValue of (i.e., &apos;bigger&apos;
            than) ORD1.  See also #$negligibleWRT, #$followingValue.
            The predicate #$orderOfMagnitude (q.v.) is used to relate
            particular quantities to the appropriate element of
            #$OrderOfMagnitudeInterval.  For example, two days -- in
            Cyc, (#$DaysDuration 2) -- has the #$orderOfMagnitude #$AFewDaysDuration.</rdfs:comment>
        <guid>bd58c38a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </daml:Class>
    <daml:Class rdf:ID="Ordering-CommunicationAct">
        <rdfs:label>orders</rdfs:label>
        <rdfs:comment>A collection of actions, many of which are speech
            acts.  In each element of this collection, somebody orders
            somebody to do something. See also the #$IllocutionaryForce
            associated with this action, #$Command.</rdfs:comment>
        <guid>bd58a938-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#Requesting-CommunicationAct"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
    </daml:Class>
    <daml:Class rdf:ID="Organ">
        <rdfs:label>organs</rdfs:label>
        <rdfs:comment>The collection of all the #$Organs of #$Animals;
            i.e., the #$AnimalBodyParts that have specialized
            physiological functions and which are more or less localized
            in the animal.  For example: a heart, a kidney, etc.  A
            borderline case of this is a person&apos;s (whole) skin; in
            some contexts, it is treated as a sense organ, and in some
            contexts it is excluded because it is distributed over their
            entire body.</rdfs:comment>
        <guid>c0fde25a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#AnimalBodyPartType"/>
        <rdfs:subClassOf rdf:resource="#SemiSolidTangibleThing"/>
        <rdfs:subClassOf rdf:resource="#AnimalBodyPart"/>
    </daml:Class>
    <daml:Class rdf:ID="OrganicStuff">
        <rdfs:label>organic substances</rdfs:label>
        <rdfs:comment>A collection of tangible things.  Each element of
            #$OrganicStuff is a tangible thing composed of one or more
            types of organic #$Molecule.  Instances of #$OrganicStuff
            usually have their origin in the bodies (or other products)
            of living things.  Since some organic substances can be
            synthesized, #$OrganicStuff is not a subset of
            #$NaturalTangibleStuff.  Chemically, instances of
            #$OrganicStuff have fairly (or very) complex carbon-based
            structures.  Examples include the elements of the
            collections #$Oil, #$DNA, #$Alcohol-Compound, #$Ivory, #$AnimalBodyPart.</rdfs:comment>
        <guid>bd58c3d0-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TangibleStuffCompositionType"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <daml:disjointWith rdf:resource="#InorganicStuff"/>
    </daml:Class>
    <daml:Class rdf:ID="Organism-Whole">
        <rdfs:label>organisms</rdfs:label>
        <rdfs:comment>The collection of all elements of
            #$BiologicalLivingObject which are wholes, not parts of
            other biological living objects (BLOs).  Most members of
            #$Organism-Whole are capable of existing and reproducing
            while physically separate from other organisms (with
            allowances for sexual reproduction).  Abnormal BLOs which
            are nonetheless considered to belong to #$Organism-Whole
            include elements of #$Virus, as well as sterile hybrids and
            colony organisms like those in slime molds or the elements
            of #$PortugueseManOfWar.  All of those organisms operate by
            DNA- and RNA-controlled mechanisms.</rdfs:comment>
        <guid>bd58c4d6-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#BiologicalLivingObject"/>
        <daml:disjointWith rdf:resource="#OrganismPart"/>
    </daml:Class>
    <daml:Class rdf:ID="OrganismClassificationType">
        <rdfs:label>types of organism</rdfs:label>
        <rdfs:comment>A collection of collections;
            #$OrganismClassificationType is the collection of all
            biological types used to classify animals, plants, or other
            elements of #$Organism-Whole.  The scientific types in
            #$OrganismClassificationType may or may not correspond to
            naive categories of organisms, and, in addition, although
            they are scientific, they might not be officially accepted
            biological taxons at the standard taxonomic levels.
            (#$Invertebrate is an example.)  Compare
            #$BiologicalTaxonType.                Note that
            #$OrganismClassificationType is NOT an element of
            #$SiblingDisjointCollection since there are scientific
            classifications along different dimensions.  Many specs of
            #$OrganismClassificationType are, however, specs of #$SiblingDisjointCollection.</rdfs:comment>
        <guid>bd58dfe4-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#ConventionalClassificationType"/>
    </daml:Class>
    <daml:Class rdf:ID="OrganismPart">
        <rdfs:label>organism part</rdfs:label>
        <rdfs:comment>The collection of all the anatomical parts of all
            living organisms.  It includes gross anatomical parts and
            microscopic anatomical parts of every individual of every species.</rdfs:comment>
        <guid>c1005766-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#BiologicalLivingObject"/>
        <daml:disjointWith rdf:resource="#Organism-Whole"/>
    </daml:Class>
    <daml:Class rdf:ID="OrganismTypeByHabitat">
        <rdfs:label>organism type by habitat</rdfs:label>
        <rdfs:comment>A collection of collections.  Each element of
            #$OrganismTypeByHabitat is a collection of organisms
            characterized by the sort of habitat in which they live.
            For example, #$AquaticOrganism or #$TerrestrialOrganism.</rdfs:comment>
        <guid>bd58a35d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#SiblingDisjointCollection"/>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="#ExistingObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="Organization">
        <rdfs:label>organizations</rdfs:label>
        <rdfs:comment>The collection of all organizations.  Each element
            of the collection #$Organization is a group whose
            #$groupMembers are instances of #$IntelligentAgent, and
            which is established such that certain known relationships
            and obligations exist between the members, and/or between
            the organization and its members, and/or between the
            organization and `outsiders&apos; (individuals or groups).
            #$Organization includes both informal and legally
            constituted organizations.  Organizations can act as agents
            --- specifically, group agents, not individuals (cf.
            #$IndividualAgent) --- to undertake projects, enter into
            agreements, own property, etc.   Most organizations have
            names.  Almost all have at least two members. Examples:
            #$Cycorp, #$NASA, #$FreeSoftwareFoundation,
            #$UnitedStatesArmy, #$KMart-TheCompany.  Note the
            specialization #$OrganizationOfPeopleOnly, whose instances
            have only human members, e.g., an instance of #$Family-Human
            such as Joseph Kennedy&apos;s family.  Other kinds of
            #$Organization have organizations as their #$groupMembers,
            e.g., the #$OrganizationOfAmericanStates.</rdfs:comment>
        <guid>bd58d54f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#SocialBeing"/>
        <rdfs:subClassOf rdf:resource="#Agent"/>
        <daml:disjointWith rdf:resource="#EdibleStuff"/>
        <daml:disjointWith rdf:resource="#BiologicalLivingObject"/>
    </daml:Class>
    <daml:Class rdf:ID="OrganizationPolicy">
        <rdfs:label>policies</rdfs:label>
        <rdfs:comment>A collection of microtheories; a subset of
            #$Agreement.  Each element of #$OrganizationPolicy is a
            microtheory which contains the terms of some policy of a
            particular organization.  For example, U.S. Federal
            government hiring policies; a policy governing a
            corporation&apos;s charitable or political donations; or a
            school dress code.</rdfs:comment>
        <guid>bd58f5fe-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MicrotheoryType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Agreement"/>
    </daml:Class>
    <daml:Class rdf:ID="OrganizationWithBusinessCustomers">
        <rdfs:label>organizations with business customers</rdfs:label>
        <rdfs:comment>A collection of #$Organizations.  An instance of
            #$OrganizationWithBusinessCustomers sells goods and/or
            services to #$customers, most of whom are businesses or
            other #$Organizations, rather than individual #$Persons.</rdfs:comment>
        <guid>bd58ed04-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Organization"/>
    </daml:Class>
    <daml:Class rdf:ID="OrganizationWithIndividualCustomers">
        <rdfs:label>organizations with individual customers</rdfs:label>
        <rdfs:comment>A collection of #$Organizations.  An instance of
            #$OrganizationWithIndividualCustomers sells goods and/or
            services to #$customers, most of whom are individual
            #$Persons, rather than businesses or other #$Organizations.</rdfs:comment>
        <guid>bd58c049-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Organization"/>
    </daml:Class>
    <daml:Class rdf:ID="OrganizationalChart">
        <rdfs:label>organizational charts</rdfs:label>
        <rdfs:comment>A collection of information bearing objects
            (IBOs); a subset of #$StructuredInformationSource.  Each
            element of #$OrganizationalChart is an IBO that graphically
            or in outline fashion depicts information about the control
            structure or resource use structure of an organization.
            E.g., a diagram of Exxon Corporation&apos;s top managers
            showing their reporting structure.</rdfs:comment>
        <guid>bd58fe7e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#StructuredInformationSource"/>
        <rdfs:subClassOf rdf:resource="#IndexedInfoSource"/>
    </daml:Class>
    <daml:Class rdf:ID="OrganizationalTransfer">
        <rdfs:label>organizational transfer</rdfs:label>
        <rdfs:comment>A collection of events.  An
            #$OrganizationalTransfer occurs when some #$IntelligentAgent
            changes  membership with respect to some #$Organization.
            This can involve becoming a  member of the organization,
            ceasing to be a member of it, or switching  from one
            organization to another.  An #$OrganizationalTransfer may be
            voluntarily undertaken by the transferee but may also be
            #$performedBy  some other agent.  Examples include: joining
            a club, being transferred  from one division of a company to
            another, and being excommunicated.  Negative examples
            include: transfer of objects or information between
            organizations (since the transferred items aren&apos;t
            #$IntelligentAgents),   two or more organizations joining
            together in a temporary partnership.</rdfs:comment>
        <guid>bf9ddb52-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="OrganizationalTransferIn">
        <rdfs:label>organizational transfer in</rdfs:label>
        <rdfs:comment>A subcollection of #$OrganizationalTransfer such
            that elements necessarily have some thing which becomes the
            member of the &apos;to organization&apos;.  Exemplars
            include hiring someone to a company, pledging a fraternal
            organization, admitting a nation to NATO.  The event of
            leaving one organization to join another is also an element
            of #$OrganizationalTransferIn as well as
            #$OrganizationalTransferOut.  Negative exemplars include
            layoffs, expulsions, and excommunications which do not
            involve &apos;from organizations&apos;.</rdfs:comment>
        <guid>c09a7d92-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#OrganizationalTransfer"/>
    </daml:Class>
    <daml:Class rdf:ID="OrganizationalTransferOut">
        <rdfs:label>organizational transfer out</rdfs:label>
        <rdfs:comment>A subcollection of #$OrganizationalTransfer such
            that elements necessarily have some thing which stops being
            the member of the &apos;from organization&apos;.  Exemplars
            include laying someone off, expulsions, and
            excommunications.   The event of leaving one organization to
            join another is also an element of
            #$OrganizationalTransferIn as well as
            #$OrganizationalTransferOut.  Negative exemplars include
            &apos;admitting a nation to NATO&apos;, &apos;hiring
            someone&apos;, and &apos;pledging a fraternal organization&apos;.</rdfs:comment>
        <guid>c0b4e100-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#OrganizationalTransfer"/>
    </daml:Class>
    <daml:Class rdf:ID="OrientationAttribute">
        <rdfs:label>orientations</rdfs:label>
        <rdfs:comment>The collection of attributes which characterize an
            object&apos;s orientation relative to whatever instance of
            #$FrameOfReference is being used in the current context.  In
            most contexts, orientation is taken with respect to the #$TerrestrialFrameOfReference.</rdfs:comment>
        <guid>c0fbab60-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#AttributeType"/>
        <rdfs:subClassOf rdf:resource="#AttributeValue"/>
    </daml:Class>
    <daml:Class rdf:ID="OutdoorLocation">
        <rdfs:label>outdoor locations</rdfs:label>
        <rdfs:comment>A collection of geographical regions.  Each
            element of #$OutdoorLocation is a region of outdoor space,
            i.e., a region which is directly subject to atmospheric
            weather.  Objects found in an outdoor location are
            #$in-ImmersedFully in the atmosphere of Earth.  Thus, as
            defined here, #$OutdoorLocation does NOT include elements of
            #$UnderwaterLocation or places that are #$Underground.
            #$OutdoorLocations include large geographical regions.
            Among the elements of #$OutdoorLocation are instances of the
            subsets #$Lawn, #$Meadow, #$SkiSlope, #$Beach, #$Swamp (and
            many others).  Note: #$OutdoorLocation is a collection of
            places, rather than an attribute; to represent the concept
            of being outside, see #$Outdoors-ExposedToWeather.  Of
            course, elements of #$OutdoorLocation have the
            #$locationState attribute of being #$Outdoors-ExposedToWeather.</rdfs:comment>
        <guid>bd58b186-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdfs:subClassOf rdf:resource="#GeographicalRegion"/>
        <daml:disjointWith rdf:resource="#HumanOccupationConstruct"/>
    </daml:Class>
    <daml:Class rdf:ID="OuterGarment">
        <rdfs:label>outer garments</rdfs:label>
        <rdfs:comment>A collection of objects; a subset of
            #$ClothingItem.  Each element of #$OuterGarment is a piece
            of clothing that is worn outside of other garments.  A
            common purpose of outer garments is protection (e.g., the
            subsets #$RainCoat, #$Apron).  An outer garment may also be
            a robe of office or position, such as an academic gown or a
            bishop&apos;s mantle.</rdfs:comment>
        <guid>c0f46c1c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="Ovum">
        <rdfs:label>ova</rdfs:label>
        <rdfs:comment>A subset of #$Cell.  #$Ovum is the collection of
            specialized gamete cells produced by meiosis in the
            reproductive tract of female animals.  Each ovum usually has
            half the number of chromosomes that regular body cells do,
            and when fertilized by a spermatozoon, it becomes a zygote
            and continues to develop into a mature individual.  Also
            called &apos;egg&apos;.  See also #$FemaleAnimal, #$SexualReproductionEvent.</rdfs:comment>
        <guid>bd58bd8a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="OxidationProcess">
        <rdfs:label>oxidations</rdfs:label>
        <rdfs:comment>A collection of events.  In each instance of this
            collection, some amount of #$Oxygen reacts with
            (`reduces&apos;) another substance and releases energy in
            the process.</rdfs:comment>
        <guid>be010767-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#TransformationProcess"/>
    </daml:Class>
    <daml:Class rdf:ID="Oxide">
        <rdfs:label>oxide</rdfs:label>
        <rdfs:comment>A collection of tangible things.  Each element of
            #$Oxide is a portion of stuff in which each molecule
            consists of a combination of oxygen atoms with one or more
            atoms of another element.  For example, instances of #$Water
            (H2O), pieces of rust (#$IronOxide), portions of #$CarbonDioxide.</rdfs:comment>
        <guid>bd58be91-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TangibleStuffCompositionType"/>
        <rdfs:subClassOf rdf:resource="#InanimateThing"/>
    </daml:Class>
    <Entity rdf:ID="PacificOcean">
        <rdfs:label>the Pacific Ocean</rdfs:label>
        <rdfs:comment>The main body of salt water in the
            #$EasternHemisphere-Region, bordering on five continents
            (Western coast of North and South Americas, Australia,
            Antarctica, and Eastern coast of Asia).</rdfs:comment>
        <guid>bd58e0bb-9c29-11b1-9dad-c379636f7270</guid>
    </Entity>
    <daml:Class rdf:ID="Pants">
        <rdfs:label>pants</rdfs:label>
        <rdfs:comment>A collection of objects.  Every element of #$Pants
            is a clothing item worn on the lower torso and legs.  The
            collection #$Pants includes the subsets #$ShortPants and
            #$LongPants.  There are also very specialized subsets, e.g., #$FootballPants.</rdfs:comment>
        <guid>c0fbc8c8-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdf:type rdf:resource="#ProductType"/>
    </daml:Class>
    <daml:Class rdf:ID="Paper">
        <rdfs:label>paper</rdfs:label>
        <rdfs:comment>A collection of tangible things.    Each element
            of #$Paper is a portion of paper, considered  as a
            &apos;stuff&apos; out of which things can be made, like
            metal or plastic.  Thus, this collection includes  the
            collection #$SheetOfPaper, but is wider.  Important sources
            from which paper may be #$derivedFrom   include wood pulp,
            cotton, papyrus, rice.    Examples: business stationery,
            #$MaxiPads, paper currency,   toilet paper, newsprint, paper
            coffee filters, notebook paper.</rdfs:comment>
        <guid>bd589b34-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TangibleStuffCompositionType"/>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdf:type rdf:resource="#ProductType"/>
        <rdfs:subClassOf rdf:resource="#Product"/>
        <rdfs:subClassOf rdf:resource="#SolidTangibleProduct"/>
    </daml:Class>
    <TwoDimensionalShapeAttribute rdf:ID="ParallelogramShaped">
        <rdfs:label>parallelogram shaped</rdfs:label>
        <rdfs:comment>#$ParallelogramShaped is the instance of
            #$ShapeAttribute shared by all closed two-dimensional
            objects that have two edges parallel.</rdfs:comment>
        <guid>c05d0ef0-9c29-11b1-9dad-c379636f7270</guid>
    </TwoDimensionalShapeAttribute>
    <daml:Class rdf:ID="PartOfBuilding">
        <rdfs:label>parts of a building</rdfs:label>
        <rdfs:comment>A collection of parts of a building that are
            &apos;built-in&apos;, that is, built with the intention of
            remaining as part of the building.</rdfs:comment>
        <guid>bd589e2e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="PartOfRoomInAConstruction">
        <rdfs:label>part of room in a construction</rdfs:label>
        <rdfs:comment>A collection of all parts of all instances of
            #$RoomInAConstruction.  This includes both solid parts, like
            #$Mantels, and enclosed regions such as are contained by
            cabinets and #$Cupboards.  Instances should be features
            which are &apos;built-in&apos;, that is, built with the
            intention of remaining as part of the room.</rdfs:comment>
        <guid>bd58efed-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#PartOfBuilding"/>
    </daml:Class>
    <daml:Class rdf:ID="PartPredicate">
        <rdfs:label>part predicates</rdfs:label>
        <rdfs:comment>A collection of predicates.  Instances of
            #$PartPredicate are used to describe the relationship
            between an #$Individual and its #$parts.</rdfs:comment>
        <guid>bd588496-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="#ExtensionalRepresentationPredicate"/>
        <rdfs:subClassOf rdf:resource="http://www.daml.org/2001/03/daml+oil#Property"/>
    </daml:Class>
    <WorkStatus rdf:ID="PartTime">
        <rdfs:label>part time</rdfs:label>
        <rdfs:comment>An attribute; an element of #$WorkStatus.  The
            attribute of being a part-time worker.</rdfs:comment>
        <guid>bd588230-9c29-11b1-9dad-c379636f7270</guid>
    </WorkStatus>
    <WeatherAttribute rdf:ID="PartialCloudCover">
        <rdfs:label>partial cloud cover</rdfs:label>
        <rdfs:comment>#$PartialCloudCover is a #$WeatherAttribute
            representing a specific degree of #$Cloudiness.  This
            attribute describes a location as having some cloud cover
            but not enough to completely block out all direct sunlight.
            Direct sunlight comes and goes as clouds occluding the sun pass.</rdfs:comment>
        <guid>bd58e862-9c29-11b1-9dad-c379636f7270</guid>
    </WeatherAttribute>
    <daml:Class rdf:ID="PartialOrdering">
        <rdfs:label>partial ordering</rdfs:label>
        <rdfs:comment>The collection of all those
            #$MathematicalOrderings ORDER in which the ordering relation
            R is a reflexive, transitive and antisymmetric relation on
            the #$baseSet S of ORDER.  R is reflexive on S if and only
            if for each X in S, R(X X).  R is transitive on S if and
            only if for each X, Y and Z in S, R(X Y) and R(Y Z) imply
            R(X Z).  R is antisymmetric on S if and only if for each X
            and Y in S, R(X Y) and R(Y X) imply X = Y.  For example, if
            you take a set of #$Lists and take the #$sublists relation
            restricted to this set, then you have a #$PartialOrdering
            because #$sublists relation is reflexive, transitive and
            antisymmetric.  Since the ordering relation in each
            #$PartialOrderings reflexive and transitive, the collection
            #$PartialOrdering is a subcollection of #$QuasiOrdering.
            Subcollections of #$PartialOrdering include #$TreeOrdering,
            #$TotalOrdering and #$Lattice-LatticeTheoretic.  If you want
            a #$MathematicalOrdering in which the ordering relation is
            irreflexive, see #$PartialOrdering-Strict.</rdfs:comment>
        <guid>c135aad5-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#QuasiOrdering"/>
    </daml:Class>
    <daml:Class rdf:ID="PartialOrdering-Strict">
        <rdfs:label>strict partial order</rdfs:label>
        <rdfs:comment>The collection of all those
            #$MathematicalOrderings ORDER in which the ordering relation
            R is an irreflexive and transitive relation on the #$baseSet
            S of ORDER, i.e., for each X in S, R(X X) does not hold, and
            for each X, Y and Z in S, R(X Y) and R(Y Z) imply R(X Z).
            For example, if you take the set of all people in the states
            today and take the relation &apos;__ is older than ...&apos;
            on this set, you get a #$PartialOrdering-Strict since the
            relation &apos;__ is older than ...&apos; is irreflexive and
            transitive.  Note that the important difference between a
            #$PartialOrdering and a #$PartialOrdering-Strict is that the
            ordering relation of the former is reflexive while that of
            the latter is irreflexive.  Note also that although we did
            not state in the definition that the ordering relation R of
            a #$PartialOrdering-Strict ORDER must be antisymmetric or
            asymmetric on the #$baseSet S of ORDER, R is in fact
            antisymmetric (i.e., for each X and Y in S, R(X Y) and R(Y
            X) imply X = Y) and asymmetric (i.e., for each X and Y in S,
            R(X Y) and R(Y X) can never be both true) on S. This is
            because both antisymmetry and asymmetry follow from
            transitivity and irreflexivity.</rdfs:comment>
        <guid>be73e9fb-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#MathematicalOrdering"/>
    </daml:Class>
    <daml:Class rdf:ID="PartiallyCommutativeRelation">
        <rdfs:label>partially commutative relation</rdfs:label>
        <rdfs:comment>The collection of #$Relationships which are
            commutative with respect to some but not all of their
            arguments.  Instances of #$PartiallyCommutativeRelation must
            therefore have an #$arity  of at least 3.  See #$CommutativeRelation.</rdfs:comment>
        <guid>beaad779-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdf:type rdf:resource="#RelationshipType"/>
        <rdfs:subClassOf rdf:resource="#Relation"/>
        <daml:disjointWith rdf:resource="#CommutativeRelation"/>
        <daml:disjointWith rdf:resource="#BinaryRelation"/>
        <daml:disjointWith rdf:resource="#UnaryRelation"/>
    </daml:Class>
    <daml:Class rdf:ID="PartiallyIntangible">
        <rdfs:label>partially intangible</rdfs:label>
        <rdfs:comment>The collection of things which have at least some
            intangible part.  This includes things which are purely
            intangible -- for example, instances of #$Collection,
            #$Number-General and #$Agreement.  It also includes things
            which have some tangible part but also have an intangible
            component, such as a newspaper (information content) or a
            person (life).</rdfs:comment>
        <guid>bd58f7b6-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
        <daml:disjointWith rdf:resource="#TangibleThing"/>
    </daml:Class>
    <daml:Class rdf:ID="PartiallyIntangibleIndividual">
        <rdfs:label>partially intangible individual</rdfs:label>
        <rdfs:comment>The collection of things which have at least some
            intangible component and which are also #$Individuals.
            Instances of #$PartiallyIntangibleIndividual either have a
            tangible part, and thus are instances of
            #$CompositeTangibleAndIntangibleObject; or are fully
            #$Intangible, and thus are instances of
            #$IntangibleIndividual, such as the number 42 and the
            agreement between a person and his or her employer.</rdfs:comment>
        <guid>c0139b34-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="#PartiallyIntangible"/>
    </daml:Class>
    <daml:Class rdf:ID="PartiallyTangible">
        <rdfs:label>tangible things</rdfs:label>
        <rdfs:comment>Elements of #$PartiallyTangible have some tangible
            (i.e., material) part and also have a temporal extent (i.e.,
            they exist in time).  They may or may not also have an
            intangible part; e.g., a book is made of matter, has a
            temporal extent, and also has intangible content which is
            the information content of the text that the author wrote.</rdfs:comment>
        <guid>bd58f6ed-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdfs:subClassOf rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
        <rdfs:subClassOf rdf:resource="#SomethingExisting"/>
        <daml:disjointWith rdf:resource="#Intangible"/>
    </daml:Class>
    <daml:Class rdf:ID="PartiallyTangibleProduct">
        <rdfs:label>goods</rdfs:label>
        <rdfs:comment>A collection of spatial objects; a subset of
            #$Product.  Each element of #$PartiallyTangibleProduct is a
            product that has some tangible component and may, but need
            not, have an intangible component (e.g., information).  (See
            also #$PartiallyTangible.)  Examples of
            #$PartiallyTangibleProduct: a newspaper, a photograph, a
            videotape of `Star Wars&apos;, a sack of flour, lumber, a
            mobile home.</rdfs:comment>
        <guid>bd59045b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Product"/>
    </daml:Class>
    <daml:Class rdf:ID="Particle">
        <rdfs:label>particles</rdfs:label>
        <rdfs:comment>A collection of tangibles; a subset of
            #$TangibleThing.  Each element of #$Particle is a smallish
            liquid or solid tangible thing, at least small enough to be
            blown about by ordinary gusts of wind, and possibly much
            smaller.  Examples include elements of the collections
            #$CornMeal, #$SandParticle, #$Sawdust, #$DustParticle, #$Sugar-Table.</rdfs:comment>
        <guid>bd58f47e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#InanimateThing"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <daml:disjointWith rdf:resource="#GaseousTangibleThing"/>
    </daml:Class>
    <daml:Class rdf:ID="Partnership">
        <rdfs:label>partnerships</rdfs:label>
        <rdfs:comment> A collection of #$Organizations that have been
            formally organized as partnerships pursuant to partnership
            agreements.  In the #$UnitedStatesOfAmerica, most instances
            of #$Partnership are organized pursuant to specific
            statutes.  #$GeneralPartners of a #$Partnership are jointly
            and severally liable for the debts and other liabilities of
            the #$Partnership.  The liability of #$LimitedPartners is
            limited in accordance with the governing partnership
            agreement.  The #$PartnershipPartners of an instance of
            #$Partnership may be individuals or entities.  For example,
            an instance of #$LimitedPartnership may have an instance of
            #$LegalCorporation as its #$GeneralPartner and individuals
            as its #$LimitedPartners.</rdfs:comment>
        <guid>bd58a949-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Organization"/>
    </daml:Class>
    <Format rdf:ID="PartsFormat">
        <rdfs:label>parts format</rdfs:label>
        <rdfs:comment>Argument positions of Cyc predicates may have
            specified formats that constrain how many and what kind of
            terms may occupy that position, given some fixed list of
            terms in the other argument positions of the predicate.  If
            a predicate P has #$PartsFormat for argument position N,
            then given some particular list of terms that occupy the
            other argument positions of P, there may be multiple
            assertions with different terms in position N (keeping the
            other arguments fixed), but only so long as the terms in
            position N are all #$physicalParts of the same
            #$PartiallyTangible.  For example, the #$arg1Format of
            #$physicalParts is #$PartsFormat.  This allows us to
            represent that JosephsRightThumbnail is a #$physicalParts of
            JosephsRightThumb, of JosephsRightHand, and of Joseph.  This
            is more restrictive than #$SetTheFormat, which allows
            multiple unrelated values.  In contrast, specifying only
            (#$arg1Format #$physicalParts #$SetTheFormat) would not
            prevent JosephsRightThumb from being a #$physicalParts of
            both JosephsRightHand and of JamesRightHand.</rdfs:comment>
        <guid>c0fb3343-9c29-11b1-9dad-c379636f7270</guid>
    </Format>
    <daml:Class rdf:ID="Party-Celebration">
        <rdfs:label>parties</rdfs:label>
        <rdfs:comment>The collection of party events and other similar
            celebrations such as baby showers.  #$Persons gather
            intentionally at a location in order to communicate or share
            some experience, and to enjoy themselves, but (unlike a
            #$MeetingTakingPlace) business is rarely transacted at a
            #$Party-Celebration, or at least is beside the official
            point of the party. Note: as with most collection worth
            naming, there are borderline cases here; e.g., Tupperware parties.</rdfs:comment>
        <guid>bd588af1-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#SocialGathering"/>
    </daml:Class>
    <daml:Class rdf:ID="Passport">
        <rdfs:label>passports</rdfs:label>
        <rdfs:comment>A collection of official documents.  Each element
            of #$Passport is a document issued to a person by a national
            government in order to identify that person as a citizen of
            said country while s/he is travelling across or outside of
            that country&apos;s borders.</rdfs:comment>
        <guid>c10afd58-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#IDDocument"/>
    </daml:Class>
    <PhysicalStructuralAttribute rdf:ID="Paste-Form">
        <rdfs:label>paste - form</rdfs:label>
        <rdfs:comment>A physical attribute.  #$Paste-Form is the
            #$PhysicalStructuralAttribute which describes solids that
            are pastelike in texture and consistency.  They are very
            easily deformed, and they tend to remain in the deformed
            shape afterwards, provided that they don&apos;t collapse
            under their own weight. Things having #$Paste-Form
            don&apos;t exhibit much elastic deformation at all - they
            don&apos;t &apos;&apos;jiggle&apos;&apos;.</rdfs:comment>
        <guid>be0104a9-9c29-11b1-9dad-c379636f7270</guid>
    </PhysicalStructuralAttribute>
    <daml:Class rdf:ID="Pasteurization">
        <rdfs:label>pasteurizations</rdfs:label>
        <rdfs:comment>The heating of a milk product in order to kill off
            microorganisms that might make it spoil.</rdfs:comment>
        <guid>be00cc5d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#PreservingFood"/>
    </daml:Class>
    <daml:Class rdf:ID="Path-Customary">
        <rdfs:label>routes</rdfs:label>
        <rdfs:comment>The collection of all existing objects that are
            commonly paths, or are normally used as paths or conduits
            for people, animals, vehicles, material or information.  A
            #$Path-Customary is either designed as a path or it has a
            significant known function as a path for movement.  Examples
            include roads, railroads, sea-lanes, cowpaths, boardwalks,
            tubes, channels, blood vessels, fibers, wires, communication
            links, etc.   It is often a #$Path-Spatial.  The collection
            #$Path-Customary does not include all the things that may be
            used as paths in some particular #$PathSystems, but are
            otherwise not ordinarily viewed as paths (though the latter
            are still instances of #$Path-Generic).  If a
            #$Path-Customary is an instance of a certain #$PathType, it
            may be assumed to be part of a system (not explictly given)
            of such paths, called a #$CustomarySystemOfLinks.  Or, on
            the other hand, it may be asserted to be part of a
            particular specified #$PathSystem using the predicate
            #$pathInSystem.  A #$Path-Customary is either a
            #$Path-Simple (with two distinct ends, not forming a cycle)
            or else a #$Path-Cyclic.</rdfs:comment>
        <guid>bee87cc9-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Path-Spatial"/>
    </daml:Class>
    <daml:Class rdf:ID="Path-Cyclic">
        <rdfs:label>cyclic paths</rdfs:label>
        <rdfs:comment>The collection of all cyclic paths, i.e. paths
            that form cycles, circles, loops or circuits.  An instance
            of #$Path-Cyclic is a #$Path-Generic that can be described
            as a cycle, i.e., a thing like a #$Path-Simple except that
            the ends of the path join at one point.   A #$Path-Cyclic
            cannot cross itself (as in a figure-eight) nor double back
            along itself.  More formally, let PATH1 and PATH2 be two
            #$Path-Simples.  Suppose that each end-point of PATH1 is an
            end point of PATH2 and vice versa, and for each X, X is a
            point on both PATH1 and PATH2 only if X is an end point of
            both paths.  Then PATH1 and PATH2 together form a
            #$Path-Cyclic.  We allow &apos;loops&apos;; a loop is a
            cycle with only one point on it, looping from the point
            right back to itself.   Each loop of a path system is a
            special instance of #$Path-Cyclic.  For differences between
            a cycle and a loop in the same #$PathSystem, see
            #$loopInSystem and #$cycleInSystem.</rdfs:comment>
        <guid>bfa3129f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#Path-Generic"/>
        <daml:disjointWith rdf:resource="#ConvexTangibleObject"/>
        <daml:disjointWith rdf:resource="#Path-Simple"/>
    </daml:Class>
    <daml:Class rdf:ID="Path-Generic">
        <rdfs:label>generic paths</rdfs:label>
        <rdfs:comment>A collection of #$Things that are paths or can be
            considered paths.  Each #$Path-Generic is either a
            #$Path-Simple or a #$Path-Cyclic, i.e., either a
            non-self-crossing path or a cycle.  A #$Path-Generic may be
            abstract (as in Graph Theory), or it may be concrete such as
            a #$Path-Customary, for example a road, railroad, sea-lane,
            cowpath, pipe, blood vessel, fiber or wire, or on the other
            hand it could be anything that is used as a path in some
            #$PathSystem.  If a #$Path-Generic is a #$Path-Customary,
            then it may or may not have a specified #$PathSystem in
            which it is a path; if the #$Path-Generic is not a
            #$Path-Customary, then it can only be a path in some given
            #$PathSystem.  For example, an orange is not a customary
            path, but it can be a path for ants in a specified ant path
            system.  For any #$Path-Generic, there can be a #$Traversal
            of something moving along that path; a single #$Traversal
            can cross itself, double back along itself, and/or go back
            and forth along some part of a #$Path-Generic any number of times.</rdfs:comment>
        <guid>c110820b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
    </daml:Class>
    <daml:Class rdf:ID="Path-Simple">
        <rdfs:label>paths</rdfs:label>
        <rdfs:comment>A collection of non-cyclic paths, broadly
            conceived.  Each instance of #$Path-Simple has two ends and
            it forms a #$pathBetween them.  It can be a road, railroad,
            air lane, sea lane, channel, blood vessel, part of an
            electric circuit, part of a pipe system, or even some
            abstract chain of connections among people or a
            &apos;path&apos; in Graph Theory.  A #$Path-Simple cannot
            cross itself, return to the same point, nor double back
            along itself.  Each #$Path-Simple has two distinct ends that
            do not &apos;overlap&apos; each other.  But in general a
            path may have more than two things that are its
            &apos;end-points&apos; -- for example, a path between Austin
            and Pittsburgh can also be a path between Texas and
            Pennsylvania.  In such an example Texas and Pennsylvania are
            required to be spatially disjoint.   (To prohibit multiple
            things being an end-point of a path simultaneously, specify
            a #$PathSystem, because in a specified #$PathSystem a
            path&apos;s two end points in the system are unique.  The
            predicate #$pathBetweenInSystem is restricted to a set of
            paths and points specified for the particular #$PathSystem.)
            For a #$Path-Simple, any points on it (e.g., #$pointOnPath X
            PATH) are connected: &apos;#$pathConnects&apos; is true of
            them.  Any number of intersections may occur along a
            #$Path-Simple.   A path with no intersections along it is a
            #$SimpleSegmentOfPath.  A path may have #$subPaths.  A path
            is different from a #$Traversal or a #$Trajectory: a
            #$Traversal is the trace of an object moving along paths,
            often in a #$PathSystem, and the #$Traversal can cross
            itself and/or double back along itself any number of times.
            While a path is fixed and may have no direction, a
            #$Traversal has a particular direction.  Many distinct
            traversals may traverse the same underlying path (see
            #$Traversal and #$traversalInSystem), since a traversal can
            go back and forth across the same part of a path any number
            of times.  A #$Trajectory (the space of a motion), if is
            goes along paths, determines a particular #$Traversal of
            those paths.</rdfs:comment>
        <guid>bd588e69-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#Path-Generic"/>
        <daml:disjointWith rdf:resource="#Path-Cyclic"/>
    </daml:Class>
    <daml:Class rdf:ID="Path-Spatial">
        <rdfs:label>spatial paths</rdfs:label>
        <rdfs:comment>The collection of all paths (instances of
            #$Path-Generic) that have spatial extent, and that join
            spatially located things.  This includes roads, corridors,
            wires, blood vessels, nerves, etc. and it excludes purely
            abstract paths such as those in kinship diagrams,
            mathematics, etc.  A #$Path-Spatial may be a pre-existing
            path in a #$CustomarySystemOfLinks (like a road, nerve,
            etc.), or it may be a path in some specially specified
            #$PathSystem which consists of spatial paths.  A motion (a
            #$Movement-TranslationEvent) may follow an existing
            #$Path-Spatial or it may not; contrast this with the
            #$Trajectory of the motion, which is generated by every #$Movement-TranslationEvent.</rdfs:comment>
        <guid>c095e890-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#SomethingExisting"/>
        <rdfs:subClassOf rdf:resource="#Path-Generic"/>
    </daml:Class>
    <daml:Class rdf:ID="PathArtifact">
        <rdfs:label>path artifact</rdfs:label>
        <rdfs:comment>A collection of artifacts.  Each element of
            #$PathArtifact is a path made by agents, whether animal or
            human.  Elements of #$PathArtifact range from deer trails to
            superhighways.  Such paths connect places that animals or
            people are found in and/or between which they want to
            travel.  Examples: #$ErieCanal, #$WellandShipCanal,
            #$ChampsElysee, #$WallStreet, USHighway80, #$Highway101CA.
            Note that each of these artifacts is a single, particular
            path; -- to refer to a whole system of #$PathArtifacts, use #$PathArtifactSystem.</rdfs:comment>
        <guid>bd588ea2-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#ConstructionArtifact"/>
        <rdfs:subClassOf rdf:resource="#Path-Customary"/>
        <daml:disjointWith rdf:resource="#RoomInAConstruction"/>
        <daml:disjointWith rdf:resource="#ShelterConstruction"/>
    </daml:Class>
    <daml:Class rdf:ID="PathArtifactSystem">
        <rdfs:label>path artifact system</rdfs:label>
        <rdfs:comment>The collection of all artifical systems of
            #$PathArtifacts.  These are the systems rather than the
            paths that comprise them: each #$PathArtifactSystem is a
            composite individual typically made up of many
            interconnected #$PathArtifacts.  Examples would include a
            instance of a #$GutterSystem, #$ComputerNetwork, various
            road and highway systems, etc.</rdfs:comment>
        <guid>be60aba5-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#CustomarySystemOfLinks"/>
        <daml:disjointWith rdf:resource="#RoomInAConstruction"/>
        <daml:disjointWith rdf:resource="#ShelterConstruction"/>
    </daml:Class>
    <daml:Class rdf:ID="PathChain">
        <rdfs:label>path chain</rdfs:label>
        <rdfs:comment>The collection of all path chains, or lists of
            points and paths alternating.  A path chain is a #$List LIST
            = (X(1) Y(1) X(2) Y(2) ... X(n) Y(n) X(n+1)) satsifying the
            following conditions: (i) each X(k) is a #$Thing and each
            Y(k) is a #$Path-Generic, i.e., the length of LIST is an odd
            number greater than 2, every even-numbered position in LIST
            is a #$Path-Generic and every odd-numbered item is a
            #$Thing.  (ii) Each #$Path-Generic in the list joins the
            points just before and after it.  That is to say, (iia) if
            the kth item PATH in LIST is a #$Path-Simple, and if A is
            the (k-1)th item and B is the (k+1)th item in LIST, then
            (#$pathBetween PATH A B) holds, and (iib) if the kth item
            CYCLE is a #$Path-Cyclic, and if A is the (k-1)th item and B
            is the (k+1)th item in LIST, then (#$pointOnCycle A CYCLE)
            holds and A = B.  Note that the concatenation of all the
            paths (simple or cyclic) in such a list results in a
            #$Traversal.  For example, letting PATH1 and PATH2 be
            instances of #$Path-Simple and CYCLE a #$Path-Cyclic, if
            (#$pathBetween PATH1 A B), (#$pathBetween PATH2 B C) and
            (#$pointOnCycle C CYCLE), then (#$TheList A PATH1 B PATH2 C
            CYCLE C) is a #$PathChain.  Note that although each instance
            of #$PathChain determines a unique instance of #$Traversal
            that is from X(1) to X(n+1), many different #$PathChains may
            determine the same #$Traversal.</rdfs:comment>
        <guid>c0bb98f7-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#List"/>
    </daml:Class>
    <daml:Class rdf:ID="PathForWheeledVehicles">
        <rdfs:label>roads</rdfs:label>
        <rdfs:comment>Each instance of #$PathForWheeledVehicles is an
            instance of #$PathArtifact, whose primary function is to
            serve as a place along which wheeled vehicles may move or
            park. Usually but not necessarily they are paved.</rdfs:comment>
        <guid>bd59029a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#PathArtifact"/>
        <rdfs:subClassOf rdf:resource="#FixedStructure"/>
        <rdfs:subClassOf rdf:resource="#SurfaceOnTangibleObject"/>
        <rdfs:subClassOf rdf:resource="#OutdoorLocation"/>
    </daml:Class>
    <daml:Class rdf:ID="PathSystem">
        <rdfs:label>path system</rdfs:label>
        <rdfs:comment>The collection of all specified systems of paths
            and links.  An instance of #$PathSystem may consist of
            real-world (#$PartiallyTangible) things, or #$Intangibles
            like a graph (or #$Multigraph) in Graph Theory, in which
            nodes are linked by links.  But unlike a graph in Graph
            Theory, there can be many path-points on a path between
            designated nodes.  These non-node path-points can be
            discrete, dense or even continuous.  Such a path system does
            not have to be &apos;connected&apos; (in the sense that for
            any points X and Y in the system, there must be a path
            connecting them, see #$ConnectedPathSystem).  Each instance
            SYS of #$PathSystem consists of a nonempty set of
            &apos;points&apos;, a subset of it called &apos;nodes&apos;,
            a set of &apos;links&apos;, and optionally a set of
            &apos;loops&apos;.  Here, &apos;point&apos; is a nonempty
            set of #$Things called &apos;points in SYS&apos; (see
            #$pointInSystem).  The set &apos;node&apos; is a nonempty
            subset of &apos;point&apos; (see #$nodeInSystem).  Link is a
            (possibly empty) set of (primitive) paths whose elements are
            called &apos;links in SYS&apos; (see #$linkInSystem).  Loop
            is a (possibly empty) set of (primitive) cycles whose
            elements are called &apos;loops in SYS&apos; (see
            #$loopInSystem).  To finish your definition of a path system
            SYS, you need to specify, using the predicates below (other
            than the four mentioned above), which link is between which
            two nodes, and which point is on which link, and which node
            is on which loop, etc.  The rest should be determined by
            your set-up of the system.  For example, #$pathBetween can
            be used to specify the &apos;end points&apos; of each link,
            #$pointOnPath can be used to specify which point is on which
            link, #$pointOnCycle specifies which node is on which loop,
            and, when more points than the end-points of a link are
            desired to be on the link, #$betweenOnPath can be used to
            specify the relative positions of all points on a link.  But
            there are more convenient ways to set up your SYS.  For
            example, if you use #$linkBetweenInSystem which is a
            combination of other predicates, it will give you what you
            need when using #$linkInSystem, #$pathBetween,
            #$nodeInSystem, #$pointOnPath to setup your system (except
            that this will not give you those assertions about isolated
            nodes or points on a link between its end points).  See
            #$pointInSystem, #$nodeInSystem, #$linkInSystem,
            #$linkBetweenInSystem (an abbreviation), #$pathInSystem,
            #$pathBetweenInSystem (an abbreviation), #$pointOnPath,
            #$betweenOnPath, #$loopInSystem, #$pointOnCycle,
            #$junctionInSystem, #$deadEndInSystem,
            #$isolatedNodeInSystem and #$connectedInSystem.  Note that a
            path system may satisfy further condition in addition to
            those determined by the conditions on these predicates.  For
            example, links and loops may have &apos;directions&apos;.
            When further conditions are added to some path systems, we
            expect different kinds of path systems. For some particular
            kinds of path systems, see #$Semi-DirectedPathSystem,
            #$DirectedPathSystem, or #$PathSystemType-Structural in
            general.  For subsystem relation between path systems, see #$subPathSystems.</rdfs:comment>
        <guid>bfd62da4-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
    </daml:Class>
    <daml:Class rdf:ID="PathSystemType-Structural">
        <rdfs:label>path system type - structural</rdfs:label>
        <rdfs:comment>A collection of collections.  Instances of
            #$PathSystemType-Structural are collections of path systems,
            including #$PointFinitePathSystem, #$NodeFinitePathSystem,
            #$LinkFinitePathSystem, #$FinitaryJunctionPathSystem,
            #$SimplePathSystem, #$Multigraph, #$FiniteMultigraph,
            #$SimpleGraph-GraphTheoretic, #$ConnectedPathSystem,
            #$Semi-DirectedPathSystem, #$DirectedPathSystem,
            #$BidirectedPathSystem, #$DirectedAcyclicPathSystem,
            #$BoundedDirectedPathSystem, #$DirectedMultigraph,
            #$DirectedGraph, #$DirectedAcyclicGraph,
            #$BoundedDirectedAcyclicGraph, #$NetworkFlowSystem-Bounded, etc.</rdfs:comment>
        <guid>befbfb9f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
    </daml:Class>
    <daml:Class rdf:ID="PathType">
        <rdfs:label>path type</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$PathType is a collection that is a subcollection of
            #$Path-Generic.  There are several types of path, according
            to the medium or surface the path goes through or over.  In
            addition, the collection #$PathArtifact can be broken down
            into more specific #$PathTypes.  At a #$JunctionOfPaths, the
            joined paths all have at least one #$PathType in common.</rdfs:comment>
        <guid>bd58ce38-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#SiblingDisjointCollection"/>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="#ObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="Paying">
        <rdfs:label>payments</rdfs:label>
        <rdfs:comment>A collection of events; a subset
            of#$MoneyTransfer.  Each element of #$Paying is an event in
            which one agent pays money to another agent.  The payer is
            the #$fromPossessor; the recipient is the #$toPossessor.  In
            all payings, the payer gives the payee #$FullUseRights to
            the money. Some types of payings: (1) all instances of
            #$Buying and #$Renting contain (at least one) #$subEvents
            which are elements of #$Paying; (2) making charitable
            contributions; (3) paying off one&apos;s gambling debts; (4)
            paying an employee&apos;s salary or a child&apos;s
            allowance.  Writing a check or offering a credit card in
            payment are #$firstSubEvents of paying events; such payings
            are successful only if the check is not lost or stolen, if
            it clears the bank, etc.  On the other hand, filling out a
            pledge card, e.g., for United Way, is NOT considered a
            #$Paying event or part of one, because it does not involve
            or initiate any legal reassignment of rights to the money.</rdfs:comment>
        <guid>bd590a1d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#MoneyTransaction"/>
        <rdfs:subClassOf rdf:resource="#TransferringOwnership"/>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
    </daml:Class>
    <daml:Class rdf:ID="PayingCasualUseFee">
        <rdfs:label>collections of fees for use</rdfs:label>
        <rdfs:comment>#$PayingCasualUseFee is the collection of events
            in which one agent pays a fee to another in exchange for the
            right to use something that the latter controls Examples:
            paying a parking fee, paying a bridge or highway toll,
            paying an admissions fee to an art museum.
            #$PayingCasualUseFee covers usage that is temporary and
            possibly not exclusive.  For longer-term use arrangements,
            see #$Renting.  Note: events in #$PayingCasualUseFee are
            both payings and collectings (cf. #$Buying).  The agent
            doing the paying is the #$buyer, and the agent doing the
            collecting is the #$seller.  The object accessed is the #$objectPaidFor.</rdfs:comment>
        <guid>be3b796b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#MonetaryExchangeOfUserRights"/>
    </daml:Class>
    <daml:Class rdf:ID="Pensive">
        <rdfs:label>pensive</rdfs:label>
        <rdfs:comment>A feeling of deep thoughtfulness, reflection, or
            introspection, and sometimes melancholia.  This is a
            #$Collection --- for an explanation of that, see #$Happiness.</rdfs:comment>
        <guid>be00fb74-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#FeelingAttributeType"/>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </daml:Class>
    <TwoDimensionalShapeAttribute rdf:ID="PentagonShaped">
        <rdfs:label>pentagon shaped</rdfs:label>
        <rdfs:comment>This is the   shape attribute shared by all five
            sided two dimensional figures.</rdfs:comment>
        <guid>bf3e6140-9c29-11b1-9dad-c379636f7270</guid>
    </TwoDimensionalShapeAttribute>
    <daml:Class rdf:ID="Perceiving">
        <rdfs:label>perceptions</rdfs:label>
        <rdfs:comment>#$Perceiving is the collection of
            sensory-perceptual events in which a #$PerceptualAgent
            perceives, i.e. acquires information, using its senses.</rdfs:comment>
        <guid>bd58c31c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#SingleDoerAction"/>
    </daml:Class>
    <daml:Class rdf:ID="Perceiving-Involuntary">
        <rdfs:label>perceiving - involuntary</rdfs:label>
        <rdfs:comment>A collection of mental events, a subset of
            #$Perceiving. Each element of this collection is a
            perceptual event in which the agent involuntarily receives
            senory information. Thus, if I am in a room, and a light is
            turned on, I would see the light reflected off of the walls,
            but without any effort on my part.  On the other hand,
            actively searching for something with my eyes would not be a
            member of this collection.</rdfs:comment>
        <guid>bfc2df3a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#Perceiving"/>
        <daml:disjointWith rdf:resource="#PurposefulAction"/>
    </daml:Class>
    <daml:Class rdf:ID="Perceiving-Voluntary">
        <rdfs:label>perceiving - voluntary</rdfs:label>
        <rdfs:comment>A collection of mental events, a subset of
            #$Perceiving.  Each element of this collection is a
            perceptual event in which  the agent does not merely
            passively receive sensory information,  but is actively
            filtering or directing how he is perceiving.  Thus,
            searching for a set of lost keys would be an element  of
            this collection, as would straining to hear something, but
            merely hearing a balloon pop next to you would not.</rdfs:comment>
        <guid>be7798b4-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#Perceiving"/>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
    </daml:Class>
    <daml:Class rdf:ID="PerceivingSlot">
        <rdfs:label>perceiving slot</rdfs:label>
        <rdfs:comment>A collection of predicates.  Each element of
            #$PerceivingSlot is a binary predicate relating a perceiver
            and an object or event (not a sense-datum) that s/he
            perceives in the mode specified by the predicate; e.g.,
            #$sees, #$hears, #$smells, #$perceivesByTouching, #$tastes.
            Assertions that use a predicate belonging to
            #$PerceivingSlot imply that some perception event occurs
            during the time that the assertion holds.  See also
            #$Perceiving and its subsets.</rdfs:comment>
        <guid>bd588eba-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#RelationshipType"/>
        <rdf:type rdf:resource="#PredicateCategory"/>
    </daml:Class>
    <daml:Class rdf:ID="PerceptualAgent">
        <rdfs:label>perceptual agent</rdfs:label>
        <rdfs:comment>The collection of all sentient agents.  Elements
            of #$PerceptualAgent are beings capable of doing instances
            of #$Perceiving.  Furthermore, in many cases the information
            that a perceptual agent gathers is input that can influence
            its other actions.</rdfs:comment>
        <guid>bd58a72d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#IndividualAgent"/>
    </daml:Class>
    <TerrainAttribute rdf:ID="PeriodicallyFloodedTerrain">
        <rdfs:label>periodically flooded terrain</rdfs:label>
        <rdfs:comment>Attribute of regions characterized by periodic
            seasonal flooding, such that instances can veritably be said
            to become  standing bodies of water during the flood season.
            In some cases the  periodic flooding may be the deliberate
            work of human agents.</rdfs:comment>
        <guid>c14962a3-9c29-11b1-9dad-c379636f7270</guid>
    </TerrainAttribute>
    <daml:Class rdf:ID="Permission">
        <rdfs:label>permits</rdfs:label>
        <rdfs:comment>A collection of agreements.  Each element of
            #$Permission is an agreement specifying some rights or
            privileges which have been granted to an #$Agent.  A
            permission may be an informal agreement between individuals,
            but many instances are formal and involve permissions
            granted by a government authority to some agent.  E.g., a
            driver&apos;s license, a marriage license, a visa for
            entering the U.S., a license to practice medicine.</rdfs:comment>
        <guid>bd58afda-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Agreement"/>
    </daml:Class>
    <daml:Class rdf:ID="Person">
        <rdfs:label>people</rdfs:label>
        <rdfs:comment>The collection of all human beings.  The
            collection #$Person constitutes the species Homo Sapiens;
            thus, #$Person is an instance of #$BiologicalSpecies in the
            #$BiologyMt.  (See also #$HomoGenus, of which Homo Sapiens
            is the only nonextinct species.)  Persons constitute the
            most intelligent subset of #$Primate, and it is the only
            class whose elements are known to be naturally capable of
            speaking a language.  All cultural activity requires
            participation of persons.  #$Person excludes non-human legal
            persons; see #$Agent.</rdfs:comment>
        <guid>bd588092-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#BiologicalSpecies"/>
        <rdf:type rdf:resource="#OrganismClassificationType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Omnivore"/>
        <rdfs:subClassOf rdf:resource="#Animal"/>
        <rdfs:subClassOf rdf:resource="#HumanOccupationConstructResident"/>
        <rdfs:subClassOf rdf:resource="#Primate"/>
        <rdfs:subClassOf rdf:resource="#LegalAgent"/>
        <daml:disjointWith rdf:resource="#NonPersonAnimal"/>
    </daml:Class>
    <daml:Class rdf:ID="PersonByActivityType">
        <rdfs:label>person by activity type</rdfs:label>
        <rdfs:comment>A collection of collections.  Each element of
            #$PersonByActivityType is a collection which classifies
            people by some kind of activity that an individual does
            regularly.  Some examples are: #$Student, #$Tourist, and
            #$HornPlayer.  If the differentiating activity is one that
            can be done as a career or job, it is preferable to make
            that collection an element of the more specific
            #$OccupationType (q.v.).</rdfs:comment>
        <guid>bd68312d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="#ExistingObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="PersonTypeByCulture">
        <rdfs:label>person type by culture</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$PersonTypeByCulture is the set of all persons who
            participate (see #$cultureParticipants) in some particular
            human culture.  Examples include #$FrenchPerson and #$EthnicGroupOfAustralianAborigines.</rdfs:comment>
        <guid>c0fcd06c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#ConventionalClassificationType"/>
    </daml:Class>
    <daml:Class rdf:ID="PersonalCheck">
        <rdfs:label>personal checks</rdfs:label>
        <rdfs:comment>A spec of #$Check-TenderObject.  #$PersonalChecks
            are issued to individual persons who have a
            #$CheckingAccount with a bank.  Each instance of
            #$PersonalCheck will include the checking account number and
            personal information, such as name and address.</rdfs:comment>
        <guid>bf0a7279-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MoneyTenderType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Check-TenderObject"/>
    </daml:Class>
    <daml:Class rdf:ID="PersonalProduct">
        <rdfs:label>personal products</rdfs:label>
        <rdfs:comment>A collection of products.  Each element of
            #$PersonalProduct is a service or tangible product designed
            for the physical body of a person, including clothing,
            accessories, personal care products (e.g., deodorant, hand
            soap) and devices (e.g., razors, heating pads), cosmetics,
            and personal services such as massages and manicures.  These
            are products or services which a person would seek out or
            apply to him/herself; i.e., it excludes products used on the
            body of a person by physicians (e.g., scalpels), dentists
            (e.g., dental drills), or morticians.</rdfs:comment>
        <guid>bd5906f2-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#Product"/>
        <daml:disjointWith rdf:resource="#Place"/>
    </daml:Class>
    <daml:Class rdf:ID="PersonalityAttribute">
        <rdfs:label>personality attributes</rdfs:label>
        <rdfs:comment>The collection of attributes which describe
            aspects of a person&apos;s personality.  E.g.,
            #$Dependability-Personality.    Note that #$Gentleness,
            #$Viciousness, and other emotive traits common to both
            humans and other animals, appear under
            #$TemperamentAttribute, which is a superset of #$PersonalityAttribute.</rdfs:comment>
        <guid>bd58ad60-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#UnorderedAttributeType"/>
    </daml:Class>
    <daml:Class rdf:ID="Pharmacist">
        <rdfs:label>pharmacists</rdfs:label>
        <rdfs:comment>The collection of professionals who are trained
            and licensed to prepare and distribute legal drugs.</rdfs:comment>
        <guid>bd58ddbb-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MedicalSpecialtyType"/>
        <rdf:type rdf:resource="#OccupationType"/>
        <rdfs:subClassOf rdf:resource="#MedicalCareProfessional"/>
    </daml:Class>
    <daml:Class rdf:ID="Pharmacy">
        <rdfs:label>pharmacies</rdfs:label>
        <rdfs:comment>The collection of (local-level) organizations
            which sell mainly prescription drugs, but usually also carry
            non-prescription drugs and other medical supplies that might
            be needed by a family or individual. (i.e. not a supplier to
            hospitals).  Sometimes these are free-standing stores,
            sometimes departments within other stores like drugstores
            and supermarkets.</rdfs:comment>
        <guid>c0fd4a67-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MedicalFacilityType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#SingleSiteLocalOrganizationWithClients"/>
        <rdfs:subClassOf rdf:resource="#CommercialOrganization"/>
        <daml:disjointWith rdf:resource="#MedicalCareInstitution"/>
        <daml:disjointWith rdf:resource="#EducationalOrganization"/>
    </daml:Class>
    <daml:Class rdf:ID="PharmacyProductType">
        <rdfs:label>pharmacy products</rdfs:label>
        <rdfs:comment>The collection of pharmaceutical product types,
            including drugs and pharmaceutical devices.</rdfs:comment>
        <guid>c0fdf171-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#ProductType"/>
    </daml:Class>
    <daml:Class rdf:ID="PhoneNumber">
        <rdfs:label>phone numbers</rdfs:label>
        <rdfs:comment>A collection of strings. Each element of
            #$PhoneNumber is a string that represents a telephone number.</rdfs:comment>
        <guid>bd58ecee-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#IDStringType"/>
    </daml:Class>
    <daml:Class rdf:ID="PhysicalAmountSlot">
        <rdfs:label>measures</rdfs:label>
        <rdfs:comment>A collection of predicates.  Each element of
            #$PhysicalAmountSlot is a slot (i.e., a binary predicate)
            used in assertions that state (perhaps roughly) `how
            much&apos; of an object there is.  These can be viewed as
            different ways of stating the size of an object; e.g.,
            #$lengthOfObject, #$volumeOfObject, #$massOfObject,
            #$depthOfObject, #$interiorFloorSpace.</rdfs:comment>
        <guid>bd58ee60-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="#IntervalBasedQuantitySlot"/>
        <rdfs:subClassOf rdf:resource="#PhysicalAttributeDescriptionSlot"/>
    </daml:Class>
    <daml:Class rdf:ID="PhysicalAttribute">
        <rdfs:label>physical attributes</rdfs:label>
        <rdfs:comment>A collection of attribute  values.  Each element
            of #$PhysicalAttribute is an attribute  value could in
            theory be measured using physical instruments.   Subsets of
            this collection include #$Density, #$Speed,   #$Rigidity,
            #$Mass, etc. Elements include #$ColdToBitterlyCold,
            (#$MediumAmountFn #$Visibility), and #$AFewYearsDuration.</rdfs:comment>
        <guid>bd590a22-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MeasurableAttributeType"/>
        <rdfs:subClassOf rdf:resource="#AttributeValue"/>
        <daml:disjointWith rdf:resource="#PhysicalStructuralAttribute"/>
        <daml:disjointWith rdf:resource="#RationalNumber"/>
    </daml:Class>
    <daml:Class rdf:ID="PhysicalAttributeDescriptionSlot">
        <rdfs:label>physical attribute description slot</rdfs:label>
        <rdfs:comment>A collection of predicates.
            #$PhysicalAttributeDescriptionSlot is a subset of both
            #$BinaryPredicate and #$PhysicalFeatureDescribingPredicate.
            Each element of #$PhysicalAttributeDescriptionSlot relates
            some spatial thing to an instance of #$PhysicalAttribute
            which characterizes that object.  The attribute may or may
            not be a quantifiable property.  Examples of
            #$PhysicalAttributeDescriptionSlot: #$objectEmitsOdor,
            #$viscosityOfSubstance, #$colorOfObject, #$diameterOfObject,
            #$physicalParts, #$shape, #$xzCrossSectionShapeType.</rdfs:comment>
        <guid>bd58b9c4-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#RelationshipType"/>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="#ExtensionalRepresentationPredicate"/>
        <rdfs:subClassOf rdf:resource="http://www.daml.org/2001/03/daml+oil#Property"/>
        <rdfs:subClassOf rdf:resource="#PhysicalFeatureDescribingPredicate"/>
    </daml:Class>
    <daml:Class rdf:ID="PhysicalConductingMedia">
        <rdfs:label>physical conducting media</rdfs:label>
        <rdfs:comment>A collection of tangible stuff.  Each element of
            #$PhysicalConductingMedia is a physical thing that can serve
            as a conductor, e.g., for heat or electricity.  Examples
            include power lines, pieces of superconductor materials,
            ceramic, etc.</rdfs:comment>
        <guid>bd58887d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingStuffType"/>
    </daml:Class>
    <daml:Class rdf:ID="PhysicalContactLocation">
        <rdfs:label>physical locations</rdfs:label>
        <rdfs:comment>A collection of locations; a subset of
            #$HumanShelterConstruction.  An instance of
            #$PhysicalContactLocation is the principal place(s) where an
            #$Agent can be physically found.  For people, that would
            (probably) be their home and/or office.   For an
            organization, it would be the location of their place of
            business, their headquarters, etc.  Note that a purely
            procedural method for getting in touch with someone, such as
            their Post Office Box number in a certain city, is not a #$PhysicalContactLocation.</rdfs:comment>
        <guid>c10ad9b0-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ContactLocationType"/>
        <rdfs:subClassOf rdf:resource="#ContactLocation"/>
        <rdfs:subClassOf rdf:resource="#HumanShelterConstruction"/>
    </daml:Class>
    <daml:Class rdf:ID="PhysicalContactSituation">
        <rdfs:label>physical contact situation</rdfs:label>
        <rdfs:comment>The collection of all temporal situations in which
            two or more tangible objects are touching (see #$touches)
            for at least part of the situation&apos;s duration.  This
            includes an object&apos;s rubbing against another, objects
            colliding, as well as static touching configurations.  Note
            that, although most types of #$PhysicalEvents involve some
            kind of touching, only those types for which contact is
            salient should be subcollections of  #$PhysicalContactSituation.</rdfs:comment>
        <guid>bfffa642-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#Situation-Temporal"/>
    </daml:Class>
    <daml:Class rdf:ID="PhysicalDevice">
        <rdfs:label>devices</rdfs:label>
        <rdfs:comment>A collection of tangible things. Each
            #$PhysicalDevice is an #$Artifact which is designed for a
            specific use or   to perform a specific function.  Thus, the
            collections #$Tool, #$Condom, #$BathTub, and
            #$TransportationDevice-Vehicle are all subsets of this
            collection, as are many other collections. Excluded are
            artifacts which can only be &apos;used&apos; in a very loose
            or metaphorical sense, such as instances of #$Sculpture,
            #$FlowerBed, or #$Advertisement-IBT. Also, an instance of
            #$PhysicalDevice should have a relatively rigid, set shape
            (which doesn&apos;t exclude it having moving parts!); hence,
            #$GasolineFuel or #$AntiFreeze are not subsets of #$PhysicalDevice.</rdfs:comment>
        <guid>bd58c72f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Artifact"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangibleProduct"/>
        <rdfs:subClassOf rdf:resource="#SolidTangibleProduct"/>
        <daml:disjointWith rdf:resource="#EdibleStuff"/>
    </daml:Class>
    <daml:Class rdf:ID="PhysicalEvent">
        <rdfs:label>physical events</rdfs:label>
        <rdfs:comment>A collection of localized spatial events each
            instance of which involves one or more physical objects or
            stuffs.  #$PhysicalEvents typically involve interaction
            among #$PartiallyTangibles.  But note that a physical event
            might consist in the creation, destruction,  movement, or a
            change in some physical feature of a single salient physical
            object.  (See #$PhysicalCreationEvent,
            #$PhysicalDestructionEvent, #$MovementEvent and
            #$IntrinsicStateChangeEvent.)  For a contrasting (though not
            necessarily disjoint) collection, see #$StrictlyMentalEvent.
            For events that have both physical and mental components,
            see the specialization #$CompositePhysicalAndMentalEvent.</rdfs:comment>
        <guid>bd58e98d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
    </daml:Class>
    <daml:Class rdf:ID="PhysicalFeatureDescribingPredicate">
        <rdfs:label>physical feature describing predicate</rdfs:label>
        <rdfs:comment>A collection of predicates.  Each element of
            #$PhysicalFeatureDescribingPredicate is a predicate used in
            assertions that describe spatiophysical aspects of
            individual objects.  Examples: #$above-Directly,
            #$physicallyContains, #$touchesDirectly, #$colorOfObject,
            #$temperatureOfObject, #$spans-Bridgelike.</rdfs:comment>
        <guid>bd58b982-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#RelationshipType"/>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
    </daml:Class>
    <daml:Class rdf:ID="PhysicalPartPredicate">
        <rdfs:label>physical part predicate</rdfs:label>
        <rdfs:comment>A collection of predicates. Instances of
            #$PhysicalPartPredicate are used to describe the
            relationship between a #$PartiallyTangible and its #$physicalParts.</rdfs:comment>
        <guid>bd58a601-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="#PartPredicate"/>
        <rdfs:subClassOf rdf:resource="#CotemporalPredicate"/>
    </daml:Class>
    <daml:Class rdf:ID="PhysicalSeries">
        <rdfs:label>physical series</rdfs:label>
        <rdfs:comment>Each #$PhysicalSeries is a #$Group of
            #$PartiallyTangibles which is ordered in a linear fashion,
            most likely according to some spatial relationship.  For
            example, a group of people in line at a ticket booth, or the
            vertebrae in one person&apos;s spine.</rdfs:comment>
        <guid>c04cb9b8-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Series"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Group"/>
    </daml:Class>
    <daml:Class rdf:ID="PhysicalStateChangeEvent">
        <rdfs:label>physical state change events</rdfs:label>
        <rdfs:comment>#$PhysicalStateChangeEvent is the collection of
            events in which some piece of matter changes from one of the
            physical states of matter to another.  Such changes of state
            can be induced by changes in temperature (or the equivalent
            in the manipulation of kinetic energy).  Each particular
            instance of #$Boiling, #$Freezing, #$Evaporating,
            #$Condensing, #$Melting, etc. is an instance of
            #$PhysicalStateChangeEvent.      Note: Most Cyc
            microtheories distinguish four states of matter, namely,
            #$SolidStateOfMatter, #$PlasmaStateOfMatter,
            #$LiquidStateOfMatter, #$GaseousStateOfMatter.  See
            #$StateOfMatter-SolidLiquidGaseous and its individual state constants.</rdfs:comment>
        <guid>bd5884ff-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#TransformationEvent"/>
        <rdfs:subClassOf rdf:resource="#IntrinsicStateChangeEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="PhysicalStructuralAttribute">
        <rdfs:label>physical structural attributes</rdfs:label>
        <rdfs:comment>A collection of attributes.  Each element of
            #$PhysicalStructuralAttribute is a physical attribute that
            determines or describes the structure of a tangible object.
            These attributes are qualitative, not measurable; in that
            way, they are unlike those described by the elements of
            #$Density, #$Mass, #$Elasticity, #$ThermalConductivity, and
            other attributes which belong to #$ScalarInterval.  Examples
            of #$PhysicalStructuralAttribute: #$Granular, #$Powdery,
            #$Paste-Form, #$Brittle, #$Collapsible, #$Hollow, #$Woven,
            #$Burnt.   An individual object&apos;s
            #$PhysicalStructuralAttributes are indicated with the
            predicate #$physicalStructuralAttributes.</rdfs:comment>
        <guid>bd58fce5-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#UnorderedAttributeType"/>
        <rdfs:subClassOf rdf:resource="#AttributeValue"/>
        <daml:disjointWith rdf:resource="#PhysicalAttribute"/>
    </daml:Class>
    <daml:Class rdf:ID="PhysicalUrgeType">
        <rdfs:label>urges</rdfs:label>
        <rdfs:comment>A collection of collections, and also a subset of
            #$SensoryReactionType (qv). Its elements are distinct from
            #$SensoryReactionType because they necessarily have a value
            on #$urgeTypeSatisfied.  An element of #$PhysicalUrgeType is
            an #$AttributeType that describes one class of urges (to do
            something) that animals have. The elements of
            #$PhysicalUrgeType are rather earthy; some examples are:
            #$UrgeToYawn, #$UrgeToScratch, #$UrgeToVomit,
            #$UrgeToUrinate, etc. </rdfs:comment>
        <guid>bd5886eb-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdf:type rdf:resource="#PrimitiveAttributeType"/>
        <rdfs:subClassOf rdf:resource="#SensoryReactionType"/>
    </daml:Class>
    <daml:Class rdf:ID="PhysicallyAttackingAnAgent">
        <rdfs:label>attacks</rdfs:label>
        <rdfs:comment>The collection of events in which one #$Agent (or
            a small group of #$Agents) physically attacks another
            #$Agent (or small group of #$Agents.)  Each assassination
            attempt is an example of such an event.</rdfs:comment>
        <guid>bd5889bc-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
    </daml:Class>
    <daml:Class rdf:ID="PhysiologicalAttribute">
        <rdfs:label>physiological attributes</rdfs:label>
        <rdfs:comment>The collection of attributes related to a plant or
            animal organism&apos;s physiological characteristics.  Some
            examples include #$Flexed, #$Deaf, #$Injured, #$Fertile,
            #$Swollen, #$AcidIndigestion, etc.</rdfs:comment>
        <guid>c0fd4a6e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#UnorderedAttributeType"/>
        <rdf:type rdf:resource="#SiblingDisjointAttributeType"/>
        <rdfs:subClassOf rdf:resource="#AttributeValue"/>
    </daml:Class>
    <daml:Class rdf:ID="PhysiologicalCondition">
        <rdfs:label>physiological conditions</rdfs:label>
        <rdfs:comment>The collection of #$Events in which an organism
            undergoes (as #$bodilyDoer) some physiological state or
            process, which may be normal or abnormal.  An instance of
            #$PhysiologicalCondition is, especially, a dynamic
            physiological state that (1) has important temporal aspects,
            such as a developmental condition or a progressive disease,
            and/or (2) affects the organism&apos;s physiological
            condition for a significant period of time, such that (a)
            the condition may be thought of as an `episode&apos; in the
            life of the organism or even (b) a permanent aspect of the
            organism&apos;s ongoing life.  #$PhysiologicalCondition is
            the most general collection of such states.  In representing
            particular cases, one of the various subsets of
            #$PhysiologicalCondition is likely to be more useful; these
            include: #$Pregnancy, #$BacterialPneumonia, #$Cancer,
            #$KidneyStoneCondition, #$HeartAttack, #$AllergicReaction,
            #$Phobia, #$ChronicCondition, #$Asthma, #$Dwarfism, etc.</rdfs:comment>
        <guid>c10c3859-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#BiologicalEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="PhysiologicalConditionType">
        <rdfs:label>health conditions</rdfs:label>
        <rdfs:comment>A collection of collections.  Each
            #$PhysiologicalConditionType is a coherent set of
            #$PhysiologicalConditions characterizing some
            non-instantaneous aspect of an organism.  Some sample
            elements are: #$Menopause, #$SickleCellAnemia, #$Infection,
            #$Malnutrition, etc.</rdfs:comment>
        <guid>c10c16fe-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="#TemporalObjectType"/>
        <daml:disjointWith rdf:resource="#FeelingAttributeType"/>
    </daml:Class>
    <daml:Class rdf:ID="PhysiologicalFunction">
        <rdfs:label>physiological function</rdfs:label>
        <rdfs:comment>The collection of those #$PhysiologicalProcesses
            that serve some end for their doers, which may be cells,
            tissues, or whole organisms; for example, #$Photosynthesis-Plant.</rdfs:comment>
        <guid>bd58ecdb-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#PhysiologicalProcess"/>
    </daml:Class>
    <daml:Class rdf:ID="PhysiologicalProcess">
        <rdfs:label>physiological processes</rdfs:label>
        <rdfs:comment>The collection of events in which an organism does
            (typically unconsciously) some process which involves
            alteration of that agent&apos;s physiological state.  A
            #$PhysiologicalProcess is normally one that is done by
            organisms (or parts of organisms) in the course of living.
            A large subset of #$PhysiologicalProcess is
            #$BodilyFunctionEvent, including its subsets #$Respiration,
            #$DigestingInStomach, and #$Heartbeating.  (Compare this
            collection with #$PhysiologicalCondition, whose elements are
            more episodic than process-like.) </rdfs:comment>
        <guid>bd58f396-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalStuffType"/>
    </daml:Class>
    <daml:Class rdf:ID="Pipe-GenericConduit">
        <rdfs:label>pipes</rdfs:label>
        <rdfs:comment>The collection of all enclosed tubular fluid
            conduits with openings at both ends.  #$Pipe-GenericConduit
            encompasses both human-made pipes as well as natural pipes,
            found naturally occurring in the environment, or found in an
            organism&apos;s body, like #$BloodVessels.</rdfs:comment>
        <guid>bd5899fd-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="PipeEndToCavityJunction">
        <rdfs:label>pipe end to cavity junction</rdfs:label>
        <rdfs:comment>The collection of junctions, in each of which some
            #$Pipe-GenericConduit ends at a #$Cavity of larger diameter
            than the pipe, allowing flow or access between them.  The
            flange where a water pipe enters a water tank is one
            example, as is the junction of the esophagus and the stomach
            in animals.  See also the predicate #$pipeEndsAtCavity.</rdfs:comment>
        <guid>bffab025-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#RegionType"/>
        <rdfs:subClassOf rdf:resource="#Configuration"/>
        <rdfs:subClassOf rdf:resource="#Portal"/>
    </daml:Class>
    <daml:Class rdf:ID="Pity">
        <rdfs:label>pity</rdfs:label>
        <rdfs:comment>Feeling sorry for another agent on account of the
            undesirable state of affairs s/he is in.  This is a
            collection; for an explanation of a typical
            #$FeelingAttributeType, see #$Happiness.</rdfs:comment>
        <guid>c0fba7c4-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#FeelingAttributeType"/>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </daml:Class>
    <daml:Class rdf:ID="Place">
        <rdfs:label>places</rdfs:label>
        <rdfs:comment>The collection of #$SpatialThings that have a
            relatively permanent location. Thus, every #$Place is
            stationary in the frame of reference of the current microtheory.</rdfs:comment>
        <guid>bd58d3b4-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdfs:subClassOf rdf:resource="#SpatialThing"/>
        <rdfs:subClassOf rdf:resource="#SomethingExisting"/>
        <daml:disjointWith rdf:resource="#PersonalProduct"/>
        <daml:disjointWith rdf:resource="#PortableObject"/>
        <daml:disjointWith rdf:resource="#Agent"/>
        <daml:disjointWith rdf:resource="#BiologicalLivingObject"/>
        <daml:disjointWith rdf:resource="#GeneralizedTransfer"/>
        <daml:disjointWith rdf:resource="#PublishedMaterial"/>
    </daml:Class>
    <daml:Class rdf:ID="PlanActionRestrictionPredicate">
        <rdfs:label>plan action restriction predicate</rdfs:label>
        <rdfs:comment>A collection of predicates.  Instances are used to
            express durationalconstraints, constraints relating to
            temporal ordering, and subeventual commitments relating to
            reified #$PurposefulActions that are represented in the
            deontic contexts of #$Plans.</rdfs:comment>
        <guid>bddb7e84-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
    </daml:Class>
    <daml:Class rdf:ID="Planet">
        <rdfs:label>planets</rdfs:label>
        <rdfs:comment>A collection of planetary bodies.  Each element of
            #$Planet is a planet either in Earth&apos;s solar system or
            elsewhere in the universe.  Examples: #$PlanetJupiter, #$PlanetVenus.</rdfs:comment>
        <guid>bd58d12f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="Plant">
        <rdfs:label>plants</rdfs:label>
        <rdfs:comment>#$Plant is the collection of all plants; it is a
            member of the #$BiologicalKingdom and contains the primary
            subjects of #$Biology.  Plants are typically stationary,
            living, whole organisms; the cells of plants generally lack
            cholesterol and have cell walls that include substances of
            #$Cellulose.  Most, though not all, plants are capable of
            making sugars by #$Photosynthesis-Plant processes and have
            green parts.  Some example subsets of #$Plant are the
            collections #$RoseBush, #$SpruceTree, and #$Moss.</rdfs:comment>
        <guid>bd58c6e1-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#BiologicalKingdom"/>
        <rdf:type rdf:resource="#OrganismClassificationType"/>
        <rdfs:subClassOf rdf:resource="#Organism-Whole"/>
        <rdfs:subClassOf rdf:resource="#VegetableMatter"/>
        <rdfs:subClassOf rdf:resource="#PlantBLO"/>
        <daml:disjointWith rdf:resource="#Animal"/>
    </daml:Class>
    <daml:Class rdf:ID="Plant-NonWoody">
        <rdfs:label>herbaceous plants</rdfs:label>
        <rdfs:comment>The collection of non-woody, herbaceous #$Plants.
            Those #$Plants such as grasses, herbs, wildflowers, etc.
            which are fairly low-growing, often annual, and don&apos;t
            grow woody stems.  Excludes large, hard bamboos, and Balsa.</rdfs:comment>
        <guid>c10adb62-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Plant"/>
    </daml:Class>
    <daml:Class rdf:ID="Plant-Woody">
        <rdfs:label>woody plants</rdfs:label>
        <rdfs:comment>The collection of #$Plants that have woody or hard
            trunks, stems or branches (and usually roots). includes
            large, hard bamboos, and balsa.</rdfs:comment>
        <guid>c0fde301-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#TerrestrialOrganism"/>
        <rdfs:subClassOf rdf:resource="#Plant"/>
    </daml:Class>
    <daml:Class rdf:ID="PlantBLO">
        <rdfs:label>plants or plant parts</rdfs:label>
        <rdfs:comment>A subset of #$BiologicalLivingObject.  #$PlantBLO
            includes the elements of #$Plant and of #$PlantPart.</rdfs:comment>
        <guid>c0fe06bb-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#BiologicalLivingObject"/>
    </daml:Class>
    <daml:Class rdf:ID="PlantPart">
        <rdfs:label>plant parts</rdfs:label>
        <rdfs:comment>The collection of all physical parts of #$Plants
            of all kinds. In the traditional view, plant organs are of
            four types: leaves, stems, roots and flowers.  It seems
            useful to have a category for smaller plant parts which
            display a similar level of organization (they have vascular
            tissue, ground tissue, and an epidermis) but have not been
            included in the traditional view.</rdfs:comment>
        <guid>bd58ee6f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#PlantBLO"/>
        <rdfs:subClassOf rdf:resource="#OrganismPart"/>
        <daml:disjointWith rdf:resource="#AnimalBodyPart"/>
    </daml:Class>
    <daml:Class rdf:ID="PlantPhysiologicalAttribute">
        <rdfs:label>plant physiological attribute</rdfs:label>
        <rdfs:comment>The collection of attributes referring to the
            physiological properties of plants.  At the very least,
            these include seasonal stages, physical properties, and
            plant health.  These attributes apply to entire #$Plants
            rather than just to certain parts of them.</rdfs:comment>
        <guid>bd61e030-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#AttributeType"/>
        <rdfs:subClassOf rdf:resource="#PhysiologicalAttribute"/>
    </daml:Class>
    <daml:Class rdf:ID="PlantProduct">
        <rdfs:label>plant products</rdfs:label>
        <rdfs:comment>The collection of #$Products that are plants or
            plant parts (individually or in bulk), or substances derived
            from plants, which are produced by people or countries and
            made available for use, sale or exchange.</rdfs:comment>
        <guid>bd58923e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdfs:subClassOf rdf:resource="#VegetableMatter"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangibleProduct"/>
    </daml:Class>
    <daml:Class rdf:ID="Plastic">
        <rdfs:label>plastics</rdfs:label>
        <rdfs:comment>A collection of tangible things.  Each element of
            #$Plastic is a piece of some type of plastic.  This
            collection includes plastics of all kinds: artifical, mostly
            polymeric, inedible, organic moldable hydrocarbons.  Some
            common types are rayon, nylon, polyethylene, etc.</rdfs:comment>
        <guid>bd58f496-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TangibleStuffCompositionType"/>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdf:type rdf:resource="#ProductType"/>
        <rdfs:subClassOf rdf:resource="#ArtificialMaterial"/>
    </daml:Class>
    <TerrainAttribute rdf:ID="Playa">
        <rdfs:label>playa</rdfs:label>
        <rdfs:comment>A collection of desert basins with limited
            drainage.  Each instance is capable of becoming the bed of a
            shallow lake during the rainy season.</rdfs:comment>
        <guid>bf2ed2f5-9c29-11b1-9dad-c379636f7270</guid>
    </TerrainAttribute>
    <daml:Class rdf:ID="PlumbingFixture">
        <rdfs:label>plumbing fixtures</rdfs:label>
        <rdfs:comment>A collection of physical devices.  An instance of
            #$PlumbingFixture is any object which is -- or was or will
            be or could be -- part of some plumbing system.  Types of
            #$PlumbingFixture include pipes, sinks, and toilets, as well
            as faucets and drain plugs.  It must be a functional part
            (so sewage doesn&apos;t count) and a significant part (so a
            label on a pipe doesn&apos;t count) and a specialized part
            (so an individual screw doesn&apos;t count, nor does an
            individual iron atom that&apos;s part of a faucet) and a
            relatively long-lived and localized part (so the water
            flowing through a pipe doesn&apos;t count.)</rdfs:comment>
        <guid>bd58f57a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdf:type rdf:resource="#ProductType"/>
        <rdfs:subClassOf rdf:resource="#PartOfBuilding"/>
        <rdfs:subClassOf rdf:resource="#PhysicalDevice"/>
    </daml:Class>
    <PhysicalStructuralAttribute rdf:ID="PointyEnded">
        <rdfs:label>pointy ended</rdfs:label>
        <rdfs:comment>Includes anything which tapers to a pointy or
            sharp end--pens, pencils, needles, pins, nails, and
            wood-screws, but not wires (no taper).  Most knives would be
            included, but only because they have pointy ends.  A knife
            with a rounded ended and a sharp blade would not be included.</rdfs:comment>
        <guid>c10060b6-9c29-11b1-9dad-c379636f7270</guid>
    </PhysicalStructuralAttribute>
    <daml:Class rdf:ID="PolarAttributeType">
        <rdfs:label>polar attribute type</rdfs:label>
        <rdfs:comment>A collection of collections, a subset of
            #$PrimitiveAttributeType.  Each element of
            #$PolarAttributeType is a collection of   attributes which
            can be possessed either to a positive or  to a negative
            degree. Thus, #$ElectricalCharge would be an  instance of
            this collection, whereas #$Wetness and #$BedSize  would not be.</rdfs:comment>
        <guid>bf55f890-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="#PrimitiveAttributeType"/>
    </daml:Class>
    <daml:Class rdf:ID="PolishingSomething">
        <rdfs:label>polishing events</rdfs:label>
        <rdfs:comment>The subset of #$Cleaning processes in which
            something is polished by rubbing it.  For example, consider
            the event in which Aladdin polished his magic lamp for the
            first time.  Polishing can be done to leather, wood, metal,
            etc.  A #$PolishingSomething may be performed either by a
            person or by a machine.</rdfs:comment>
        <guid>bd58ead9-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#Cleaning"/>
        <rdfs:subClassOf rdf:resource="#TransformationEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="PoliticalDispute">
        <rdfs:label>skirmishes</rdfs:label>
        <rdfs:comment>The class of all political disputes, including
            serious political controversies and skirmishes between
            individuals, organizations or countries.   Such a dispute
            involves some question of public policy, as opposed to
            purely personal or commercial issiues.</rdfs:comment>
        <guid>bd58e019-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#DisputeEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="PoliticalOrganization">
        <rdfs:label>political organizations</rdfs:label>
        <rdfs:comment>A collection of organizations.  An element of
            #$PoliticalOrganization is an organization whose members
            share some common political, social, or economic values and
            goals, and the #$MainFunction of their organization is to
            achieve those goals by influencing governmental powers or by
            helping persons who favor their views and interests to win
            elections or otherwise obtain governmental power.  The
            collection #$PoliticalOrganization includes instances of
            #$PoliticalParty and also of #$PoliticalInterestGroup. Note
            that governmental bodies (such as a #$CityCouncil) are not
            considered #$PoliticalOrganizations.  Although such
            governmental bodies often act in political arenas, that is
            not their primary function.</rdfs:comment>
        <guid>bd588dcb-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Organization"/>
    </daml:Class>
    <daml:Class rdf:ID="PoliticalParty">
        <rdfs:label>political parties</rdfs:label>
        <rdfs:comment>A collection of political organizations.  An
            element of #$PoliticalParty is an organization that
            primarily seeks to elect candidates to public office or have
            members continue holding public office, and which are
            identified as party affiliations by persons holding or
            seeking public office.</rdfs:comment>
        <guid>bd58fcda-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#PoliticalOrganization"/>
    </daml:Class>
    <daml:Class rdf:ID="Politician">
        <rdfs:label>politicos</rdfs:label>
        <rdfs:comment>A collection of persons.  Each element of
            #$Politician is a person who is involved in politics.
            Subsets of #$Politician include #$HeadOfState,
            #$PresidentialCandidate, and #$HeadOfPoliticalParty.</rdfs:comment>
        <guid>bd58e7b6-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PersonByActivityType"/>
        <rdfs:subClassOf rdf:resource="#PublicSectorEmployee"/>
        <rdfs:subClassOf rdf:resource="#Person"/>
    </daml:Class>
    <ThreeDimensionalShapeAttribute rdf:ID="Polygon3DShaped">
        <rdfs:label>polygon 3 d shaped</rdfs:label>
        <rdfs:comment>This is the attribute (see #$ShapeAttribute)
            shared by all three dimensional objects all of whose
            surfaces (see #$objectSurfaces) are polygons (see #$PolygonShaped).</rdfs:comment>
        <guid>bed8e16e-9c29-11b1-9dad-c379636f7270</guid>
    </ThreeDimensionalShapeAttribute>
    <TwoDimensionalShapeAttribute rdf:ID="PolygonShaped">
        <rdfs:label>polygon shaped</rdfs:label>
        <rdfs:comment>This is the attribute shared by all
            two-dimensional objects that are polygon shaped.  The sides
            of such objects are defined by line segments that are joined
            and define a closed shape.</rdfs:comment>
        <guid>c0bd3427-9c29-11b1-9dad-c379636f7270</guid>
    </TwoDimensionalShapeAttribute>
    <daml:Class rdf:ID="Porosity">
        <rdfs:label>porosity</rdfs:label>
        <rdfs:comment>A collection of attributes; a subset of
            #$PhysicalAttribute.  Each element of #$Porosity represents
            a specific porosity of some physical object.  Different
            porosities may be represented using #$GenericValueFunctions.
            Porosities of objects are indicated with the predicate #$porosityOfObject.</rdfs:comment>
        <guid>be00c216-9c29-11b1-9dad-c379636f7270</guid>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </daml:Class>
    <daml:Class rdf:ID="PortableObject">
        <rdfs:label>portable objects</rdfs:label>
        <rdfs:comment>A collection of objects.  An   instance of
            #$PortableObject is something that is not   `fastened
            down&apos; and which is light enough for an average human
            (or more to the point: for its average intended user) to
            move   it easily.  For many #$PortableObjects, portability
            is   important for them to fulfill their primary functions;
            for example, an article of clothing (a #$SomethingToWear),
            a hand-guided tool (a #$HandTool), a coin or dollar bill (an
            instance of #$Currency), a flashlight (a #$Flashlight), etc.
            would be pretty useless if they weren&apos;t portable.  In
            other cases, making a device portable, or making a portable
            version of a device, simply provides a convenience, as with
            the subsets #$PortableTelevision and #$PortableStereoSystem.
            Note that #$Tool is not a subset of #$PortableObject, since
            many tools are heavy and/or stationary.  A borderline
            example would be a heart/lung machine; although the
            beneficiary of its primary function is in no position to
            move it around, the physicians and nurses who also are
            `using&apos; it can and do exactly that.  The same goes for
            a playpen; the kids in it had better NOT be able to move it
            around, but the adults who set it up and put them there can
            and do move it.   A borderline non-example would be a car;
            even though its user can make it move around, that is more a
            controlling action than a transporting action --- i.e., the
            car is doing the transporting in that case, not the driver.
            A borderline example is a cat; even though it moves under
            its own power, it is light enough for its owner to pick it
            up and move around.  A borderline example is a bed or a
            dresser; though too heavy to lift, its owners can generally
            move it around (by sliding, disassembling and reassembling, etc.)</rdfs:comment>
        <guid>bd588131-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <daml:disjointWith rdf:resource="#Place"/>
    </daml:Class>
    <daml:Class rdf:ID="Portal">
        <rdfs:label>portals</rdfs:label>
        <rdfs:comment>The collection of all openings, as in a surface,
            through a tube, etc., with or without a covering.  This
            includes doors, mouths, doughnut-holes, etc.</rdfs:comment>
        <guid>bd58d597-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#RegionType"/>
        <rdfs:subClassOf rdf:resource="#Path-Simple"/>
        <rdfs:subClassOf rdf:resource="#SomethingExisting"/>
        <rdfs:subClassOf rdf:resource="#Cavity"/>
    </daml:Class>
    <daml:Class rdf:ID="PortalCovering">
        <rdfs:label>portal covering</rdfs:label>
        <rdfs:comment>A collection of tangible objects.  Each element of
            #$PortalCovering is something that covers a portal (e.g.,
            window, door, hatch).  Portal coverings may be either
            flexible or rigid; they may be either fixed in place or
            removable.  Examples include windows (in buildings or
            automobiles), doors, shutters, screens, draperies, window
            blinds, convertible tops, lids, corks.</rdfs:comment>
        <guid>bd589d69-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#SolidTangibleThing"/>
    </daml:Class>
    <IndependentCountry rdf:ID="Portugal">
        <rdfs:label>Portugal</rdfs:label>
        <rdfs:comment>The nation of Portugal as it has existed
            throughout time; includes both its physical and its
            political aspects.</rdfs:comment>
        <guid>bd590a03-9c29-11b1-9dad-c379636f7270</guid>
    </IndependentCountry>
    <LivingLanguage rdf:ID="PortugueseLanguage">
        <rdfs:label>Portuguese Language</rdfs:label>
        <rdfs:comment>Indigenous language of #$Portugal and #$Brazil.</rdfs:comment>
        <guid>bd590836-9c29-11b1-9dad-c379636f7270</guid>
    </LivingLanguage>
    <daml:Class rdf:ID="PositionType">
        <rdfs:label>position type</rdfs:label>
        <rdfs:comment>A collection of collections.  Each element of
            #$PositionType is a collection which represents a type of
            position filled by people within an organization.  Examples
            of #$PositionType: #$Mayor, #$CampaignManager,
            #$Director-Movie, #$Chairman, #$Resident-Medical.</rdfs:comment>
        <guid>c10af93a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="#ExistingObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="PositiveInteger">
        <rdfs:label>positive integers</rdfs:label>
        <rdfs:comment>#$PositiveInteger is the subset of #$Integer that
            excludes the negative integers and zero.  Each element of
            #$PositiveInteger is a whole number greater than zero; thus,
            it includes 5, but not -5 or 0.</rdfs:comment>
        <guid>bd589ed9-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MeasurableAttributeType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#PositiveNumber"/>
        <rdfs:subClassOf rdf:resource="#NonNegativeInteger"/>
        <rdfs:subClassOf rdf:resource="#Integer"/>
    </daml:Class>
    <daml:Class rdf:ID="PositiveNumber">
        <rdfs:label>positive number</rdfs:label>
        <rdfs:comment>#$PositiveNumber is a subset of #$RealNumber.
            Each instance of #$PositiveNumber is a #$RealNumber that is
            #$greaterThan zero; thus, it includes 42 and 0.17 but not 0
            or -5.</rdfs:comment>
        <guid>bf6afb32-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MeasurableAttributeType"/>
        <rdfs:subClassOf rdf:resource="#Number-General"/>
        <rdfs:subClassOf rdf:resource="#RealNumber"/>
        <rdfs:subClassOf rdf:resource="#NonNegativeNumber"/>
    </daml:Class>
    <daml:Class rdf:ID="PostalCode">
        <rdfs:label>postal codes</rdfs:label>
        <rdfs:comment>A collection of character strings.  Each element
            of #$PostalCode is a string used by a postal service to
            designate a particular geographic area.  For example, the
            code used by the #$USPostalService for central downtown
            Austin, TX, is `78701&apos;.  Most countries have their own
            kind of #$PostalCodes.  For example, see #$ZipCode, a
            specialization of #$PostalCode, which is specific to the UnitedStatesOfAmerica.</rdfs:comment>
        <guid>c10ada49-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#IDStringType"/>
        <daml:disjointWith rdf:resource="#ContactLocation"/>
    </daml:Class>
    <daml:Class rdf:ID="Posture">
        <rdfs:label>positions</rdfs:label>
        <rdfs:comment>The collection of postures, which are types of
            attributes that describe bodily configurations and/or
            orientations of #$Animals.  Some #$Postures are:
            #$UprightPosture, #$KneelingPosture, #$LyingOnBackPosture,
            #$PronePosture, #$LeaningOnKnucklesPosture, #$ForwardFlyingPosture.</rdfs:comment>
        <guid>bd59076d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#UnorderedAttributeType"/>
        <rdf:type rdf:resource="#SiblingDisjointAttributeType"/>
        <rdfs:subClassOf rdf:resource="#AnimalPhysiologicalAttribute"/>
        <rdfs:subClassOf rdf:resource="#BodyPartPosition"/>
    </daml:Class>
    <PhysicalStructuralAttribute rdf:ID="Pourable">
        <rdfs:label>pourable</rdfs:label>
        <rdfs:comment>A physical attribute.  #$Pourable is the
            structural attribute of a tangible thing that is capable of
            flowing.  #$Pourable things don&apos;t have intrinsic shape,
            but instead take the shape of their containers.  When acted
            on by a force, a #$Pourable thing changes shape at a rate
            proportional to the force.  (In addition, #$Pourable things
            may be easily separated into multiple pieces; however, such
            a separation is not a breaking or shearing.)  Mobs of
            particles, such as portions of sand or snow, are #$Pourable;
            but a gelatin-like semisolid is not.  See also #$SemiSolidTangibleThing.</rdfs:comment>
        <guid>bd58914b-9c29-11b1-9dad-c379636f7270</guid>
    </PhysicalStructuralAttribute>
    <PhysicalStructuralAttribute rdf:ID="Powdery">
        <rdfs:label>powdery</rdfs:label>
        <rdfs:comment>A physical attribute.  #$Powdery is the
            #$PhysicalStructuralAttribute which describes a solid that
            has the form of a powder.  #$Powdery stuff is #$Pourable and
            composed of multiple granules of solids.</rdfs:comment>
        <guid>bd58d489-9c29-11b1-9dad-c379636f7270</guid>
    </PhysicalStructuralAttribute>
    <daml:Class rdf:ID="PoweredDevice">
        <rdfs:label>mechanisms</rdfs:label>
        <rdfs:comment>A collection of physical devices.  An instance of
            #$PoweredDevice is any device which requires some power
            input in order to perform its function.  The power supplied
            may be muscle power, kinetic energy, fuel, electricity, etc.
            This is much more general than #$ElectricalDevice (qv),
            which is one of its subsets. #$PoweredDevice and
            #$NonPoweredDevice partition #$PhysicalDevice.</rdfs:comment>
        <guid>bd589472-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#PhysicalDevice"/>
        <daml:disjointWith rdf:resource="#NonPoweredDevice"/>
    </daml:Class>
    <daml:Class rdf:ID="PrecipitationCloud">
        <rdfs:label>precipitation clouds</rdfs:label>
        <rdfs:comment>The collection of clouds that emit
            #$PrecipitationParticles in instances of #$PrecipitationProcess.</rdfs:comment>
        <guid>bd58a995-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#InanimateThing-Natural"/>
        <rdfs:subClassOf rdf:resource="#CloudInSky"/>
    </daml:Class>
    <daml:Class rdf:ID="PrecipitationParticle">
        <rdfs:label>precipitation particle</rdfs:label>
        <rdfs:comment>The collection of particles of liquid or solid
            water emitted by clouds in instances of #$PrecipitationProcess.</rdfs:comment>
        <guid>bd58f4fb-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Particle"/>
    </daml:Class>
    <daml:Class rdf:ID="PrecipitationProcess">
        <rdfs:label>precipitation processes</rdfs:label>
        <rdfs:comment>A collection of physical processes; a subset of
            #$WeatherEvent.  Elements of #$PrecipitationProcess are
            meteorological processes in which atmospheric clouds
            precipitate rain, snow, or other forms of H2O precipitation.</rdfs:comment>
        <guid>bd58fece-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#ImmediateWeatherProcess"/>
    </daml:Class>
    <daml:Class rdf:ID="Predicate">
        <rdfs:label>predicates</rdfs:label>
        <rdfs:comment>The set of all Cyc predicates.  Each element  of
            #$Predicate is a relationship in Cyc which takes some number
            of  arguments to yield a well-formed CycL formula; each of
            those arguments  must be of some particular type.  For
            example, the predicate #$genls,  which represents the
            subset/superset relation between collections,  takes two
            arguments; each argument must be an element of #$Collection.
            The numbers and types of arguments to particular predicates
            are  specified by explicit assertions using #$arity,
            #$arg1Isa, #$arg2Isa,  etc., #$arg1Genl, #$arg2Genl, etc.
            Our example #$genls has #$arity 2,  and both its #$arg1Isa
            and its #$arg2Isa have the value #$Collection.  Informally,
            you can think of elements of #$Predicate as functions that
            always return either true or false.  More formally, when an
            element of  #$Predicate is applied to the legal number and
            type of arguments, an  expression is formed which is a
            well-formed formula (wff) in CycL.  Such expressions are
            called `atomic formulas&apos; if they contain  variables,
            and `gafs&apos; (short for `ground atomic formulas&apos;) if
            they  contain no variables. Quantifiers and logical
            operators are excluded  from #$Predicate; see #$Quantifier,
            #$LogicalConnective.  Currently  (March 2000), the KB
            includes predicates of arity 1-7, inclusive.  The KB also
            includes some predicates of variable arity (see
            #$VariableArityRelation).  Unary predicates, which take just
            one  single argument (e.g., `-- is a person&apos; or `-- is
            white&apos;, are usually  represented in Cyc by elements of
            #$Collection or #$AttributeValue,  rather than of
            #$Predicate; but see also #$UnaryPredicate.  Naming  strings
            for elements of #$Predicate always begin with a lowercase  letter.</rdfs:comment>
        <guid>bd5880d6-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="#TruthFunction"/>
        <daml:disjointWith rdf:resource="#Function-Denotational"/>
    </daml:Class>
    <daml:Class rdf:ID="PredicateCategory">
        <rdfs:label>predicate category</rdfs:label>
        <rdfs:comment>A collection of collections; a subset of
            #$RelationshipType.  Each element of #$PredicateCategory is
            a collection of Cyc #$Predicates.  Examples:
            #$TemporalPartSlot, #$IntervalBasedQuantitySlot,
            #$FunctionalSlot, #$InterActorSlot,
            #$TransitiveBinaryPredicate, #$PropositionalAttitudeSlot.
            See also the comment on #$Predicate.</rdfs:comment>
        <guid>bd5888fe-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="#RelationshipType"/>
    </daml:Class>
    <daml:Class rdf:ID="PregnancyEndingEvent">
        <rdfs:label>pregnancy ending event</rdfs:label>
        <rdfs:comment>The collection of events which terminate a
            pregnancy, including birth, abortion, and miscarriage.</rdfs:comment>
        <guid>c0fd51d2-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#IntrinsicStateChangeEvent"/>
        <rdfs:subClassOf rdf:resource="#BiologicalEvent"/>
        <rdfs:subClassOf rdf:resource="#AnimalActivity"/>
    </daml:Class>
    <daml:Class rdf:ID="PrepaidTelephoneCard">
        <rdfs:label>telephone cards</rdfs:label>
        <rdfs:comment>The collection of all #$Cards that allow a user to
            make telephone calls by debiting the price of the call from
            the value remaining on the card. The value on the card may
            be encoded on a magnetic strip on the card, or kept track of
            by the company that issued the card.</rdfs:comment>
        <guid>bf363fb2-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MoneyTenderType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Plastic"/>
        <rdfs:subClassOf rdf:resource="#TenderObject"/>
        <rdfs:subClassOf rdf:resource="#Card"/>
    </daml:Class>
    <daml:Class rdf:ID="PreparationAttribute">
        <rdfs:label>preparation attribute</rdfs:label>
        <rdfs:comment>A collection of attributes.  Each element of
            #$PreparationAttribute is a characteristic of a piece of
            material (e.g., food) indicating (1) a type of physical
            preparation which that stuff has already undergone, and (2)
            something about its current, resulting condition.  Examples
            of #$PreparationAttribute which are applicable to food
            include: #$Baked, #$Fried, #$Toasted, #$Fermented,
            #$Grilled, #$Frozen, #$Dried, #$Raw.</rdfs:comment>
        <guid>bd58f055-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#UnorderedAttributeType"/>
        <rdfs:subClassOf rdf:resource="#AttributeValue"/>
    </daml:Class>
    <daml:Class rdf:ID="PreparingFoodOrDrink">
        <rdfs:label>events in which food or drink is prepared</rdfs:label>
        <rdfs:comment>A collection of events. Each element of
            #$PreparingFoodOrDrink is an event in which a single
            instance of #$FoodAndDrink is created from something.
            Preparation may begin `from scratch&apos;, with raw
            ingredients, or may use semi-prepared or `convenience&apos;
            products (such as cake mixes, margarita mixes, or frozen
            foods). Typical #$subEvents in elements of
            #$PreparingFoodOrDrink include activities commonly performed
            by cooks and/or bartenders, including instances of
            #$ChoppingSomething, #$CookingFood, #$BakingFood,
            #$MixingAlcoholicDrinks, etc. Each #$PreparingFoodOrDrink
            event ends when the item prepared is ready to eat. This
            collection is NOT to include activities that a diner does
            with food at table (such as peeling, unwrapping, cutting
            into bitesized pieces), nor activities that a farmer does
            before food reaches market or kitchen (e.g., planting, harvesting).</rdfs:comment>
        <guid>bd58b6ae-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#TransformationEvent"/>
        <rdfs:subClassOf rdf:resource="#ServiceEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="Preposition">
        <rdfs:label>prepositions</rdfs:label>
        <rdfs:comment>The collection of all prepositions. Prepositions
            are function words which usually take a noun phrase
            complement. They usually express temporal, spatial, or other
            relations. Example: `at&apos;.</rdfs:comment>
        <guid>bd59095f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#LinguisticObjectType"/>
        <rdf:type rdf:resource="#SpeechPart"/>
    </daml:Class>
    <daml:Class rdf:ID="Prescriber">
        <rdfs:label>prescriber</rdfs:label>
        <rdfs:comment>People who can prescribe medications.  Doctors are
            prescribers, as well as osteopaths and nurse-practitioners. </rdfs:comment>
        <guid>c10af23d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#OccupationType"/>
        <rdfs:subClassOf rdf:resource="#MedicalCareProfessional"/>
    </daml:Class>
    <daml:Class rdf:ID="PrescriptionDrug">
        <rdfs:label>prescription drugs</rdfs:label>
        <rdfs:comment>The collection of drugs that require a
            doctor&apos;s permission before obtaining or consuming them.</rdfs:comment>
        <guid>bd58ae7c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdf:type rdf:resource="#PharmacyProductType"/>
        <rdfs:subClassOf rdf:resource="#DrugProduct"/>
    </daml:Class>
    <daml:Class rdf:ID="Preservative-Food">
        <rdfs:label>preservatives</rdfs:label>
        <rdfs:comment>Preservatives which are added to food to prevent spoilage.</rdfs:comment>
        <guid>be00ca4d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdf:type rdf:resource="#ProductType"/>
        <rdfs:subClassOf rdf:resource="#FoodIngredientOnly"/>
    </daml:Class>
    <daml:Class rdf:ID="PreservingFood">
        <rdfs:label>preserving food</rdfs:label>
        <rdfs:comment>A collection of events.  Each instance of
            #$PreservingFood is an  event in which a single item of food
            or drink (a member of the  collection #$FoodAndDrink) is
            acted on to prevent its #$Spoiling.</rdfs:comment>
        <guid>be9f10d7-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#IntrinsicStateChangeEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="President-HeadOfGovernmentOrHeadOfState">
        <rdfs:label>presidents</rdfs:label>
        <rdfs:comment>A collection of persons.  Each element of
            #$President-HeadOfGovernmentOrHeadOfState is a person who
            holds the title of president of some element of #$Country,
            whether that title belongs to a position which is
            #$HeadOfState or #$HeadOfGovernment (or both). Examples:
            Boris Yeltsin, #$BillClinton, Jiang Zemin, Lee Dung-Hui.</rdfs:comment>
        <guid>bd58e49e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdf:type rdf:resource="#OccupationType"/>
        <rdfs:subClassOf rdf:resource="#HeadOfState"/>
    </daml:Class>
    <daml:Class rdf:ID="Pressure">
        <rdfs:label>pressures</rdfs:label>
        <rdfs:comment>A collection of attributes; a subset of
            #$PhysicalAttribute.  Each element of #$Pressure represents
            a specific measure of a force exerted on some surface.
            Degrees of #$Pressure may be represented using
            #$GenericValueFunctions or with qualitative collections
            (e.g., #$BruisingPressure, #$FracturingPressure,
            #$ImperceptiblePressure).   Indicate the #$Pressure of a
            particular fluid with the predicate #$fluidPressure;
            indicate atmospheric pressure with #$barometricPressure.</rdfs:comment>
        <guid>bd58ed13-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DerivedNumericAttributeType"/>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
        <rdfs:subClassOf rdf:resource="#PhysicalAttribute"/>
    </daml:Class>
    <daml:Class rdf:ID="Pride">
        <rdfs:label>pride</rdfs:label>
        <rdfs:comment>Self-esteem based upon one&apos;s actions,
            possessions, or relationships.  #$Vanity is not necessarily
            entailed by #$Pride.  This is a collection; see #$Happiness.
            More specialized #$FeelingAttributeTypes include
            #$PrideOfMembership, #$PrideOfAccomplishment, #$Vanity,
            #$Patriotism, etc. </rdfs:comment>
        <guid>bd58c420-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#FeelingAttributeType"/>
        <rdfs:subClassOf rdf:resource="#SelfConfidence"/>
        <rdfs:subClassOf rdf:resource="#Approval"/>
    </daml:Class>
    <UserRightsAttribute rdf:ID="PrimaryRoleUseRights">
        <rdfs:label>primary role use rights</rdfs:label>
        <rdfs:comment>An attribute of an object with respect to an
            #$Agent, meaning that the agent who holds this kind of
            #$UserRightsAttribute to an object is allowed to use that
            object in events where it performs its #$primaryFunction.  A
            rental agreement typically gives the renter this kind of
            right to use of an object (such as a car, residence,
            videotape, etc.)  Just because you rent a car, though, does
            not give you the right to sell it, burn it up, or repaint it.</rdfs:comment>
        <guid>bd58cea9-9c29-11b1-9dad-c379636f7270</guid>
    </UserRightsAttribute>
    <UserRightsAttribute rdf:ID="PrimaryUserRights">
        <rdfs:label>primary user rights</rdfs:label>
        <rdfs:comment>An attribute of an object with respect to an
            #$Agent, meaning that the agent who holds this kind of
            #$UserRightsAttribute to an object has priority to use that
            object, over other agents who can also claim a right to use
            it.  E.g., parents have #$PrimaryUserRights to the family
            car.  Note that the attribute #$PrimaryUserRights makes
            sense only for objects to which #$GroupUserRightsAttributes
            apply, since there must be multiple authorized users in
            order for priority of claims to occur.</rdfs:comment>
        <guid>bd58df5d-9c29-11b1-9dad-c379636f7270</guid>
    </UserRightsAttribute>
    <daml:Class rdf:ID="Primate">
        <rdfs:label>primates</rdfs:label>
        <rdfs:comment>The collection of all primates.  The collection
            #$Primate includes the subsets #$Person, #$Ape, #$Monkey,
            etc.  #$Primate is an instance of #$BiologicalOrder in the
            #$BiologicalClass #$Mammal.</rdfs:comment>
        <guid>bd58a674-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#OrganismClassificationType"/>
        <rdf:type rdf:resource="#BiologicalOrder"/>
        <rdfs:subClassOf rdf:resource="#TerrestrialOrganism"/>
    </daml:Class>
    <daml:Class rdf:ID="PrimeMinister-HeadOfGovernment">
        <rdfs:label>prime ministers</rdfs:label>
        <rdfs:comment>A collection of persons.  Each element of
            #$PrimeMinister-HeadOfGovernment is a person who holds the
            political office of Prime Minister in some element of
            #$Country.  Examples: John Major, Benjamin Netanyahu, Lien
            Chen, #$AndreasPapandreou.</rdfs:comment>
        <guid>bd590186-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PositionType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdf:type rdf:resource="#OccupationType"/>
        <rdfs:subClassOf rdf:resource="#HeadOfGovernment"/>
    </daml:Class>
    <daml:Class rdf:ID="PrimitiveAttributeType">
        <rdfs:label>primitive attribute types</rdfs:label>
        <rdfs:comment>A collection of collections.  Each element of
            #$PrimitiveAttributeType is a collection of `primitive&apos;
            attributes such as mass, distance, charge, and others which
            have a single (total) ordering on (usually) a real line.
            Note: #$PrimitiveAttributeType excludes the elements of
            #$UnorderedAttributeType (e.g., gender).  Cf. #$CompositeAttributeType.</rdfs:comment>
        <guid>bd58812a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
    </daml:Class>
    <daml:Class rdf:ID="PrimitiveTemporalRelation">
        <rdfs:label>primitive temporal relations</rdfs:label>
        <rdfs:comment>#$PrimitiveTemporalRelations specify temporal
            relations between #$TimePoints.  The only two binary
            predicates which are elements of this set are #$after and
            #$simultaneousWith. Note: The predicate `before&apos; is
            unnecessary since (before x y) would be the same thing as
            (#$after y x))</rdfs:comment>
        <guid>bd58845f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="#TemporalRelation"/>
    </daml:Class>
    <daml:Class rdf:ID="PrivateSectorEmployee">
        <rdfs:label>private sector employees</rdfs:label>
        <rdfs:comment>A collection of persons; a subset of
            #$Professional.  Each element of #$PrivateSectorEmployee is
            a worker who is not paid a salary or wage by a governmental
            organization.  For example, employees of publicly traded
            corporations are elements of #$PrivateSectorEmployee.  Note:
            Private sector employees may contract with a government
            organization as consultants, however.</rdfs:comment>
        <guid>bd589b35-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#OccupationType"/>
        <rdfs:subClassOf rdf:resource="#Professional"/>
        <daml:disjointWith rdf:resource="#PublicSectorEmployee"/>
    </daml:Class>
    <daml:Class rdf:ID="PrivatelyHeldCorporation">
        <rdfs:label>privately-held corporations</rdfs:label>
        <rdfs:comment>An incorporated business whose stock, if it
            exists, is not    traded publicly on some stock exchange.
            Businesses that are traded publicly are instances of #$PubliclyHeldCorporation.</rdfs:comment>
        <guid>bd5d999e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#LegalCorporation"/>
    </daml:Class>
    <daml:Class rdf:ID="ProblemSolvingCntxt">
        <rdfs:label>psc</rdfs:label>
        <rdfs:comment>The collection of microtheories that are used in
            applications as a means to reason about particular
            situations.  Every original query takes place in some
            #$ProblemSolvingCntxt (as opposed to a #$GeneralMicrotheory)
            which has access --- via the #$genlMt relation --- to other
            relevant microtheories, all the way up to the most general
            one, the #$BaseKB.  A #$ProblemSolvingCntxt is usually
            created temporarily for the problem at hand, and is
            discarded after the problem is dealt with (unlike a
            #$GeneralMicrotheory, which is created for lasting use).</rdfs:comment>
        <guid>bd5880da-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdf:type rdf:resource="#MicrotheoryType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#Microtheory"/>
        <daml:disjointWith rdf:resource="#SomethingExisting"/>
    </daml:Class>
    <daml:Class rdf:ID="ProcessPredicate">
        <rdfs:label>process predicate</rdfs:label>
        <rdfs:comment>A collection of predicates.  Each element of
            #$ProcessPredicate is a predicate used in assertions that
            describe processes.  For example, #$amountOfEnergyUsed,
            #$signalState, #$toPossessor, #$primaryActivityType,
            #$exports, #$monetaryValue.</rdfs:comment>
        <guid>bd58e6c3-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="#ExtensionalRepresentationPredicate"/>
    </daml:Class>
    <daml:Class rdf:ID="Product">
        <rdfs:label>products</rdfs:label>
        <rdfs:comment>A collection of things.  Elements of #$Product are
            individual goods, services, investments, etc.--basically,
            anything which is offered (or may be exchanged) for money or
            trade.  Typically, elements of #$Product are things which
            are intended to be sold or used for some kind of service in
            exchange for money at least once in their lifetime.
            Examples: a Lexus sedan, a package of McDonald&apos;s french
            fries, a massage, a bouquet of flowers, a share in a money
            market fund, the services of a real estate agent, a research
            satellite.  See also #$Artifact.</rdfs:comment>
        <guid>bd590562-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdfs:subClassOf rdf:resource="#TemporalThing"/>
        <daml:disjointWith rdf:resource="#TimeInterval"/>
    </daml:Class>
    <daml:Class rdf:ID="ProductStandard">
        <rdfs:label>product standards</rdfs:label>
        <rdfs:comment>A collection of specifications.  Each element of
            #$ProductStandard is a precise description applied to the
            instances of a particular #$ProductType.  Manufacturers of
            that product type agree explicitly or in practice, or they
            may obey a government requirement, to make product designs
            following the specifications stated in the standard, so that
            products within the type will all have certain features in
            common.  For example, telephones and television sets fulfil
            certain product standards.  The resultant interchangeability
            allows compatibility with other devices and products, with
            public utilities, commercial trading expectations,
            governement purchasing requirements, etc.</rdfs:comment>
        <guid>bd5905dd-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="ProductType">
        <rdfs:label>product types</rdfs:label>
        <rdfs:comment>A collection of collections.  Each element of
            #$ProductType is a collection of things--i.e., some kind of
            substances, objects, actions--at least some of which are
            produced and/or performed and sold as products.  Not all
            elements in such a #$ProductType collection must be
            products, but some are.  Examples of #$ProductType:
            #$DairyProduct, #$HardDiskDrive, #$PlasticWrap,
            #$ServiceEvent, #$EnergyStuff, etc. Note that #$ProductType
            is not a subset of either #$ObjectType or #$StuffType,
            because there are products of both kinds (e.g.,
            #$Rice-Foodstuff is a #$ProductType but not an
            #$ObjectType), and there are even event types that are
            instances of #$ProductType.  *Many* of the collections which
            are elements of #$ProductType will, however, be an instance
            of either #$ObjectType or #$StuffType.  Product types which
            are specific to a single #$BrandName should be made
            instances of the spec #$ProductTypeByBrand.  Product types
            which are specified by both #$BrandName and #$ProductVersion
            should be made instances of #$ProductTypeByBrandVersion.</rdfs:comment>
        <guid>bd58ca91-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
    </daml:Class>
    <daml:Class rdf:ID="Professional">
        <rdfs:label>professionals</rdfs:label>
        <rdfs:comment>A set of agents.  Elements of #$Professional are
            agents who spend a significant part of their waking hours
            doing activities that are characteristic of some occupation,
            skilled or unskilled.  However, elements of #$Professional
            need not be working the entire duration of when they are a
            professional, such as a #$Professor on summer break, or
            someone who is temporarily unemployed.  The elements of
            #$Professional are persons, most of whom belong to at least
            one such collection during some portion of their lives.
            Typically their actions are performed for pay, but not
            always (e.g., #$Artist-Visual).  What are colloquially
            considered professions or occupations are subsets of
            #$Professional; for example, #$LumberJack, #$Scientist,
            #$Lifeguard, #$StockBroker, #$Technician, #$CraftWorker,
            #$Housekeeper, #$SportsCoach, #$Athlete,
            #$LegalProfessional, #$Publicist, #$CrewMemberOnShip,
            #$SelfEmployedWorker (and many more).  Additionally, other
            subsets of #$Professional classify workers according to
            other features of their working life besides skills; e.g.,
            #$SelfEmployedWorker, #$DeskWorker.   Subsets may be general
            (e.g., #$DeskWorker, #$Doctor-Medical) or specialized (e.g.,
            #$ContinuingEdProgramCoordinator, #$PediatricNeuroSurgeon).
            Elements of #$Professional are temporal subabstractions
            [#$subAbstrac] of people: #$MaryShepherd (#$HumanCyclist),
            #$MichaelJordan (#$Athlete), #$AlfredNorthWhitehead
            (#$Philosopher), #$Michelangelo (#$Sculptor,
            #$PainterFineArtist), #$BillClinton
            (#$UnitedStatesPresident), etc.</rdfs:comment>
        <guid>bd58e737-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#HumanAdult"/>
        <rdfs:subClassOf rdf:resource="#Person"/>
    </daml:Class>
    <daml:Class rdf:ID="ProfessionalOffice">
        <rdfs:label>professional offices</rdfs:label>
        <rdfs:comment>A collection of organizations.  Every element of
            #$ProfessionalOffice is a #$SingleSiteOrganization
            comprising one or more professionals (physicians, dentists,
            lawyers, accountants, etc.) and their support staff.</rdfs:comment>
        <guid>c0fd6bff-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#SingleSiteLocalOrganizationWithClients"/>
    </daml:Class>
    <daml:Class rdf:ID="ProkaryoticCell">
        <rdfs:label>prokaryotic organisms</rdfs:label>
        <rdfs:comment>The subset of #$SingleCellOrganism whose members
            are single-celled but lack nuclei and mitochondria.  The
            members of the #$MoneraKingdom all belong to the collection
            #$ProkaryoticCell, which includes the subsets #$Bacterium
            and #$BlueGreenAlgae.  #$ProkaryoticCell excludes viruses,
            protista, prions, and rickettsia.  Unlike the elements of
            #$EukaryoticCell, prokaryotic cells are never assembled into
            multicellular organisms.</rdfs:comment>
        <guid>bd58d537-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdf:type rdf:resource="#OrganismClassificationType"/>
        <rdfs:subClassOf rdf:resource="#SingleCellOrganism"/>
        <daml:disjointWith rdf:resource="#EukaryoticCell"/>
    </daml:Class>
    <daml:Class rdf:ID="Pronoun">
        <rdfs:label>pronouns</rdfs:label>
        <rdfs:comment>The collection of all pronouns. Pronouns are
            indexicals which can replace nouns. Example: `she&apos;.</rdfs:comment>
        <guid>c0fe02b2-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#LinguisticObjectType"/>
        <rdf:type rdf:resource="#SpeechPart"/>
    </daml:Class>
    <daml:Class rdf:ID="ProperCountNoun">
        <rdfs:label>proper count noun</rdfs:label>
        <rdfs:comment>The collection of all proper count nouns. Proper
            nouns are usually capitalized, and they usually denote some
            particular person, place, or thing.  Many proper nouns
            cannot be preceded by a determiner, and many have no plural
            form.  Example: `Dallas&apos;.  Although one might think
            that names for languages e.g. ``Cherokee&apos;&apos; are
            #$ProperCountNouns, they are actually #$MassNouns.  One test
            is to see if you can ``too much X&apos;&apos; or ``a lot of
            X&apos;&apos; without a distinct plural form.  For example
            ``too much Crest&apos;&apos; vs *``too much
            Q-tips&apos;&apos; and ``a lot of Coke&apos;&apos; vs *``a
            lot of Q-tip&apos;&apos; suggest that ``crest&apos;&apos;
            and ``coke&apos;&apos; are mass nouns, whereas
            ``Q-tip&apos;&apos; is a count noun.</rdfs:comment>
        <guid>c0f2a028-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#LinguisticObjectType"/>
        <rdf:type rdf:resource="#SpeechPart"/>
        <rdfs:subClassOf rdf:resource="#CountNoun-Generic"/>
    </daml:Class>
    <daml:Class rdf:ID="ProperMassNoun">
        <rdfs:label>proper mass noun</rdfs:label>
        <rdfs:comment>The collection of all proper mass nouns. Proper
            mass nouns are usually capitalized.</rdfs:comment>
        <guid>bf668bab-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#LinguisticObjectType"/>
        <rdf:type rdf:resource="#SpeechPart"/>
        <rdfs:subClassOf rdf:resource="#MassNoun-Generic"/>
    </daml:Class>
    <daml:Class rdf:ID="ProperNameString">
        <rdfs:label>titles</rdfs:label>
        <rdfs:comment>The collection of all proper names, considered as
            character strings.  This includes, as elements, city names
            such as ``Dallas&apos;&apos;, people&apos;s names such as
            ``Douglas&apos;&apos;, company names such as
            ``Apple&apos;&apos;, conference names, book titles, etc.</rdfs:comment>
        <guid>bd58e892-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#IDStringType"/>
        <rdfs:subClassOf rdf:resource="#IDString"/>
    </daml:Class>
    <daml:Class rdf:ID="Proposal">
        <rdfs:label>proposals</rdfs:label>
        <rdfs:comment>The class of potential agreements or other kinds
            of  #$SupposedToBeMicrotheory which are in the
            &apos;proposal&apos; stage -- i.e.,  which are under
            consideration but which have not been adopted (yet).    The
            making and consideration of #$Proposals is an important part
            of such activities as #$Negotiating and legislative
            #$Debate.  Examples of #$Proposals include #$BidOnSale, job
            offers, proposed codes of conduct  (including proposals for
            new #$Laws), and proposed punishments.</rdfs:comment>
        <guid>bd646625-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MicrotheoryType"/>
        <rdfs:subClassOf rdf:resource="#SupposedToBeMicrotheory"/>
        <rdfs:subClassOf rdf:resource="#IntangibleExistingThing"/>
        <rdfs:subClassOf rdf:resource="#PropositionalInformationThing"/>
    </daml:Class>
    <daml:Class rdf:ID="Proposition">
        <rdfs:label>propositions</rdfs:label>
        <rdfs:comment>A collection of intangible individuals.  Each
            instance of #$Proposition is an abstract propositional thing
            that has some truth value in some context or world.  A
            proposition is assumed to be representable (at least in
            principle) by a sentence in some formal or natural language.
            But it should _not_ be assumed that propositions are
            themselves intrinsically linguistic items in the way that
            sentences or formulae are.  Indeed, propositions are often
            viewed as extra-linguistic, intensional entities that (while
            not sentences themselves) are represented or expressed by
            meaningful sentences (or, on some versions of this view, by
            concrete tokens of sentences).  On such a view it is
            possible for distinct sentences (either from the same
            language or from different languages) to express the very
            same proposition; e.g. &apos;Snow is white.&apos;,
            &apos;White is the color of snow.&apos;, &apos;Schnee ist
            weiss.&apos; (in German), and (arguably)
            &apos;(#$relationAllInstance #$objectHasColor #$SnowMob
            #$WhiteColor)&apos; (in CycL).  Similarly, it is sometimes
            the case that a single sentence -- when used in different
            contexts -- will express distinct propositions; e.g. &apos;I
            am hungry.&apos; said by you and said by me.  Most formal
            languages (such as a first-order predicate calculus) and
            natural languages (such as English) include the resources
            for composing expressions that represent propositions from
            component expressions (that might or might not themselves
            represent other propositions).</rdfs:comment>
        <guid>bd5880ec-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#ComputationalObject"/>
        <daml:disjointWith rdf:resource="#Relation"/>
        <daml:disjointWith rdf:resource="#AttributeValue"/>
    </daml:Class>
    <daml:Class rdf:ID="PropositionalAttitudeSlot">
        <rdfs:label>propositional attitude slot</rdfs:label>
        <rdfs:comment>The collection of  #$BinaryPredicates in Cyc which
            represent the various propositional  attitudes.  Examples
            include #$beliefs, #$desires, #$biases, #$knows,
            #$opinions, #$expects, #$intends, #$goals, #$notices, etc.
            The first  argument of instances of this collection is the
            agent holding the  relevant propositional attitude.  The
            second argument is the  information towards which the
            propositional attitude is held.</rdfs:comment>
        <guid>bd589475-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PredicateCategory"/>
    </daml:Class>
    <daml:Class rdf:ID="PropositionalInformationThing">
        <rdfs:label>information</rdfs:label>
        <rdfs:comment>A collection of intangible objects.  Each element
            of #$PropositionalInformationThing is a chunk of abstract
            propositional information (`a PIT&apos; abbreviates `a
            propositional information thing&apos;).  Such a chunk of
            information may consist of one or more propositions.  The
            propositional content of a PIT is not intrinsically encoded
            in any particular language, but it may be representable in
            many languages.  PITs are used to represent the meaningful
            contents of information bearing things.  Physical
            things--objects or events--which are elements of
            #$InformationBearingThing are linked to the abstract PIT
            contents they embody, by using the predicate
            #$containsInformation (q.v.).  An element of
            #$PropositionalInformationThing may be something as simple
            as the information content of a command to stop one&apos;s
            vehicle, expressed verbally or symbolically in a road sign
            or in a traffic officer&apos;s gesture; or a PIT may be
            something as complex as the entire contemporary knowledge of
            #$Mathematics, which is embodied in many and various
            sources.  More examples: the story embodied in a showing of
            the movie `Citizen Kane&apos;, the information in my resume,
            the content of a conversation in American Sign Language, and
            the information contained in the #$CycKB, may all be
            represented as PITs. Note that the collection
            #$PropositionalInformationThing is a subset of
            #$Microtheory, which makes the Cyc inference mechanisms for
            handling microtheories available to manage the propositional
            content of information bearing things.  See also
            #$Microtheory and #$ist-Information.</rdfs:comment>
        <guid>bd5880a8-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MicrotheoryType"/>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#Microtheory"/>
    </daml:Class>
    <daml:Class rdf:ID="ProtectiveAttire">
        <rdfs:label>protective garments</rdfs:label>
        <rdfs:comment>A collection of objects.  Each element of
            #$ProtectiveAttire is something to wear that is designed for
            protection from the elements or from injury.  Some subsets
            of #$ProtectiveAttire include the collections #$SnowGoggles,
            #$SurgicalGlove, #$WeldingMask, #$Helmet, #$BoxingHeadGear,
            #$FaceMaskForCatcher, #$FirefightersCoat, #$RainGear.</rdfs:comment>
        <guid>bd58aca6-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#NonPoweredDevice"/>
        <rdfs:subClassOf rdf:resource="#SomethingToWear"/>
    </daml:Class>
    <daml:Class rdf:ID="ProtistaKingdom">
        <rdfs:label>protista kingdom</rdfs:label>
        <rdfs:comment>A #$BiologicalKingdom proposed to include
            primarily single-celled, eukaryotic organisms such as
            #$Algae, #$Protozoans, and #$SlimeMolds.</rdfs:comment>
        <guid>bd58a629-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#BiologicalKingdom"/>
        <rdfs:subClassOf rdf:resource="#Organism-Whole"/>
    </daml:Class>
    <daml:Class rdf:ID="Proton">
        <rdfs:label>protons</rdfs:label>
        <rdfs:comment>A collection of objects; a subset of #$Nucleon.
            Each instance of #$Proton is a nucleon which has an
            #$ElectricalCharge of +1.</rdfs:comment>
        <guid>bd58814d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Nucleon"/>
    </daml:Class>
    <daml:Class rdf:ID="Protozoan">
        <rdfs:label>protozoa</rdfs:label>
        <rdfs:comment>The collection of protozoa; a subset of
            #$SingleCellOrganism.  Elements of #$Protozoan are also
            elements of #$EukaryoticCell.  Subsets include #$Amoeba and
            many others.  Protozoa lack cell walls made of cellulose.
            Many protozoa are motile, using pseudopoda, cilia, or
            flagella to move.  Some cause diseases in larger organisms.
            The class #$Protozoan is an instance of
            #$BiologicalSubkingdom in many classification systems,
            sometimes placed under the #$ProtistaKingdom.</rdfs:comment>
        <guid>bd58a5e7-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#BiologicalSubkingdom"/>
        <rdf:type rdf:resource="#OrganismClassificationType"/>
        <rdfs:subClassOf rdf:resource="#ProtistaKingdom"/>
        <rdfs:subClassOf rdf:resource="#SingleCellOrganism"/>
        <rdfs:subClassOf rdf:resource="#EukaryoticCell"/>
    </daml:Class>
    <daml:Class rdf:ID="PsychologicalAilment">
        <rdfs:label>psychological disorders</rdfs:label>
        <rdfs:comment>The collection of ailments that are classified as
            psychological due to their origin and/or manifestation in
            the mind of the sufferer rather than (or at least in
            addition to, and perhaps causing) manifestations in the
            sufferer&apos;s body.  Having a brain tumor is not an
            element of this collection, but imagining that you have one
            is an element of #$PsychologicalAilment, and so is the deep
            case of depression you fall into once you believe (rightly
            or wrongly) that you have a brain tumor.  Some subsets of
            this collection are the collections #$Phobia,
            #$Depression-PsychologicalCondition, and #$PanicAttack.</rdfs:comment>
        <guid>c0fd5b68-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PhysiologicalConditionType"/>
        <rdfs:subClassOf rdf:resource="#AilmentCondition"/>
    </daml:Class>
    <daml:Class rdf:ID="PublicEvent">
        <rdfs:label>public event</rdfs:label>
        <rdfs:comment>The collection of #$Events which occur in front
            of, or in the contemporaneous awareness of, a large number
            of #$Persons -- #$ThePublic.  Usually these are intended to
            be public events, such as the Olympics, a public beheading, etc.</rdfs:comment>
        <guid>bd588f18-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#SocialOccurrence"/>
    </daml:Class>
    <daml:Class rdf:ID="PublicOfficial">
        <rdfs:label>public officials</rdfs:label>
        <rdfs:comment>A collection of persons; a subset of
            #$PublicSectorEmployee.  Each element of #$PublicOfficial is
            a person who holds a position that is directly involved with
            some aspect of governing a country (or a sub-region of it).
            Many public offices in democratically governed countries are
            filled by election; some are filled by appointment.  In
            other countries, public offices are sometimes filled by
            succession or by military decree. Note: Cyc represents a
            public office, such as #$Mayor or #$UnitedStatesPresident,
            as the collection of officials who have held that office,
            together with axioms describing their responsibilities.
            #$PublicOfficial is a #$PositionType.</rdfs:comment>
        <guid>c10af2b2-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PositionType"/>
        <rdfs:subClassOf rdf:resource="#PublicSectorEmployee"/>
    </daml:Class>
    <daml:Class rdf:ID="PublicSectorEmployee">
        <rdfs:label>public sector employees</rdfs:label>
        <rdfs:comment>A collection of persons; a subset of
            #$Professional.  Each element of #$PublicSectorEmployee is a
            person who is employed by a local, state (or provincial), or
            national government.  This collection includes both those
            who are employed directly in government administration
            (e.g., elected and appointed officials, tax officers, police
            and military personnel, other regulatory agents) and those
            who are employed in support services wholly funded by the
            government (e.g., postal employees, public school teachers,
            firefighters, unionized government workers, etc.).</rdfs:comment>
        <guid>bd58e7f7-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#OccupationType"/>
        <rdfs:subClassOf rdf:resource="#Professional"/>
        <daml:disjointWith rdf:resource="#PrivateSectorEmployee"/>
    </daml:Class>
    <daml:Class rdf:ID="PubliclyHeldCorporation">
        <rdfs:label>publicly held corporations</rdfs:label>
        <rdfs:comment>A collection of businesses; a subset of
            #$LegalCorporation.  An element of #$PubliclyHeldCorporation
            is an incorporated business whose #$Stock is traded publicly
            on some stock exchange or another public securities market.
            Businesses that are not traded publicly are instances of #$PrivatelyHeldCorporation.</rdfs:comment>
        <guid>bd58d9fd-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#LegalCorporation"/>
        <rdfs:subClassOf rdf:resource="#Business"/>
    </daml:Class>
    <daml:Class rdf:ID="PublishedMaterial">
        <rdfs:label>publications</rdfs:label>
        <rdfs:comment>A collection of information bearing things (IBTs).
            Each element of #$PublishedMaterial is an IBT that belongs
            to a set of multiple copies which have identical information
            contents, embodied in similar form, and which have been
            produced for distribution.  Note that  published  here does
            not mean  printed and physically distributed  --  intangible
            IBTs can be published using the #$WorldWideWeb, or broadcast
            on the airwaves.  #$PublishedMaterial includes the published
            elements of #$TextualMaterial (e.g., books and magazines);
            software duplicated for sale or distribution; and
            mass-produced elements of #$RecordedSoundProduct.
            Periodicals, television shows, commercial films, annual
            business reports, tax schedules, Top 10 songs, all are
            sub-classes of #$PublishedMaterial.  Examples of
            #$PublishedMaterial: Cycorp&apos;s copy of `The New York
            Times&apos; for July 4, 1998; my paperback copy of the novel
            `Parade&apos;s End&apos;; Bill&apos;s copy of OS/2; the
            instance of the Beatles song `Can&apos;t Buy Me Love&apos;
            now playing on Lisa&apos;s radio.  See also #$SpecifiedInformationBearingThingType.</rdfs:comment>
        <guid>bd58c1bd-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Product"/>
        <daml:disjointWith rdf:resource="#Place"/>
        <daml:disjointWith rdf:resource="#NonPublishedText"/>
    </daml:Class>
    <daml:Class rdf:ID="PulverizationEvent">
        <rdfs:label>pulverize</rdfs:label>
        <rdfs:comment>A collection of events.  In each
            #$PulverizationEvent, some #$SolidTangibleThing is turned
            into #$Powder or a #$LiquidStateOfMatter through the
            application of a force.</rdfs:comment>
        <guid>bd58eccf-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#Separation-Complete"/>
    </daml:Class>
    <daml:Class rdf:ID="PureCompound">
        <rdfs:label>pure compounds</rdfs:label>
        <rdfs:comment>A collection of tangible stuffs. Each instance of
            #$PureCompound is a chemically pure           portion of
            stuff belonging to some particular #$ChemicalCompoundType
            (e.g., #$Carbon,           #$Water, #$Cellulose).
            `Chemically pure&apos; applies to a piece of stuff which has
            no           sub-portions that fail to conform to the
            chemical composition of its (single)
            #$ChemicalCompoundType.  In typical contexts, most
            common portions of a #$ChemicalCompoundType will not be
            instances of           #$PureCompound.           For
            example, a piece of pencil lead, though mostly carbon,
            will not be an instance since it is not pure carbon and any
            portion of ordinary tap           water will contain too
            many           impurities.  Many sub-portions of either a
            piece of pencil lead or portion of tap water           will
            fail to conform           to the chemical composition of
            either carbon or water.  Some instances of
            #$ChemicalCompoundType are #$genls of #$PureCompound in most
            contexts but           not in all.   In typical domestic
            contexts, for example, a piece of ordinary
            distilled water would be an element of #$PureCompound.
            However, in a           clean room or microchip
            manufacturing context, ordinary distilled           water
            would probably be considerd impure (see #$ImpureCompound).
            In general, to refer to a pure instance of a substance
            one can use the function #$PureFn, e.g. (#$PureFn #$Carbon).
            Note that #$PureFn has           #$PureCompound as a
            #$resultGenl.           Since this kind of purity is
            relative to specified chemical composition           only,
            PureCompound (and PureFn) does not pertain to mixtures in
            #$Cyc (such as #$Air).           Cf. #$Mixture,
            #$ChemicalCompoundType.           See also
            #$PureCompoundType and #$ImpureCompound.</rdfs:comment>
        <guid>c0fbb161-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TangibleStuffCompositionType"/>
        <rdfs:subClassOf rdf:resource="#InanimateThing"/>
        <daml:disjointWith rdf:resource="#Mixture"/>
    </daml:Class>
    <daml:Class rdf:ID="PureCompoundType">
        <rdfs:label>pure compound type</rdfs:label>
        <rdfs:comment>A collection of collections.  Every instance of
            #$PureCompoundType is a collection which is a subset of both
            #$PureCompound and of some particular #$ChemicalCompoundType
            (e.g., #$Carbon, #$Water, #$Cellulose).  Each instance of
            #$PureCompoundType is defined ONLY by the properties of its
            #$ChemicalCompoundType, and of #$PureCompound (q.v.).  For
            example, (#$PureFn #$Fructose) is an instance of
            #$PureCompoundType, but the subsets of #$Fructose, such as
            (say) `pure fructose derived from honey&apos; would not be
            instances of #$PureCompoundType.</rdfs:comment>
        <guid>c0fbb120-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="#TangibleStuffCompositionType"/>
    </daml:Class>
    <daml:Class rdf:ID="PurposeSpecificationSlot">
        <rdfs:label>purpose specification slot</rdfs:label>
        <rdfs:comment>Instances are predicates used to specify states
            that instances of #$Plan or instances of #$PurposefulAction
            in a planning context are supposed to bring about.  Usually
            but not always this will entail a specific statement of purpose.</rdfs:comment>
        <guid>bf5fcacd-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="http://www.daml.org/2001/03/daml+oil#Property"/>
    </daml:Class>
    <daml:Class rdf:ID="PurposefulAction">
        <rdfs:label>intentional actions</rdfs:label>
        <rdfs:comment>#$PurposefulAction is the collection of actions in
            which at least one actor is consciously, volitionally, and
            purposefully doing the action (i.e., there is one or more
            #$deliberateActors (q.v.)).</rdfs:comment>
        <guid>bd589e3f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#AtLeastPartiallyMentalEvent"/>
        <rdfs:subClassOf rdf:resource="#Action"/>
        <daml:disjointWith rdf:resource="#Dying"/>
        <daml:disjointWith rdf:resource="#Perceiving-Involuntary"/>
        <daml:disjointWith rdf:resource="#BodilyFunctionEvent-Involuntary"/>
    </daml:Class>
    <daml:Class rdf:ID="PurposefulCompositePhysicalAndMentalActivity">
        <rdfs:label>purposeful composite physical and mental activity</rdfs:label>
        <rdfs:comment>A collection of events that have both a mental and
            physical component but are performed purposively.  It is the
            intersection of #$PurposefulAction and
            #$CompositePhysicalAndMentalEvent. Cutting a piece of wood
            would be an instance of
            #$PurposefulCompositePhysicalAndMentalActivity since it
            involves mental and physical functioning on the part of the
            performing agent and is done purposively.  Having a car
            accident would not be an instance unless the actor
            responsible for the accident purposefully crashed her car.</rdfs:comment>
        <guid>beb39562-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#CompositePhysicalAndMentalEvent"/>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
    </daml:Class>
    <daml:Class rdf:ID="PurposefulMentalActivity">
        <rdfs:label>purposeful mental activity</rdfs:label>
        <rdfs:comment>A subcollection of #$StrictlyMentalEvent, i.e.,
            those involving intentional mental activity on the part of
            at least one performer (see #$performedBy).    Solving a
            math problem, planning an attack, performing a thought
            experiment are all examples of #$PurposefulMentalActivity.
            However, daydreaming or having undesired obsessive thoughts
            are not examples.  A borderline example might be arriving at
            the solution to a math problem in one&apos;s sleep after
            intentionally working on the problem during the previous day.</rdfs:comment>
        <guid>c14de554-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
    </daml:Class>
    <daml:Class rdf:ID="PuttingOnAClothingItem">
        <rdfs:label>putting on a clothing item</rdfs:label>
        <rdfs:comment>A collection of events.  Each element of
            #$PuttingOnAClothingItem is an event in which some wearable
            item is donned.  Such an event may be performed either by
            the wearer or by someone else (e.g., putting on a
            horse&apos;s bridle or a child&apos;s mittens).  After an
            element of #$PuttingOnAClothingItem occurs, there exists an
            element of #$WearingSomething (q.v.), i.e., the situation in
            which the item donned is #$wornOn the body of the wearer.</rdfs:comment>
        <guid>bd58cd7c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#CausingAnotherObjectsTranslationalMotion"/>
        <rdfs:subClassOf rdf:resource="#HandlingAnObject"/>
    </daml:Class>
    <ThreeDimensionalShapeAttribute rdf:ID="PyramidShaped">
        <rdfs:label>pyramid shaped</rdfs:label>
        <rdfs:comment>#$PyramidShaped is the instance of
            #$ShapeAttribute shared  by all three-dimensional object
            made up of four triangular (see #$Triangular) sides (see
            #$objectSurfaces) meeting at an apex and having a
            rectangular (#$Rectangular) base.</rdfs:comment>
        <guid>bfcba5b2-9c29-11b1-9dad-c379636f7270</guid>
    </ThreeDimensionalShapeAttribute>
    <TwoDimensionalShapeAttribute rdf:ID="QuadrilateralShaped">
        <rdfs:label>quadrilateral shaped</rdfs:label>
        <rdfs:comment>This is the instance of #$ShapeAttribute shared by
            all closed four-sided two-dimensional figures.</rdfs:comment>
        <guid>bf2c6f24-9c29-11b1-9dad-c379636f7270</guid>
    </TwoDimensionalShapeAttribute>
    <daml:Class rdf:ID="QualitativeTimeOfDay">
        <rdfs:label>times of day</rdfs:label>
        <rdfs:comment>Instances of #$QualitativeTimeOfDay are #$Events,
            not just #$TimeIntervals.  They are celestial events such as
            instances of #$Dawn, #$Morning, #$Evening, etc.   On
            #$PlanetEarth, each of these is of course synchronized with
            the daily cycle of the calendar, but its absolute timing
            (#$startingPoint and #$endingPoint) depends on the season
            and the observer&apos;s location on the planet&apos;s surface.</rdfs:comment>
        <guid>be011add-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="Quantifier">
        <rdfs:label>quantifier</rdfs:label>
        <rdfs:comment>A collection of mathematical objects.  Each
            element of #$Quantifier represents a relationship between a
            variable and a formula.  In Cyc, a quantifier binds the
            variable found in its first argument within the formula that
            appears as its second argument.  Elements of #$Quantifier in
            CycL include #$forAll, #$thereExists, #$thereExistExactly,
            #$thereExistAtLeast, #$thereExistAtMost.</rdfs:comment>
        <guid>bd58c271-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#RelationshipType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#TruthFunction"/>
        <rdfs:subClassOf rdf:resource="#ScopingRelation"/>
    </daml:Class>
    <daml:Class rdf:ID="QuantitySlot">
        <rdfs:label>quantity slot</rdfs:label>
        <rdfs:comment>A collection of predicates.  Each element of
            #$QuantitySlot is a binary predicate that takes a quantity
            as the value of its second argument.  In Cyc, those
            quantities are elements of #$ScalarInterval (q.v.).
            Examples of #$QuantitySlot: #$distanceTranslated,
            #$spatialExtent, #$densityOfObject.  See also #$IntervalBasedQuantitySlot.</rdfs:comment>
        <guid>bd58cd5b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PredicateCategory"/>
    </daml:Class>
    <daml:Class rdf:ID="QuasiOrdering">
        <rdfs:label>quasi-orderings</rdfs:label>
        <rdfs:comment>The collection of all those
            #$MathematicalOrderings ORDER in which the ordering relation
            R is a reflexive and transitive relation on the #$baseSet S
            of ORDER, i.e., for each X in S, R(X X) holds, and for each
            X, Y and Z in S, if R(X Y) and R(Y Z) then R(X Z).  For
            example, if you take the set of all people in the states
            today, and take the relation &apos;__ is at least as tall as
            ...&apos; (i.e., either __ is as tall as ...  or __ is
            taller than ...) on this set, you get a #$QuasiOrdering
            because this relation is reflexive and transitive on the set
            of all people in the states today.  Note that the
            #$QuasiOrdering in this example is neither a
            #$PartialOrdering nor a #$PartialOrdering-Strict.
            Subcollections of #$QuasiOrdering include #$PartialOrdering,
            #$TreeOrdering, #$TotalOrdering and #$Lattice-LatticeTheoretic.</rdfs:comment>
        <guid>c14247c0-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#MathematicalOrdering"/>
    </daml:Class>
    <daml:Class rdf:ID="QuaternaryFunction">
        <rdfs:label>quaternary function</rdfs:label>
        <rdfs:comment>#$QuaternaryFunction is the collection of all Cyc
            functions which take four arguments.</rdfs:comment>
        <guid>bfc913a6-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#QuaternaryRelation"/>
        <rdfs:subClassOf rdf:resource="#Function-Denotational"/>
    </daml:Class>
    <daml:Class rdf:ID="QuaternaryPredicate">
        <rdfs:label>quaternary predicates</rdfs:label>
        <rdfs:comment>#$QuaternaryPredicate is the collection of all Cyc
            predicates which take four arguments.</rdfs:comment>
        <guid>bd588100-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
        <rdfs:subClassOf rdf:resource="#QuaternaryRelation"/>
    </daml:Class>
    <daml:Class rdf:ID="QuaternaryRelation">
        <rdfs:label>quaternary relation</rdfs:label>
        <rdfs:comment>The collection of all #$Relations of arity 4 in
            CycL.  This  collection was created in order to implement
            automatic conclusion of  arity for relations in CycL,
            regardless of whether they are predicates  or functions.</rdfs:comment>
        <guid>be9be955-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#FixedArityRelation"/>
    </daml:Class>
    <Microtheory rdf:ID="QueryMt">
        <rdfs:label>query mt</rdfs:label>
        <rdfs:comment>The instance of #$IndexicalConcept used
            specifically for referring to &apos;the microtheory in which
            this particular query is being run.  This allows for a
            certain amount of reflection in queries, since it allows one
            to pose a query about the #$Microtheory of the very same
            Ask.  It is useful for cases where one wants to obtain
            certain facts about the context of an Ask without specifying
            anything more about that context.</rdfs:comment>
        <guid>beb7f074-9c29-11b1-9dad-c379636f7270</guid>
    </Microtheory>
    <daml:Class rdf:ID="QuintaryFunction">
        <rdfs:label>quintary function</rdfs:label>
        <rdfs:comment>#$QuintaryFunction is the collection of all Cyc
            functions which take five arguments.</rdfs:comment>
        <guid>bfd0a274-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#QuintaryRelation"/>
        <rdfs:subClassOf rdf:resource="#Function-Denotational"/>
    </daml:Class>
    <daml:Class rdf:ID="QuintaryPredicate">
        <rdfs:label>quintary predicates</rdfs:label>
        <rdfs:comment>#$QuintaryPredicate is the collection of all Cyc
            predicates which take five arguments.</rdfs:comment>
        <guid>bd5880ff-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
        <rdfs:subClassOf rdf:resource="#QuintaryRelation"/>
    </daml:Class>
    <daml:Class rdf:ID="QuintaryRelation">
        <rdfs:label>quintary relation</rdfs:label>
        <rdfs:comment>The collection of all #$Relations of arity 5 in
            CycL.  This  collection was created in order to implement
            automatic conclusion of  arity for relations in CycL,
            regardless of whether they are predicates  or functions.</rdfs:comment>
        <guid>bde495da-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#FixedArityRelation"/>
    </daml:Class>
    <daml:Class rdf:ID="RSTRelation">
        <rdfs:label>r s t relation</rdfs:label>
        <rdfs:comment>A set of predicates describing possible relations
            between text constituents. These predicates are roughly
            adopted from work in Rhetorical Structure Theory (Mann &amp;
            Thompson) and the SENSUS ontology (Hovy). Typically, these
            relations serve as necessary coherence links between
            segments of a text.</rdfs:comment>
        <guid>c0d508e8-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PredicateCategory"/>
    </daml:Class>
    <daml:Class rdf:ID="RadiallySymmetricObject">
        <rdfs:label>radially symmetric object</rdfs:label>
        <rdfs:comment>The collection of objects which are radially
            symmetric, such as wheels, starfish, etc.</rdfs:comment>
        <guid>bd5906ff-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#SpatialThing"/>
    </daml:Class>
    <daml:Class rdf:ID="RadiationResistance">
        <rdfs:label>radiation resistance</rdfs:label>
        <rdfs:comment>A collection of attributes; a subset of
            #$PhysicalAttribute.  Each element of #$RadiationResistance
            represents a specific capacity of a tangible object to
            resist radiation.  Degrees of #$RadiationResistance may be
            represented using #$GenericValueFunctions.  Indicate a
            particular object&apos;s #$RadiationResistance with the
            predicate #$resistanceToRadiation.</rdfs:comment>
        <guid>be00bea1-9c29-11b1-9dad-c379636f7270</guid>
        <rdfs:subClassOf rdf:resource="#PhysicalAttribute"/>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </daml:Class>
    <daml:Class rdf:ID="RadioWave">
        <rdfs:label>radio waves</rdfs:label>
        <rdfs:comment>A collection of events; a subset of
            #$ElectromagneticRadiation. Each element of #$RadioWave is
            an instance of electromagnetic radiation having a wavelength
            in the range from approximately 1 centimeters (1x10^8
            #$Angstrom) to 3,000,000 meters (3x10^18 #$Angstrom), and a
            frequency of approximately 10^8 #$Hertz to 10^2 #$Hertz.
            This includes the spectrum for RadioWave-UHF, RadioWave-VHF,
            RadioWave-FM, RadioWave-AM, and several other types of
            common use #$ElectromagneticRadiation.</rdfs:comment>
        <guid>c100962b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#ElectromagneticRadiation"/>
    </daml:Class>
    <daml:Class rdf:ID="RailroadStation-Physical">
        <rdfs:label>railroad stations</rdfs:label>
        <rdfs:comment>The collection of all railroad stations (train
            station buildings).  These are buildings located near
            railroad tracks and their primary purpose is to be a place
            where trains discharge and receive passengers (and possibly freight).</rdfs:comment>
        <guid>bfa666a1-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Building"/>
    </daml:Class>
    <daml:Class rdf:ID="Railway">
        <rdfs:label>railroads</rdfs:label>
        <rdfs:comment>The collection of all pathways made of
            RailroadTracks and used for train transportation.  It
            includes main lines and sidings.</rdfs:comment>
        <guid>bd58be94-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdf:type rdf:resource="#PathType"/>
        <rdfs:subClassOf rdf:resource="#PathForWheeledVehicles"/>
    </daml:Class>
    <daml:Class rdf:ID="RainProcess">
        <rdfs:label>showers</rdfs:label>
        <rdfs:comment>The collection of events in which the condensed
            liquid water in clouds forms droplets (or ice cystals which
            subsequently melt) substantial enough to fall to the surface
            of the earth.</rdfs:comment>
        <guid>bd58ff5a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#PrecipitationProcess"/>
    </daml:Class>
    <daml:Class rdf:ID="Raindrop">
        <rdfs:label>raindrops</rdfs:label>
        <rdfs:comment>The collection of drops of liquid water emitted by
            clouds in instances of #$RainProcess.</rdfs:comment>
        <guid>bd58bec6-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#PrecipitationParticle"/>
    </daml:Class>
    <daml:Class rdf:ID="Raininess">
        <rdfs:label>raininess</rdfs:label>
        <rdfs:comment>A collection of attributes; a subset of
            #$ScalarInterval.  Each element of #$Raininess describes the
            intensity with which it is raining at an #$OutdoorLocation.
            (At the low extreme, it is not raining at all.)  Degrees of
            raininess may be represented qualitatively (e.g., #$Rainy),
            or using #$GenericValueFunctions.  The raininess of a
            location is indicated with the predicate #$raininessOfRegion.</rdfs:comment>
        <guid>bd58b451-9c29-11b1-9dad-c379636f7270</guid>
        <rdfs:subClassOf rdf:resource="#PhysicalAttribute"/>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
        <rdfs:subClassOf rdf:resource="#WeatherAttribute"/>
    </daml:Class>
    <WeatherAttribute rdf:ID="Rainy">
        <rdfs:label>rainy</rdfs:label>
        <rdfs:comment>The #$WeatherAttribute that characterizes an
            #$OutdoorLocation at which it is raining.</rdfs:comment>
        <guid>bd58ae33-9c29-11b1-9dad-c379636f7270</guid>
    </WeatherAttribute>
    <daml:Class rdf:ID="Rate">
        <rdfs:label>rates</rdfs:label>
        <rdfs:comment>A subset of #$ScalarInterval, whose elements are
            an amount of some property, taken with respect to some unit
            of time.  Elements of #$Rate include, for example, the
            instances of #$Speed (e.g., 55 mph), #$Frequency (e.g., 55
            kHz), #$MonetaryFlowRate (e.g., 55 cents per minute).  See
            #$UnitOfRate for the units used by Cyc to measure rates
            (e.g., #$DollarsPerYear, #$MetersPerSecond).</rdfs:comment>
        <guid>bd58ebc2-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#AttributeType"/>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </daml:Class>
    <daml:Class rdf:ID="RateOfRotation">
        <rdfs:label>rate of rotation</rdfs:label>
        <rdfs:comment>A collection of scalar rates of rotation.</rdfs:comment>
        <guid>bd589807-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#AttributeType"/>
        <rdf:type rdf:resource="#DerivedNumericAttributeType"/>
        <rdfs:subClassOf rdf:resource="#PhysicalAttribute"/>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </daml:Class>
    <daml:Class rdf:ID="RationalNumber">
        <rdfs:label>rational numbers</rdfs:label>
        <rdfs:comment>The collection of all rational numbers; a subset
            of #$RealNumber.  Each element of #$RationalNumber is a
            number that can be expressed as the quotient of two
            integers, i.e., a ratio.  For example, 3/4, 2 1/8,
            0.3333333..., 11/5.</rdfs:comment>
        <guid>bd58f2aa-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MeasurableAttributeType"/>
        <rdfs:subClassOf rdf:resource="#RealNumber"/>
        <daml:disjointWith rdf:resource="#PhysicalAttribute"/>
    </daml:Class>
    <daml:Class rdf:ID="Reading">
        <rdfs:label>reads</rdfs:label>
        <rdfs:comment>The collection of acts of reading
            #$TextualMaterial.  These may be for extracting some sort of
            information from the text, for entertainment, to impart the
            content of the text to others (if #$ReadingAloud), or to
            test reading skills.</rdfs:comment>
        <guid>bd58d532-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#AccessingAnIBT"/>
        <rdfs:subClassOf rdf:resource="#Perceiving-Voluntary"/>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
        <daml:disjointWith rdf:resource="#Hearing"/>
    </daml:Class>
    <daml:Class rdf:ID="RealEstate">
        <rdfs:label>properties</rdfs:label>
        <rdfs:comment>A collection of tangible objects.  Each element of
            #$RealEstate is either a parcel of land or a land-based
            property that can be bought, sold, or rented.  This includes
            buildings and parts of buildings such as office suites or
            condominiums, as well as parcels of land.  Some prominent
            examples: #$GuantanamoNavalBase, #$NewYorkHiltonAtBroadway, #$WorldTradeCenter.</rdfs:comment>
        <guid>c10af41b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdf:type rdf:resource="#ProductType"/>
        <rdfs:subClassOf rdf:resource="#Place"/>
        <rdfs:subClassOf rdf:resource="#SolidTangibleProduct"/>
    </daml:Class>
    <daml:Class rdf:ID="RealNumber">
        <rdfs:label>real numbers</rdfs:label>
        <rdfs:comment>The collection of all the minimal intervals (i.e.,
            points) on the number line; a subset of
            #$IntervalOnNumberLine.  Each element of #$RealNumber is a
            single point on the real number line, which has  no upper or
            lower bounds.  Subsets of #$RealNumber include #$Integer,
            #$RationalNumber, #$NegativeNumber, #$PrimeNumber, and
            others.   Note: Real numbers, like other elements of
            #$IntervalOnNumberLine, are measured along a single number
            `line&apos;; but complex numbers, quaternions, etc., are
            n-tuples of numbers, and therefore are elements of
            #$NTupleInterval. For example, #$ComplexNumber is a subset
            of #$NTupleInterval</rdfs:comment>
        <guid>bd588098-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MeasurableAttributeType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#ScalarPointValue"/>
        <rdfs:subClassOf rdf:resource="#IntervalOnNumberLine"/>
    </daml:Class>
    <daml:Class rdf:ID="Receiving">
        <rdfs:label>receiving</rdfs:label>
        <rdfs:comment>A collection of events; a subset of
            #$GeneralizedTransfer.  Each element of #$Receiving is an
            event in which something `comes in&apos; to an object.
            Typically, a receiving has associated with it an element of
            #$Translocation; a particular receiving and its associated
            translocation(s) are related by the predicate
            #$transferInSubEvent.  If the thing which `comes in&apos; is
            an instance of #$PartiallyTangible (such as a baseball, or a
            SCUD missile), then its reception belongs to the specialized
            subset, #$ReceivingAnObject (q.v.).  If the translocation
            associated with the receiving is an instance of
            #$WavePropagation (such as a radio broadcast, or heat
            radiation from the Sun), then the receiving belongs to the
            subset #$ReceivingAWave (q.v.).</rdfs:comment>
        <guid>bdaf0276-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#TransferIn"/>
    </daml:Class>
    <daml:Class rdf:ID="ReceivingAWave">
        <rdfs:label>receiving a wave</rdfs:label>
        <rdfs:comment>A collection of events; a subset of #$Receiving.
            Each element of #$ReceivingAWave is an event in which an
            instance of #$WavePropagation is received at a #$toLocation.
            For example, my CD player receiving an infrared signal from
            the remote control; hearing a sound of distant thunder; a
            radio telescope receiving signals from a celestial body. See
            also #$WavePropagation.</rdfs:comment>
        <guid>bfccc722-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#Receiving"/>
    </daml:Class>
    <daml:Class rdf:ID="ReceivingAnObject">
        <rdfs:label>receiving an object</rdfs:label>
        <rdfs:comment>A collection of events, #$ReceivingAnObject is a
            subset of the collection #$Receiving.  An instance of
            #$ReceivingAnObject is an event in which there is some
            #$PartiallyTangible which is the #$objectMoving, i.e., the
            thing which `comes in&apos; to the receiver (the
            #$toLocation).  For example, the #$objectMoving on an
            occasion when Lynn Swann received a pass from Terry Bradshaw
            during a Steelers&apos; game would be a football (i.e., some
            instance of #$Football-American) and the passing/receiving
            event itself would be a #$ReceivingAnObject.</rdfs:comment>
        <guid>bf0c9ca6-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#Receiving"/>
    </daml:Class>
    <daml:Class rdf:ID="RecordedSoundProduct">
        <rdfs:label>sound recordings</rdfs:label>
        <rdfs:comment>A collection of information bearing objects
            (IBOs); a subset of #$PublishedMaterial.  Each element of
            #$RecordedSoundProduct is a sound recording which is one of
            a class of similar recordings with the same information
            content.  Typically, #$RecordedSoundProduct includes audio
            recordings (on audio cassettes, CDs, vinyl records) prepared
            and duplicated for sale as a product.  See also #$AudioRecordedObject.</rdfs:comment>
        <guid>bd590495-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#PublishedMaterial"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangibleProduct"/>
        <rdfs:subClassOf rdf:resource="#Artifact"/>
    </daml:Class>
    <daml:Class rdf:ID="RecordedVideoProduct">
        <rdfs:label>recorded video product</rdfs:label>
        <rdfs:comment>A collection of #$VideoRecordedObjects; a subset
            of #$PublishedMaterial.  Each element of
            #$RecordedVideoProduct is a video recording which is one of
            a class of similar recordings with the same information
            content.  Typically, #$RecordedVideoProduct includes video
            recordings (on videotape, laserdiscs, etc.) prepared and
            duplicated for sale as a product.</rdfs:comment>
        <guid>bd58e771-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangibleProduct"/>
        <rdfs:subClassOf rdf:resource="#PublishedMaterial"/>
    </daml:Class>
    <daml:Class rdf:ID="RecoveringFromAilment">
        <rdfs:label>recoveries</rdfs:label>
        <rdfs:comment>A collection of events.  In an instance of
            #$RecoveringFromAilment, some member of
            #$BiologicalLivingObject recovers from an #$AilmentCondition
            it has at the beginning of this recovery period.</rdfs:comment>
        <guid>c10c3620-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#PhysicalEvent"/>
        <rdfs:subClassOf rdf:resource="#IntrinsicStateChangeEvent"/>
    </daml:Class>
    <TwoDimensionalShapeAttribute rdf:ID="Rectangular">
        <rdfs:label>rectangular</rdfs:label>
        <rdfs:comment>#$Rectangular is the instance of #$ShapeAttribute
            shared by all objects that are rectangular in shape, i.e,
            parrallelograms (#$ParallelogramShaped) containing only
            ninety degree interior angles (see #$angleBetweenEdgesOnObject).</rdfs:comment>
        <guid>bd60e0df-9c29-11b1-9dad-c379636f7270</guid>
    </TwoDimensionalShapeAttribute>
    <ThreeDimensionalShapeAttribute rdf:ID="Rectangular3DShaped">
        <rdfs:label>rectangular 3 d shaped</rdfs:label>
        <rdfs:comment>#$Rectangular3DShaped is the instance of
            #$ShapeAttribute is held by all three dimensional objects
            for which each face (see #$objectSurfaces) it is the case
            that (#$shapeOfObject ?FACE #$Rectangular).</rdfs:comment>
        <guid>c05b14e7-9c29-11b1-9dad-c379636f7270</guid>
    </ThreeDimensionalShapeAttribute>
    <daml:Class rdf:ID="ReferenceWork">
        <rdfs:label>reference works</rdfs:label>
        <rdfs:comment>The set of all documents that provide a more or
            less non-speculative, `fact-oriented,&apos; comprehensive
            description of some knowledge domain.</rdfs:comment>
        <guid>bd58caa0-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="ReflexiveBinaryPredicate">
        <rdfs:label>reflexive binary predicate</rdfs:label>
        <rdfs:comment>A collection of predicates; the subset of
            #$BinaryPredicate whose elements represent reflexive
            relations. A predicate F is an element of
            #$ReflexiveBinaryPredicate if and only if F is a binary
            predicate, and for every X in the domain of F, (F X X).
            Examples: #$subSeries, #$inRegion, #$genls, and #$equals.
            Note this additional restriction: A Cyc predicate F can be
            an element of #$ReflexiveBinaryPredicate only if the type
            (i.e., arg-Isa) constraint applicable to F&apos;s first
            argument is not disjoint with the type constraint applicable
            to F&apos;s second argument. See also #$NoteOnArgumentTypingAndPropertiesOfRelations.</rdfs:comment>
        <guid>bd63d3ad-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="http://www.daml.org/2001/03/daml+oil#Property"/>
        <daml:disjointWith rdf:resource="#IrreflexiveBinaryPredicate"/>
    </daml:Class>
    <CoreConstant rdf:ID="ReformulationBackwardDirection">
        <rdfs:label>reformulation backward direction</rdfs:label>
        <rdfs:comment>A meta-property of a #$CycLReformulatorDirective,
            meaning that there exist two arguments in the directive such
            that the higher-numbered arg (e.g. arg2 for a binary
            predicate) is the &apos;from&apos; arg, the input to the
            reformulator, and that the lower-numbered arg (e.g. arg1 for
            a binary predicate) is the &apos;to&apos; arg, the output of
            the reformulator.  Its semantics are more fully determined
            by context. See #$reformulationDirectionInMode for how this
            direction can be used.</rdfs:comment>
        <guid>bf0f7037-9c29-11b1-9dad-c379636f7270</guid>
    </CoreConstant>
    <CoreConstant rdf:ID="ReformulationForwardDirection">
        <rdfs:label>reformulation forward direction</rdfs:label>
        <rdfs:comment>A meta-property of a #$CycLReformulatorDirective,
            meaning that there exist two arguments in the directive such
            that the lower-numbered arg (e.g. arg1 for a binary
            predicate) is the &apos;from&apos; arg, the input to the
            reformulator, and that the higher-numbered arg (e.g. arg2
            for a binary predicate) is the &apos;to&apos; arg, the
            output of the reformulator.  Its semantics are more fully
            determined by context. This is the default
            #$preferredReformulationDirection for #$reformulatorRules.
            See #$reformulationDirectionInMode for how this direction
            can be used.</rdfs:comment>
        <guid>c100289e-9c29-11b1-9dad-c379636f7270</guid>
    </CoreConstant>
    <CoreConstant rdf:ID="ReformulationNeitherDirection">
        <rdfs:label>reformulation neither direction</rdfs:label>
        <rdfs:comment>A meta-property of a #$CycLReformulatorDirective,
            meaning that no arg is to be interpreted as either the
            &apos;from&apos; or &apos;to&apos; arg. See
            #$reformulationDirectionInMode for how this direction can be used.</rdfs:comment>
        <guid>bf12c7c3-9c29-11b1-9dad-c379636f7270</guid>
    </CoreConstant>
    <daml:Class rdf:ID="ReformulatorDirectivePredicate">
        <rdfs:label>reformulator directive predicate</rdfs:label>
        <rdfs:comment>The collection of #$Predicates which can affect
            the behaviour of the #$CycLReformulator or its submodules.
            When reformulator directive GAFs are asserted, they are only
            relevant to the reformulator when it is reformulating
            expressions in the microtheory in which the directive is
            asserted, or a specMt thereof.</rdfs:comment>
        <guid>c0ad3020-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
    </daml:Class>
    <daml:Class rdf:ID="ReformulatorHighlyRelevantFORT">
        <rdfs:label>reformulator highly relevant f o r t</rdfs:label>
        <rdfs:comment>The collection of Cyc FORTs that are highly
            relevant to the reformulator.</rdfs:comment>
        <guid>be144cd1-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
    </daml:Class>
    <daml:Class rdf:ID="ReformulatorIrrelevantFORT">
        <rdfs:label>reformulator irrelevant f o r t</rdfs:label>
        <rdfs:comment>The collection of Cyc FORTs that are not relevant
            to the reformulator.</rdfs:comment>
        <guid>bfe0bb3f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
    </daml:Class>
    <daml:Class rdf:ID="RegionType">
        <rdfs:label>a type of spatial regions</rdfs:label>
        <rdfs:comment>A collection of collections.  Each element of
            #$RegionType is a collection of spatial regions.Such
            collections have elements that are identifiable subregions
            of objects, but that are not themselves independent objects.
            Collections that are elements of #$RegionType include
            #$PalmOfHand, #$Doorway, #$Wall-GenericBarrier,
            #$WorkSurface, #$Handle, and many others.</rdfs:comment>
        <guid>bd58e4d3-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="#ExistingObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="RegionalGovernment">
        <rdfs:label>regional governments</rdfs:label>
        <rdfs:comment>A collection of government organizations; a subset
            of #$LegalGovernmentOrganization.  An element of
            #$RegionalGovernment is a government organization which
            controls a particular geopolitical region (e.g., a country,
            state, city, county, etc).  The #$subOrganizations of an
            element of #$RegionalGovernment may include such
            function-specific #$Departments (q.v.) as legislatures,
            cabinets, police departments, Boards of Education, and
            miscellaneous regulatory agencies (which are also
            #$LegalGovernmentOrganizations).  The #$subOrganizations of
            a #$RegionalGovernment do not include other #$RegionalGovernments.</rdfs:comment>
        <guid>c10aed16-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#LegalGovernmentOrganization"/>
        <daml:disjointWith rdf:resource="#InternationalOrganizationOfCountries"/>
    </daml:Class>
    <TwoDimensionalShapeAttribute rdf:ID="RegularDecagonShaped">
        <rdfs:label>regular decagon shaped</rdfs:label>
        <rdfs:comment>This is the shape attribute shared by all
            ten-sided two dimensional figures in which all edges are of
            equal length and all interior angles have the same measure.
            Note that this is a specialization of the attribute
            #$RegularPolygonShaped, i.e.,  being #$EquilateralShaped and
            #$Equiangular are necessary conditions for having this
            attribute.  Hence, not all ten-sided polygons have this
            attribute.  To describe ten-sided figures that aren&apos;t
            regular polygons use #$PolygonShaped and #$numberOfEdges.</rdfs:comment>
        <guid>bd905123-9c29-11b1-9dad-c379636f7270</guid>
    </TwoDimensionalShapeAttribute>
    <TwoDimensionalShapeAttribute rdf:ID="RegularHexagonShaped">
        <rdfs:label>regular hexagon shaped</rdfs:label>
        <rdfs:comment>This is the shape attribute shared by all six
            sided two dimensional figures in which all edges are of
            equal length and all interior angles have the same measure.
            Note that this is a specialization of the attribute
            #$RegularPolygonShaped, i.e.,  being #$EquilateralShaped and
            #$Equiangular are necessary conditions for having this
            attribute.  Hence, not all six-sided polygons have this
            attribute.  To describe six-sided figures that aren&apos;t
            regular polygons or equiangular use #$PolygonShaped and #$numberOfEdges.</rdfs:comment>
        <guid>be9209c4-9c29-11b1-9dad-c379636f7270</guid>
    </TwoDimensionalShapeAttribute>
    <TwoDimensionalShapeAttribute rdf:ID="RegularOctagonShaped">
        <rdfs:label>regular octagon shaped</rdfs:label>
        <rdfs:comment>This is the shape attribute shared by all
            eight-sided (#$numberOfEdges) two dimensional figures in
            which all edges (#$objectEdges) are of equal length and all
            interior angles have the same measure.   Note that this is a
            specialization of the attribute #$RegularPolygonShaped,
            i.e.,  being #$EquilateralShaped and #$Equiangular are
            necessary conditions for having this attribute.  Hence, not
            all eight-sided polygons have this attribute.  To describe
            eight-sided figures that aren&apos;t regular polygons or
            equiangular use #$PolygonShaped and #$numberOfEdges.</rdfs:comment>
        <guid>c08e11b3-9c29-11b1-9dad-c379636f7270</guid>
    </TwoDimensionalShapeAttribute>
    <TwoDimensionalShapeAttribute rdf:ID="RegularPentagonShaped">
        <rdfs:label>regular pentagon shaped</rdfs:label>
        <rdfs:comment>This is the instance of #$ShapeAttribute shared by
            all five-sided two dimensional figures in which all edges
            are of equal length and all interior angles have the same
            measure.   Note that this is a specialization of the
            attribute #$RegularPolygonShaped, i.e.,  being
            #$EquilateralShaped and #$Equiangular are necessary
            conditions for having this attribute.  Hence, not all
            five-sided polygons have this attribute.  To describe
            five-sided figures that aren&apos;t regular polygons or
            equiangular use #$PolygonShaped and #$numberOfEdges.</rdfs:comment>
        <guid>c02b13c4-9c29-11b1-9dad-c379636f7270</guid>
    </TwoDimensionalShapeAttribute>
    <TwoDimensionalShapeAttribute rdf:ID="RegularPolygonShaped">
        <rdfs:label>regular polygon shaped</rdfs:label>
        <rdfs:comment>This instance of #$ShapeAttribute is the shape
            attribute shared by all polygons that have the attributes
            #$Equiangular and #$EquilateralShaped.</rdfs:comment>
        <guid>bf21eb08-9c29-11b1-9dad-c379636f7270</guid>
    </TwoDimensionalShapeAttribute>
    <daml:Class rdf:ID="ReifiableFunction">
        <rdfs:label>reifiable functions</rdfs:label>
        <rdfs:comment>The collection of all Cyc functions whose values
            can be reified and treated like Cyc constants.  Using
            reifiable functions allow us to add to the KB efficiently;
            e.g., (#$GovernmentFn #$France) can be treated more or less
            the same as if we had created a new constant term called
            `GovernmentOfFrance&apos;, and #$GovernmentFn can be applied
            to any element of #$GeopoliticalEntity to produce such a
            reified term representing the region&apos;s government.  On
            the other hand, it is not desirable to reify every
            non-atomic term; for example, all the measurable quantities,
            such as (#$Inch 5), and the numbers which result from using
            elements of #$FunctionFromQuantitiesToQuantities (e.g.,
            #$PlusFn), should all be instances of #$UnreifiableFunction
            instead. Thus, #$IndividualDenotingFunction does not and
            should NOT have #$ReifiableFunction as a #$genls, because
            #$IndividualDenotingFunction includes the elements of
            #$UnitOfMeasure and other functions whose uses we don&apos;t
            want to reify.  See also #$Function-Denotational,
            #$CycLReifiableDenotationalTerm, #$UnreifiableFunction.</rdfs:comment>
        <guid>bd588002-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#RelationshipType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#Function-Denotational"/>
        <daml:disjointWith rdf:resource="#UnreifiableFunction"/>
    </daml:Class>
    <daml:Class rdf:ID="Relation">
        <rdfs:label>relationships</rdfs:label>
        <rdfs:comment>A collection of abstract objects.  Each element of
            #$Relation represents some kind of relation.  Some elements
            of #$Relation are truth-valued, that is, when applied to
            arguments, they yield statements which are true or false.
            That includes elements of a subset of #$Relation,
            #$TruthFunction (which has the subsets #$Predicate,
            #$LogicalConnective, and #$Quantifier).  Other elements of
            #$Relation yield new terms, rather than just true or false
            -- among them are all the members of
            #$Function-Denotational.  Syntactically, elements of
            #$Relation are Cyc constants that can legally appear in the
            `zero-th&apos; argument place of a CycL expression, i.e.,
            immediately after the opening parenthesis in a CycL expression.</rdfs:comment>
        <guid>bd5880cd-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#RelationshipType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <rdfs:subClassOf rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
        <rdfs:subClassOf rdf:resource="#MathematicalObject"/>
        <daml:disjointWith rdf:resource="#SpatialThing"/>
        <daml:disjointWith rdf:resource="#Proposition"/>
        <daml:disjointWith rdf:resource="#CycLAssertion"/>
        <daml:disjointWith rdf:resource="#CommunicationConvention"/>
        <daml:disjointWith rdf:resource="#AttributeValue"/>
        <daml:disjointWith rdf:resource="#Microtheory"/>
    </daml:Class>
    <daml:Class rdf:ID="RelationPredicate">
        <rdfs:label>relation predicate</rdfs:label>
        <rdfs:comment>A collection of predicates.  Each instance of
            #$RelationPredicate is a relationship between intangible
            objects.  Examples  include #$subAlgorithms,
            #$maxQuantValue, #$meanQuantValue, #$expectedValue,
            #$derivativesOfFunction, #$rangeOfDistribution,
            #$inverseFunc, and #$lessLikelyThan.</rdfs:comment>
        <guid>bd58ed34-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="#IntangibleObjectPredicate"/>
    </daml:Class>
    <daml:Class rdf:ID="RelationalStructure">
        <rdfs:label>relational structure</rdfs:label>
        <rdfs:comment>The collection of all mathematical structures each
            being a composite individual structure consisting of a
            #$baseSet with structuring relations or operations on that
            set (and, optionally, one or more selected other sets,
            relations, functions or individuals). Examples include
            #$PartialOrderings, #$Multigraphs, etc. Sometimes
            mathematicians specify these using a #$Tuple of sets,
            relations, functions, and/or individuals, as specifications.
            Note that RelationalStructure is not the same as its
            #$baseSet since a pure SetOrCollection necessarily lacks the
            associated &apos;structure&apos;.</rdfs:comment>
        <guid>bf48bfa0-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#MathematicalObject"/>
        <rdfs:subClassOf rdf:resource="#Situation"/>
    </daml:Class>
    <daml:Class rdf:ID="RelationshipType">
        <rdfs:label>relationship type</rdfs:label>
        <rdfs:comment>A collection of collections.  Each element of
            #$RelationshipType is a collection of relations used in Cyc,
            including predicates, lambda functions, mathematical
            functions, non-atomic terms, and other types.  Examples:
            #$UnaryFunction, #$LogicalConnective,
            #$IndividualDenotingFunction, #$GenericTimePredicate, #$LanguageDescribingPredicate.</rdfs:comment>
        <guid>bd58dab6-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#ObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="RelativeHumidity">
        <rdfs:label>humidity</rdfs:label>
        <rdfs:comment>A collection of attributes; a subset of
            #$ScalarInterval.  The elements of #$RelativeHumidity
            represent the extent to which the atmosphere at a location
            approaches total saturation with water vapor.  The relative
            humidity of a location is indicated with the predicate #$ambientRelativeHumidity.</rdfs:comment>
        <guid>bd58935f-9c29-11b1-9dad-c379636f7270</guid>
        <rdfs:subClassOf rdf:resource="#PhysicalAttribute"/>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </daml:Class>
    <daml:Class rdf:ID="Relaxed-Emotion">
        <rdfs:label>relaxation</rdfs:label>
        <rdfs:comment>The feeling of being emotionally relaxed, of
            having no pressing troubles or duties weighing on one, of
            being at ease and untroubled.  This is a #$Collection ---
            for an explanation of that, see #$Happiness.  A related
            #$FeelingAttributeType is #$Calm.</rdfs:comment>
        <guid>c10073e2-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#FeelingAttributeType"/>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </daml:Class>
    <daml:Class rdf:ID="Relief-TheEmotion">
        <rdfs:label>reliefs</rdfs:label>
        <rdfs:comment>Emotion aroused by the removal or lightening of
            something oppressive, distressing, or painful.  This is a
            collection; for an explanation of a typical
            #$FeelingAttributeType, see #$Happiness.</rdfs:comment>
        <guid>bd58a14a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#FeelingAttributeType"/>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </daml:Class>
    <daml:Class rdf:ID="Religion">
        <rdfs:label>religions</rdfs:label>
        <rdfs:comment>The collection of all religions or equivalent sets
            of beliefs that answer the `big questions&apos; about
            creation, existence, etc.  Some elements of this are:
            #$AnimistReligion, #$Catholicism, #$Buddhism, etc.</rdfs:comment>
        <guid>bd59021d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#BeliefSystemType"/>
    </daml:Class>
    <daml:Class rdf:ID="ReligiousHoliday">
        <rdfs:label>religious holidays</rdfs:label>
        <rdfs:comment>Each #$ReligiousHoliday is a #$Holiday which is
            specified by some religious tradition.  Note that
            individuals may observe or otherwise participate in a
            #$ReligiousHoliday without being members of the associated #$Religion.</rdfs:comment>
        <guid>c0fdf861-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#Holiday"/>
    </daml:Class>
    <daml:Class rdf:ID="ReligiousOrganization">
        <rdfs:label>religious organizations</rdfs:label>
        <rdfs:comment>A collection of organizations.  An element of
            #$ReligiousOrganization is a #$BeliefSystemFocusGroup whose
            members share religious beliefs, together with meetings,
            rituals, or practices related to those beliefs.  The
            collection #$ReligiousOrganization includes elements of
            #$LocalReligiousCongregation such as local churches,
            temples, mosques and shrines (qua organizations), as well as
            worldwide religious organizations such as the #$RomanCatholicChurch.</rdfs:comment>
        <guid>bd58db04-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Organization"/>
    </daml:Class>
    <daml:Class rdf:ID="RemovingSomething">
        <rdfs:label>removals</rdfs:label>
        <rdfs:comment>A collection of #$Events.  During an instance of
            #$RemovingSomething, an  #$Agent deliberately separates the
            #$objectRemoved from the  #$objectRemaining: that is, the
            object to which  the #$objectRemoved belonged prior to the
            removal event.  In different  types of removals, either the
            #$objectRemoved or the  #$objectRemaining may be destroyed;
            or both may survive. Examples  of #$RemovingSomething
            include: shaving, liposuction, raking leaves  from a lawn,
            sandblasting a building, evicting a tenant, or expelling  a student.</rdfs:comment>
        <guid>bd588d0d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#Separation-Complete"/>
        <rdfs:subClassOf rdf:resource="#ActionOnObject"/>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
    </daml:Class>
    <daml:Class rdf:ID="RemovingSomethingByMovingIt">
        <rdfs:label>removing something by moving it</rdfs:label>
        <rdfs:comment>A collection of #$Events; a subset of
            #$RemovingSomething. During an  instance of
            #$RemovingSomethingByMovingIt, the #$objectRemoved is  moved
            out of the object or configuration to which it belonged
            prior to  the removal event.  The #$objectRemoved is not
            destroyed by the  removal event.  Examples of
            #$RemovingSomethingByMovingIt include: someone  unwrapping a
            present, undressing, digging up a root, or removing an  appendix.</rdfs:comment>
        <guid>bdd212ae-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#CausingAnotherObjectsTranslationalMotion"/>
        <rdfs:subClassOf rdf:resource="#RemovingSomething"/>
        <rdfs:subClassOf rdf:resource="#Translation-Complete"/>
    </daml:Class>
    <daml:Class rdf:ID="Renting">
        <rdfs:label>renting events</rdfs:label>
        <rdfs:comment>A collection of events; a subset of
            #$MonetaryExchangeOfUserRights (among other supersets).
            Each element of #$Renting is an event during which one agent
            grants to another agent the use of an object (owned or
            controlled by the first agent) in exchange for some
            remuneration.  The schedule of payment may vary, depending
            upon the rental period, type of object involved, type of
            usage granted, and/or other considerations.  The agent
            providing the object to rent is called the #$fromPossessor;
            the agent paying to use the object is called the
            #$toPossessor.  Those agents enter into an #$Agreement
            (q.v.).  Examples of #$Renting might include:  Fred renting
            a particular apartment last year; Jane renting a car all
            this week; Jack renting a canoe on Saturday morning. See
            also #$PrimaryRoleUseRights.</rdfs:comment>
        <guid>bd58d7bd-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#ServiceEvent"/>
        <rdfs:subClassOf rdf:resource="#TransferringPossession"/>
        <rdfs:subClassOf rdf:resource="#MakingSomethingAvailable"/>
        <rdfs:subClassOf rdf:resource="#TemporaryChangeOfUserRights"/>
        <rdfs:subClassOf rdf:resource="#MonetaryExchangeOfUserRights"/>
    </daml:Class>
    <daml:Class rdf:ID="ReproductiveSystem">
        <rdfs:label>reproductive systems</rdfs:label>
        <rdfs:comment>The collection of all animals&apos; reproductive
            systems.  A #$ReproductiveSystem is a system of organs used
            by the #$Animal for reproduction; i.e., for creating an
            offspring, a new member of that species.   Note:  Strictly
            speaking, it might be more accurate to describe a
            #$ReproductiveSystem as containing the above sorts of
            systems for a mated male and female of a sexual species, as
            only that combined system is capable of actually producing
            an offspring.  But most of the things one wants to say about
            a #$ReproductiveSystem really do only make sense for one
            single animal at a time.  So think of reproduction as a
            cooperative activity, such as having a conversation, where
            we still refer to each animal&apos;s incomplete reproductive
            system as a #$ReproductiveSystem.</rdfs:comment>
        <guid>bd58dae1-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#AnimalBodyPartType"/>
        <rdfs:subClassOf rdf:resource="#BiologicalLivingObject"/>
        <rdfs:subClassOf rdf:resource="#AnimalBodyPart"/>
    </daml:Class>
    <daml:Class rdf:ID="Reptile">
        <rdfs:label>reptiles</rdfs:label>
        <rdfs:comment>The collection of reptiles; a subset of
            #$AirBreathingVertebrate.  Each element of #$Reptile is an
            air-breathing, cold-blooded animal which has a body covered
            by scales or bony plates.  The collection #$Reptile includes
            the subsets #$Snake, #$Turtle, #$Lizard, etc.  Members of
            most species of #$Reptile lay eggs; none has milk, hair,
            feathers, or postembryonic gills.</rdfs:comment>
        <guid>bd58f230-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#BiologicalClass"/>
        <rdf:type rdf:resource="#OrganismClassificationType"/>
        <rdfs:subClassOf rdf:resource="#Vertebrate"/>
        <rdfs:subClassOf rdf:resource="#NonPersonAnimal"/>
    </daml:Class>
    <daml:Class rdf:ID="Requesting-CommunicationAct">
        <rdfs:label>claims</rdfs:label>
        <rdfs:comment>The collection of communication acts in which one
            agent requests something of another.  Requests are typically
            followed by a response.</rdfs:comment>
        <guid>bd58eaca-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#CommunicationAct-Single"/>
        <daml:disjointWith rdf:resource="#Inform-CommunicationAct"/>
    </daml:Class>
    <daml:Class rdf:ID="RequestingInformation">
        <rdfs:label>inquiries</rdfs:label>
        <rdfs:comment>A collection of actions, many of which are speech
            acts.  In each element of this collection, somebody asks  a
            question or requests some information. See also the
            #$IllocutionaryForce  associated with this action, #$Query.</rdfs:comment>
        <guid>bd58adc2-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#Requesting-CommunicationAct"/>
    </daml:Class>
    <daml:Class rdf:ID="Research">
        <rdfs:label>investigations</rdfs:label>
        <rdfs:comment>What some members of #$ResearchOrganizations do.
            Students are often supposed to perform elements of
            #$Research before they write term papers.  Doers of
            #$Research events aim to learn things that they did not
            previously know.  In some cases, they (e.g., professional
            scientists) aim to learn things that no one knows, in other
            cases they (e.g., high school students) aim to merely find
            published knowledge which they did not know before. In some
            cases research may involve doing experiments (see
            #$Experimenting), building systems (see #$ResearchProject),
            in other cases it may involve strictly document
            search.--BillJ, Nov. 30, 1998</rdfs:comment>
        <guid>bd58ea8d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
    </daml:Class>
    <daml:Class rdf:ID="ResearchOrganization">
        <rdfs:label>Research centers</rdfs:label>
        <rdfs:comment>A collection of organizations.  An element of
            #$ResearchOrganization is an organization that carries out
            basic or applied research as its #$MainFunction (or one of
            its #$MainFunctions).  It may or may not be a commercial, or
            a governmental, organization.  For example,
            #$UnitedStatesSpaceProgram, Thomas J. Watson Research
            Laboratory at #$IBMInc, and the Hoover Institute.</rdfs:comment>
        <guid>bd588d84-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Organization"/>
    </daml:Class>
    <daml:Class rdf:ID="Researcher">
        <rdfs:label>researchers</rdfs:label>
        <rdfs:comment>A collection of persons; a subset of
            #$Professional.  Each element of #$Researcher is a person
            who performs research as his or her main occupation.  This
            collection includes academicians, clinical investigators,
            experimental physicists, market researchers, industrial
            researchers, etc.</rdfs:comment>
        <guid>bd589a23-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#OccupationType"/>
        <rdfs:subClassOf rdf:resource="#Professional"/>
    </daml:Class>
    <daml:Class rdf:ID="Resentment">
        <rdfs:label>resentments</rdfs:label>
        <rdfs:comment>Indignation, displeasure, and ill will felt about
            something regarded as a slight, affront, insult, or
            indignity.  This is a collection; for an explanation of a
            typical #$FeelingAttributeType, see #$Happiness.  More
            specialized #$FeelingAttributeTypes than #$Resentment are
            #$Jealousy and #$Envy.</rdfs:comment>
        <guid>bd58a510-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#FeelingAttributeType"/>
        <rdfs:subClassOf rdf:resource="#Contempt"/>
    </daml:Class>
    <daml:Class rdf:ID="Respect">
        <rdfs:label>respect</rdfs:label>
        <rdfs:comment>A feeling of just regard, consideration, or
            appreciation for the worth of someone or something. Note:
            #$Admiration (qv) is different than, or rather a more
            specialized form of, respect.  To feel #$Respect towards
            someone is just to feel that s/he should be treated with
            politeness and consideration, as having dignity;
            #$Admiration and #$Wonder-Admiration implies all of that,
            but also implies that the target of the #$Respect actually
            did something special or has some special quality that sets
            them apart from others (or at least from the respecter).
            #$Respect is a #$Collection --- for an explanation of that,
            see #$Happiness.  Some more specialized
            #$FeelingAttributeTypes than #$Respect are #$Reverence,
            #$Wonder-Admiration, #$Adulation, #$Awe, etc. </rdfs:comment>
        <guid>bd588a38-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#FeelingAttributeType"/>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </daml:Class>
    <daml:Class rdf:ID="Respiration">
        <rdfs:label>respirations</rdfs:label>
        <rdfs:comment>The subset of #$PhysiologicalProcesses in which an
            organism performs respiration; i.e., it exchanges carbon
            dioxide for #$Oxygen which is used to oxygenate (in
            #$Vertebrates) hemoglobin, an oxygen carrier in the #$Blood
            distributed to all of the organism&apos;s cells.
            #$Respiration concerns the exchange of #$Oxygen and waste
            gasses with the environment.  Circulation concerns
            distributing the oxygenated #$Blood to the cells.  The
            oxygen carrier (hemoglobin) releases the oxygen to the
            cells, allowing chemical reactions necessary to sustain the
            cell life, which in turn sustains the life of the breather.</rdfs:comment>
        <guid>bd59061e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#BodilyFunctionEvent-Involuntary"/>
    </daml:Class>
    <daml:Class rdf:ID="RespiratorySystem">
        <rdfs:label>respiratory systems</rdfs:label>
        <rdfs:comment>The collection of all animals&apos; respiratory
            systems.  A #$RespiratorySystem is composed of body parts
            (such as the lungs) of the animal, which together function
            so as to enable it to breathe. Note: it is generally
            required that the #$RespiratorySystem (of a #$Vertebrate)
            work together with the #$CirculatorySystem (qv), as the air
            is used to supply needed substances to the blood and to
            remove waste products from the blood.</rdfs:comment>
        <guid>bd58f314-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#UniqueAnatomicalPartType"/>
        <rdf:type rdf:resource="#AnimalBodyPartType"/>
        <rdfs:subClassOf rdf:resource="#AnimalBodyPart"/>
        <rdfs:subClassOf rdf:resource="#BiologicalLivingObject"/>
    </daml:Class>
    <daml:Class rdf:ID="Restaurant-Organization">
        <rdfs:label>restaurants</rdfs:label>
        <rdfs:comment>The collection of all #$Organizations that operate
            individual restaurants.  For example, the group of
            individuals that operates the Threadgills on Lamar in Austin
            (and no other restaurants) is an instance of
            #$Restaurant-Organization, while the #$Organization that
            owns and operates both Threadgills (the one on Lamar and the
            one on Barton Springs) is not an instance of this collection
            (that organization would be an instance of
            #$FoodServiceOrganization).  Instances of
            #$Restaurant-Organization operate out of #$Restaurant-Objects.</rdfs:comment>
        <guid>bd58f283-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#ServiceEstablishment"/>
        <rdfs:subClassOf rdf:resource="#FoodServiceOrganization"/>
        <rdfs:subClassOf rdf:resource="#OrganizationWithIndividualCustomers"/>
    </daml:Class>
    <daml:Class rdf:ID="Resting-Relaxing">
        <rdfs:label>resting events</rdfs:label>
        <rdfs:comment>The collection of events in which an animal
            abstains from strenuous physical activity.</rdfs:comment>
        <guid>bd58bedf-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#BodilyFunctionEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="Restlessness">
        <rdfs:label>restlessness</rdfs:label>
        <rdfs:comment>The feeling of being troubled, restless, concerned
            about something, or in emotional turmoil.  This is a
            #$Collection --- for an explanation of that, see #$Happiness.</rdfs:comment>
        <guid>c1007595-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#FeelingAttributeType"/>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </daml:Class>
    <daml:Class rdf:ID="Resurrection">
        <rdfs:label>resurrection</rdfs:label>
        <rdfs:comment>The collection of events in which a dead human
            being  is raised from the dead. Examples from #$Christianity
            include the #$Resurrection  of #$JesusOfNazareth after the
            #$CrucifixionOfJesus, or the resurrection of   Lazarus by
            #$JesusOfNazareth in the new testament. Currently, this
            concept is  defined relative to the religious (i.e.,
            #$Christianity) interpretation of  #$Resurrection, and
            should probably not be used in non-religious contexts
            (e.g., a doctor resurrecting a patient who &apos;died&apos;
            twenty-seconds ago). However,  fictional/mythological
            contexts that are in part informed by religious thought
            (e.g., #$Vampire, zombies, etc.) could conceivably employ
            this event.</rdfs:comment>
        <guid>c08f96d3-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#TransformationEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="RetailOrganization">
        <rdfs:label>retail organizations</rdfs:label>
        <rdfs:comment>A collection of organizations.  Each element of
            #$RetailOrganization is an enterprise that engages primarily
            in selling goods to end-users or consumers, rather than to
            wholesale customers.  Examples: #$SearsTheCompany,
            #$WaldenBooksTheCompany, #$StudtmanPhoto.</rdfs:comment>
        <guid>bd58de51-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#SellingOrganization"/>
    </daml:Class>
    <daml:Class rdf:ID="RetailStore">
        <rdfs:label>stores</rdfs:label>
        <rdfs:comment>A collection of retail organizations.  Every
            element of #$RetailStore is a #$SingleSiteOrganization (but
            not necessarily a stand-alone business) which sells goods
            directly to consumers at store&apos;s #$physicalQuarters.
            Note that the Niemann-Marcus store at the Galleria is an
            instance of #$RetailStore, but the Niemann-Marcus company as
            a whole is not, because it is a #$RetailStore-ParentCompany
            (with multiple outlets); both are #$RetailOrganizations.</rdfs:comment>
        <guid>bd58bfff-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#OrganizationWithIndividualCustomers"/>
        <rdfs:subClassOf rdf:resource="#SingleSiteLocalOrganizationWithClients"/>
        <rdfs:subClassOf rdf:resource="#RetailOrganization"/>
    </daml:Class>
    <TwoDimensionalShapeAttribute rdf:ID="RhomboidShaped">
        <rdfs:label>rhomboid shaped</rdfs:label>
        <rdfs:comment>This is the instance of #$ShapeAttribute shared by
            all quadrilateral shaped objects that contain no right
            angles and whose adjacent sides are of unequal length.</rdfs:comment>
        <guid>be5bcb2d-9c29-11b1-9dad-c379636f7270</guid>
    </TwoDimensionalShapeAttribute>
    <TwoDimensionalShapeAttribute rdf:ID="RhombusShaped">
        <rdfs:label>rhombus shaped</rdfs:label>
        <rdfs:comment>#$RhombusShaped is the instance of
            #$ShapeAttribute shared by all two-dimensional four sided
            figures in which all sides have the same length.  They may
            or may not contain right angles.  If so, see #$SquareShaped.</rdfs:comment>
        <guid>c0419650-9c29-11b1-9dad-c379636f7270</guid>
    </TwoDimensionalShapeAttribute>
    <daml:Class rdf:ID="RightObject">
        <rdfs:label>right object</rdfs:label>
        <rdfs:comment>The collection of objects that are meant for, or
            are found on and distinctively structured for, the right
            side of some larger entity or ensemble of parts.  Examples
            include right hands, right shoes, right automobile turning signals.</rdfs:comment>
        <guid>bd589f35-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <daml:disjointWith rdf:resource="#LeftObject"/>
    </daml:Class>
    <OrientationAttribute rdf:ID="RightSideUp">
        <rdfs:label>right side up</rdfs:label>
        <rdfs:comment>(#$orientation OBJECT #$RightSideUp) means that
            OBJECT&apos;s intrinsic top (e.g., the lid of a teapot) is
            above (#$above-Directly) its intrinsic bottom (e.g., bowl of
            a teapot).</rdfs:comment>
        <guid>c0fbac6d-9c29-11b1-9dad-c379636f7270</guid>
    </OrientationAttribute>
    <PhysicalStructuralAttribute rdf:ID="Rigid">
        <rdfs:label>rigid</rdfs:label>
        <rdfs:comment>A physical attribute.  #$Rigid is the
            #$PhysicalStructuralAttribute of solids which are
            stiff--neither flexible nor foldable nor elastic.  Examples
            of rigid things: bricks, wooden boards, steel.  Non-rigid
            things: sand, rubber, cloth.  Borderline: lampshades.</rdfs:comment>
        <guid>bd58926a-9c29-11b1-9dad-c379636f7270</guid>
    </PhysicalStructuralAttribute>
    <daml:Class rdf:ID="Rigidity">
        <rdfs:label>rigidity</rdfs:label>
        <rdfs:comment>A collection of attributes; a subset of
            #$PhysicalAttribute.  Each element of #$Rigidity is a
            property of rigidity belonging to physical objects.
            Rigidities in Cyc are measured using a
            #$GenericValueFunction.  Rigidities of objects are reported
            using the predicate #$rigidityOfObject.</rdfs:comment>
        <guid>be00bbfb-9c29-11b1-9dad-c379636f7270</guid>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </daml:Class>
    <TwoDimensionalShapeAttribute rdf:ID="RingShaped">
        <rdfs:label>ring shaped</rdfs:label>
        <rdfs:comment>#$RingShaped is the instance of #$ShapeAttribute
            shared by all ring-shaped objects. Such objects are defined
            by a circular space encompassed by two concentric circles.
            The diameter of the larger circle should be no more than
            twice the diameter of the smaller circle. Hence, a wedding
            ring has the attribute of being ring-shaped while a
            phonograph record does not.  These objects may be two or
            three dimensional.  For instance, a donut might be
            ring-shaped as might the spatial region defined by two
            concentric circles. </rdfs:comment>
        <guid>c06534b0-9c29-11b1-9dad-c379636f7270</guid>
    </TwoDimensionalShapeAttribute>
    <daml:Class rdf:ID="Ritual">
        <rdfs:label>rituals</rdfs:label>
        <rdfs:comment>The collection of highly stylized or formalized
            actions (or series of actions) performed by #$Persons (alone
            or in groups), usually performed with some solemnity.
            Note: as further explained in the comment for
            #$SocialRitual, a #$WeddingCeremony or #$Inauguration is
            `more than&apos; just a #$Ritual, but following the
            `script&apos; for such a ceremony, and actually carrying it
            out, is a #$Ritual.</rdfs:comment>
        <guid>bd58de45-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
    </daml:Class>
    <daml:Class rdf:ID="River">
        <rdfs:label>rivers</rdfs:label>
        <rdfs:comment>A collection of topographical features.  Each
            element of #$River is a natural stream of water, normally of
            a large volume.  Cf. #$Creek.  Examples of #$River include
            the #$ColoradoRiverOfArizona, the #$AmazonRiver, the
            #$YangtzeRiver, the #$ThamesRiver.</rdfs:comment>
        <guid>bd590733-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Stream"/>
        <rdfs:subClassOf rdf:resource="#BodyOfWater"/>
        <rdfs:subClassOf rdf:resource="#TopographicalFeature"/>
        <rdfs:subClassOf rdf:resource="#GeographicalRegion"/>
    </daml:Class>
    <daml:Class rdf:ID="RoadVehicle">
        <rdfs:label>motor vehicles</rdfs:label>
        <rdfs:comment>A collection of transportation devices.  An
            instance of #$RoadVehicle is a vehicle which would typically
            be found travelling on roads and (optionally) carrying
            passengers: cars, busses, vans, pickup trucks, fire trucks,
            RVs, motorcycles, etc..  Since #$RoadVehicles are vehicles,
            i.e. self powered (e.g. see #$vehicle),
            #$LandTransportationDevices such as #$Bicycles, or
            #$Wheelchairs are not in this class.</rdfs:comment>
        <guid>bd58d3f7-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdf:type rdf:resource="#ProductType"/>
        <rdfs:subClassOf rdf:resource="#TransportationDevice-Vehicle"/>
    </daml:Class>
    <daml:Class rdf:ID="RoadWorkVehicle">
        <rdfs:label>road work vehicle</rdfs:label>
        <rdfs:comment>The class of heavy construction equipment vehicles
            that are used to make roads and in other situations where
            one needs to move quantities of earth, rocks, etc. around.
            These are powered by internal combustion engines, and often
            have wheels but just as  often have treads like tanks.</rdfs:comment>
        <guid>bd596847-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="RodShape">
        <rdfs:label>rods</rdfs:label>
        <rdfs:comment>A subset of #$CylinderShape. Each element of
            #$RodShape is a solid cylinder whose height is much greater
            than the radius of its base. Examples include spatially
            localized objects, such reactor rods, logs, and bacilli, as
            well as some abstract cylinders.</rdfs:comment>
        <guid>c1195f2c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#GenericShapeType"/>
        <rdf:type rdf:resource="#ThreeDimensionalShapeType"/>
    </daml:Class>
    <daml:Class rdf:ID="Role">
        <rdfs:label>roles</rdfs:label>
        <rdfs:comment>A collection of relationships; #$Role is a subset
            of #$Predicate.  Each instance of #$Role represents a kind
            of relation that can hold between a situation and something
            `involved&apos; in it.  Note that the involvement may be
            active (e.g., #$doneBy) or passive (e.g., #$objectActedOn or
            even #$eventOccursAt), central (e.g., #$primaryObjectMoving)
            or peripheral (e.g., #$assistingAgent).  Important
            sub-collections of #$Role are #$ActorSlot and #$SubProcessSlot.</rdfs:comment>
        <guid>bd588003-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#RelationshipType"/>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
        <daml:disjointWith rdf:resource="#UnaryRelation"/>
    </daml:Class>
    <daml:Class rdf:ID="RoofOfAConstruction">
        <rdfs:label>roofs</rdfs:label>
        <rdfs:comment>The collection of all roofs of structures which
            are instances of #$HumanShelterConstruction.  Like instances
            of #$Wall-Vertical, instances of #$RoofOfAConstruction may
            be considered as having one or two sides; the
            &apos;inner&apos; side of a roof may or may not qualify as a
            #$CeilingOfARoom.  It is understood that one and only one
            side of a #$RoofOfAConstruction is &apos;exposed to the elements.&apos;</rdfs:comment>
        <guid>bd58f788-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#PartOfBuilding"/>
    </daml:Class>
    <daml:Class rdf:ID="RoomInAConstruction">
        <rdfs:label>rooms</rdfs:label>
        <rdfs:comment>The set of rooms in #$ConstructionArtifacts</rdfs:comment>
        <guid>bd589fb2-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#SpaceInAHOC"/>
        <daml:disjointWith rdf:resource="#PathArtifact"/>
        <daml:disjointWith rdf:resource="#PathArtifactSystem"/>
        <daml:disjointWith rdf:resource="#FurniturePiece"/>
    </daml:Class>
    <daml:Class rdf:ID="Rotation-NonPeriodic">
        <rdfs:label>rotation - non periodic</rdfs:label>
        <rdfs:comment>The set of all rotational movements in which
            rotation occurs in a nonperiodic fashion; e.g., the turning
            of a knob on a kitchen appliance or a radio dial, or
            movements of a trackball.  See also #$Rotation-Periodic for
            the context-sensitive nature of this dichotomy.</rdfs:comment>
        <guid>c0962af5-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#Movement-NonPeriodic"/>
        <rdfs:subClassOf rdf:resource="#Movement-Rotation"/>
    </daml:Class>
    <daml:Class rdf:ID="Rotation-Periodic">
        <rdfs:label>periodic rotations</rdfs:label>
        <rdfs:comment>A collection of rotational movements; a subset of
            #$Movement-Rotation.  In any instance of
            #$Rotation-Periodic, either partial rotation (e.g., rocking)
            or full rotation (e.g., spinning) occurs periodically.
            Examples include the swinging of a clock pendulum and the
            rotation of the Earth on its axis.  Note that the accuracy
            and duration of the periodic rotation is context-dependent.
            E.g., in a context spanning a long enough period of time,
            and/or if measured sufficiently accurately, the Earth&apos;s
            rotation does not have a fixed period.  In a context short
            enough, and `approximate&apos; enough, a spinning Olympic
            ice skater is performing a #$Rotation-Periodic event, even
            though a few seconds later they slow down and stop rotating.</rdfs:comment>
        <guid>bf9bb920-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#Movement-Periodic"/>
        <rdfs:subClassOf rdf:resource="#Movement-Rotation"/>
    </daml:Class>
    <ShapeAttribute rdf:ID="Round">
        <rdfs:label>round</rdfs:label>
        <rdfs:comment>The attribute of being round, this applies very
            generally to spherical (see #$Spherical), circular
            (#$Circular) and ring-shaped (#$RingShaped) things.  Note
            that two or three dimensional objects can have this attribute.</rdfs:comment>
        <guid>be5e1310-9c29-11b1-9dad-c379636f7270</guid>
    </ShapeAttribute>
    <daml:Class rdf:ID="Rowboat">
        <rdfs:label>rowboats</rdfs:label>
        <rdfs:comment>A subcollection of #$Watercraft that contains all
            boats each of which is usually powered by one or more
            persons&apos; rowing.--Kat, April 15, 1998</rdfs:comment>
        <guid>be0118b0-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdf:type rdf:resource="#ProductType"/>
        <rdfs:subClassOf rdf:resource="#Device-UserPowered"/>
        <daml:disjointWith rdf:resource="#Motorboat"/>
    </daml:Class>
    <daml:Class rdf:ID="RudeAction">
        <rdfs:label>rude action</rdfs:label>
        <rdfs:comment>The collection of behaviors that go against the
            social conventions of politeness.  This will be a different
            set of behaviors in different circumstances (contexts).  In
            an office, e.g., it might be rude to make a loud noise, but
            at a football game it might be rude to not do so.</rdfs:comment>
        <guid>bd58839e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#SocialOccurrence"/>
        <rdfs:subClassOf rdf:resource="#Action"/>
    </daml:Class>
    <daml:Class rdf:ID="RuleMacroPredicate">
        <rdfs:label>rule macro predicate</rdfs:label>
        <rdfs:comment>Instances of #$RuleMacroPredicate are predicates
            that have, implicit in their definition, the schema for a
            class of quantified formulas.  A ground assertion (GAF)
            using one of these predicates is in fact shorthand for a
            rule fitting this schema.  For example, #$genls is a
            #$RuleMacroPredicate and its implicit schema would be
            (#$implies (#$isa ?X ARG1) (#$isa ?X ARG2)).  Therefore,
            (#$genls #$Poodle #$Dog) is shorthand for the rule
            (#$implies (#$isa ?X #$Poodle) (#$isa ?X #$Dog)).
            #$RuleMacroPredicates may be supported by system code, as is
            #$genls, or they may be defined with an #$expansionAxiom.
            In general, one should only introduce a new
            #$RuleMacroPredicate if 1) there is a plan to eventually
            provide code support for efficient reasoning with its uses,
            and/or 2) using it enables useful type-level reasoning.</rdfs:comment>
        <guid>bd8efae4-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
    </daml:Class>
    <daml:Class rdf:ID="RuleTemplate">
        <rdfs:label>rule templates</rdfs:label>
        <rdfs:comment>Terms denoting formulas (typically without support
            for efficient inference) that can be (partially)
            instantiated as Cyc assertions (typically with support for
            efficient inference); see #$trueRule and #$ruleTemplateAssertion.</rdfs:comment>
        <guid>bf77bef5-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#AbstractInformationalThing"/>
        <rdfs:subClassOf rdf:resource="#ComputationalObject"/>
    </daml:Class>
    <IndependentCountry rdf:ID="Russia">
        <rdfs:label>Russia</rdfs:label>
        <rdfs:comment>Russia, the world&apos;s largest
            #$IndependentCountry, occupying most of the North, Center,
            and East of the #$ContinentOfAsia.  This constant includes
            Russia throughout time, both political and physical aspects.</rdfs:comment>
        <guid>bd5893c1-9c29-11b1-9dad-c379636f7270</guid>
    </IndependentCountry>
    <NaturalLanguage rdf:ID="RussianLanguage">
        <rdfs:label>Russian Language</rdfs:label>
        <rdfs:comment>Dominant language of #$Russia.</rdfs:comment>
        <guid>bd58b38e-9c29-11b1-9dad-c379636f7270</guid>
    </NaturalLanguage>
    <KnowledgeBase rdf:ID="SENSUS-Information1997">
        <rdfs:label>SENSUS-Information1997</rdfs:label>
        <rdfs:comment>SENSUS is a #$KnowledgeBase, created by the
            Information  Sciences Institute at USC. An earlier version
            of it was known  as Pangloss, and it was developed primarily
            in order to  support machine translation.--OKeefe, Oct 15, 1997</rdfs:comment>
        <guid>c02822fc-9c29-11b1-9dad-c379636f7270</guid>
    </KnowledgeBase>
    <daml:Class rdf:ID="Sadness">
        <rdfs:label>blues</rdfs:label>
        <rdfs:comment>Emotion felt when one is unhappy or low-spirited.
            This is a collection; for more details, see #$Happiness.
            Some more specialized #$FeelingAttributeTypes are #$Remorse,
            #$Gloominess, #$Disappointment, #$Depression-Emotion,
            #$Grief, #$Misery, #$Despair, #$Anguish, etc.</rdfs:comment>
        <guid>bd58b4c1-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#FeelingAttributeType"/>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </daml:Class>
    <daml:Class rdf:ID="Safeness">
        <rdfs:label>safeness</rdfs:label>
        <rdfs:comment>#$Safeness is the #$ScriptPerformanceAttributeType
            for describing actions in which the performer acts without
            endangering itself or others.</rdfs:comment>
        <guid>bd58f989-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ScriptPerformanceAttributeType"/>
        <rdfs:subClassOf rdf:resource="#ScriptPerformanceAttribute"/>
    </daml:Class>
    <WorkStatus rdf:ID="Salaried">
        <rdfs:label>salaried</rdfs:label>
        <rdfs:comment>An attribute; an element of #$WorkStatus.  The
            attribute of being a salaried worker in some organization.</rdfs:comment>
        <guid>bd58b819-9c29-11b1-9dad-c379636f7270</guid>
    </WorkStatus>
    <daml:Class rdf:ID="SaleByCheck">
        <rdfs:label>sale by check</rdfs:label>
        <rdfs:comment>Sales in which the payment tendered is a check.</rdfs:comment>
        <guid>bd58c845-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#Buying"/>
    </daml:Class>
    <daml:Class rdf:ID="SaleByCreditCard">
        <rdfs:label>credit card sales</rdfs:label>
        <rdfs:comment>A collection of events; a subset of #$Buying.  An
            instance of #$SaleByCreditCard is a purchase in which the
            #$buyer makes payment using some element of #$CreditCard
            (the set of all credit cards). Note: This is different from
            instances of #$CreditSale (q.v.), in which the #$seller
            (rather than the credit card company) extends credit to the customer.</rdfs:comment>
        <guid>bd58c804-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#Buying"/>
    </daml:Class>
    <daml:Class rdf:ID="SalesActivity">
        <rdfs:label>sales activities</rdfs:label>
        <rdfs:comment>A collection of events.  Each element of
            #$SalesActivity is an event which the performing agent does
            in an effort to achieve a subsequent sale to a second agent.
            Types (i.e., subsets) of #$SalesActivity include
            #$Advertising, telemarketing, showing sample and/or actual
            products to customers in a show room or a store.  Elements
            of #$SalesActivity which are successful lead to
            corresponding elements of #$Buying.  Note: #$SalesActivity
            does NOT include manufacturing, accounting, and other such
            ancillary business activities.</rdfs:comment>
        <guid>bd588fd2-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#CommercialActivity"/>
        <rdfs:subClassOf rdf:resource="#BusinessEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="SalesAgreement">
        <rdfs:label>sales agreements</rdfs:label>
        <rdfs:comment>A collection of agreements.  Each element of
            #$SalesAgreement is an agreement which governs aspects of
            some #$Buying activity.  This includes bidding activities
            (in the subset #$SalesBidOrContract), as well as the
            instances of #$SalesContract.</rdfs:comment>
        <guid>bd5a2d9c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Agreement"/>
    </daml:Class>
    <daml:Class rdf:ID="SalesPerson">
        <rdfs:label>salespeople</rdfs:label>
        <rdfs:comment>A collection of persons; a subset of
            #$Professional.  Each element of #$SalesPerson is someone
            whose principal job activity is negotiating with potential
            buyers, finding out what they want, describing what is
            available, taking orders, etc.  This collection includes
            door-to-door salespeople, Avon reprentatives, new and used
            car salespeople, sales representatives for the product lines
            of large industrial companies, and store clerks working on a
            sales commission.</rdfs:comment>
        <guid>bd589baf-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#OccupationType"/>
        <rdfs:subClassOf rdf:resource="#BusinessPerson"/>
        <rdfs:subClassOf rdf:resource="#Professional"/>
    </daml:Class>
    <daml:Class rdf:ID="SaltingFood">
        <rdfs:label>food-salting events</rdfs:label>
        <rdfs:comment>Soaking food in salt to prevent it from rotting.</rdfs:comment>
        <guid>be00bfc5-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#PreservingFood"/>
    </daml:Class>
    <DeadLanguage rdf:ID="SanskritLanguage">
        <rdfs:label>sanskrit language</rdfs:label>
        <rdfs:comment>This language was originally spoken in the Indic
            area and is now a dead language. Its sacred literature,
            however, was  transmitted orally and eventually written in
            the then-current Devanagari script</rdfs:comment>
        <guid>bd5892ad-9c29-11b1-9dad-c379636f7270</guid>
    </DeadLanguage>
    <daml:Class rdf:ID="Satisfaction">
        <rdfs:label>satisfying</rdfs:label>
        <rdfs:comment>Feeling of appeasement, not only of one&apos;s
            desires or longings but also of his needs or requirements.
            This is a collection; for an explanation of a typical
            #$FeelingAttributeType, see #$Happiness.   Some more
            specialized #$FeelingAttributeTypes than #$Satisfaction are:
            #$Approval, #$Pride, #$Triumph-TheFeeling, etc. </rdfs:comment>
        <guid>bd58bded-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#FeelingAttributeType"/>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </daml:Class>
    <daml:Class rdf:ID="ScalarInterval">
        <rdfs:label>quantities</rdfs:label>
        <rdfs:comment>A collection of mathematical objects; a subset of
            #$NTupleInterval.  For a measurable quantity, the ordered
            sequence of possible values may be thought of as a line.
            Each element of #$ScalarInterval is a line segment (or
            point) on such a line, representing a range of consecutive
            values.  The most common case is where the line is just the
            real number line, and the scalar interval is either a
            contiguous set of points there (i.e., a range of numbers) or
            just a single point there (i.e., a single #$RealNumber).
            Another common case is where the line has some unit of
            measure marked off, such as meters.  In relation to the
            latter kind of interval, see also #$UnitOfMeasure.--Nichols,
            Feb 21, 1997</rdfs:comment>
        <guid>bd5880a7-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdf:type rdf:resource="#AttributeType"/>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#NTupleInterval"/>
    </daml:Class>
    <daml:Class rdf:ID="ScalarPointValue">
        <rdfs:label>scalar values</rdfs:label>
        <rdfs:comment>The collection of minimal scalar intervals.  That
            is, each element of #$ScalarPointValue is a scalar interval
            which has no `width&apos;.  Scalar intervals include both
            pure numbers, such as 3.14, and linear measurements such as
            3.14 meters, which in CycL would be written `(#$Meter 3.14)&apos;.</rdfs:comment>
        <guid>bd58825b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </daml:Class>
    <daml:Class rdf:ID="SchoolInstitution-KThrough12">
        <rdfs:label>schools</rdfs:label>
        <rdfs:comment>A collection of school organizations.  An element
            of #$SchoolInstitution-KThrough12 is an educational
            institution which provides instruction in all or some of the
            grades from kindergarten (K) through high school
            (12th-grade) education.  Commonly, individual schools teach
            some subset of those grades; see also the specializations
            #$ElementarySchoolInstitution, #$MiddleSchoolInstitution,
            and #$HighSchoolInstitution.</rdfs:comment>
        <guid>bd58856c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#EducationalOrganization"/>
    </daml:Class>
    <daml:Class rdf:ID="ScientificFieldOfStudy">
        <rdfs:label>scientific disciplines</rdfs:label>
        <rdfs:comment>A collection of fields of study.  Each element of
            #$ScientificFieldOfStudy is a specialized body of knowledge,
            theory, hypothesis, observations, and problems, which are
            the propositional contents of the systematic endeavor to
            explain the natural world by rational (and frequently,
            quantifiable) methods, including induction, falsifiable
            hypotheses tested by repeatable physical experiments, and
            deductive proof.  #$ScientificFieldOfStudy includes the
            traditional hard sciences (e.g., #$Physics, #$Chemistry),
            the life sciences (e.g., #$Biology, #$Genetics,
            #$Toxicology), and #$Mathematics.</rdfs:comment>
        <guid>bd58b7fc-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#FieldOfStudy"/>
    </daml:Class>
    <daml:Class rdf:ID="Scientist">
        <rdfs:label>scientists</rdfs:label>
        <rdfs:comment>A set of persons; a subset of #$Professional.
            Each element of #$Scientist is a person who is educated and
            employed in one (or more) of the natural or abstract
            sciences.  Elements of #$Scientist include members of its
            subsets #$Astronomer, #$Chemist, #$Linguist,
            #$Mathematician, #$Geneticist, #$CulturalAnthropologist,
            etc.  Examples of #$Scientist: #$CharlesDarwin,
            #$RichardFeynman, Noam #$Chomsky.</rdfs:comment>
        <guid>bd58fbe7-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#OccupationType"/>
        <rdfs:subClassOf rdf:resource="#Researcher"/>
        <rdfs:subClassOf rdf:resource="#Professional"/>
    </daml:Class>
    <daml:Class rdf:ID="ScopingRelation">
        <rdfs:label>scoping relation</rdfs:label>
        <rdfs:comment>Relations that define a scope for one or more variables.</rdfs:comment>
        <guid>c0960de2-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#RelationshipType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#Relation"/>
    </daml:Class>
    <ThreeDimensionalShapeAttribute rdf:ID="ScrewShaped-Generic">
        <rdfs:label>screw shaped - generic</rdfs:label>
        <rdfs:comment>#$ScrewShaped-Generic is the instance of
            #$ShapeAttribute defined by the typical shape of a screw.</rdfs:comment>
        <guid>c0a61d70-9c29-11b1-9dad-c379636f7270</guid>
    </ThreeDimensionalShapeAttribute>
    <daml:Class rdf:ID="ScriptPerformanceAttribute">
        <rdfs:label>script performance attribute</rdfs:label>
        <rdfs:comment>The most general type of attribute describing the
            manner in which an actor performs an action; specializations
            of this include #$CorrectnessOfPosture, #$Competence,
            #$Precision, #$Dexterity, #$Gracefulness, #$Creativity, etc.
            The elements of #$Precision, e.g., represent the various
            qualitative levels such as high precision, low precision, etc.</rdfs:comment>
        <guid>bd589df0-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#AttributeType"/>
        <rdfs:subClassOf rdf:resource="#AttributeValue"/>
    </daml:Class>
    <daml:Class rdf:ID="ScriptPerformanceAttributeType">
        <rdfs:label>script performance attribute type</rdfs:label>
        <rdfs:comment>A collection of collections.  Each
            #$ScriptPerformanceAttributeType is a type of attribute that
            can be used to describe the manner in which actions are
            performed.  Examples include: #$Competence, #$Precision,
            #$Dexterity, #$Gracefulness, #$Creativity, etc.  So, e.g.,
            one may run a race with some measure of #$Gracefulness, some
            measure of #$Competence, etc.</rdfs:comment>
        <guid>bd589d2e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="#PrimitiveAttributeType"/>
    </daml:Class>
    <daml:Class rdf:ID="Sculpture">
        <rdfs:label>sculptures</rdfs:label>
        <rdfs:comment>A collection of art objects.  Each element of
            #$Sculpture is a tangible three-dimensional work of art;
            buildings are NOT included, even though sculptural features
            of buildings (such as friezes) are.  Types of #$Sculpture
            include stone statues, friezes, wood carvings, pipes welded
            into abstract art sculptures, etc.  Examples: the
            #$StatueOfLiberty, the #$MountRushmoreMonument,
            Michelangelo&apos;s David, the friezes on the Parthenon, the
            Buddhas at Longan.</rdfs:comment>
        <guid>bd58acda-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#ArtObject"/>
    </daml:Class>
    <daml:Class rdf:ID="Sea">
        <rdfs:label>seas</rdfs:label>
        <rdfs:comment>A collection of topographical features.  Each
            element of #$Sea is a body of salt water as large or larger
            than a lake.  #$Ocean is a subset of this collection.
            Examples of #$Sea: #$PacificOcean, #$IonianSea,
            #$GulfOfCorinth, #$EastChinaSea, #$BlackSea.</rdfs:comment>
        <guid>bd58cc7f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#BodyOfWater"/>
        <rdfs:subClassOf rdf:resource="#SeaWater"/>
    </daml:Class>
    <daml:Class rdf:ID="SeaWater">
        <rdfs:label>sea water</rdfs:label>
        <rdfs:comment>A collection of tangible things; a subset of both
            #$LiquidTangibleThing and #$Water-Saline.  Each element of
            #$SeaWater is a portion of salt water with the kind of
            mineral concentrations found in oceans--including the oceans themselves.</rdfs:comment>
        <guid>bd590519-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TangibleStuffStateType"/>
    </daml:Class>
    <daml:Class rdf:ID="SeasonOfYear">
        <rdfs:label>seasons</rdfs:label>
        <rdfs:comment>A collection of events -- specifically, the
            seasons that occur as #$subEvents of an
            #$AnnualClimateCycle.  For example, the elements of
            #$WinterSeason are all instances of #$SeasonOfYear.</rdfs:comment>
        <guid>bd5884de-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#WeatherEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="SeatingDevice">
        <rdfs:label>seats</rdfs:label>
        <rdfs:comment>A set of physical objects.  An instance of
            #$SeatingDevice is a device whose #$primaryFunction is to
            serve as a sitting place for people.  Types of seating
            devices include sofas, chairs, benches, camp and stadium
            stools, theatre seats, swings, bicycle seats, saddles, and more.</rdfs:comment>
        <guid>bd588351-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#PhysicalDevice"/>
    </daml:Class>
    <daml:Class rdf:ID="Secretion-Bodily">
        <rdfs:label>secretions</rdfs:label>
        <rdfs:comment>The collection of all #$NaturalTangibleStuff
            secreted by an organism&apos;s body.  There are a wide
            variety of bodily secretions, including #$Hormones, #$Mucus,
            #$InsulinTheSecretion, and #$Semen.  Secretions may be
            deposited either within the body (e.g., #$BileTheSecretion)
            or outside of it (e.g., #$Sweat).   Note: Secretions are
            different from #$ExcretionSubstance in that secretions are
            not necessarily waste products.  E.g., they may be a release
            of pheromones to attract a mate, a layer of sweat to cool
            off the organism, a layer of nectar to attract bees, etc.
            Some subsets of #$Secretion-Bodily, such as #$Sweat, are
            also subsets of #$ExcretionSubstance (i.e., wastes).</rdfs:comment>
        <guid>bd58c769-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdf:type rdf:resource="#TangibleStuffCompositionType"/>
        <rdfs:subClassOf rdf:resource="#NaturalTangibleStuff"/>
    </daml:Class>
    <daml:Class rdf:ID="SecretionEvent">
        <rdfs:label>secretion event</rdfs:label>
        <rdfs:comment>A collection of events; a subset of
            #$BiologicalProductionEvent.  Each element of
            #$SecretionEvent is an event in which a living animal or
            plant secretes a substance.</rdfs:comment>
        <guid>bd58c3cd-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#EmittingAnObject"/>
        <rdfs:subClassOf rdf:resource="#BiologicalProductionEvent"/>
    </daml:Class>
    <TwoDimensionalShapeAttribute rdf:ID="SectorShaped">
        <rdfs:label>sector shaped</rdfs:label>
        <rdfs:comment>#$SectorShaped is the instance of #$ShapeAttribute
            shared by all pie slice shaped two-dimensional objects.  Two
            line segments and the arc of a circle form a closed area and
            define this shape.</rdfs:comment>
        <guid>c09cb5c6-9c29-11b1-9dad-c379636f7270</guid>
    </TwoDimensionalShapeAttribute>
    <daml:Class rdf:ID="Seed">
        <rdfs:label>seeds</rdfs:label>
        <rdfs:comment>The collection of all plant seeds: small nodules
            or granules consisting of young angiosperms and their
            protective containers during early (zygotic and embryonic
            stages) of development.  Seeds, if planted, may grow into
            adult plants.</rdfs:comment>
        <guid>bd58abc2-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#LifeStageType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#PlantBLO"/>
    </daml:Class>
    <daml:Class rdf:ID="SelfConfidence">
        <rdfs:label>self-confidence</rdfs:label>
        <rdfs:comment>Faith in oneself and one&apos;s powers without any
            suggestion of conceit or arrogance.   If one has a large
            portion of #$SelfConfidence, their state of mind is often
            marked by ease and freedom from uncertainty, diffidence, or
            embarrassment.  This is a collection; for an explanation of
            a typical #$FeelingAttributeType, see #$Happiness.  A
            typical more specialized #$FeelingAttributeType than
            #$SelfConfidence is #$Vanity.</rdfs:comment>
        <guid>bd588445-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#FeelingAttributeType"/>
        <rdfs:subClassOf rdf:resource="#Confidence"/>
    </daml:Class>
    <daml:Class rdf:ID="SelfEmployedWorker">
        <rdfs:label>self employed worker</rdfs:label>
        <rdfs:comment>A collection of persons; a subset of
            #$Professional.  Each element of #$SelfEmployedWorker is a
            worker who earns a living from funds paid directly to
            him/her by customers, or who is paid by a company s/he owns.
            An instance of #$SelfEmployedWorker has no boss but him/herself.</rdfs:comment>
        <guid>bd59002c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#OccupationType"/>
        <rdfs:subClassOf rdf:resource="#Professional"/>
        <daml:disjointWith rdf:resource="#Employee"/>
    </daml:Class>
    <daml:Class rdf:ID="SelfPoweredDevice">
        <rdfs:label>self powered device</rdfs:label>
        <rdfs:comment>A collection of #$MechanicalDevices, classified by
            the main way of supplying the force needed to operate them.
            #$SelfPoweredDevice is a subset of #$PoweredDevice.  An
            instance of #$SelfPoweredDevice has an `on-board&apos; part
            which converts some kind of potential energy into force.
            That may be a battery and motor to convert electricity
            stored in the battery into kinetic energy (as in a cordless
            electric drill); other examples are the elements of
            #$Automobile, which (typically) convert gasoline and battery
            power to get the energy to move the vehicle.  Some muscle
            power is involved in operating both a cordless drill and an
            automobile, but not the main part of the power, in either
            case.  Negative exemplars of a #$SelfPoweredDevice include a
            #$Bicycle (powered by the person that rides it) a Cable Car
            (pulled along by cabled embedded in the street) and subway
            train (often powered by an electrified `third rail&apos;).</rdfs:comment>
        <guid>bd58d4bd-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#PoweredDevice"/>
        <rdfs:subClassOf rdf:resource="#MechanicalDevice"/>
        <daml:disjointWith rdf:resource="#KineticEnergyPoweredDevice"/>
    </daml:Class>
    <daml:Class rdf:ID="SellingOrganization">
        <rdfs:label>selling organizations</rdfs:label>
        <rdfs:comment>A collection of organizations.  Each element of
            #$SellingOrganization is an organization whose main function
            is to sell things by conducting sales activities.  Examples:
            sales departments (e.g., the sales department of
            #$ToyotaTheCompany); advertising agencies; and retailers
            (e.g., #$WaldenBooksTheCompany, #$KMart-TheCompany).</rdfs:comment>
        <guid>bd590892-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#CommercialServiceOrganization"/>
        <rdfs:subClassOf rdf:resource="#Organization"/>
    </daml:Class>
    <daml:Class rdf:ID="Semi-DirectedPathSystem">
        <rdfs:label>semi - directed path system</rdfs:label>
        <rdfs:comment>An instance of #$PathSystemType-Structural and a
            subcollection of #$PathSystem.  Each instance of
            #$Semi-DirectedPathSystem is a path system SYS in which
            every link LINK is given at least one direction (specified
            by (#$linkFromToInSystem LINK X Y SYS)), and in which every
            loop is given two directions (so in a sense we can ignore
            the directions of loops).  The directions of paths and
            non-loop-cycles (if they have any) in SYS are determined by
            the directions of links in SYS.  When designing a particular
            semi-directed path system, it is convenient to start
            creating a name for the system (say SYS1, and assert (#$isa
            SYS1 #$Semi-DirectedPathSystem)), a name for each node (such
            as Node1) in the system, and a name for each link (such as
            LinkA) in the system (using (#$isa LinkA #$Path-Simple)),
            and then assert directions of links using
            #$linkFromToInSystem (e.g., (#$linkFromToInSystem LinkA
            Node1 Node2 SYS1)).  The axioms for #$linkFromToInSystem
            will automatically infer other assertions such as those
            involving #$pointOnPath, #$linkBetweenInSystem,
            #$nodeInSystem, #$linkInSystem etc.  Then one can proceed
            creating loops, isolated points and extra points on links if
            they are desired.</rdfs:comment>
        <guid>bebe0ecc-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PathSystemType-Structural"/>
        <rdfs:subClassOf rdf:resource="#PathSystem"/>
    </daml:Class>
    <daml:Class rdf:ID="SemiSolidTangibleThing">
        <rdfs:label>semisolids</rdfs:label>
        <rdfs:comment>A collection of tangible things which are
            tactually intermediate between solids and fluids. When a
            force is first applied to a semisolid object, it deforms
            substantially and does not break or crack. It may return to
            its original shape, like a sponge, or retain the shape which
            resulted from the application of force, like soft clay. Like
            #$SolidTangibleThings, semisolids have shapes independent of
            their containers (they satisfy (hasAttributes ?X
            #$ContainerIndependentShape)) and they cannot be  poured.</rdfs:comment>
        <guid>be00cc3a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TangibleStuffStateType"/>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <daml:disjointWith rdf:resource="#FluidTangibleThing"/>
        <daml:disjointWith rdf:resource="#SolidTangibleThing"/>
    </daml:Class>
    <TwoDimensionalShapeAttribute rdf:ID="Semicircular">
        <rdfs:label>semicircular</rdfs:label>
        <rdfs:comment>#$Semicircular is the instance of #$ShapeAttribute
            shared by all semicircular objects.</rdfs:comment>
        <guid>c08d2ba5-9c29-11b1-9dad-c379636f7270</guid>
    </TwoDimensionalShapeAttribute>
    <ElectricalResistance rdf:ID="SemiconductorResistance">
        <rdfs:label>semiconductor resistance</rdfs:label>
        <rdfs:comment>A measurable physical attribute.
            #$SemiconductorResistance is the element of
            #$ElectricalResistance that represents the level of
            resistance found in instances of #$SemiconductorStuff.  See
            also #$resistanceOfObject.</rdfs:comment>
        <guid>be00f84a-9c29-11b1-9dad-c379636f7270</guid>
    </ElectricalResistance>
    <daml:Class rdf:ID="SemiconductorStuff">
        <rdfs:label>semiconductors</rdfs:label>
        <rdfs:comment>The collection of those elements of
            #$TangibleThing that can, under varying electrical fields,
            behave as an electrical insulator at times and an electrical
            conductor at other times.</rdfs:comment>
        <guid>be011871-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
    </daml:Class>
    <daml:Class rdf:ID="SendingSomething">
        <rdfs:label>sending events</rdfs:label>
        <rdfs:comment>The collection of events in which an #$Agent
            intends to have an object (other than itself) delivered to
            some other #$Agent. This involves at least a temporary loss
            of some user rights to the object by the sender.  If
            successful, an instance of #$SendingSomething is also an
            instance of #$TransferringPossession.</rdfs:comment>
        <guid>bd58d515-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#LosingUserRights"/>
        <rdfs:subClassOf rdf:resource="#DirectedTranslation"/>
    </daml:Class>
    <daml:Class rdf:ID="Sensor">
        <rdfs:label>sensors</rdfs:label>
        <rdfs:comment>The collection of devices, biological or
            artificial, that gather information.    Note:  If a
            well-known named part of such an entity does the
            data-gathering, then generally only those parts are
            considered sensors, not the whole entity.  E.g., even though
            a person gathers information, we generally do not consider
            them to be a sensor, but rather the sensors are their eyes,
            ears, skin, etc.  In a context such as an ophthalmology
            convention, `well-known part&apos; has a different binding,
            and they would consider just certain parts of the eye to be sensors.</rdfs:comment>
        <guid>bd589e5a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
    </daml:Class>
    <daml:Class rdf:ID="SensoryAttribute">
        <rdfs:label>sensory attribute</rdfs:label>
        <rdfs:comment>A collection of attributes.  Each element of
            #$SensoryAttribute is a sensory datum detectable by sentient
            beings.  #$SensoryAttribute includes colors, odors, tastes,
            sounds, and feels, as well as the various feelings
            represented by its subset #$InternalSensoryAttribute.
            Examples of #$SensoryAttribute: #$Rough, #$Smooth, #$Slimy,
            #$GoldColor, #$VeryBrightLightIntensity, (#$HighAmountFn #$NoiseLevelAttribute).</rdfs:comment>
        <guid>bd590b26-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#UnorderedAttributeType"/>
        <rdfs:subClassOf rdf:resource="#AttributeValue"/>
    </daml:Class>
    <daml:Class rdf:ID="SensoryInformation">
        <rdfs:label>sensory information</rdfs:label>
        <rdfs:comment>A collection of mental information.  Each element
            of #$SensoryInformation is the propositional content of a
            mental state in which the nervous system of an animal or
            other sentient perceives something.  For example, if I
            perceive that my office is hot, the information is that my
            [the perceiver&apos;s] office is hot; if you perceive that
            my eyes are brown, the information is that Deborah&apos;s
            eyes are brown.</rdfs:comment>
        <guid>bd58da88-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#MentalInformation"/>
    </daml:Class>
    <daml:Class rdf:ID="SensoryReactionType">
        <rdfs:label>sensory reaction type</rdfs:label>
        <rdfs:comment>A collection of collections.  Each element of
            #$SensoryReactionType is an #$AttributeType, describing one
            natural kind of sensation (e.g., pain, pressure, pleasure,
            warmth, etc.) that may be felt by #$PerceptualAgents.  Some
            examples of #$SensoryReactionType are #$LevelOfDizziness,
            #$LevelOfSoreness, #$LevelOfColdSensation, etc.</rdfs:comment>
        <guid>bd58e2b8-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#PrimitiveAttributeType"/>
        <daml:disjointWith rdf:resource="#FeelingAttributeType"/>
        <daml:disjointWith rdf:resource="#StuffType"/>
        <daml:disjointWith rdf:resource="#InfectionType"/>
    </daml:Class>
    <daml:Class rdf:ID="SeparatingAMixture">
        <rdfs:label>separating a mixture</rdfs:label>
        <rdfs:comment>A collection of events.  In each instance of this
            collection, a #$Mixture is separated into two or more #$constituents.</rdfs:comment>
        <guid>be010756-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#Separation-Complete"/>
    </daml:Class>
    <daml:Class rdf:ID="Separation-Complete">
        <rdfs:label>divisions</rdfs:label>
        <rdfs:comment>A collection of physical separation events.  In
            each #$Separation-Complete, one object is separated into two
            or more distinct pieces.</rdfs:comment>
        <guid>bd58a48e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#SeparationEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="SeparationEvent">
        <rdfs:label>separations</rdfs:label>
        <rdfs:comment>A collection of events.  In each
            #$SeparationEvent, an object is cut, scraped, broken,
            cracked or pulverized, so that part of the object is no
            longer attached where it once was.  That part has not
            necessarily completely separated; it may still be attached
            in places.  See #$Separation-Complete for the complete case.</rdfs:comment>
        <guid>bd58a50f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#PhysicalEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="September">
        <rdfs:label>September</rdfs:label>
        <rdfs:comment>The collection of all Septembers,   the ninth
            month of the year in the #$JulianCalendar.</rdfs:comment>
        <guid>bd58c131-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MonthOfYearType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CalendarMonth"/>
    </daml:Class>
    <daml:Class rdf:ID="Series">
        <rdfs:label>series</rdfs:label>
        <rdfs:comment>The collection of situations in which 2 or more
            &apos;&apos;parts&apos;&apos; or
            &apos;&apos;members&apos;&apos; are ordered in some linear
            fashion, by some relations among them.  For example, the
            line of people at a ticket booth (a #$PhysicalSeries), an
            alphabetized set of words, or the series of pitches in a
            baseball game (an #$EventSeries).  In every instance of
            #$Series, there is some relation by which its members are
            ordered (see #$seriesOrderedBy); this is in contrast to an
            instance of #$List, in which the only ordering relation on
            its members is that of succession in the list.</rdfs:comment>
        <guid>be8e694c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#Situation"/>
    </daml:Class>
    <daml:Class rdf:ID="ServiceEstablishment">
        <rdfs:label>commercial service establishments</rdfs:label>
        <rdfs:comment>A collection of #$Organizations.  Each element of
            #$ServiceEstablishment is a local, commercial service
            organization with a single physical location.  What an
            individual retail store or outlet is for tangible products,
            a #$ServiceEstablishment is for services.  Positive examples
            include the Broken Spoke bicycle repair shop on South Lamar
            in Austin, and the dry cleaners in Westlake Village.</rdfs:comment>
        <guid>bd58e588-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#SingleSiteLocalOrganizationWithClients"/>
        <rdfs:subClassOf rdf:resource="#CommercialServiceOrganization"/>
        <rdfs:subClassOf rdf:resource="#Business"/>
    </daml:Class>
    <daml:Class rdf:ID="ServiceEvent">
        <rdfs:label>services</rdfs:label>
        <rdfs:comment>A collection of events.  Each element of
            #$ServiceEvent is an event in which one agent (or set of
            agents) does something for another agent (or set of agents).
            The former is the #$providerOfService; the latter is the
            #$recipientOfService.  A service event may involve
            maintenance, repair, or refurbishing of some object
            belonging to the #$recipientOfService (including care of
            his/her person); a service event may involve gathering or
            transmitting information, providing advice, entertainment,
            transportation, etc.  Service events may or may not be done
            for payment.</rdfs:comment>
        <guid>bd58de46-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#ProductType"/>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
        <rdfs:subClassOf rdf:resource="#Product"/>
    </daml:Class>
    <daml:Class rdf:ID="ServiceOrganization">
        <rdfs:label>service organizations</rdfs:label>
        <rdfs:comment>A collection of organizations.  Each element of
            #$ServiceOrganization is an organization whose main function
            is to provide some set of services, i.e., to perform certain
            service events.  A service organization may be a subsidiary,
            a department, or an independent organization.  A service
            organization may or may not be a for-profit organization;
            see the subset #$CommercialServiceOrganization.  Examples:
            #$FederalExpress; the mail department at MCC;
            #$NewYorkHospital; the #$USMedicareAdministration; the Jiffy
            Lube at Guadalupe and 38th St; #$Threadgills restaurant;
            KEYE-TV in Austin, TX.</rdfs:comment>
        <guid>bd58b11a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Organization"/>
    </daml:Class>
    <daml:Class rdf:ID="ServingFoodOrDrink">
        <rdfs:label>events in which food or drink is served</rdfs:label>
        <rdfs:comment>A collection of events.  Each element of
            #$ServingFoodOrDrink is an event in which an item of food or
            drink is served.  It starts when the server picks up the
            food or drink from a preparation or pickup area and ends
            when it is deposited at the location where the people being
            served may eat or drink it.  Such events are typically part
            of the job of any restaurant server who waits on tables, and
            they may be performed also by a host or servant at a dinner
            party or banquet, or by a family member at a home meal.
            Note: this collection does not include placing a
            `serving&apos; of food from a common dish onto a
            diner&apos;s plate.</rdfs:comment>
        <guid>bd58ae4c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#ServiceEvent"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#GivingSomething"/>
    </daml:Class>
    <daml:Class rdf:ID="Set-Mathematical">
        <rdfs:label>sets</rdfs:label>
        <rdfs:comment>The collection of mathematical sets.  An element
            of #$Set-Mathematical can be any arbitrary set, including
            sets whose members have nothing in common.  In contrast, the
            members of an instance of #$Set-Mathematical&apos;s sibling
            #$Collection (q.v.) all have some important, natural
            properties in common.  Sets and collections also differ in
            that there cannot exist two distinct sets that have exactly
            the same elements.  A third point of contrast between sets
            and collections is that rarely will it be desirable to
            create a new constant to refer to a set.  Instead, a set
            will either be intensionally specified by a defining
            property, using #$TheSetOf, as in (#$TheSetOf ?X
            (#$likesAsFriend Lenat ?X)), or extensionally specified by
            listing its elements, using #$TheSet, as in (#$TheSet 3 4
            5).  (In certain cases, a set will be extensionally
            specified by means of one of the more specialized functions
            #$ThePartition or #$TheCovering.  See #$partitionedInto and #$covering.)</rdfs:comment>
        <guid>be5d9e9f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#Set-Mathematical"/>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#SetOrCollection"/>
        <daml:disjointWith rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
    </daml:Class>
    <daml:Class rdf:ID="SetOrCollection">
        <rdfs:label>set or collection</rdfs:label>
        <rdfs:comment>The collection of all mathematical sets and all
            collections.  Instances of #$Set-Mathematical and instances
            of #$Collection share some basic common features.  They are
            both abstract entities, lacking spatial and temporal
            properties.  More specifically, they (can) have elements,
            and hence may stand to one another in set-theoretic
            relations such as #$subsetOf and #$disjointWith.
            Nevertheless, sets and collections differ in two important
            respects.  Every collection is associated with an
            intensional criterion for membership -- a more or less
            natural property or group of properties possessed by its
            members.  (The criterion for membership need not, and often
            will not, be precisely definable in any language.)
            Collections are thus akin to kinds.  In contrast, the
            elements of a set are not required to be homogeneous in any
            respect; any things whatsoever may together comprise the
            members of a set.  The second major difference between sets
            and collections is that no two distinct sets can be
            co-extensional (be such that every element of one is an
            element of the other and conversely).  Sets are, so to
            speak, identified on the basis of their extensions.
            Collections, on the other hand, are identified by their
            intensional criteria for membership.  So collections which
            have exactly the same elements may be distinct, differing in
            their respective membership criteria.</rdfs:comment>
        <guid>bd58e5fd-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
        <daml:disjointWith rdf:resource="#Individual"/>
    </daml:Class>
    <Format rdf:ID="SetTheFormat">
        <rdfs:label>set the format</rdfs:label>
        <rdfs:comment>Any argument place of a Cyc predicate may have a
            specified format that constrains its possible value(s).  If
            an argument position has #$SetTheFormat as its entry format,
            then --- given some fixed set of values for the other
            arguments to that predicate --- any number of assertions can
            still be true in the KB with different terms in that
            argument position.  E.g., the #$arg1Format for #$mother is
            #$SetTheFormat, since a woman can have any number of
            children.  See also #$Format, and contrast with #$SingleEntry.</rdfs:comment>
        <guid>bd589408-9c29-11b1-9dad-c379636f7270</guid>
    </Format>
    <daml:Class rdf:ID="Shaft">
        <rdfs:label>shafts</rdfs:label>
        <rdfs:comment>A collection of artifacts.  An instance of #$Shaft
            is an object which is long, straight, and cylindrical.  A
            shaft may be made of wood, metal, etc.</rdfs:comment>
        <guid>bd58e837-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Artifact"/>
        <rdfs:subClassOf rdf:resource="#SolidTangibleProduct"/>
    </daml:Class>
    <daml:Class rdf:ID="Shame">
        <rdfs:label>shames</rdfs:label>
        <rdfs:comment>Painful self-conscious feeling of guilt,
            shortcoming, or impropriety.  #$Shame often accompanies
            social disgrace or disrepute.  It often leads to #$Remorse.
            This is a collection; for an explanation of a typical
            #$FeelingAttributeType, see #$Happiness.</rdfs:comment>
        <guid>bd58a2d2-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#FeelingAttributeType"/>
        <rdfs:subClassOf rdf:resource="#Embarrassment"/>
    </daml:Class>
    <daml:Class rdf:ID="ShapeAttribute">
        <rdfs:label>shape attribute</rdfs:label>
        <rdfs:comment>The collection of different shape attributes.</rdfs:comment>
        <guid>c1278ac5-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#SiblingDisjointAttributeType"/>
        <rdfs:subClassOf rdf:resource="#PhysicalAttribute"/>
    </daml:Class>
    <daml:Class rdf:ID="ShapeDescribingPredicate">
        <rdfs:label>shape describing predicate</rdfs:label>
        <rdfs:comment>A collection of predicates.  Each element of
            #$ShapeDescribingPredicate is a predicate used in assertions
            about abstract shapes and shape-like configurations, such as
            posture.  Examples: #$shape, #$xyCrossSectionShape,
            #$yzCrossSectionShapeType, #$continuouslyConnectedTo, #$postureOfAnimal.</rdfs:comment>
        <guid>bd58c1b7-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="#PhysicalFeatureDescribingPredicate"/>
        <rdfs:subClassOf rdf:resource="#ExtensionalRepresentationPredicate"/>
    </daml:Class>
    <daml:Class rdf:ID="ShapeFunction">
        <rdfs:label>shape functions</rdfs:label>
        <rdfs:comment>A collection of Cyc functions.  Each element of
            #$ShapeFunction is a function which returns an element of
            #$GeometricThing-Abstract, an abstract physical region with
            a specific shape and dimensions.  Elements of
            #$ShapeFunction include #$RectangleFn, #$EllipseFn,
            #$CircleFn, #$RectangularSolidFn, #$CylinderFn, etc.  Each
            shape function takes as argument(s) the dimension(s) of
            #$Distance needed to determine a geometric shape of that
            kind, then returns a shape which has those dimensions.  For
            example, (#$CylinderFn L D) denotes an abstract cylinder of
            length L and diameter D.</rdfs:comment>
        <guid>bd58809c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#RelationshipType"/>
        <rdfs:subClassOf rdf:resource="#IndividualDenotingFunction"/>
    </daml:Class>
    <daml:Class rdf:ID="ShapeType">
        <rdfs:label>configurations</rdfs:label>
        <rdfs:comment>A collection of collections. Each element of
            #$ShapeType is a subset of #$GeometricThing.</rdfs:comment>
        <guid>c0f46e0f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#SiblingDisjointCollection"/>
        <rdfs:subClassOf rdf:resource="#ObjectType"/>
    </daml:Class>
    <ShapeAttribute rdf:ID="Shaped">
        <rdfs:label>shaped</rdfs:label>
        <rdfs:comment>The most general shape attribute (see
            #$ShapeAttribute) , something that an object has in virtue
            of having some definable form that remains constant for some
            period of time.</rdfs:comment>
        <guid>c0946b98-9c29-11b1-9dad-c379636f7270</guid>
    </ShapeAttribute>
    <daml:Class rdf:ID="ShapingSomething">
        <rdfs:label>shaping events</rdfs:label>
        <rdfs:comment>A collection of events in which something (usually
            more or less  plastic  in nature) is given a definite shape,
            or has its shape changed, through the purposeful actions of
            an agent.  In many (but not all) cases, an instance of
            #$ShapingSomething is also a #$PhysicalCreationEvent (e.g.
            #$MakingPottery).  Normally, elements of #$ShapingSomething
            are concerned with the basic, overall shape of an object.
            Thus, a #$PolishingSomething event, which doesn&apos;t
            affect the basic shape of the #$objectOfStateChange, is not
            a #$ShapingSomething.</rdfs:comment>
        <guid>bd58a872-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalStuffType"/>
    </daml:Class>
    <daml:Class rdf:ID="SharedNote">
        <rdfs:label>shared note</rdfs:label>
        <rdfs:comment>#$SharedNote is an element of the Cyc collection
            #$DocumentationConstant.  Each instance of #$SharedNote is a
            constant which contains only documentation (usually a
            #$comment) about two or more constants (not including that
            documentation constant).  See #$sharedNotes for more information.</rdfs:comment>
        <guid>c0fb9bb4-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DocumentationConstant"/>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#TextGroup"/>
        <rdfs:subClassOf rdf:resource="#DocumentationConstant"/>
    </daml:Class>
    <daml:Class rdf:ID="Sharing">
        <rdfs:label>sharing events</rdfs:label>
        <rdfs:comment>A collection of events; a subset of
            #$MakingSomethingAvailable (among other supersets).  In an
            instance of #$Sharing, one #$Agent receives
            #$PrimaryRoleUseRights over an object for a limited time
            from another #$Agent, who doesn&apos;t give up his or her
            own right to use it, too (but does give up exclusive right
            to it).  Cf. #$BorrowingSomething.</rdfs:comment>
        <guid>bd5909af-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#MakingSomethingAvailable"/>
        <rdfs:subClassOf rdf:resource="#TemporaryChangeOfUserRights"/>
        <rdfs:subClassOf rdf:resource="#GainingUserRights"/>
    </daml:Class>
    <PhysicalStructuralAttribute rdf:ID="SharpEdged">
        <rdfs:label>sharp edged</rdfs:label>
        <rdfs:comment>Includes anything which has a sharp edge.
            Includes knives, scissors, and broken glass.  Does not
            include the right angle at the edge of a desk--that&apos;s
            not sharp enough.  Does not include the edge of a cotton
            sheet--that&apos;s not hard enough to be sharp.  Does not
            include a needle--it may be sharp, but it&apos;s not an
            edge.  For needles, nails, etc., see #$PointyEnded.</rdfs:comment>
        <guid>c10058b3-9c29-11b1-9dad-c379636f7270</guid>
    </PhysicalStructuralAttribute>
    <daml:Class rdf:ID="ShatteringEvent">
        <rdfs:label>shattering event</rdfs:label>
        <rdfs:comment>A collection of events.  In each
            #$ShatteringEvent, something is destroyed by being broken
            into a mob of pieces. [A `mob&apos; means `a large but
            indeterminate number&apos;]   Since the salient parts of the
            #$inputsDestroyed must be #$Brittle in order for this to
            happen, fluids (such as liquid water) and elastic stuff
            (such as rubber at room temperature) will generally not
            undergo any #$ShatteringEvents.  Items which can be an
            #$objectActedOn in shattering events are typically made of
            glass, pottery, bone, plaster, etc.  Many substances,
            particularly solid metals and alloys, are extremely
            difficult to shatter.</rdfs:comment>
        <guid>bd5889dc-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#Separation-Complete"/>
    </daml:Class>
    <daml:Class rdf:ID="ShavingSomething">
        <rdfs:label>shave</rdfs:label>
        <rdfs:comment>A collection of events.  In each
            #$ShavingSomething event, thin pieces of material on an
            object&apos;s surface are removed.  An example would be
            someone whittling a wooden spoon, someone using a lathe to
            make a table leg, someone scraping the top layer of mold and
            cheese off a brick of cheese that was left in the
            refrigerator just a little too long, etc.   WARNING: an
            event in which someone ``shaves&apos;&apos; their body hair
            (a #$ShavingBody event) from one&apos;s face, legs, etc.
            with a shaver or razor is NOT a  #$ShavingSomething event;
            rather, it is an element of the collection
            #$CuttingSomething.  If one uses a depilatory such as Nair,
            then one could actually ``shave&apos;&apos; (genuinely a
            #$ShavingSomething event) the resultant coating of
            depilatory and separated hair ends away. </rdfs:comment>
        <guid>be011ba6-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
    </daml:Class>
    <daml:Class rdf:ID="ShearStrength">
        <rdfs:label>shear strength</rdfs:label>
        <rdfs:comment>A collection of attributes; a subset of
            #$PhysicalAttribute.  Each element of #$ShearStrength
            represents a specific capacity of some physical object to
            resist the slipping of one segment in relation to another.
            Shear strengths are designated using a
            #$GenericValueFunction; higher value means more resistance
            to slippage.  Shear strengths of objects are indicated with
            the predicate #$shearStrengthOfObject.</rdfs:comment>
        <guid>bd58d29e-9c29-11b1-9dad-c379636f7270</guid>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </daml:Class>
    <daml:Class rdf:ID="SheetOfSomeStuff">
        <rdfs:label>sheets</rdfs:label>
        <rdfs:comment>A collection of tangible stuff.  Each element of
            #$SheetOfSomeStuff is a substance which (in its
            `intrinsic&apos; shape) is continuous and, when flattened,
            uncrumpled, unfurled, etc, has one dimension which is
            significantly smaller than the other two dimensions.  The
            requirement of being a continuous sheet does not preclude
            some type of penetrability, as in instances of
            #$Screen-Mesh, #$Netting, or #$LaceCloth.  Instances of
            #$SheetOfSomeStuff  may be solid, liquid, or gaseous.  A
            #$Puddle on a relatively flat surface (but not in a deep
            pothole) or an #$AltoStratusCloud would be members of this
            collection.       Belonging to this collection implies
            nothing about the current configuration of the object; in
            particular, elements of #$SheetOfSomeStuff need not be lying
            flat.  Aluminum foil on a roll or a bedspread crumpled up on
            a bed are instances of #$SheetOfSomeStuff. Cf.
            #$SheetShaped, #$TwoDimensionalShape.</rdfs:comment>
        <guid>bd59066e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
    </daml:Class>
    <PhysicalStructuralAttribute rdf:ID="SheetShaped">
        <rdfs:label>panel</rdfs:label>
        <rdfs:comment>A physical attribute.  #$SheetShaped is the
            element of #$PhysicalStructuralAttribute that describes a
            tangible object that is flat and spread out, planar, and
            neither fully crumpled nor compactly folded.  It has two
            opposing surfaces which have the attribute of #$Flat. The
            other surfaces have much smaller area than the two main flat
            surfaces.   Thus an object having the
            #$physicalStructuralAttributes of #$SheetShaped, one of its
            three orthoganal dimensions (e.g. length, width or height)
            is much smaller than in the other two.  Ice over ponds, and
            sheets of paint on a house are all possible examples of
            objects having this attribute.  A bedspread is #$SheetShaped
            only if it is not folded into a small cube or crumpled.  See
            #$CurrentShapeVsIntrinsicShape. For describing a sheet of
            something (e.g., waxed paper, aluminum foil, cloth)
            regardless of its configuration, use #$SheetOfSomeStuff.
            For &apos;one-sided&apos; surfaces (see
            #$SurfaceOnTangibleObject), such as
            &apos;TheGreatPlains&apos; #$SheetShaped is not appropriate
            but #$Flat is appropriate.</rdfs:comment>
        <guid>bd58c6d6-9c29-11b1-9dad-c379636f7270</guid>
    </PhysicalStructuralAttribute>
    <daml:Class rdf:ID="Shell-AnimalBodyPart">
        <rdfs:label>shells</rdfs:label>
        <rdfs:comment>The collection of all animal shells.  An
            animal&apos;s shell is one of its #$AnimalBodyParts, and
            functions as a hard protective outer covering for the animal.</rdfs:comment>
        <guid>bd58e005-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#UniqueAnatomicalPartType"/>
        <rdf:type rdf:resource="#AnimalBodyPartType"/>
        <rdfs:subClassOf rdf:resource="#SkeletalSystem"/>
        <rdfs:subClassOf rdf:resource="#BiologicalLivingObject"/>
    </daml:Class>
    <daml:Class rdf:ID="ShelterConstruction">
        <rdfs:label>shelters</rdfs:label>
        <rdfs:comment>A collection of artificial tangible objects.  Each
            element of #$ShelterConstruction is an artifact built by
            some entity or creature, including but not limited to
            humans, and intended for use as a shelter.  Elements of
            #$ShelterConstruction include bird nests, termite mounds,
            beaver dams, the #$SydneyOperaHouse, the
            #$PalaceOfFineArts-SanFrancisco, and the #$NewYorkHiltonAtBroadway.</rdfs:comment>
        <guid>bd589a82-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Artifact"/>
        <daml:disjointWith rdf:resource="#PathArtifact"/>
        <daml:disjointWith rdf:resource="#PathArtifactSystem"/>
    </daml:Class>
    <daml:Class rdf:ID="Ship">
        <rdfs:label>ships</rdfs:label>
        <rdfs:comment>A subcollection of #$Watercraft-Surface, whose
            instances are large, typically ocean-going vessels.  How big
            is &apos;large&apos;?  Mariners often use the rule of thumb
            that a #$Ship is too large to be carried by any other #$Ship.</rdfs:comment>
        <guid>bd58ab20-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="Shipping">
        <rdfs:label>shipping events</rdfs:label>
        <rdfs:comment>Shipping of objects from one physical location to
            another. Shipping from the perspective of being done as a
            dedicated service, such as what UPS, the US Postal Service,
            or Dominoes Pizza Delivery might do.</rdfs:comment>
        <guid>bd58fa9f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
    </daml:Class>
    <daml:Class rdf:ID="ShippingLocation">
        <rdfs:label>shipping locations</rdfs:label>
        <rdfs:comment>A collection of places; a subset of
            #$ContactLocation.  Each element of #$ShippingLocation is a
            location to which merchandise is physically delivered, e.g.,
            a house, an office, a corporate mailroom, a post office box.</rdfs:comment>
        <guid>c10af5cf-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ContactLocationType"/>
        <rdfs:subClassOf rdf:resource="#MailingLocation"/>
        <rdfs:subClassOf rdf:resource="#HumanlyOccupiedSpatialObject"/>
    </daml:Class>
    <daml:Class rdf:ID="Shirt">
        <rdfs:label>shirts</rdfs:label>
        <rdfs:comment>A collection of objects.  Every element of #$Shirt
            is a clothing item that is worn to cover the upper part of
            the human torso, with openings for the neck and lower body,
            and either openings for, or sleeves encircling, the arms.
            Subsets include #$LongSleeveShirt, #$Blouse, and #$TankTop.</rdfs:comment>
        <guid>bd588139-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdf:type rdf:resource="#ProductType"/>
    </daml:Class>
    <daml:Class rdf:ID="Shoe">
        <rdfs:label>shoes</rdfs:label>
        <rdfs:comment>A collection of objects.  Every element of #$Shoe
            is a shoe or shoelike thing worn on the feet.  Important
            subsets include #$Boot-Footwear, #$Sandal, #$Slipper, and
            #$CasualShoe.  Elements of the collection #$Shoe are single
            shoes.  Pairs of shoes are elements of the collection
            denoted by (#$PairFn #$Shoe).</rdfs:comment>
        <guid>bd58a4e8-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdf:type rdf:resource="#ProductType"/>
        <rdfs:subClassOf rdf:resource="#ClothingItem"/>
    </daml:Class>
    <daml:Class rdf:ID="ShortPants">
        <rdfs:label>pairs of shorts</rdfs:label>
        <rdfs:comment>A collection of objects; a subset of #$Pants.
            Every element of #$ShortPants has pantlegs that cover only
            the upper part of the wearer&apos;s legs, being typically
            knee-length or shorter.</rdfs:comment>
        <guid>bd588eab-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Pants"/>
    </daml:Class>
    <daml:Class rdf:ID="ShreddingEvent">
        <rdfs:label>shred</rdfs:label>
        <rdfs:comment>A collection of events.  In each #$ShreddingEvent,
            the #$inputsDestroyed are destroyed by a large number of
            #$Ripping #$subEvents.</rdfs:comment>
        <guid>bd58e23d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#SeparationEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="SiblingDisjointAttributeType">
        <rdfs:label>sibling disjoint attribute type</rdfs:label>
        <rdfs:comment>A collection of collections.  Each element of
            #$SiblingDisjointAttributeType is a collection of
            attributes.  If COL is such a collection, then nothing can
            have two instances of COL as attributes unless those two
            instances are related in a #$genlAttributes relationship to
            each other.  For example, #$MaritalStatusOfPeople is an
            element of #$SiblingDisjointAttributeType; no person can
            have (at the same time) the #$maritalStatus #$Married and
            the #$maritalStatus #$Single.  However, a person could have
            both the status #$Single and the status #$Divorced, if
            #$Single is a #$genlAttributes of #$Divorced.  See also #$SiblingDisjointCollection.</rdfs:comment>
        <guid>bd590951-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdf:type rdf:resource="#SiblingDisjointCollection"/>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="#AttributeType"/>
    </daml:Class>
    <daml:Class rdf:ID="SiblingDisjointCollection">
        <rdfs:label>sibling disjoint collections</rdfs:label>
        <rdfs:comment>#$SiblingDisjointCollection captures a very
            important concept, but one that is rarely given a name.
            There are many sets of sets for which any two member sets
            either will be disjoint (i.e., have no intersection) or else
            one will be a subset of the other.  For instance, consider
            the various types (i.e., sets) of animals in the usual
            Linnaean taxonomy:  Vertebrate, Bird, Dog, Mammal,
            Invertebrate, Person, etc.; Vertebrates and Invertebrates
            are mutually disjoint, while Bird, Mammal, Dog, and Person
            are all subsets of Vertebrate.  Dog and Person are disjoint
            with each other, but each of them is a subset of Vertebrate.
            All of the Linnaean sets, or collections, of animals can be
            grouped together into one set, or collection, of sets, which
            in turn is an instance of #$SiblingDisjointCollection.
            It turns out that the real situation --- and the real
            definition of #$SiblingDisjointCollection --- is slightly
            more complicated than that.  Consider types of appliances:
            toasters, cars, shavers, clocks, etc.  Is the set of such
            appliance-types a #$SiblingDisjointCollection, the way we
            defined it above, for types of animals?  Almost, but not
            quite.  One could have an appliance-type `ClockRadio&apos;,
            which would be the set of all clock radios, and clearly each
            clock radio is both a clock and a radio, yet neither #$Clock
            nor #$RadioReceiver is a subset of the other.  So if we have
            some item that purports to be both a clock and radio, that
            is okay if one of the following three conditions is met:
            (1) the collection #$Clock is known to be a subset of
            #$RadioReceiver;  (2) the collection #$RadioReceiver is
            known to be a subset of #$Clock;  (3) there is already
            defined a collection X which is a subset of both #$Clock and
            #$RadioReceiver.  More formally, the axiom that defines
            #$SiblingDisjointCollection is as follows: SIB is an element
            of #$SiblingDisjointCollection if and only if:  (#$implies
            (#$and          (#$isa C1 SIB)          (#$isa C2 SIB)
            (#$isa C1-EL C1)         (#$different C1 C2))     (#$or
            (#$not (#$isa C1-EL C2))          (#$thereExists C3 (#$and
            (#$genls C3 C2) (#$genls C3 C1) (#$isa C1-EL C3)))))  That
            axiom, together with the minimization of #$genls, gives us
            the following characterization of our concept:  If we have a
            collection SIB that is an element of
            #$SiblingDisjointCollection, and if we take two elements C1
            and C2 of that collection SIB, then each element of C1 which
            is not an element of a common specialization (C3) of C1 and
            C2, MUST NOT BE an element of C2.  In cases where there are
            a few exceptions --- that is, a couple of elements of SIB
            might have some overlap --- but it is undesirable to
            explicitly create a new reified constant (like
            `ClockRadio&apos;, above) for that intersection, Cyc allows
            you to use an explicit mechanism to override the
            #$SiblingDisjointCollection constraints for a particular C1
            and C2; namely, you would assert to Cyc
            (#$siblingDisjointExceptions C1 C2).  See also
            #$siblingDisjointWith and #$siblingDisjointExceptions.</rdfs:comment>
        <guid>bd5880e2-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#CollectionType"/>
    </daml:Class>
    <daml:Class rdf:ID="Side">
        <rdfs:label>sides</rdfs:label>
        <rdfs:comment>Elements are portions of some #$Surface-Physical
            which constitute a boundary between the inside and outside
            of a tangible object.</rdfs:comment>
        <guid>c0f4873f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#RegionType"/>
        <rdfs:subClassOf rdf:resource="#Surface-Physical"/>
    </daml:Class>
    <daml:Class rdf:ID="SignTheDisplay">
        <rdfs:label>signs</rdfs:label>
        <rdfs:comment>A collection of #$InformationBearingObjects
            (IBOs), a subcollection of #$VisualInformationSource. Each
            instance of #$SignTheDisplay is an object typically posted
            where people can see it so that they can obtain information
            from it. Uses of signs include identification of objects
            (e.g., street signs, name tags, species labels at zoos),
            advertising (e.g., billboards, neon signs, posters for
            garage sales, #$WorldWideWeb page banners), and warnings
            (e.g., signs for road hazards or road construction, `No
            Trespassing&apos;postings, printed tape marking off a police line).</rdfs:comment>
        <guid>bd58b6a2-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#VisualInformationSource"/>
    </daml:Class>
    <AcquaintanceAttribute rdf:ID="SimpleContactAcquaintance">
        <rdfs:label>simple contact acquaintance</rdfs:label>
        <rdfs:comment>The attribute which specifies that persons X and Y
            have met each other at least once, and probably would be
            able to recall this, and even recognize each other, if they
            meet again.  I.e., (#$acquaintances X Y
            #$SimpleContactAcquaintance) implies (#$acquaintances Y X
            #$SimpleContactAcquaintance); that is, if X has met Y, then
            Y has met X.  This assumes that there was a meeting event in
            which (earlier subabstractions of) X and Y interacted, that
            both were minimally conscious, etc.</rdfs:comment>
        <guid>bd58fd8f-9c29-11b1-9dad-c379636f7270</guid>
    </AcquaintanceAttribute>
    <daml:Class rdf:ID="SimpleGraph-GraphTheoretic">
        <rdfs:label>simple graphs</rdfs:label>
        <rdfs:comment>The collection of all #$PathSystems that are
            instances of both #$SimplePathSystem and #$Multigraph.  Each
            instance of #$SimpleGraph-GraphTheoretic is a
            &apos;graph&apos;, as studied in graph theory, in which
            there are neither loops nor multiple links between the same
            pair of nodes.</rdfs:comment>
        <guid>be269b3d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PathSystemType-Structural"/>
        <rdfs:subClassOf rdf:resource="#SimplePathSystem"/>
        <rdfs:subClassOf rdf:resource="#Multigraph"/>
    </daml:Class>
    <daml:Class rdf:ID="SimpleNoun">
        <rdfs:label>simple nouns</rdfs:label>
        <rdfs:comment>The collection of all simple nouns, also called
            common nouns. Simple nouns can typically be preceded by a
            determiner, and in English they inflect for number. Example: &apos;dog&apos;.</rdfs:comment>
        <guid>bd588078-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#LinguisticObjectType"/>
        <rdf:type rdf:resource="#SpeechPart"/>
        <rdfs:subClassOf rdf:resource="#Noun"/>
    </daml:Class>
    <daml:Class rdf:ID="SimplePathSystem">
        <rdfs:label>simple path system</rdfs:label>
        <rdfs:comment>An instance of #$PathSystemType-Structural and the
            collection of #$PathSystems without loops or parallel links.
            This collection includes #$SimpleGraph-GraphTheoretic when
            there are no non-node points along links.</rdfs:comment>
        <guid>c0f34819-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PathSystemType-Structural"/>
        <rdfs:subClassOf rdf:resource="#PathSystem"/>
    </daml:Class>
    <daml:Class rdf:ID="SimpleRepairing">
        <rdfs:label>repairing activities</rdfs:label>
        <rdfs:comment>The collection of events in which something gets fixed.</rdfs:comment>
        <guid>bd5893d5-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#IntrinsicStateChangeEvent"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
    </daml:Class>
    <daml:Class rdf:ID="SimpleSegmentOfPath">
        <rdfs:label>simple segment of path</rdfs:label>
        <rdfs:comment>The collection of all segments of #$Path-Generics
            each of which has no path junctions between its ends.  The
            two ends of such a segment may or may not coincide at the
            same location (i.e. a #$SimpleSegmentOfPath may form a loop
            -- see also #$SimpleUnloopedSegmentOfPath and
            #$SimpleLoopedSegmentOfPath).  The only access to something
            located along a #$SimpleSegmentOfPath is via the
            #$endsOfPathSegment locations for that
            #$SimpleSegmentOfPath.  When the segment is part of a
            specified #$PathSystem (as opposed to a mere
            #$CustomarySystemOfLinks), the predicate #$linkInSystem (or
            else #$loopInSystem) may apply to it and the system.</rdfs:comment>
        <guid>c019b6d1-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#Path-Generic"/>
    </daml:Class>
    <daml:Class rdf:ID="SimpleWholeBodyMovement">
        <rdfs:label>simple whole body movement</rdfs:label>
        <rdfs:comment>A collection of common bodily movements (e.g.,
            walking, jumping) in which the whole body is involved in the movement.</rdfs:comment>
        <guid>bd58fcbf-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#BodyMovementEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="SingleCellOrganism">
        <rdfs:label>single cell organisms</rdfs:label>
        <rdfs:comment>The collection of living things which are all
            elements of both #$Organism-Whole and #$Cell.  Each element
            of #$SingleCellOrganism is an organism consisting of one
            self-reproducing living cell.</rdfs:comment>
        <guid>bd5906e6-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Cell"/>
    </daml:Class>
    <daml:Class rdf:ID="SingleDoerAction">
        <rdfs:label>actions with only one performer</rdfs:label>
        <rdfs:comment>A collection of actions.  Each element of
            #$SingleDoerAction is an action which can have only one
            `doer&apos; (i.e., only one agent `doing&apos; it).  Such
            events may be intentional or not.  Most bodily functions
            belong to subsets of this collection, because the only agent
            of a normal bodily function is the agent whose body it is
            (e.g., #$Heartbeating, #$Bleeding).  For a type of action to
            be a subset of #$SingleDoerAction, it must be inconsistent
            to assert, for any member of the subset, both (#$doneBy ACT
            X) and (#$doneBy ACT Y), where X and Y are different
            entities.  In contrast, #$CarryingWhileLocomoting is NOT a
            subset of #$SingleDoerAction.  For, although an action of
            that kind might often be done by only one performer, it is
            also common for two or more people to cooperate in carrying something.</rdfs:comment>
        <guid>c0fd4844-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#Action"/>
    </daml:Class>
    <Format rdf:ID="SingleEntry">
        <rdfs:label>single entry</rdfs:label>
        <rdfs:comment>Argument places of Cyc predicates may have
            specified formats that constrain their values.
            #$SingleEntry is a format constraint used to indicate that
            there is at most one value in a certain argument place, when
            all other arguments are fixed.  For example, the
            #$arg2Format  of #$mother is #$SingleEntry, since an animal
            can only have one mother.  See also #$Format, and contrast
            with #$SetTheFormat.</rdfs:comment>
        <guid>bd5880eb-9c29-11b1-9dad-c379636f7270</guid>
    </Format>
    <daml:Class rdf:ID="SingleResidenceUnit">
        <rdfs:label>single-family dwellings</rdfs:label>
        <rdfs:comment>A collection of human residences.  Each element of
            #$SingleResidenceUnit is either a modern-style detached
            house, an apartment, or another instance of
            #$ModernHumanResidence designed to accomodate either a
            single person or a single family (i.e., instance of
            #$FamilyCohabitationUnit).  Usually, each element of
            #$SingleResidenceUnit has a unique mailing address.</rdfs:comment>
        <guid>bd58b1b2-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdf:type rdf:resource="#ProductType"/>
        <rdfs:subClassOf rdf:resource="#ModernHumanResidence"/>
    </daml:Class>
    <daml:Class rdf:ID="SingleSiteLocalOrganizationWithClients">
        <rdfs:label>local customer contact points</rdfs:label>
        <rdfs:comment>A collection of organizations.  Each element of
            #$SingleSiteLocalOrganizationWithClients is a single-site
            organization serving customers in a local area, working from
            a particular store, office, or other physical quarters where
            customers (or their agents) go in person to speak with
            company representatives about the services or products
            offered.  Elements of
            #$SingleSiteLocalOrganizationWithClients may be either
            stand-alone organizations or sub-organization of a larger
            company.  Examples of
            #$SingleSiteLocalOrganizationWithClients include
            #$NewYorkHospital, #$Threadgills restaurant, the Bank of
            America office on Jollyville Road, #$StudtmanPhoto studios,
            the Village Cinema on Anderson Lane.</rdfs:comment>
        <guid>bd58c0cd-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#SingleSiteOrganization"/>
        <rdfs:subClassOf rdf:resource="#LocalOrganization"/>
    </daml:Class>
    <daml:Class rdf:ID="SingleSiteOrganization">
        <rdfs:label>single-site organizations</rdfs:label>
        <rdfs:comment>A collection of organizations.  An instance of
            #$SingleSiteOrganization is an organization which has a
            single location as its #$physicalQuarters.  For example, the
            #$KMartStore at Parmer Lane, Simon &amp; David at the
            Arboretum, and Great Hills #$FireStation Number 2 would be
            positive instances.  But the #$KMart-TheCompany,
            #$TomThumbTheCompany, and the Austin City Fire Department
            are negative examples, since those `parent&apos;
            organizations have several sites as their #$physicalQuarters.</rdfs:comment>
        <guid>bd6788e9-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Organization"/>
        <daml:disjointWith rdf:resource="#ChainOrganization"/>
    </daml:Class>
    <Posture rdf:ID="SittingPosture">
        <rdfs:label>sitting posture</rdfs:label>
        <rdfs:comment>The attribute that describes, most generically, an
            #$Animal in a seated position.  The exact nature of the
            position depends upon the typical body structure of the
            animal&apos;s species.</rdfs:comment>
        <guid>bd58b417-9c29-11b1-9dad-c379636f7270</guid>
    </Posture>
    <daml:Class rdf:ID="Situation">
        <rdfs:label>situations</rdfs:label>
        <rdfs:comment>The collection of situations.  A situation is a
            state of affairs; it identifies roles played by objects
            involved in the situation, and it articulates the
            relationships between those roles.  One important
            partitioning of #$Situation is: (1) #$Event (q.v.), which
            consists of dynamic situations;  (2) #$StaticSituation
            (q.v.), instances of which exist in time but are not
            dynamic, and are more like a set of static relationships
            among objects; and    (3) atemporal situations, including
            #$RelationalStructures and abstract #$Lists. For a
            specialization of #$Situation that includes (1) and (2) but
            excludes (3), see #$Situation-Temporal. Also note that there
            is a fine line between (1) and  (2).  Consider Bill Clinton
            sitting in his easy chair on the evening of 7/4/96.  This
            might be construed as an _event_ in which Clinton  carries
            out  a particular sitting process.  But it might instead be
            viewed as a  _static_situation_ involving Clinton, the
            chair, and various relationships such as the chair&apos;s
            seat supporting Clinton&apos;s bottom, Clinton&apos;s weight
            being off his feet, etc.  In such cases, the interests and
            needs at hand will often make one of these sorts of
            representation more useful than the other.</rdfs:comment>
        <guid>bd58e90b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <daml:disjointWith rdf:resource="#EmptySpaceRegion"/>
    </daml:Class>
    <daml:Class rdf:ID="Situation-Temporal">
        <rdfs:label>temporal situations</rdfs:label>
        <rdfs:comment>A subcollection of both #$Situation and
            #$TemporalThing. #$Situation-Temporal is the collection of
            all instances of #$Situation that have duration or other
            temporal properties .  Thus, #$Situation-Temporal subsumes
            #$Event and #$StaticSituation, as well as some other
            specializations of #$Situation. It does _not_ subsume
            specializations of #$Situation that have atemporal
            instances, such as #$Series, #$Tuple, or #$RelationalStructure.</rdfs:comment>
        <guid>bd88c84b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#Situation"/>
        <rdfs:subClassOf rdf:resource="#TemporalThing"/>
    </daml:Class>
    <daml:Class rdf:ID="SituationType">
        <rdfs:label>situation type</rdfs:label>
        <rdfs:comment>A collection of collections.  #$SituationType is
            the collection of subsets of #$Situation.</rdfs:comment>
        <guid>bd58e7c3-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
    </daml:Class>
    <daml:Class rdf:ID="SituationTypePred-Ternary">
        <rdfs:label>situation type pred - ternary</rdfs:label>
        <rdfs:comment>Every predicate in this collection is a
            #$TernaryPredicate  that takes a #$SomethingExisting as its
            first argument, a  #$SituationType as its second argument,
            and a #$Role as its third  argument.  Many of these
            predicate are used to express some version of  capability;
            others may be used to delineate options or potential  duties
            of an agent.</rdfs:comment>
        <guid>be2820e4-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="#TernaryPredicate"/>
    </daml:Class>
    <daml:Class rdf:ID="SituationTypeSlot">
        <rdfs:label>situation type slot</rdfs:label>
        <rdfs:comment>Every instance of this collection is a
            #$BinaryPredicate taking a kind of #$Situation as the second
            argument.  Many of these predicates can be used to represent
            certain intentional concepts, such as the goals or beliefs
            of an #$Agent #$Plans to talk about states of affairs that
            various events or plans are supposed to facilitate or
            prevent, or that must be facilitated or prevented in order
            for the plan to count as successful.</rdfs:comment>
        <guid>bf5ed1e5-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="http://www.daml.org/2001/03/daml+oil#Property"/>
    </daml:Class>
    <daml:Class rdf:ID="SkeletalSystem">
        <rdfs:label>skeletons</rdfs:label>
        <rdfs:comment>The collection of all animals&apos; skeletal
            systems.  A #$SkeletalSystem is a system of body parts used
            to support, separate, and protect the other parts of the
            body, especially the torso and the soft, vulnerable internal
            organs of the animal.  It can be an external #$Exoskeleton
            (see also: #$Shell-AnimalBodyPart) or an internal
            interlinking of numerous parts composed of #$Bone-BodyPart
            and #$Cartilage.</rdfs:comment>
        <guid>bd58b5ae-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#UniqueAnatomicalPartType"/>
        <rdf:type rdf:resource="#AnimalBodyPartType"/>
        <rdfs:subClassOf rdf:resource="#AnimalBodyPart"/>
        <rdfs:subClassOf rdf:resource="#BiologicalLivingObject"/>
    </daml:Class>
    <daml:Class rdf:ID="Skin">
        <rdfs:label>hides</rdfs:label>
        <rdfs:comment>A (piece of) skin serves as outer protective and
            tactile sensory covering for (part of) an animal&apos;s
            body.  This is the collection of all pieces of skin.  Some
            examples include TheGoldenFleece (an entire skin) and
            YulBrynnersScalp (a small portion of his skin).</rdfs:comment>
        <guid>bd58d7dd-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdfs:subClassOf rdf:resource="#VibrationThroughAMediumSensor"/>
        <rdfs:subClassOf rdf:resource="#AnimalBodyPart"/>
        <rdfs:subClassOf rdf:resource="#TactileSensor"/>
        <rdfs:subClassOf rdf:resource="#SurfaceOnTangibleObject"/>
        <rdfs:subClassOf rdf:resource="#Layer"/>
        <rdfs:subClassOf rdf:resource="#BiologicalLivingObject"/>
    </daml:Class>
    <daml:Class rdf:ID="Skirt">
        <rdfs:label>skirts</rdfs:label>
        <rdfs:comment>The collection of all skirts, a category of
            clothing intended to cover the lower part of the body.</rdfs:comment>
        <guid>bd58dd4e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdf:type rdf:resource="#ProductType"/>
    </daml:Class>
    <daml:Class rdf:ID="SkolemFuncN">
        <rdfs:label>skolem func n</rdfs:label>
        <rdfs:comment>#$SkolemFuncN is a collection of  Cyc
            system-generated functions that partially implement
            existential  quantifications in Cyc.  Whenever someone
            asserts to Cyc an expression  that contains a
            &apos;#$thereExistAtLeast&apos;, a
            &apos;#$thereExistAtMost&apos;, or a
            &apos;#$thereExistExactly&apos; quantifier, Cyc
            automatically creates a new  element of #$SkolemFuncN and
            rewrites the assertion using this skolem  function instead
            of that existential quantifier.  See also  #$termOfUnit. At
            this time (3/98), skolem functions are automatically  named
            by the Cyc system using the prefix &apos;SKF-&apos; followed
            by a number.</rdfs:comment>
        <guid>be59c5cb-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdf:type rdf:resource="#RelationshipType"/>
        <rdfs:subClassOf rdf:resource="#SkolemFunction"/>
    </daml:Class>
    <daml:Class rdf:ID="SkolemFunction">
        <rdfs:label>skolem function</rdfs:label>
        <rdfs:comment>#$SkolemFunction is a collection of Cyc
            system-generated functions that implement existential
            quantifications in Cyc.  Whenever someone asserts to Cyc an
            expression that contains a `#$thereExists&apos;, Cyc
            automatically creates a new element of #$SkolemFunction and
            rewrites the assertion using that Skolem function, as
            described in what follows.  (Most Cyc users don&apos;t need
            to know the following details, which are supplied only for
            the curious.)                Suppose we tell Cyc that every
            animal has a birth date; i.e., for each animal, there exists
            a date such that the animal was born on that date --- in
            CycL, (#$implies (#$isa ?X #$Animal)(#$thereExists ?Y
            (#$birthDate ?X ?Y))).  In response to that CycL formula,
            Cyc would create a new element of #$SkolemFunction -- we
            might call it the `BirthDateFn&apos; -- whose single
            argument would be an animal and whose resultant value would
            be a date, namely, that animal&apos;s date of birth.
            Subsequently, Cyc would automatically use the
            `BirthDateFn&apos; in asserting our rule, eliminating the
            need for a `#$thereExists&apos;.  Our formula would thus be
            rewritten by the system, as follows:
            (#$implies        (#$and         (#$isa ?X #$Animal)
            (#$termOfUnit ?Y (`BirthDateFn&apos; ?X)))
            (#$birthDate ?X ?Y)).            See also #$termOfUnit.
            Note: Although our example uses the name
            &apos;BirthDateFn&apos; for our Skolem function, at this
            time (4/97), Skolem functions are automatically named by the
            Cyc system using the prefix `SKF-&apos; followed by a number.</rdfs:comment>
        <guid>c05813b7-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdf:type rdf:resource="#RelationshipType"/>
        <rdfs:subClassOf rdf:resource="#ReifiableFunction"/>
    </daml:Class>
    <daml:Class rdf:ID="Sleeping">
        <rdfs:label>slumbers</rdfs:label>
        <rdfs:comment>The collection of all #$Sleeping events, i.e.,
            natural processes in which an #$Animal engages in some
            unconscious mental activity coupled with physical rest.
            #$Sleeping is a subset of #$BodilyFunctionEvent-Involuntary;
            the process of #$Sleeping is essential for the health of
            sentient animals.</rdfs:comment>
        <guid>bd58d29b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#BodilyFunctionEvent-Involuntary"/>
        <rdfs:subClassOf rdf:resource="#Resting-Relaxing"/>
    </daml:Class>
    <Alertness rdf:ID="Sleepy">
        <rdfs:label>sleepy</rdfs:label>
        <rdfs:comment>#$Sleepy is the #$Alertness attribute which is a
            specialization of #$Awake.  It is the state an animal
            normally passes through before #$GoingToSleep.</rdfs:comment>
        <guid>bd58a63d-9c29-11b1-9dad-c379636f7270</guid>
    </Alertness>
    <daml:Class rdf:ID="SmellPerception">
        <rdfs:label>smell perception</rdfs:label>
        <rdfs:comment>The collection of sensory #$Perceivings in which a
            #$PerceptualAgent #$smells something and thereby acquires
            information about it.</rdfs:comment>
        <guid>bd58cb03-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#Perceiving"/>
    </daml:Class>
    <daml:Class rdf:ID="SmokingFood">
        <rdfs:label>smoking food</rdfs:label>
        <rdfs:comment>A kind of cooking in which the food is exposed to
            smoke.  This adds nitrates to the food to prevent rotting.</rdfs:comment>
        <guid>be00b79c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#PreservingFood"/>
    </daml:Class>
    <daml:Class rdf:ID="SnowFlake">
        <rdfs:label>snowflakes</rdfs:label>
        <rdfs:comment>The collection of frozen water crystals emitted by
            clouds in instances of #$SnowProcess.</rdfs:comment>
        <guid>bd58be83-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#PrecipitationParticle"/>
    </daml:Class>
    <daml:Class rdf:ID="SnowProcess">
        <rdfs:label>snow process</rdfs:label>
        <rdfs:comment>The collection of events in which the condensed
            liquid water in clouds freezes into ice crystals which
            become substantial enough to fall to the earth as snow.</rdfs:comment>
        <guid>bd59005f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#PrecipitationProcess"/>
    </daml:Class>
    <WeatherAttribute rdf:ID="Snowy">
        <rdfs:label>snowy</rdfs:label>
        <rdfs:comment>The #$WeatherAttribute that characterizes an
            #$OutdoorLocation at which it is snowing.</rdfs:comment>
        <guid>bd59009b-9c29-11b1-9dad-c379636f7270</guid>
    </WeatherAttribute>
    <daml:Class rdf:ID="SociabilityBasedAction">
        <rdfs:label>social activities</rdfs:label>
        <rdfs:comment>The collection of socially based actions, those
            performed mostly for the sake of sociability, in which
            considerations of socially acceptable interactions with
            others are important.</rdfs:comment>
        <guid>bd588f7e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#SocialOccurrence"/>
    </daml:Class>
    <daml:Class rdf:ID="SocialAttributeType">
        <rdfs:label>social attribute type</rdfs:label>
        <rdfs:comment>This is a collection of collections.  Each
            #$SocialAttributeType is itself a coherent collection of
            attributes that pertain to human behavior.  This definition
            is very broad, and embraces attributes of behavior (personal
            and social) one might read about in a sociology, psychology,
            cultural anthropology, economics, political science, or
            social philosophy course -- in short, in the (human)
            `behavioral&apos; sciences.  A more specialized concept is
            #$SocialStatusAttributeType, which limits the focus to
            status-related attributes.  This is a superset of that, much
            more general collection which includes, as elements,
            #$AcquaintanceAttribute, #$InterAgentRelationAttribute,
            etc., as well as all the elements of
            #$SocialStatusAttributeType (qv).</rdfs:comment>
        <guid>bd5889bb-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#AttributeType"/>
    </daml:Class>
    <daml:Class rdf:ID="SocialBeing">
        <rdfs:label>social agents</rdfs:label>
        <rdfs:comment>The collection of beings whose existence is
            accepted by some social system.  (Thus, the elements of
            #$SocialBeing will vary with social contexts.)  Social
            beings are entities able to perform social roles in the
            system that recognizes them.  #$SocialBeing includes
            elements of #$Organization (e.g., the #$QueensGuard) as well
            as the elements of #$LegalAgent (in that system), so, for
            example, in modern industrial social systems, the elements
            of #$LegalCorporation and #$Person are instances of
            #$SocialBeing. </rdfs:comment>
        <guid>bd58a49e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#IntelligentAgent"/>
    </daml:Class>
    <daml:Class rdf:ID="SocialClass-Lifestyle">
        <rdfs:label>socio-economic classes</rdfs:label>
        <rdfs:comment>The collection of attributes that indicate a
            person&apos;s social class, as determined by the
            person&apos;s general lifestyle, quality of life, and
            relative access to the (material and security oriented)
            desiderata of life.  It may depend on a cultural
            non-material system of social rank, based on birth, office,
            manners, vocal accent or other factors.  Members of this
            collection include #$LowerMiddleClass, #$UpperClass, etc.</rdfs:comment>
        <guid>bd58c206-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#SocialAttributeType"/>
        <rdfs:subClassOf rdf:resource="#SocialStatusAttribute"/>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </daml:Class>
    <daml:Class rdf:ID="SocialGathering">
        <rdfs:label>social occasions</rdfs:label>
        <rdfs:comment>The collection of intentional social gatherings of
            people who have the same or similar purposes in attending,
            and in which there is communication between the
            participants.  E.g., a party, a conference, a wedding, etc.
            Note:  A group of people waiting to board an elevator is not
            typically a #$SocialGathering, even though they share a
            common purpose, since they are not expected to talk to each other.</rdfs:comment>
        <guid>bd58ebbe-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
        <rdfs:subClassOf rdf:resource="#SocialOccurrence"/>
    </daml:Class>
    <daml:Class rdf:ID="SocialOccurrence">
        <rdfs:label>societal events</rdfs:label>
        <rdfs:comment>A collection of events; a subset of
            #$CompositePhysicalAndMentalEvent.  Each element of
            #$SocialOccurrence is an event in which two or more agents
            (and often many more than two) take part.  Often, elements
            of #$SocialOccurrence involve communication among the
            participating agents.   Usually there are some social
            occurrences in every culture that have very elaborate role
            structures (e.g., a lawsuit or a wedding), and some that are
            fairly simple (e.g., belching at the dinner table).  See
            also: #$socialParticipants.</rdfs:comment>
        <guid>bd588f3b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#CompositePhysicalAndMentalEvent"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
    </daml:Class>
    <daml:Class rdf:ID="SocialRitual">
        <rdfs:label>social ritual</rdfs:label>
        <rdfs:comment>The collection of social events in which some kind
            of ritual is performed.  E.g., a wedding, an awards
            ceremony, a baptism, an inauguration, a graduation ceremony,
            etc.  Note: In Cyc&apos;s ontology, the collection
            #$Inauguration is not exactly a subset of #$SocialRitual;
            e.g., it is not true that (#$isa
            The1992InaugurationOfGeorgeBushAsPresidentOfTheUSA
            #$SocialRitual).  This is because there are many aspects to
            an #$Inauguration, besides the social ritual aspects.  E.g.,
            there is the political aspect, namely the legitimate change
            of chief executive of a nation.  The carrying out of the
            `script&apos; for an inauguration (i.e., the ceremony
            itself) is an element of the collection #$SocialRitual. </rdfs:comment>
        <guid>bd58eb39-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#SocialGathering"/>
        <rdfs:subClassOf rdf:resource="#Ritual"/>
    </daml:Class>
    <daml:Class rdf:ID="SocialStatusAttribute">
        <rdfs:label>social statuses</rdfs:label>
        <rdfs:comment>The collection of #$AttributeValues that pertain
            to human social status; role or rank (formal or informal) in
            the surrounding culture.  Most assertions should be made in
            terms of some specialization of this collection (or an
            instance of some specialization of this collection).
            Members of this collection include: #$LowerMiddleClass,
            #$GoodLooking, #$FourthGradeLevel, etc.</rdfs:comment>
        <guid>bd58fa83-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CompositeAttributeType"/>
        <rdf:type rdf:resource="#AttributeType"/>
        <rdf:type rdf:resource="#SocialStatusAttributeType"/>
    </daml:Class>
    <daml:Class rdf:ID="SocialStatusAttributeType">
        <rdfs:label>positions</rdfs:label>
        <rdfs:comment>This is a collection of collections.  Each
            #$SocialStatusAttributeType is itself a coherent collection
            of attributes that pertain to rank/status along some
            particular `dimension&apos; related somehow to `status in
            society.&apos;  Some sample elements of
            #$SocialStatusAttributeType are: #$SocialStatusAttribute,
            #$Glamor, #$SocialPower, #$CredibilityStatus,
            #$EducationLevelAttribute, etc. </rdfs:comment>
        <guid>bd58f181-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#SocialAttributeType"/>
    </daml:Class>
    <daml:Class rdf:ID="SolarPoweredDevice">
        <rdfs:label>solar powered device</rdfs:label>
        <rdfs:comment>A collection of physical devices; a subset of
            #$PoweredDevice.  An instance of #$SolarPoweredDevice is a
            device which is powered by energy from sunlight.  Examples
            include solar-powered calculators and solar heating systems.</rdfs:comment>
        <guid>bd58b9b6-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#PoweredDevice"/>
    </daml:Class>
    <daml:Class rdf:ID="Soldier">
        <rdfs:label>soldiers</rdfs:label>
        <rdfs:comment>A person having as a profession a branch of Soldiering</rdfs:comment>
        <guid>bd58eb4e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#OccupationType"/>
        <rdfs:subClassOf rdf:resource="#MilitaryPerson"/>
    </daml:Class>
    <daml:Class rdf:ID="SoleProprietorship">
        <rdfs:label>sole proprietorships</rdfs:label>
        <rdfs:comment>A collection of unincorporated businesses
            organizations.  An element of #$SoleProprietorship is a
            business in which an individual #$Person (or a married
            couple) owns, operates, and assumes liability for the
            business.   A #$SoleProprietorship may or may not have
            employees.  It has no shareholders or partners.</rdfs:comment>
        <guid>bd58a90c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Organization"/>
        <daml:disjointWith rdf:resource="#LegalCorporation"/>
    </daml:Class>
    <StateOfMatter-SolidLiquidGaseous rdf:ID="SolidStateOfMatter">
        <rdfs:label>solid</rdfs:label>
        <rdfs:comment>One of the basic physical states   of matter. In
            scientifically sophisticated contexts, it characterizes
            pieces of matter which are at a sufficiently low enough
            temperature or   high enough pressure for the particular
            type of matter involved that the   molecules of the matter
            are bonded to each other by various sorts of   forces, and
            don&apos;t move away from their neighbors. Examples of
            things   that typically have this #$AttributeValue are: a
            piece of aluminum foil,   a lump of coal, a quartz crystal,
            a gold ingot stored in Fort Knox. In   more common contexts
            (like the one represented by the #$NaivePhysicsMt) it
            characterizes everything which is intuitively thought of as
            solid   (including such things as glass and wood)
            irrespective of whether it has   the microstructural
            features to qualify as being solid according to the
            standards of physical science.</rdfs:comment>
        <guid>bd58d956-9c29-11b1-9dad-c379636f7270</guid>
    </StateOfMatter-SolidLiquidGaseous>
    <daml:Class rdf:ID="SolidTangibleProduct">
        <rdfs:label>solid tangible product</rdfs:label>
        <rdfs:comment>A collection of tangible products.  Each element
            of #$SolidTangibleProduct is a tangible product that is a
            solid -- either a solid object (e.g., an automobile) or a
            stuff in solid form (e.g., lumber) -- that is sold
            separately.  Items that are always part of something else
            (e.g. #$DiskSector) are not instances of #$SolidTangibleProduct.</rdfs:comment>
        <guid>bd58cf9a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdfs:subClassOf rdf:resource="#TangibleProduct"/>
        <rdfs:subClassOf rdf:resource="#SolidTangibleThing"/>
    </daml:Class>
    <daml:Class rdf:ID="SolidTangibleThing">
        <rdfs:label>solid objects</rdfs:label>
        <rdfs:comment>A collection of tangibles.  Each element of
            #$SolidTangibleThing is a piece of stuff which shares many
            of the properties that matter in a #$SolidStateOfMatter
            exhibits (though not all instances of #$SolidTangibleThing
            are formally in a solid state).  Instances have a shape
            independent from their container.  When deformed with
            sufficient force (which may be small for weak, brittle
            materials or high for materials that deform easily), they
            break.  Examples of #$SolidTangibleThings include: pieces of
            substances having #$SolidStateOfMatter such as ice cubes;
            solid mixtures like a quarter-dollar coin or a paper bag;
            and complex mixtures of biological origin that behave like
            solids, e.g., bone.  Collections of the solid form of any
            type of stuff can be created using #$SolidFn (q.v.).</rdfs:comment>
        <guid>bd58c494-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TangibleStuffStateType"/>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <daml:disjointWith rdf:resource="#FluidTangibleThing"/>
        <daml:disjointWith rdf:resource="#SemiSolidTangibleThing"/>
    </daml:Class>
    <daml:Class rdf:ID="Solubility">
        <rdfs:label>solubility</rdfs:label>
        <rdfs:comment>A collection of attributes; a subset of
            #$PhysicalAttribute.  Each element of #$Solubility describes
            how readily some tangible substance dissolves in some kind
            of liquid.  Different levels of #$Solubility may be
            represented with #$GenericValueFunctions or qualitatively
            (e.g., #$WillDissolve, #$Insoluble).</rdfs:comment>
        <guid>be00aad7-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MeasurableAttributeType"/>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </daml:Class>
    <daml:Class rdf:ID="Solution">
        <rdfs:label>solutions</rdfs:label>
        <rdfs:comment>A collection of tangible stuffs; a subset of
            #$Mixture.  Each instance of #$Solution is a #$Mixture of
            two or more chemically distinct substances.  #$Solutions are
            homogeneous, meaning that the composition at any one point
            in the #$Mixture is the same as that at any other point.  In
            contrast, a #$Suspension is a #$Mixture in which small
            discontinuous particles are surrounded by a continuous
            fluid.  The #$solvent of every #$Solution has the
            #$stateOfMatter #$LiquidStateOfMatter.  Thus #$Solutions
            also normally exhibit the properties of a liquid, since
            #$solvents are #$mainConstituents.   Examples of
            #$Solutions: seawater, a cup of coffee, a tincture of
            iodine, some vanilla extract.</rdfs:comment>
        <guid>bd59059c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdfs:subClassOf rdf:resource="#Mixture"/>
        <daml:disjointWith rdf:resource="#Molecule"/>
    </daml:Class>
    <daml:Class rdf:ID="SomethingExisting">
        <rdfs:label>things existing stably in time</rdfs:label>
        <rdfs:comment>#$SomethingExisting is the subset of
            #$TemporalThing whose elements are more or less static, at
            least compared to the highly dynamic elements of #$Event.
            The clearest examples of #$SomethingExisting are tangible
            things, like people, lakes, stars, the Earth&apos;s
            ionosphere, etc.  Some elements of #$Intangible, such as
            agreements and obligations, also exist stably in time over
            their lifetime (rather than `happening&apos;), and thus both
            #$Agreement and #$Obligation are subsets of (i.e., have the
            #$genls) #$SomethingExisting).</rdfs:comment>
        <guid>bd58b6e7-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#TemporalThing"/>
        <daml:disjointWith rdf:resource="#TimeInterval"/>
        <daml:disjointWith rdf:resource="#Event"/>
        <daml:disjointWith rdf:resource="#LinguisticObject"/>
        <daml:disjointWith rdf:resource="#ProblemSolvingCntxt"/>
        <daml:disjointWith rdf:resource="#GeneralMicrotheory"/>
        <daml:disjointWith rdf:resource="#HypotheticalContext"/>
    </daml:Class>
    <daml:Class rdf:ID="SomethingToWear">
        <rdfs:label>wearable items</rdfs:label>
        <rdfs:comment>A collection of tangible objects.  Each instance
            of #$SomethingToWear is an object that an animal (usually a
            person) wears on its body, i.e., in a #$WearingSomething
            event.  It is worth remarking that, in such an event, the
            wearer doesn&apos;t have to exert any intentional effort to
            continue wearing the object.  For example, shirts remain on
            people&apos;s torsos, hats stay on heads, rings on fingers;
            once in place, dog collars stay on dogs, saddles stay on
            horses.  By contrast, a hula hoop is NOT an example of
            #$SomethingToWear.  A borderline case is a #$Purse, which at
            first blush seems to be something to wear, yet requires
            carrying by the performer, hence is not a member of this
            collection.  Similarly, a briefcase is not an #$SomethingToWear.</rdfs:comment>
        <guid>bd5904a0-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#PersonalProduct"/>
        <rdfs:subClassOf rdf:resource="#PortableObject"/>
        <daml:disjointWith rdf:resource="#ConstructionArtifact"/>
        <daml:disjointWith rdf:resource="#Water"/>
    </daml:Class>
    <daml:Class rdf:ID="Sound">
        <rdfs:label>sounds</rdfs:label>
        <rdfs:comment>A collection of events; a subset of
            #$WavePropagation.  Each element of #$Sound is an instance
            of wave propagation in which longitudinal pressure waves
            travel through matter.  Includes the elements of
            #$AudibleSound, #$UltraSound, and temblors.</rdfs:comment>
        <guid>be99a967-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#WavePropagationType"/>
        <rdfs:subClassOf rdf:resource="#WavePropagation"/>
    </daml:Class>
    <daml:Class rdf:ID="SoundInformationBearingThing">
        <rdfs:label>sound information bearing things</rdfs:label>
        <rdfs:comment>A collection of information bearing things (IBTs);
            a subset of #$InformationBearingWavePropagation.  Each
            element of #$SoundInformationBearingThing is an audible
            sound that contains information: a spoken utterance, the
            performance of a sonata, a Morse code message tapped out on
            a prison wall, etc.</rdfs:comment>
        <guid>bd58c8be-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#InformationBearingWavePropagation"/>
        <rdfs:subClassOf rdf:resource="#AudibleSound"/>
    </daml:Class>
    <daml:Class rdf:ID="SourceMicrotheory">
        <rdfs:label>source microtheory</rdfs:label>
        <rdfs:comment>A collection of microtheories.  An instance of
            #$SourceMicrotheory represents a source external to the
            #$CycKB, from which the Microtheory Contents of such a
            microtheory were obtained.</rdfs:comment>
        <guid>bf7f2bb2-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MicrotheoryType"/>
        <rdfs:subClassOf rdf:resource="#DataMicrotheory"/>
    </daml:Class>
    <GeographicalDirection rdf:ID="South-Directly">
        <rdfs:label>south - directly</rdfs:label>
        <rdfs:comment>Due South, an element of #$TerrestrialDirection.</rdfs:comment>
        <guid>bd58dde2-9c29-11b1-9dad-c379636f7270</guid>
    </GeographicalDirection>
    <GeographicalDirection rdf:ID="South-Generally">
        <rdfs:label>southern</rdfs:label>
        <rdfs:comment>The general direction of South.  The element of
            #$VectorInterval that comprises the cone-shaped set of
            vectors pointing (from some reference point) within
            approximately forty-five degrees of pointing in the same
            direction as #$South-Directly.</rdfs:comment>
        <guid>bd5887b7-9c29-11b1-9dad-c379636f7270</guid>
    </GeographicalDirection>
    <GeographicalDirection rdf:ID="SouthEast-Directly">
        <rdfs:label>south east - directly</rdfs:label>
        <rdfs:comment>The precise Southeast direction from any
            geographic point other than a pole.</rdfs:comment>
        <guid>bd588a29-9c29-11b1-9dad-c379636f7270</guid>
    </GeographicalDirection>
    <GeographicalDirection rdf:ID="SouthEast-Generally">
        <rdfs:label>Southeast</rdfs:label>
        <rdfs:comment>The general direction of SouthEast.  The
            #$VectorInterval comprising the cone-shaped set of vectors
            pointing (from some reference point) within approximately
            forty-five degrees of pointing in the same direction as #$SouthEast-Directly.</rdfs:comment>
        <guid>bde453b2-9c29-11b1-9dad-c379636f7270</guid>
    </GeographicalDirection>
    <GeographicalDirection rdf:ID="SouthWest-Directly">
        <rdfs:label>south west - directly</rdfs:label>
        <rdfs:comment>The precise Southwest direction from any
            geographic point other than a pole.</rdfs:comment>
        <guid>bd588ae7-9c29-11b1-9dad-c379636f7270</guid>
    </GeographicalDirection>
    <GeographicalDirection rdf:ID="SouthWest-Generally">
        <rdfs:label>south west - generally</rdfs:label>
        <rdfs:comment>The general direction of SouthWest.  The
            #$VectorInterval comprising the cone-shaped set of vectors
            pointing (from some reference point) within approximately
            forty-five degrees of pointing in the same direction as #$SouthWest-Directly.</rdfs:comment>
        <guid>be8d6ed9-9c29-11b1-9dad-c379636f7270</guid>
    </GeographicalDirection>
    <daml:Class rdf:ID="SpaceInAHOC">
        <rdfs:label>indoor spaces</rdfs:label>
        <rdfs:comment>A collection of open spatial regions.  Each
            element of #$SpaceInAHOC is a space found inside some
            instance of #$HumanOccupationConstruct (= HOC).  Elements
            include all major spaces inside any
            #$HumanOccupationConstruct, including not only rooms
            (elements of #$RoomInAConstruction), but halls, elevator
            shafts, attics, stairwells, and the spaces inside trains,
            cars, and airplanes that are designed for human occupation.
            Other building parts which are not open spatial regions
            (e.g., walls, plumbing, etc.) are NOT included in this
            collection; cf. #$PartOfBuilding.  #$SpaceInAHOC is
            #$disjointWith the collection #$OutdoorLocation.</rdfs:comment>
        <guid>bd589ff6-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Cavity"/>
        <rdfs:subClassOf rdf:resource="#HumanOccupationConstruct"/>
    </daml:Class>
    <daml:Class rdf:ID="SpacePoint">
        <rdfs:label>points in space</rdfs:label>
        <rdfs:comment>A subset of #$GeometricThing. Each element of
            #$SpacePoint is a zero-dimensional geometrical object.
            Examples include spatially localized objects, such as the
            center of mass of the universe at the beginning of the
            twentieth century, as well as abstract objects, such as the
            point where two abstract lines intersect.</rdfs:comment>
        <guid>c07d5038-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdf:type rdf:resource="#GenericShapeType"/>
        <rdfs:subClassOf rdf:resource="#GeometricThing"/>
        <rdfs:subClassOf rdf:resource="#SpaceRegion"/>
        <daml:disjointWith rdf:resource="#Line"/>
        <daml:disjointWith rdf:resource="#TwoDimensionalShape"/>
        <daml:disjointWith rdf:resource="#ThreeDimensionalShape"/>
    </daml:Class>
    <daml:Class rdf:ID="SpaceRegion">
        <rdfs:label>regions of space</rdfs:label>
        <rdfs:comment>A specialization of #$SpatialThing-Localized whose
            instances are intangible regions of space located in the
            empirically observable universe.  A space region might or
            might not be connected (see #$spatiallyContinuous).  It
            might be partially or completely filled with (occupied by)
            #$PartiallyTangibles, or it might be completely empty (but
            cf. #$EmptySpaceRegion).  In any case, the space region
            itself is not to be confused with a physical object or other
            spatially localized (non-space-region) thing that might
            happen to be #$cospatial with it.  A given space region can
            be characterized fully merely by specifying its location and
            dimensions.  Thus (although this is not the case with
            spatial things in general), space regions are identical
            (#$equals) if and only if they are #$cospatial.
            #$SpaceRegion is in a way the spatial  analogue of
            #$TimeInterval, whose own instances can be fully
            characterized by specifying their temporal properties; these
            two collections can be used, respectively, to talk about
            space and time as  dimensions .</rdfs:comment>
        <guid>c047ef64-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#StuffType"/>
        <rdfs:subClassOf rdf:resource="#IntangibleIndividual"/>
        <daml:disjointWith rdf:resource="#Event"/>
    </daml:Class>
    <daml:Class rdf:ID="SpaceTransportationEvent">
        <rdfs:label>space transportation event</rdfs:label>
        <rdfs:comment>The collection of all space transportation events.
            For each instance TRAN of #$SpaceTransportationEvent, at
            least a part of the #$Trajectory of #$objectMoving in TRAN
            must be in the outer space.  Note that
            #$SpaceTransportationEvent is different from
            (#$TransportViaFn #$Spacecraft) because the former
            emphasizes where to find the #$Trajectory while the latter
            emphasizes what is used as a tool, not to mention instances
            of the former do not have to have parts on Earth or inside
            our atmorsphere.</rdfs:comment>
        <guid>bf363d3d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#TransportationEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="Spacecraft">
        <rdfs:label>spacecraft</rdfs:label>
        <rdfs:comment>The collection of transportation devices deployed
            entirely in outer space, or whose trajectories leave the
            atmosphere of the planet they&apos;re launched from, in
            order to orbit the planet or to travel away from it beyond
            its gravitational field.</rdfs:comment>
        <guid>c10b650e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#TransportationDevice"/>
    </daml:Class>
    <LivingLanguage rdf:ID="SpanishLanguage">
        <rdfs:label>Spanish Language</rdfs:label>
        <rdfs:comment>The indigenous language of #$Spain and,
            secondarily, most of Central and South America</rdfs:comment>
        <guid>bd58e563-9c29-11b1-9dad-c379636f7270</guid>
    </LivingLanguage>
    <daml:Class rdf:ID="SpatialPredicate">
        <rdfs:label>spatial relations</rdfs:label>
        <rdfs:comment>The collection of predicates that are spatial
            relationships. Instances of this collection take one or
            more instances of #$SpatialThing as arguments and give
            information about its/their spatial location, position, or
            orientation by relating it/them to  a direction or other
            spatial thing.  (Of course, the asserted isa-contraints on
            the relevant argument places might be proper subcollections
            of #$SpatialThing.)  Note that when an element of
            #$SpatialPredicate has an instance of #$Group as one of its
            arguments, in many cases a certain spatial relationship is
            being asserted to hold of all or most of the members of that
            group; but there are  exceptions (e.g. #$in-Among) for which
            this is not the case.</rdfs:comment>
        <guid>bd58bc17-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#RelationshipType"/>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="#CotemporalPredicate"/>
    </daml:Class>
    <daml:Class rdf:ID="SpatialThing">
        <rdfs:label>spatial things</rdfs:label>
        <rdfs:comment>The collection of all things that have a spatial
            extent or location relative to some other #$SpatialThing.
            Note well that to say that an entity is a member of this
            collection is to remain agnostic about two issues.  First, a
            #$SpatialThing may be #$PartiallyTangible, like
            #$Texas-State or wholly #$Intangible, like the
            #$ArcticCircle or a line or a plane referenced in a
            geometric theorem.  Second, although we do insist on
            location relative to another #$SpatialThing, a
            #$SpatialThing may or may not be located in the physically
            observable universe.  It is far from clear that all
            #$SpatialThings are so located:  eg, a trajectory through
            the phase space of some physical system.  If the intent is
            to imply location in the empirically observable cosmos, the
            user should employ this collection&apos;s spec, #$SpatialThing-Localized.</rdfs:comment>
        <guid>bd58e951-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <daml:disjointWith rdf:resource="#AbstractInformationalThing"/>
        <daml:disjointWith rdf:resource="#ComputationalObject"/>
        <daml:disjointWith rdf:resource="#TimeInterval"/>
        <daml:disjointWith rdf:resource="#Tuple"/>
        <daml:disjointWith rdf:resource="#AttributeValue"/>
        <daml:disjointWith rdf:resource="#Relation"/>
    </daml:Class>
    <daml:Class rdf:ID="SpatiallyDisjointRegionType">
        <rdfs:label>spatially disjoint region type</rdfs:label>
        <rdfs:comment>A collection of collections; a subset of
            #$RegionType.  Each element of #$SpatiallyDisjointRegionType
            is a collection of geographical regions, none of whose
            elements spatially intersects another.  For example, the
            collection #$State-UnitedStates is an element of
            #$SpatiallyDisjointRegionType, because the territories of
            U.S. states do not overlap.  Other examples of collections
            that are elements of #$SpatiallyDisjointRegionType:
            #$CanadianProvince, #$IndependentCountry, #$City, and
            #$Colony.  A non-example is #$EcologicalRegion, since
            ecological regions can overlap.</rdfs:comment>
        <guid>bd58e513-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="#RegionType"/>
    </daml:Class>
    <daml:Class rdf:ID="Speaking">
        <rdfs:label>speech</rdfs:label>
        <rdfs:comment>The collection of actions generating
            #$Utterances which are speech. A subset of #$Talking: hence,
            #$Speaking normally includes  only those #$Utterances using
            #$Language as a communication convention, unlike  other
            #$Utterances, such as #$Booing and #$Cheering.</rdfs:comment>
        <guid>bd58bf82-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#MakingAnOralSound"/>
    </daml:Class>
    <daml:Class rdf:ID="SpecifiedInformationBearingThingType">
        <rdfs:label>specified information bearing thing types</rdfs:label>
        <rdfs:comment>A collection of collections which is being phased
            out.  In most instances instances of #$ConceptualWork should
            be used instead.  Each element of
            #$SpecifiedInformationBearingThingType is a subset of
            #$InformationBearingThing, all of whose instances are
            instantiations of the same #$ConceptualWork and share a
            primary media form.    Instances of
            #$SpecifiedInformationBearingThingType can be created to
            refer to any instance of #$ConceptualWork.      For example,
            the collection of all instances of #$BookCopy which are
            instantiations of #$WarAndPeace-TheNovel would be an element
            of #$SpecifiedInformationBearingThingType, as would the
            collection of all instance of #$MovieShowing which are
            instantiations of #$Jaws-TheMovie (even though both the
            novel `War and Peace&apos; and #$Jaws-TheMovie were issued
            in slightly different variants).  Heterogeneous collections,
            however, such as those defined by `copies of books written
            by Mark Twain&apos;, or by `physical instantiations of the
            Jaws story in all its forms [movie, book, comic book,
            tape]&apos;, are NOT elements of
            #$SpecifiedInformationBearingThingType, although they are
            subsets of #$InformationBearingThing.  Example of
            #$SpecifiedInformationBearingThingType: #$DimeCoin-US.</rdfs:comment>
        <guid>bd58aabf-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#SiblingDisjointCollection"/>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="#ObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="SpeechPart">
        <rdfs:label>parts of speech</rdfs:label>
        <rdfs:comment>The collection of all parts of speech.  Instances
            of #$SpeechPart include #$Preposition, #$Adverb,
            #$SimpleNoun, #$Determiner, #$QuantifyingIndexical,
            #$Punctuation-SP, #$Pronoun).  To link a specific word with
            the parts of speech for which it has forms, see #$posForms;
            e.g., #$You-TheWord has a#$Pronoun form, #$And-TheWord has a
            #$CoordinatingConjunction form, #$Hit-TheWord has both
            #$SimpleNoun and #$Verb forms.</rdfs:comment>
        <guid>bd588172-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="#LinguisticObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="Speed">
        <rdfs:label>speeds</rdfs:label>
        <rdfs:comment>A subset of #$Rate.  Each element of #$Speed is a
            rate of change in position (of an object, wave front, etc.).
            Elements of #$Speed may be either fixed amounts, such as
            (#$MilesPerHour 55), or a range, such as #$WalkingSpeed or
            #$Calm-WindSpeed.  See #$UnitOfSpeed for the units used by
            Cyc to measure speeds.</rdfs:comment>
        <guid>bd5891b3-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DerivedNumericAttributeType"/>
        <rdfs:subClassOf rdf:resource="#Rate"/>
        <rdfs:subClassOf rdf:resource="#PhysicalAttribute"/>
    </daml:Class>
    <daml:Class rdf:ID="SpermCell">
        <rdfs:label>sperm</rdfs:label>
        <rdfs:comment>A subset of #$Cell.  #$SpermCell is the collection
            of specialized gamete cells which are produced by meiosis in
            the reproductive tract of male animals.  Each sperm cell
            usually has half the number of chromosomes that regular body
            cells do, and when it fertilizes an ovum, the ovum becomes a
            zygote and continues to develop into a mature individual.
            See also #$MaleAnimal, #$SexualReproductionEvent.</rdfs:comment>
        <guid>bd58ef77-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#AnimalBLO"/>
    </daml:Class>
    <ThreeDimensionalShapeAttribute rdf:ID="Spherical">
        <rdfs:label>spherical</rdfs:label>
        <rdfs:comment>#$Spherical is the instance of #$ShapeAttribute
            shared by all spherical objects.</rdfs:comment>
        <guid>be45885d-9c29-11b1-9dad-c379636f7270</guid>
    </ThreeDimensionalShapeAttribute>
    <ThreeDimensionalShapeAttribute rdf:ID="SpiralShaped">
        <rdfs:label>spiral shaped</rdfs:label>
        <rdfs:comment>#$SpiralShaped is the instance of #$ShapeAttribute
            shared by all typically shaped spiral objects.</rdfs:comment>
        <guid>c0ad21c8-9c29-11b1-9dad-c379636f7270</guid>
    </ThreeDimensionalShapeAttribute>
    <daml:Class rdf:ID="Splitting">
        <rdfs:label>splitting</rdfs:label>
        <rdfs:comment>A collection of separation events in which
            something splits apart, often at a seam (e.g. in an item of
            clothing), perforation, or grain-line (e.g. in a piece of
            wood).  That is, two areas of the thing are separated from
            one another (though perhaps not separated completely into
            discrete pieces or parts).  Usually, a splitting occurs
            along a single  line  or  plane  that runs parallel to, and
            for a significant distance relative to, the length of the
            thing split. In order to undergo a #$Splitting, the
            #$objectOfStateChange must be in a #$SolidStateOfMatter.
            See also #$Cracking.</rdfs:comment>
        <guid>bdece6ab-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#SeparationEvent"/>
        <rdfs:subClassOf rdf:resource="#IntrinsicStateChangeEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="SpokenCommunicating">
        <rdfs:label>rhetorics</rdfs:label>
        <rdfs:comment>A collection of information transfer events; a
            subset of #$AudioCommunicating.  Each element of
            #$SpokenCommunicating is a transmission of sound-borne
            verbal information by spoken words between two (or more)
            agents.  The communication may be one-way or two-way (or
            multi-way); see #$Communicating.  Examples of
            #$SpokenCommunicating: a telephone conversation, a classroom
            discussion, the #$GettysburgAddress-Speech.  Note that the
            collection #$Speaking contains events in which a person
            generates spoken language but doesn&apos;t necessarily
            communicate it; e.g., a person practicing a speech alone.
            If someone who is speaking is also communicating, then her
            speaking is a #$subEvents of some element of
            #$SpokenCommunicating.  Every element of
            #$SpokenCommunicating has at least one #$communicationToken
            which is an element of #$Utterance.</rdfs:comment>
        <guid>bd589537-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#AudioCommunicating"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
    </daml:Class>
    <daml:Class rdf:ID="SportsEvent">
        <rdfs:label>sports events</rdfs:label>
        <rdfs:comment>The collection of individual sports events, such
            as a single game of baseball, an individual 100M race, etc.
            An entire sandlot baseball game would be a #$SportsEvent,
            but one inning wouldn&apos;t be.  A double-header could be
            viewed as a single #$SportsEvent, though, even though each
            half of it was also a #$SportsEvent.  Several #$SportsEvents
            can be organized into a #$SportsFormalCompetition.  One
            single double-header evening of baseball would not be a
            #$SportsFormalCompetition, nor one single tennis match, etc.
            note:  The collection #$SportsEvent does not include every
            #$AthleticActivity; e.g., Rocky training for his boxing
            match, a group of kids racing to the bus stop, a person
            skiing for pleasure, etc. are not instances of
            #$SportsEvent, because they are not necessarily instances of #$Competition.</rdfs:comment>
        <guid>bd58f304-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
    </daml:Class>
    <daml:Class rdf:ID="Spreadsheet">
        <rdfs:label>spreadsheets</rdfs:label>
        <rdfs:comment>A collection of #$InformationBearingThings (IBTs);
            a subset of #$StructuredInformationSource.  Each element of
            #$Spreadsheet is an IBT that presents (usually numeric) data
            in a two-dimensional matrix of cells that are organized into
            rows and columns.  A spreadsheet may be produced by hand
            with pencil and paper or generated by a computer
            #$SpreadsheetProgram such as #$Lotus123.  Associated with
            every spreadsheet are mathematical definitions of some of
            its cells as a function of other cells in that spreadsheet.</rdfs:comment>
        <guid>bd5897d6-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#StructuredInformationSource"/>
        <rdfs:subClassOf rdf:resource="#InformationBearingThing"/>
    </daml:Class>
    <daml:Class rdf:ID="SpringSeason">
        <rdfs:label>springs</rdfs:label>
        <rdfs:comment>The collection of Spring seasons.  In the
            #$TemperateClimateCycle, Spring is the time ice melts, the
            average temperature starts to increase, the days get longer,
            plants begin to put forth buds, etc.  #$SpringSeason
            represents the climatic aspects of spring; see
            #$CalendarSpring for the purely temporal aspects of spring.</rdfs:comment>
        <guid>bd588b09-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#SeasonOfYear"/>
    </daml:Class>
    <TwoDimensionalShapeAttribute rdf:ID="SquareShaped">
        <rdfs:label>square shaped</rdfs:label>
        <rdfs:comment>#$SquareShaped is the instance of #$ShapeAttribute
            shared by all objects that are square shaped, i.e.
            rectangular (#$Rectangular) and having four sides of equal length.</rdfs:comment>
        <guid>c009c6db-9c29-11b1-9dad-c379636f7270</guid>
    </TwoDimensionalShapeAttribute>
    <daml:Class rdf:ID="StandardUnitOfMeasure">
        <rdfs:label>standard unit of measure</rdfs:label>
        <rdfs:comment>#$StandardUnitOfMeasure is a subset of
            #$UnitOfMeasure, the collection of units used to measure
            quantifiable properties.  #$StandardUnitOfMeasure contains
            those units which are considered the #$standardUnit for the
            property they measure.  Some examples: the standard
            #$UnitOfVolume is the #$Liter; the standard
            #$UnitOfTemperature is the #$DegreeKelvin; the standard
            #$UnitOfMass is the Kilogram.  Every unit type has one unit
            designated as the standard unit for that type.</rdfs:comment>
        <guid>bd58fe4f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#RelationshipType"/>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </daml:Class>
    <daml:Class rdf:ID="Starvation">
        <rdfs:label>starvation</rdfs:label>
        <rdfs:comment>A collection of events.  Each instance of
            #$Starvation is an event in which  an #$Animal is so hungry
            as to be #$Starving.  If prolonged, it results in death.
            NB:  Note that this is a #$SingleDoerAction (q.v.), so it
            doesn&apos;t cover cases wherein one creature withholds food
            from another.</rdfs:comment>
        <guid>c021401d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#SingleDoerAction"/>
        <rdfs:subClassOf rdf:resource="#PhysiologicalCondition"/>
    </daml:Class>
    <OrderOfMagnitudeInterval rdf:ID="Starving">
        <rdfs:label>starving event</rdfs:label>
        <rdfs:comment>A #$LevelOfHunger (q.v.) one step beyond #$Hungry.
            Note: this constant expresses a static
            #$AnimalPhysiologicalAttribute, not a dynamic process.  For
            the #$Event that involves #$Starving, see #$Starvation.</rdfs:comment>
        <guid>bd588d42-9c29-11b1-9dad-c379636f7270</guid>
    </OrderOfMagnitudeInterval>
    <daml:Class rdf:ID="State-Geopolitical">
        <rdfs:label>states</rdfs:label>
        <rdfs:comment>A collection of geopolitical entities which are
            sub-divisions of countries.  An element of
            #$State-Geopolitical is a ``state-equivalent,&apos;&apos;
            i.e., a region whose political government is at the very
            next administrative level down from the national level.  In
            different countries, such a main geopolitical subdivision
            may be called variously a `region&apos;, a `state&apos;, a
            `province&apos;, a `prefecture&apos;, a `department&apos;, a
            `parish&apos;, or something else.  In the U.S.A., it is
            called a `state&apos;.  See also #$Province.</rdfs:comment>
        <guid>bd58e7a8-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#CountrySubsidiary"/>
        <daml:disjointWith rdf:resource="#ContactLocation"/>
    </daml:Class>
    <daml:Class rdf:ID="State-UnitedStates">
        <rdfs:label>U.S. states</rdfs:label>
        <rdfs:comment>A collection of geopolitical sub-regions.  Each of
            the (currently 50) elements of #$State-UnitedStates is a
            State in the #$UnitedStatesOfAmerica; i.e., #$Alabama-State,
            #$Alaska-State, #$Arizona-State, #$Arkansas-State, etc.</rdfs:comment>
        <guid>bd588a98-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#SpatiallyDisjointRegionType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#State-Geopolitical"/>
    </daml:Class>
    <daml:Class rdf:ID="StateCapital">
        <rdfs:label>state capitals</rdfs:label>
        <rdfs:comment>A collection of cities.  Each element of
            #$StateCapital is a city that is the capital city of the
            geopolitical state in which it is located.  Note that this
            collection is for capitals of all the elements in
            #$State-Geopolitical (q.v.), not just members of the subset
            #$State-UnitedStates.  Examples: #$CityOfJuneauAK,
            #$CityOfLansingMI, #$CityOfAnnapolisMD,
            #$CityOfQuebecCanada, #$CityOfEdmontonCanada,
            #$CityOfPerthAustralia, #$CityOfXianChina,
            #$CityOfGuangzhouChina, #$CityOfLahorePakistan.</rdfs:comment>
        <guid>bd58b7be-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#SpatiallyDisjointRegionType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#CapitalCityOfRegion"/>
    </daml:Class>
    <daml:Class rdf:ID="StateOfMatter-SolidLiquidGaseous">
        <rdfs:label>states of matter</rdfs:label>
        <rdfs:comment>#$StateOfMatter-SolidLiquidGaseous is the
            collection of  attributes which describe the basic physical
            states that pieces of  matter can be in.  The only four
            elements of this collection are  #$SolidStateOfMatter,
            #$LiquidStateOfMatter, #$GaseousStateOfMatter,  and
            #$PlasmaStateOfMatter.  Although the chemical composition of
            a  substance does not change when its basic physical state
            changes, many  of its intrinsic physical properties do
            change--including its density,  viscosity, brittleness,
            color, size, etc.  States of matter concern  the
            organization of matter at the molecular level, as determined
            by  temperature and pressure. Changes in temperature and or
            pressure will  cause matter in one physical state to
            transform into another (see  #$PhysicalStateChangeEvent). In
            scientifically sophisticated contexts  states of matter
            apply only to a set of molecules of a single kind,   but not
            to mixtures as a whole:  Given a mixture such as liter of
            mud,   we can say that the water part is in a liquid state,
            but we can&apos;t say   anything about the mud as a whole.
            In scientifically naive contexts  such as the one
            represented by the #$NaivePhysicsMt, states of matter   can
            be correctly attributed to mixtures: Wine, a mixture of
            solids   and liquids, may be have the attribute
            #$LiquidStateOfMatter in such a  context.</rdfs:comment>
        <guid>bd589108-9c29-11b1-9dad-c379636f7270</guid>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </daml:Class>
    <daml:Class rdf:ID="StaticSituation">
        <rdfs:label>static situation</rdfs:label>
        <rdfs:comment>#$StaticSituations are states of affairs between
            two or more things, persisting statically over some time
            interval. #$StaticSituations always have a temporal extent;
            they usually have a tangible and spatial extent.   As an
            example, consider the situation of Bill Clinton sitting in
            his easy chair on the evening of 7/4/96.   There are
            participant objects such as Bill and the chair, there are
            relationships such as the seat of the chair supporting his
            bottom and his weight being off his feet, etc.   In any
            #$StaticSituation, for the participants in that situation,
            there  is some significant or focal relationship between
            them which does not  change.  In the most typical cases,
            there is no important change  whatsoever, e.g. someone
            sitting would be such a #$StaticSituation. But some things
            represented as #$StaticSituations can  alternatively be
            represented as #$Events.  For example, a situation in which
            geese were flying in  a flock would be static (the
            flock-like spatial relationship between the   geese would be
            retained) but it would also be dynamic in that the geese
            were moving, so either representation could be chosen
            depending on the context.</rdfs:comment>
        <guid>be1e537c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#SomethingExisting"/>
        <rdfs:subClassOf rdf:resource="#Situation-Temporal"/>
    </daml:Class>
    <daml:Class rdf:ID="Stealing-Generic">
        <rdfs:label>thefts</rdfs:label>
        <rdfs:comment>A collection of events; a subset of
            #$TakingSomething.  In an instance of #$Stealing-Generic,
            one #$Agent takes a possession of another agent&apos;s
            without the owner&apos;s permission (and possibly without
            the owner&apos;s knowledge).  Stealing is commonly
            considered criminal in most contexts. Note:  It is not the
            case that every use of another&apos;s things without
            explicit permission is categorized as an instance of
            #$Stealing-Generic.  An informal agreement or
            `understanding&apos; may exist between #$Agents that would
            cover casual `borrowing&apos; (and excuse it from being
            stealing); the closer the relationship the more expensive
            and personal the items that fall into such an exclusion.
            E.g., even if I am in a perfect stranger&apos;s office, and
            they have left for a minute, I feel it is not stealing to
            take one of their Kleenexes if I am about to sneeze.</rdfs:comment>
        <guid>bd588c77-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#TakingSomething"/>
        <rdfs:subClassOf rdf:resource="#UnintendedLossOfUserRights"/>
        <rdfs:subClassOf rdf:resource="#TransferringPossession"/>
    </daml:Class>
    <PreparationAttribute rdf:ID="Steamed">
        <rdfs:label>steamed</rdfs:label>
        <rdfs:comment>The attribute #$Steamed is a specialized form of
            #$Cooked.  Food that is #$Steamed has been prepared in an
            event of #$SteamingFood.</rdfs:comment>
        <guid>bd58f5d7-9c29-11b1-9dad-c379636f7270</guid>
    </PreparationAttribute>
    <daml:Class rdf:ID="SteamingFood">
        <rdfs:label>steaming food</rdfs:label>
        <rdfs:comment>Cooking food by surrounding it in steam.</rdfs:comment>
        <guid>bd58bdb5-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#CookingFood"/>
    </daml:Class>
    <TerrainAttribute rdf:ID="Steppe">
        <rdfs:label>steppe</rdfs:label>
        <rdfs:comment>Attibute of areas of #$Grassland where short
            grasses are dominant: traditionally, the wild grasslands of
            Eurasia, but also found extensively in central North
            America, central and southern Africa, and Australia.
            Source: The Times Atlas of the World (1995).</rdfs:comment>
        <guid>bf10f2ba-9c29-11b1-9dad-c379636f7270</guid>
    </TerrainAttribute>
    <daml:Class rdf:ID="SteppeClimateCycle">
        <rdfs:label>steppe climates</rdfs:label>
        <rdfs:comment>A collection of annual climate cycles.  Each
            element of #$SteppeClimateCycle is a year-long event
            consisting of weather occurring (typically) on the steppes
            (i.e., temperate zone semiarid plains).  Characteristics of
            a steppe climate include: little precipitation, but wetter
            than a desert; wide temperature extremes, from very hot in
            the day to cold at night.</rdfs:comment>
        <guid>bd58dd93-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ClimateCycleType"/>
        <rdfs:subClassOf rdf:resource="#TemperateClimateCycle"/>
    </daml:Class>
    <daml:Class rdf:ID="Stock">
        <rdfs:label>stocks</rdfs:label>
        <rdfs:comment>A collection consisting of all shares of stock.
            An element of #$Stock is a share of ownership in some
            instance of #$LegalCorporation; its owner is an #$Agent who
            is recorded as a shareholder in the official records of that
            corporation.  A company may have several classes of #$Stock,
            such as Common, Preferred, Class A, Class B, etc.</rdfs:comment>
        <guid>bd58af73-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#AuthorizedAgreement"/>
    </daml:Class>
    <daml:Class rdf:ID="StockCertificate">
        <rdfs:label>stock certificates</rdfs:label>
        <rdfs:comment>A collection of official documents.  Each element
            of #$StockCertificate is a document issued by a company to
            one of its shareholders, certifying the shareholder&apos;s
            ownership of some number of shares of stock in that corporation.</rdfs:comment>
        <guid>c0fd4a24-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#IDDocument"/>
    </daml:Class>
    <daml:Class rdf:ID="StockHoldings">
        <rdfs:label>stock holdings</rdfs:label>
        <rdfs:comment>A collection of partially tangibles; a subset of
            #$FinancialAssetHoldings.  Each instance of #$StockHoldings
            is a group of #$Stock shares owned by an #$Agent.  It may
            consist of shares in only one company or different groups of
            shares in multiple companies.</rdfs:comment>
        <guid>bd58d8c1-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#FinancialAssetHoldings"/>
    </daml:Class>
    <daml:Class rdf:ID="StockType">
        <rdfs:label>stock type</rdfs:label>
        <rdfs:comment>A collection of collections.  An instance of
            #$StockType is a collection of all shares of stock of a
            particular type in a particular corporation.  For example,
            ``General Motors Class E Stock&apos;&apos;.</rdfs:comment>
        <guid>bd58af30-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#ExistingObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="Stomach">
        <rdfs:label>stomachs</rdfs:label>
        <rdfs:comment>The collection of all stomachs.  An individual
            #$Stomach is an #$Organ which is part of the
            #$DigestiveSystem that churns and digests #$Food.</rdfs:comment>
        <guid>bd58e5aa-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#UniqueAnatomicalPartType"/>
        <rdf:type rdf:resource="#AnimalBodyPartType"/>
        <rdfs:subClassOf rdf:resource="#BiologicalLivingObject"/>
    </daml:Class>
    <daml:Class rdf:ID="StoneStuff">
        <rdfs:label>stone</rdfs:label>
        <rdfs:comment>A collection of tangible things; a subset of
            #$EarthStuff.  Each element of #$StoneStuff is a piece or
            portion of rock or stone; e.g., #$MountRushmoreMonument.</rdfs:comment>
        <guid>bd588e04-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TangibleStuffCompositionType"/>
        <rdfs:subClassOf rdf:resource="#StructuralSupportStuff"/>
    </daml:Class>
    <daml:Class rdf:ID="Stream">
        <rdfs:label>streams</rdfs:label>
        <rdfs:comment>#$Stream is the generic collection for natural,
            flowing bodies of water, including everything from great
            rivers to tiny creeks.  Every stream flows in (see
            #$in-ContOpen) some conduit (see #$FluidConduit) such as a
            streambed or riverbed. Examples: #$AmazonRiver,
            #$LittleMissouriRiver, #$WoundedKnee-Creek.  Cf. #$River,
            #$Creek.  Note that riverbanks are not streams nor are they
            parts of streams, but rather they mark the edges of a stream.</rdfs:comment>
        <guid>bd590774-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#FlowPath"/>
        <rdfs:subClassOf rdf:resource="#BodyOfWater"/>
        <rdfs:subClassOf rdf:resource="#EcologicalRegion"/>
    </daml:Class>
    <daml:Class rdf:ID="Street-Generic">
        <rdfs:label>streets</rdfs:label>
        <rdfs:comment>The subcollection of #$Roadway that contains all
            streets inside of cities and towns.</rdfs:comment>
        <guid>bd58f514-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#UrbanArea"/>
    </daml:Class>
    <daml:Class rdf:ID="StreetAddress">
        <rdfs:label>street addresses</rdfs:label>
        <rdfs:comment>A collection of strings. Each element of
            #$StreetAddress is a string that denotes a street number and
            street name.  For example, `3721 Executive Center
            Drive&apos;, the street address of #$Cycorp.</rdfs:comment>
        <guid>bd58acfd-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#Address-LocationDesignator"/>
        <daml:disjointWith rdf:resource="#ContactLocation"/>
    </daml:Class>
    <daml:Class rdf:ID="Strength">
        <rdfs:label>vigors</rdfs:label>
        <rdfs:comment>#$Strength is the #$ScriptPerformanceAttributeType
            for describing actions performed by exerting nontrival force
            at the times it is necessary.</rdfs:comment>
        <guid>bd58973b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ScriptPerformanceAttributeType"/>
        <rdfs:subClassOf rdf:resource="#ScriptPerformanceAttribute"/>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
        <rdfs:subClassOf rdf:resource="#AnimalPhysiologicalAttribute"/>
    </daml:Class>
    <daml:Class rdf:ID="StructuralSupportStuff">
        <rdfs:label>structural support stuff</rdfs:label>
        <rdfs:comment>A collection of tangibles. Each element of
            #$StructuralSupportStuff is a hard, rigid substance
            typically used for structural support.  For example, the
            instances of #$Wood, #$BoneTheStuff, #$StoneStuff.</rdfs:comment>
        <guid>be010813-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdfs:subClassOf rdf:resource="#SolidTangibleThing"/>
    </daml:Class>
    <daml:Class rdf:ID="StructuredInformationSource">
        <rdfs:label>structured information sources</rdfs:label>
        <rdfs:comment>A collection of #$InformationStores, either
            intangible or partially tangible.  Each element of
            #$StructuredInformationSource is an #$InformationStore in
            which bits of information are represented as related in a
            systematic way that is easily characterized by some type of
            formal structure, including spatial or architectural terms
            (used metaphorically).  Examples include: a database
            organized in fields and values; a spreadsheet organized in
            rows and columns with entries; an organizational tree
            diagram with nodes and branches; a topographical map; a
            document written in HTML (hyper-text markup language).
            Negative examples include computerprograms  poems, and novels.</rdfs:comment>
        <guid>bd58f839-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#PartiallyIntangibleIndividual"/>
    </daml:Class>
    <daml:Class rdf:ID="Student">
        <rdfs:label>students</rdfs:label>
        <rdfs:comment>A collection of persons.  Each element of
            #$Student is someone who studies at an academic institution.
            This collection includes students at all levels of study in
            all types of educational institutions.</rdfs:comment>
        <guid>bd588d1a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#OccupationType"/>
        <rdf:type rdf:resource="#PersonByActivityType"/>
        <rdfs:subClassOf rdf:resource="#Person"/>
    </daml:Class>
    <daml:Class rdf:ID="StudentStatusAttribute">
        <rdfs:label>student status attribute</rdfs:label>
        <rdfs:comment>A collection of attributes.  Each
            #$StudentStatusAttribute indicates the currency or
            bureaucratic phase of processing a student&apos;s
            participation in an educational course or institution;
            elements of this collection include #$Graduate, #$Enrolled, etc.</rdfs:comment>
        <guid>bd58addd-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#AttributeType"/>
        <rdfs:subClassOf rdf:resource="#AttributeValue"/>
    </daml:Class>
    <daml:Class rdf:ID="StuffType">
        <rdfs:label>stuff type</rdfs:label>
        <rdfs:comment>The collection of all collections that are
            stuff-like in at least one respect. A collection COL is
            stuff-like just in case there is some sense of
            &apos;part&apos; according to which every part of an
            instance of COL is itself an instance of COL. More
            precisely, for a collection to be a #$StuffType it is
            sufficient that there be some spec-pred of #$parts,
            PARTPRED, such that if (#$isa OBJECT1 COL) and (PARTPRED
            OBJECT1 OBJECT2), then (#$isa OBJECT2 COL). (See the
            cyclistNotes for more detail). Here are two examples.
            Consider #$Breathing. Take an instance of that, say a ten
            minute long period in which I am breathing. Imagine some two
            minute snippet of that, one of its #$timeSlices (a spec-pred
            of #$parts). That, too, is an instance of #$Breathing. So
            #$Breathing is a #$StuffType, since all #$timeSlices of an
            instance of #$Breathing are also instances of #$Breathing.
            Consider #$Water. Take any instance of #$Water -- say the
            water in the Pacific Ocean. Now take any portion of that
            water -- say a handful of it that I scoop up near Honolulu,
            one of its #$physicalPortions (a spec-pred of #$parts). That
            handful is itself an instance of #$Water. Hence #$Water is a
            #$StuffType, in virtue of the fact that all
            #$physicalPortions of all instances #$Water are themselves
            instances of #$Water.    Other examples are:
            #$AbstractInformationalThing, which is stuff-like with
            respect #$subInformation; #$CharacterString, which is
            stuff-like with respect to #$subCharacterStrings; and
            #$List, which is stuff-like with respect to #$sublists.
            These examples are somewhat exceptional -- most #$StuffTypes
            are like the examples of #$Breathing and #$Water. Before
            using #$StuffType read the cyclistNotes. See #$ObjectType,
            for the contrasting notion of being object-like.</rdfs:comment>
        <guid>bd58abdf-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <daml:disjointWith rdf:resource="#SensoryReactionType"/>
    </daml:Class>
    <Format rdf:ID="SubAbs">
        <rdfs:label>sub abs</rdfs:label>
        <rdfs:comment>If the predicate P has entry format #$SubAbs for
            one of its argument positions N, then, given some fixed set
            of arguments in the other positions, mutiple assertions may
            be added to the KB so long as each term appearing in
            argument position N is a #$subAbstrac of some common
            #$Entity. Note that the case where the entity itself appears
            as arg N is allowed, since for all x, (#$subAbstrac X X) is
            true.  Let&apos;s consider an example.  The #$arg2Format of
            #$laterSubAbstractions is #$SubAbs.  Thus Cyc will allow one
            to assert that #$laterSubAbstractions of
            SamZilkerAsATeenager include SamZilkerAsAnAdult, and
            SamZilkerDuringHisFirstMarriage, etc., so long as all of
            those are known to be subabstractions of the very same
            entity, in this case the one representing Sam Zilker.</rdfs:comment>
        <guid>bd58e16e-9c29-11b1-9dad-c379636f7270</guid>
    </Format>
    <daml:Class rdf:ID="SubAtomicParticle">
        <rdfs:label>subatomic particles</rdfs:label>
        <rdfs:comment>A collection of objects; a subset of
            #$MicroscopicScaleObject.  Every instance of
            #$SubAtomicParticle is a physical particle smaller than an
            atom.  Major subsets of #$SubAtomicParticle include
            #$Electron, #$Proton, and #$Neutron.</rdfs:comment>
        <guid>bd58db74-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#MicroscopicScaleObject"/>
        <rdfs:subClassOf rdf:resource="#InanimateObject-Natural"/>
    </daml:Class>
    <Format rdf:ID="SubEventsFormat">
        <rdfs:label>sub events format</rdfs:label>
        <rdfs:comment>If a predicate P has #$SubEventsFormat for
            argument position N, then given some particular list of
            terms that occupy the other argument positions of P, there
            may be multiple assertions with different terms in position
            N (keeping the other arguments fixed), but only so long as
            the terms in position N are all interrelated by the
            predicate #$subEvents. For example, the #$arg1Format of
            #$finalSportsEvent is #$SubEventsFormat.  This allows us to
            state (#$relationAllExists #$finalSportsEvent
            #$TennisTournament #$TennisMatch), (#$relationAllExists
            #$finalSportsEvent #$TennisTournament #$TennisSet), and
            (#$relationAllExists #$finalSportsEvent #$TennisTournament
            (#$GameFn #$Tennis-TheGame)).</rdfs:comment>
        <guid>c0e71ad1-9c29-11b1-9dad-c379636f7270</guid>
    </Format>
    <daml:Class rdf:ID="SubLAtom">
        <rdfs:label>Cyc system atoms</rdfs:label>
        <rdfs:comment>A collection of the atomic data belonging to the
            CycL substrate of the Cyc System.  Elements of #$SubLAtom
            cannot be decomposed (e.g., a symbol).</rdfs:comment>
        <guid>bd58a571-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#SubLListOrAtom"/>
    </daml:Class>
    <daml:Class rdf:ID="SubLAtomWithValue">
        <rdfs:label>Cyc system atom with values</rdfs:label>
        <rdfs:comment>A sub-collection of the atomic data belonging to
            the CycL substrate of the Cyc System.  Each element of
            #$SubLAtomWithValue is an atomic datum that has a value
            (e.g., 2) associated with it.</rdfs:comment>
        <guid>bd58b836-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#SubLAtom"/>
    </daml:Class>
    <daml:Class rdf:ID="SubLAtomicTerm">
        <rdfs:label>sub l atomic term</rdfs:label>
        <rdfs:comment>The collection of all denotational terms in the
            CycL language that are not explicitly represented in CycL,
            but are represented in SubL, the underlying implementation
            of the Cyc system.  Examples include the terms 212,  foo ,
            :NOUN, #x, and VARIABLE-P.</rdfs:comment>
        <guid>bff27115-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#CycLAtomicTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLDenotationalTerm"/>
        <rdfs:subClassOf rdf:resource="#CycLClosedAtomicTerm"/>
        <rdfs:subClassOf rdf:resource="#ELExpression"/>
        <rdfs:subClassOf rdf:resource="#HLExpression"/>
    </daml:Class>
    <daml:Class rdf:ID="SubLCharacter">
        <rdfs:label>sub l character</rdfs:label>
        <rdfs:comment>The collection of all character-denoting terms in
            the CycL language, which are represented in SubL, the
            underlying implementation of the CycL system. Example: the
            term #x.</rdfs:comment>
        <guid>bee52c1c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#SubLAtomicTerm"/>
    </daml:Class>
    <daml:Class rdf:ID="SubLInteger">
        <rdfs:label>Cyc system integers</rdfs:label>
        <rdfs:comment>#$SubLInteger is the set of all numbers   which
            satisfy the #$defnIff CYC-SYSTEM-INTEGER (i.e., the set of
            numbers   which are considered integers by CycL).  Thus, 3,
            0, and -4  are legitimate elements of #$SubLInteger.  But
            (#$Meter 6),   (#$Unity 3.3), :34, #$PlusInfinity, and
            Avogadro&apos;s number are NOT legitimate   elements of #$SubLInteger.</rdfs:comment>
        <guid>bd66e0a4-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#SubLRealNumber"/>
        <rdfs:subClassOf rdf:resource="#Integer"/>
    </daml:Class>
    <daml:Class rdf:ID="SubLKeyword">
        <rdfs:label>Cyc system keywords</rdfs:label>
        <rdfs:comment>The collection of SubL keywords (e.g., :KEYWORD,
            :OBJECT, :PLURAL, etc.), which is a subset of the collection
            of #$SubLSymbol. Every element of #$SubLKeyword satisfies
            the #$defnIff KEYWORDP.</rdfs:comment>
        <guid>bf8b47b8-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#SubLSymbol"/>
    </daml:Class>
    <daml:Class rdf:ID="SubLList">
        <rdfs:label>sub l list</rdfs:label>
        <rdfs:comment>A collection of tuples (see #$Tuple).  Each
            element of #$SubLList is an ordered list of items enclosed
            in parentheses.  Cyc system lists are those things that pass
            the #$defnIff LISTP, i.e., those things considered by the
            Cyc System to be lists.</rdfs:comment>
        <guid>bd589695-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#SubLListOrAtom"/>
        <rdfs:subClassOf rdf:resource="#List"/>
    </daml:Class>
    <daml:Class rdf:ID="SubLListOrAtom">
        <rdfs:label>Cyc system list or atoms</rdfs:label>
        <rdfs:comment>A collection including both the lists and the
            atomic data belonging to the CycL substrate of the Cyc System.</rdfs:comment>
        <guid>bd58a5f5-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#SubLObject"/>
    </daml:Class>
    <daml:Class rdf:ID="SubLNonVariableSymbol">
        <rdfs:label>sub l non variable symbol</rdfs:label>
        <rdfs:comment>The collection of all &apos;symbols&apos; in the
            CycL language, excluding variables. Note that this is a very
            technical definition of the word &apos;symbol&apos;; the
            definition used in SubL, the underlying implementation of
            Cyc. Symbols are rarely used in CycL, except for some
            #$HLPredicates like #$defnIff. Examples: the symbols GENLS
            and CYC-SYSTEM-NON-VARIABLE-SYMBOL-P.</rdfs:comment>
        <guid>bddef55a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#SubLAtomicTerm"/>
        <rdfs:subClassOf rdf:resource="#SubLSymbol"/>
    </daml:Class>
    <daml:Class rdf:ID="SubLObject">
        <rdfs:label>Cyc system objects</rdfs:label>
        <rdfs:comment>The collection of computational (i.e., abstract,
            intangible, syntactically structured) objects which make up
            Cyc&apos;s CycL-based system.</rdfs:comment>
        <guid>bd58806b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#ComputationalObject"/>
        <daml:disjointWith rdf:resource="http://www.daml.org/2001/03/daml+oil#Property"/>
    </daml:Class>
    <daml:Class rdf:ID="SubLRealNumber">
        <rdfs:label>Cyc system real numbers</rdfs:label>
        <rdfs:comment>The collection of all number-denoting expressions
            in the CycL language that are not CycL constants or NATs,
            but are terms of SubL, the underlying implementation
            language of CycL. Examples: the terms `212&apos; and
            `3.14159d0&apos;.  Non-examples: the expressions #$One,
            (#$Meter 6), (#$Unity 3), `:34&apos;, #$PlusInfinity, and
            `Avogadro&apos;s number&apos;.</rdfs:comment>
        <guid>bd59086c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#SubLAtomWithValue"/>
        <rdfs:subClassOf rdf:resource="#RationalNumber"/>
        <rdfs:subClassOf rdf:resource="#SubLAtomicTerm"/>
    </daml:Class>
    <daml:Class rdf:ID="SubLString">
        <rdfs:label>Cyc system strings</rdfs:label>
        <rdfs:comment>The collection of all string-denoting terms in the
            CycL language, which are represented in SubL, the underlying
            implementation of the CycL system by a sequence of
            characters enclosed in double quotes. Example: the term  foo .</rdfs:comment>
        <guid>bd58803c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#SubLAtom"/>
        <rdfs:subClassOf rdf:resource="#SubLAtomicTerm"/>
        <rdfs:subClassOf rdf:resource="#CharacterString"/>
        <daml:disjointWith rdf:resource="#TruthValue"/>
    </daml:Class>
    <daml:Class rdf:ID="SubLSymbol">
        <rdfs:label>Cyc system symbols</rdfs:label>
        <rdfs:comment>A collection of symbolic atomic terms, namely, all
            those things that satisfy the  definition of a symbol in the
            Cyc system.  Every element of #$SubLSymbol satisfies the
            Heuristic Level (SubL) #$defnIff SYMBOLP.  Such terms cannot
            include numbers or strings (i.e., they must be symbolic),
            nor can they include lists, non-reified function terms, or
            axioms (i.e., they must be atomic).</rdfs:comment>
        <guid>bd58a644-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
        <rdfs:subClassOf rdf:resource="#SubLAtom"/>
    </daml:Class>
    <daml:Class rdf:ID="SubLVariable">
        <rdfs:label>Cyc system variables</rdfs:label>
        <rdfs:comment>The collection of atomic data, each element of
            which denotes a variable within CycL and therefore can have
            a value associated with it during inferencing.
            #$SubLVariable excludes Cyc System symbols which designate
            constants or strings.</rdfs:comment>
        <guid>bd5880a1-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#SubLSymbol"/>
    </daml:Class>
    <daml:Class rdf:ID="SubProcessSlot">
        <rdfs:label>sub process slots</rdfs:label>
        <rdfs:comment>A collection of binary predicates; a
            specialization of #$Role.  Each element of #$SubProcessSlot
            relates one instance of #$Event to a second instance of
            #$Event that is in some way a part of the first.  Examples:
            #$subEvents, #$inPreparationFor, #$manufacturingSteps, #$outboundLegOfRoundTrip.</rdfs:comment>
        <guid>bd5882c6-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="#TemporalPartSlot"/>
    </daml:Class>
    <daml:Class rdf:ID="Sublimating">
        <rdfs:label>sublimations</rdfs:label>
        <rdfs:comment>The collection of events in which a piece of stuff
            is transformed from a #$SolidStateOfMatter to a
            #$GaseousStateOfMatter by sublimation as opposed to evaporation.</rdfs:comment>
        <guid>bfbc0a9c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#PhysicalStateChangeEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="Submarine">
        <rdfs:label>submarines</rdfs:label>
        <rdfs:comment>Submarine is the collection of all boats that can
            operate underwater.</rdfs:comment>
        <guid>bd588c5b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#TransportationDevice-Vehicle"/>
    </daml:Class>
    <TerrainAttribute rdf:ID="SubtropicalForest">
        <rdfs:label>subtropical forest</rdfs:label>
        <rdfs:comment>Attribute of hardleaf evergreen forest regions
            growing between the latitudes of 15-40 degrees north and
            south of the equator in China, Japan, Australia, New
            Zealand, and South Africa.  Source: The Times Atlas of the
            World (1995).</rdfs:comment>
        <guid>bed7efc0-9c29-11b1-9dad-c379636f7270</guid>
    </TerrainAttribute>
    <daml:Class rdf:ID="Subway">
        <rdfs:label>subways</rdfs:label>
        <rdfs:comment>The collection of all underground #$Railways,
            under the surfaces of major cities.  Some parts of Subways
            may be in trenches, on bridges or on elevated tracks, but
            most of a Subway is in underground tunnels.</rdfs:comment>
        <guid>bda7a8a8-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Railway"/>
    </daml:Class>
    <daml:Class rdf:ID="SubwayStation">
        <rdfs:label>subway stations</rdfs:label>
        <rdfs:comment>The collection of all subway (underground
            railroad) stations.  These are usually located at least
            partly underground, on subway tracks, and their primary
            purpose is to be a place where subway trains discharge and
            receive passengers.</rdfs:comment>
        <guid>bdce1ea5-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#HumanOccupationConstruct"/>
    </daml:Class>
    <daml:Class rdf:ID="SuccessCriterionSlot">
        <rdfs:label>success criterion slot</rdfs:label>
        <rdfs:comment>Instances are predicates used to give criteria of
            success for #$Plans, or for #$PurposefulActions reified in
            planning contexts.</rdfs:comment>
        <guid>bfedec6e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="http://www.daml.org/2001/03/daml+oil#Property"/>
    </daml:Class>
    <daml:Class rdf:ID="SummerSeason">
        <rdfs:label>summers</rdfs:label>
        <rdfs:comment>The collection of Summer seasons.  In the
            #$TemperateClimateCycle, Summer is generally the time of
            greatest warmth.  #$SummerSeason represents the climatic
            aspects of summer.  For its purely temporal aspects, see #$CalendarSummer.</rdfs:comment>
        <guid>bd588ac7-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#TemporalObjectType"/>
    </daml:Class>
    <WeatherAttribute rdf:ID="Sunny">
        <rdfs:label>sunny</rdfs:label>
        <rdfs:comment>A current condition in which the sun is shining
            bright in a region (implies daytime hours).  This implies
            that the air is ClearVisibility and that the sky is not
            Hazy, and either PartlyCloudy or Cloudless.  As this
            attribute may be described in terms of others, it may be
            redundant, use your own discretion.</rdfs:comment>
        <guid>bd58caf9-9c29-11b1-9dad-c379636f7270</guid>
    </WeatherAttribute>
    <daml:Class rdf:ID="Sunrise">
        <rdfs:label>sunrises</rdfs:label>
        <rdfs:comment>Each #$Sunrise is an #$Event where, at a given
            location, the #$Sun appears to clear the horizon as it
            `rises&apos;.  This event is construed to occur regardless
            of the visibility of the #$Sun due to obscuring objects such
            as clouds.  Every #$Sunrise is #$contiguousAfter a #$Dawn,
            and every #$DaytimeHours is #$temporallyStartedBy a #$Sunrise.</rdfs:comment>
        <guid>bd58cd1b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#QualitativeTimeOfDay"/>
        <daml:disjointWith rdf:resource="#Sunset"/>
    </daml:Class>
    <daml:Class rdf:ID="Sunset">
        <rdfs:label>sunsets</rdfs:label>
        <rdfs:comment>Each #$Sunset is an #$Event in which, at a given
            location, the horizon occludes the #$Sun as it appears to
            set.  This event is construed to occur regardless of the
            visibility of the #$Sun due to obscuring objects such as
            clouds.  There is a #$Dusk which is #$contiguousAfter each
            #$Sunset.  Every #$DaytimeHours is #$temporallyFinishedBy a
            #$Sunset (unless it #$endsDuring a #$MidnightSun), as is
            every #$Afternoon.</rdfs:comment>
        <guid>bd588843-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#QualitativeTimeOfDay"/>
        <daml:disjointWith rdf:resource="#Sunrise"/>
    </daml:Class>
    <ElectricalResistance rdf:ID="SuperconductorResistance">
        <rdfs:label>superconductor resistance</rdfs:label>
        <rdfs:comment>A measurable physical attribute.
            #$SuperconductorResistance is the element of
            #$ElectricalResistance that describes an object which has
            absolutely no resistance to the passage of electricity.
            That level of resistance is found only in superconductors.</rdfs:comment>
        <guid>be01f327-9c29-11b1-9dad-c379636f7270</guid>
    </ElectricalResistance>
    <daml:Class rdf:ID="SupplyCompany">
        <rdfs:label>supply companies</rdfs:label>
        <rdfs:comment>A collection of commercial organizations.  An
            element of #$SupplyCompany is a company whose #$MainFunction
            is selling supplies to other companies.  For example,
            elements of #$ElectricalSupplyCompany or grocery #$Wholesalers.</rdfs:comment>
        <guid>bd58b30a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#OrganizationWithBusinessCustomers"/>
    </daml:Class>
    <daml:Class rdf:ID="SupposedToBeMicrotheory">
        <rdfs:label>supposed to be microtheory</rdfs:label>
        <rdfs:comment>The collection of microtheories that describe how
            things are &apos;supposed to be&apos; according to some
            agent or agents.  This technique can be used to represent
            things like the policies of a company, the laws of a
            country, the tenets of a religion, the rules of proper
            conduct for employees of a particular corporation, etc.  The
            assertions in a #$SupposedToBeMicrotheory may or may not
            describe the world as it actually is.  Examples:
            #$BasicWesternLegalConceptsMt,
            #$SportsRulesOf-BoxingSportsEvent, #$CycStaffCalendar, and #$OfficeCodeOfConductMt.</rdfs:comment>
        <guid>bd58b164-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MicrotheoryType"/>
        <rdfs:subClassOf rdf:resource="#Microtheory"/>
    </daml:Class>
    <daml:Class rdf:ID="Surface-Generic">
        <rdfs:label>surface - generic</rdfs:label>
        <rdfs:comment>The collection of all surfaces (including
            #$Surface-Abstract and #$Surface-Physical); each is a
            #$SpatialThing that has extent in at least two dimensions,
            but either does not have a thickness (i.e. a two dimensional
            object) or has an insignificant thickness compared with its
            length and width (Note: if the object is a closed surface,
            e.g. an apple skin, any significant sub region must have
            insignificant thickness compared to its length and width).
            Surfaces may be two or three dimensional, tangible or
            intangible.  Such a surface may be curved, folded, crumpled,
            or flat.  Thus a Euclidian two dimensional disc, a dinner
            plate, a crumpled sheet of paper, the top of a desk, a
            ribbon, and a basket ball&apos;s skin are exemplars of a
            #$Surface-Generic.  They may be spatially connected or not
            spatially connected.  Thus, both a frisbee and the Milky Way
            galaxy (as it appears in the sky) are examples.  Negative
            exemplars include an entire basket ball (i.e. its skin plus
            the cavity inside), a planet, and a euclidian solid sphere.
            All of these are negative exemplars because thickness is not
            significantly smaller than length and width.  If an object
            has an #$areaOfObject it must be a #$Surface-Generic.  If
            the object `has two sides&apos; (e.g. a sheet of paper, a
            frisbee, but not #$Texas-State or an #$InsideSurface of a
            cave or room.  (See #$OneSidedVsTwoSidedObjectNote.) The
            areas on either side of a #$Surface-Generic are equal.</rdfs:comment>
        <guid>bd958103-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#SpatialThing"/>
        <daml:disjointWith rdf:resource="#Agent"/>
    </daml:Class>
    <daml:Class rdf:ID="Surface-Intangible">
        <rdfs:label>abstract surfaces</rdfs:label>
        <rdfs:comment>A subset of #$GeometricThing. Each element of
            #$Surface-Intangible is an intangible mathematical surface.
            Positive examples are a convex hull of a coffee table or the
            surface of an abstract sphere. A negative example is the
            surface of a coffee table, since this is a physical surface
            and thus partially tangible.</rdfs:comment>
        <guid>bd5884f6-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#Surface-Generic"/>
        <rdfs:subClassOf rdf:resource="#GeometricThing-Intangible"/>
    </daml:Class>
    <daml:Class rdf:ID="Surface-Physical">
        <rdfs:label>physical surfaces</rdfs:label>
        <rdfs:comment>The collection of all of real physical (hence
            technically three-dimensional) surfaces.  The thickness of a
            #$Surface-Physical is much less than its average length or
            width, but it is not of zero thickness.  A Surface-Physical
            may have holes, tears, and may be unconnected, in multiple pieces.</rdfs:comment>
        <guid>bd590365-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <rdfs:subClassOf rdf:resource="#Surface-Generic"/>
    </daml:Class>
    <daml:Class rdf:ID="SurfaceOnTangibleObject">
        <rdfs:label>surfaces</rdfs:label>
        <rdfs:comment>The collection of all physical surfaces
            (#$Surface-Physical) which are subsets of #$SheetOfSomeStuff
            and for which there exists a change in quality between the
            surface and the rest of the tangible object.  These physical
            surfaces will be continuous: they may not be unconnected or
            in multiple pieces.  Thus a veneer surface of a table would
            be an instance of #$SurfaceOnTangibleObject, whereas the
            surface of a plain wooden table with no lining would be an
            instance of #$Surface-Physical.  Positive exemplars would
            include carpet that is part of a floor, #$Skin, #$Paint on a
            wall, the earth&apos;s crust, and crust on bread.  However,
            negative exemplars would be crust removed from bread, a
            loose sheet of paper (because it is not attached to anything
            else), and a face of a cliff.</rdfs:comment>
        <guid>bd590882-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdfs:subClassOf rdf:resource="#SheetOfSomeStuff"/>
        <rdfs:subClassOf rdf:resource="#Surface-Physical"/>
        <daml:disjointWith rdf:resource="#FreeSheet"/>
    </daml:Class>
    <daml:Class rdf:ID="Surgery">
        <rdfs:label>surgical procedures</rdfs:label>
        <rdfs:comment>A collection of actions.  An instance of #$Surgery
            is a medical care event in which a medical professional cuts
            a part of the living body, either to examine what&apos;s
            inside (a diagnostic, exploratory surgery) or to treat an
            ailment (a #$MedicalTreatmentEvent).  Examples of surgeries
            which are medical treatments include: removal of a foreign
            body, cancer, an organ that&apos;s causing trouble, etc.;
            insertion of a medical device (e.g, a pacemaker); or repair
            of some internal structure.</rdfs:comment>
        <guid>bd58b29c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#MedicalCareEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="Surprise">
        <rdfs:label>surprising</rdfs:label>
        <rdfs:comment>Impression due to something unexpected,
            unanticipated, or startling.  This is a collection; for an
            explanation of a typical #$FeelingAttributeType, see
            #$Happiness.  Some more specialized #$FeelingAttributeTypes
            than #$Surprise are #$Disappointment and #$Wonder-Admiration.</rdfs:comment>
        <guid>bd58c0ce-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#FeelingAttributeType"/>
        <rdfs:subClassOf rdf:resource="#FeelingAttribute"/>
    </daml:Class>
    <daml:Class rdf:ID="Suspension">
        <rdfs:label>suspensions</rdfs:label>
        <rdfs:comment>A collection of tangible stuffs; a subset of
            #$Mixture.  Each instance of #$Suspension is a mixture which
            has exactly one #$suspendingFluid and at least one kind of
            #$suspendedPart.  Each of the #$suspendedParts is an
            instance of #$Particle, and there are a mob of them.  Some
            suspensions are fairly stable (e.g., mayonnaise), while
            others tend to separate quickly (e.g., sugar stirred into
            cold lemonade).  Other examples of #$Suspension: a cloud, a
            spray of aerosol deodorant.</rdfs:comment>
        <guid>bd58bfca-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdfs:subClassOf rdf:resource="#Mixture"/>
    </daml:Class>
    <daml:Class rdf:ID="Swallowing">
        <rdfs:label>swallows</rdfs:label>
        <rdfs:comment>The collection of actions in which an #$Animal
            moves a solid or a liquid from its #$Mouth to its #$Stomach.
            A type of #$BodilyFunctionEvent as well as a type of #$BodyMovementEvent.</rdfs:comment>
        <guid>bd58a44f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#BiologicalIntakeEvent"/>
        <rdfs:subClassOf rdf:resource="#BodyMovementEvent"/>
        <rdfs:subClassOf rdf:resource="#BodilyFunctionEvent"/>
    </daml:Class>
    <IndependentCountry rdf:ID="Switzerland">
        <rdfs:label>Switzerland</rdfs:label>
        <rdfs:comment>The nation of Switzerland as it has existed
            throughout time; includes both its physical and its
            political aspects.</rdfs:comment>
        <guid>bd58d09b-9c29-11b1-9dad-c379636f7270</guid>
    </IndependentCountry>
    <daml:Class rdf:ID="SymbolicObject">
        <rdfs:label>icons</rdfs:label>
        <rdfs:comment>A collection of #$SymbolicThings which have some
            material part (i.e. are instances of #$PartiallyTangible).
            Each element of #$SymbolicObject by convention symbolizes
            some thing or event or achievement, without describing it
            propositionally in any detail.  Examples include national
            flags, military medals and ribbons, an Oscar, a Crucifix, a
            caduceus, and printed trademark logos of commercial brands.
            Elements of #$SymbolicObject need not have propositional
            information contents; probably most do not.  Rather,
            symbolic objects are typically associated (by an informed
            interpreter) with the particular entities that originated or
            appropriated them.  To emotional interpreters, such as
            humans, symbolic objects are often evocative of certain
            attitudes associated with the entities symbolized--such as
            nationalism, respect, school spirit, hatred, reverence, etc.
            Only some elements of #$SymbolicObject have the
            #$primaryFunction of serving as symbols (e.g., national
            flags, war memorials); others are symbolic in a secondary
            capacity (e.g., a gravestone symbolizes death but its
            primary function is as a marker).  Some objects are created
            to serve a symbolic function (primary or secondary), while
            others acquire symbolic associations in the course of their
            `lifetimes&apos; (e.g., San Juan Hill, Ellis Island).
            Examples of #$SymbolicObject: the #$ArcDeTriomphe, the
            #$StatueOfLiberty, the #$PyramidOfCheops, the
            #$UnitedStatesCapitolBuilding (and other capitol buildings);
            a hangman&apos;s noose, a Menorah, a white dove, a black
            armband.  Negative examples include instances of
            #$NationalAnthem, #$Halo-Symbolic (unless as a physical
            represenation in some artwork), and projected #$Swastikas
            because none of these has a material part.  For such
            symbols, use the broader concept, #$SymbolicThing.</rdfs:comment>
        <guid>bd58cf26-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="SymmetricAnatomicalPartType">
        <rdfs:label>symmetric anatomical part type</rdfs:label>
        <rdfs:comment>A collection of collections.  Instances are types
            of #$anatomicalParts of bilaterally symmetrical organisms
            (#$Organism-Whole) which occur in bilaterally symmetric
            pairs.  This is not intended to include broader categories
            like #$Tooth, #$Rib-AnimalBodyPart, or #$Finger, but the
            specific parts of which the organism only has two (EyeTooth,
            FifthRib, or #$RingFinger).</rdfs:comment>
        <guid>c0fde885-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#SiblingDisjointCollection"/>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="#AnimalBodyPartType"/>
    </daml:Class>
    <daml:Class rdf:ID="SymmetricBinaryPredicate">
        <rdfs:label>symmetric binary predicate</rdfs:label>
        <rdfs:comment>A collection of predicates; the subset of
            #$BinaryPredicate whose elements are all symmetric
            relations.  A predicate F is an element of
            #$SymmetricBinaryPredicate if and only if F is binary and (P
            X Y) implies (P Y X).  Examples: #$siblings, #$teammates,
            #$connectedTo, #$bordersOn.</rdfs:comment>
        <guid>be01286a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="http://www.daml.org/2001/03/daml+oil#Property"/>
        <rdfs:subClassOf rdf:resource="#CommutativeRelation"/>
        <daml:disjointWith rdf:resource="#AsymmetricBinaryPredicate"/>
    </daml:Class>
    <daml:Class rdf:ID="SymmetryMemberFunction">
        <rdfs:label>symmetry member function</rdfs:label>
        <rdfs:comment>The class of functions which return one member of
            a symmetric relation.  This class consists of #$LeftFn and #$RightFn.</rdfs:comment>
        <guid>bd744168-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#RelationshipType"/>
        <rdfs:subClassOf rdf:resource="#UnaryFunction"/>
        <rdfs:subClassOf rdf:resource="#CollectionDenotingFunction"/>
        <rdfs:subClassOf rdf:resource="#ReifiableFunction"/>
    </daml:Class>
    <daml:Class rdf:ID="SystemOfGovernment">
        <rdfs:label>forms of government</rdfs:label>
        <rdfs:comment>A collection of attributes.  Each element of
            #$SystemOfGovernment is an attribute describing a type of
            government that a country might have.  Used with
            #$governmentType.  Examples: #$DemocraticGovernment,
            #$Monarchy, #$SocialistGovernment, #$MilitaryGovernment.</rdfs:comment>
        <guid>bd589546-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#UnorderedAttributeType"/>
        <rdf:type rdf:resource="#AttributeType"/>
        <rdfs:subClassOf rdf:resource="#AttributeValue"/>
    </daml:Class>
    <daml:Class rdf:ID="TactileSensor">
        <rdfs:label>tactile sensors</rdfs:label>
        <rdfs:comment>A subset of #$Sensor, namely those sensors that
            operate by coming into physical contact with the object
            being perceived.  #$TactileSensors are capable of perceiving
            properties such as texture, hardness, roughness, etc.</rdfs:comment>
        <guid>bd58db7f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Sensor"/>
    </daml:Class>
    <TerrainAttribute rdf:ID="Taiga">
        <rdfs:label>taiga</rdfs:label>
        <rdfs:comment>Attribute of subarctic regions characterized by
            extensive forestation, short, cool summers, and long, cold
            winters with heavy snowfall.  Also known as boreal forests.
            Predominant trees are pine, larch, spruce, and fir.  Source:
            The Times Atlas of the World (1995).</rdfs:comment>
        <guid>c0912e21-9c29-11b1-9dad-c379636f7270</guid>
    </TerrainAttribute>
    <Agent rdf:ID="Taiwan-RepublicOfChina">
        <rdfs:label>Taiwan</rdfs:label>
        <rdfs:comment>Taiwan, governed as   The Republic of China, is a
            country which claims to be the government of  all of China.
            #$China-PeoplesRepublic also makes this claim.  The
            government of #$Taiwan-RepublicOfChina #$controls Taiwan
            Province  on the #$Island of #$Formosa (or
            &apos;Taiwan&apos;) off the southeast coast of   China in
            the far western #$PacificOcean,   #$QuemoyIsland and
            #$MatsuIsland of Fujian Province a few kilometers off the
            coast, and Pratas Island in the #$SouthChinaSea.  It claims
            several disputed   islands in the #$SouthChinaSea.  The
            territory controlled by #$Taiwan-RepublicOfChina is between
            the #$EastChinaSea and the #$SouthChinaSea.  De facto,
            #$Taiwan-RepublicOfChina and #$China-PeoplesRepublic are two
            separate independent countries each with its own territory,
            while de jure there is a single #$IndependentCountry of
            China, but two governments with separate regions of control.</rdfs:comment>
        <guid>bd58a0bf-9c29-11b1-9dad-c379636f7270</guid>
    </Agent>
    <daml:Class rdf:ID="TakingOffAClothingItem">
        <rdfs:label>taking off a clothing item</rdfs:label>
        <rdfs:comment>A collection of events.  Each element of
            #$TakingOffAClothingItem is an event in which something
            being worn is removed, either by the wearer or by someone
            else (e.g., removing a child&apos;s boots or a horse&apos;s
            saddle).  After an element of #$TakingOffAClothingItem
            occurs, the situation (an element of #$WearingSomething) in
            which the item was being #$wornOn the body is over.</rdfs:comment>
        <guid>bd58cd3b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#RemovingSomethingByMovingIt"/>
        <rdfs:subClassOf rdf:resource="#HandlingAnObject"/>
    </daml:Class>
    <daml:Class rdf:ID="TakingSomething">
        <rdfs:label>events of taking something</rdfs:label>
        <rdfs:comment>A collection of events; a subset of
            #$GainingUserRights.  In an instance of #$TakingSomething,
            an #$Agent takes an object, in the sense of taking it away
            or using or exercising access to it.  The agent may or may
            not have any legal right or authorization to use that
            object.  In an instance of #$TakingSomething, the taker (the
            #$toPossessor) must intend and actively (attempt to) acquire
            the #$objectOfPossessionTransfer, so the taking event is
            intentional and thus, strictly speaking, #$performedBy the taker.</rdfs:comment>
        <guid>bd58c696-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#GainingUserRights"/>
        <rdfs:subClassOf rdf:resource="#AnimalActivity"/>
    </daml:Class>
    <daml:Class rdf:ID="TangibleObjectPredicate">
        <rdfs:label>tangible object predicate</rdfs:label>
        <rdfs:comment>A collection of predicates.  Each element of
            #$TangibleObjectPredicate is a predicate used in assertions
            which describe the properties of tangible objects.
            Examples: #$viscosityOfSubstance, #$objectHasColor,
            #$porosityOfObject, #$physicalBuild.</rdfs:comment>
        <guid>bd58e681-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="#ProcessPredicate"/>
    </daml:Class>
    <daml:Class rdf:ID="TangibleProduct">
        <rdfs:label>tangible products</rdfs:label>
        <rdfs:comment>A collection of tangible stuff.  Each element of
            #$TangibleProduct is a tangible object or tangible material
            that is exchanged for money or trade.  Tangible products are
            purely tangible and do not have an intangible component (cf.
            #$PartiallyTangibleProduct, #$PartiallyTangible).
            #$TangibleProduct is the most general class of tangible
            products--everything from cotton swabs to coconut oil to
            F-16s belongs to this collection.</rdfs:comment>
        <guid>bd59062b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdf:type rdf:resource="#ProductType"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangibleProduct"/>
        <daml:disjointWith rdf:resource="#Agent"/>
    </daml:Class>
    <daml:Class rdf:ID="TangibleStuffCompositionType">
        <rdfs:label>tangible stuff composition type</rdfs:label>
        <rdfs:comment>A collection of collections.  Instances are
            collections of #$TangibleThing whose membership is based
            only on the physical and/or chemical composition of the
            elements, and not on any other property.  Thus
            #$TangibleStuffCompositionType does not have as elements any
            collections whose instances are determined by the physical
            state they are in.  For example, the collection #$Water is
            an instance of #$TangibleStuffCompositionType: instances of
            #$Water are all pieces of substance with the chemical
            composition H20.   On the other hand , the collection of all
            pieces of ice [i.e., (#$SolidFn #$Water)] is not a
            #$TangibleStuffCompositionType, because membership in the
            collection of ice depends not solely on the substance&apos;s
            composition, but also on its physical state.  More sample
            instances of #$TangibleStuffCompositionType:  the
            collections #$Nylon, #$GasolineFuel, #$CottageCheese,
            #$FattyTissue, #$BabyPowder, #$Nitrogen, and #$Glass.</rdfs:comment>
        <guid>bd58864a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#ExistingStuffType"/>
        <daml:disjointWith rdf:resource="#TangibleStuffStateType"/>
    </daml:Class>
    <daml:Class rdf:ID="TangibleStuffStateType">
        <rdfs:label>tangible stuff state type</rdfs:label>
        <rdfs:comment>A collection of collections.  Each element of
            #$TangibleStuffStateType is a collection of all pieces of
            tangible stuff that are associated with only a single
            physical state (i.e., structural phase).  This includes
            collections both (1) of substances which exist only in one
            state (e.g., #$Diamond) and (2) of stuff which by definition
            has a certain state (e.g., ice, or gels of any composition).
            Thus, ice, water vapor, and liquid water--i.e., (#$LiquidFn
            #$Water)--would be represented by a
            #$TangibleStuffStateType.  Water itself, however, can exist
            in all three states; thus, the collection #$Water, which
            includes all instances of water regardless of state, is NOT
            a #$TangibleStuffStateType.  Elements of
            #$TangibleStuffStateType include the collections
            #$SolidTangibleThing, #$Air, #$Powder, #$Gel, #$Paste, and
            many others.  Any of the Cyc functions #$SolidFn,
            #$LiquidFn, or #$GaseousFn can be used to create a
            collection which #$isa #$TangibleStuffStateType.</rdfs:comment>
        <guid>be00c400-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="#ExistingStuffType"/>
        <daml:disjointWith rdf:resource="#TangibleStuffCompositionType"/>
    </daml:Class>
    <daml:Class rdf:ID="TangibleSubstancePredicate">
        <rdfs:label>tangible substance predicate</rdfs:label>
        <rdfs:comment>A collection of predicates.  Each element of
            #$TangibleSubstancePredicate is a predicate that is used to
            specify or describe the properties (usually physical
            properties) of tangible substances.  Examples:
            #$stateOfMatter, #$freezingPoint,
            #$physicalStructuralIntegrity, #$solubleIn.</rdfs:comment>
        <guid>bd58d7fc-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="#TangibleObjectPredicate"/>
    </daml:Class>
    <daml:Class rdf:ID="TangibleThing">
        <rdfs:label>tangible objects</rdfs:label>
        <rdfs:comment>The collection of things which are made of some
            sort of matter and whose nature is purely material--in the
            sense that they are not considered to have non-physical
            properties (such as encoded information). (Compare
            #$PartiallyTangible.)  Because almost any tangible object
            could be considered to have information content in a
            particular context, #$TangibleThing should have almost no
            subsets or instances in the #$BaseKB.  Material things which
            do have important non-physical aspects should be elements of
            #$PartiallyTangible instead.  Collections of material things
            whose elements could conceivably have non-physical aspects
            should be made subsets of #$PartiallyTangible.</rdfs:comment>
        <guid>bd590522-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdfs:subClassOf rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
        <daml:disjointWith rdf:resource="#PartiallyIntangible"/>
    </daml:Class>
    <daml:Class rdf:ID="Tank-Vehicle">
        <rdfs:label>tanks</rdfs:label>
        <rdfs:comment>The collection of all tanks, armored vehicles
            designed for military purposes, with mounted guns, heavy
            armor, and often tracked wheels.</rdfs:comment>
        <guid>c1007cbe-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#TransportationDevice-Vehicle"/>
    </daml:Class>
    <daml:Class rdf:ID="TastePerception">
        <rdfs:label>taste perception</rdfs:label>
        <rdfs:comment>The collection of sensory #$Perceivings in which a
            #$PerceptualAgent #$tastes some object, by means of the
            appropriate #$Sensor, and thereby acquires information about it.</rdfs:comment>
        <guid>bd58d619-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#Perceiving"/>
    </daml:Class>
    <daml:Class rdf:ID="TaxonomicSlot">
        <rdfs:label>taxonomic slots</rdfs:label>
        <rdfs:comment>A collection of predicates.  Each element of
            #$TaxonomicSlot is a binary predicate used in assertions
            indicating the position of a Cyc constant in one of
            Cyc&apos;s taxonomies (for #$Collections, #$Events, etc.).
            Examples: #$isa, #$genls, #$partitionedInto,
            #$coExtensional, #$disjointWith, #$hasMembers,
            #$subBeliefSystem, #$subGoals.</rdfs:comment>
        <guid>bd5880ca-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="http://www.daml.org/2001/03/daml+oil#Property"/>
    </daml:Class>
    <daml:Class rdf:ID="TaxonomicSlotForAnyUnit">
        <rdfs:label>taxonomic slot for any unit</rdfs:label>
        <rdfs:comment>A collection of predicates; a subset of
            #$TaxonomicSlot.  Each element of #$TaxonomicSlotForAnyUnit
            is a binary predicate that may be used to define the
            taxonomy of instances; i.e., the collection of binary
            predicates applicable to any term.  Examples: #$isa, #$generalizations.</rdfs:comment>
        <guid>bd589fea-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="#TaxonomicSlot"/>
    </daml:Class>
    <daml:Class rdf:ID="TaxonomicSlotForCollections">
        <rdfs:label>taxonomic slot for collections</rdfs:label>
        <rdfs:comment>A collection of predicates; a subset of
            #$TaxonomicSlot. Each element of
            #$TaxonomicSlotForCollections is a binary predicate used to
            form assertions that define the taxonomy of #$Collections by
            specifying relations between various collections.  Examples:
            #$genls, #$partitionedInto, #$coExtensional, #$covering, #$disjointWith.</rdfs:comment>
        <guid>bd59065c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="#TaxonomicSlot"/>
    </daml:Class>
    <daml:Class rdf:ID="Teaching">
        <rdfs:label>teaching events</rdfs:label>
        <rdfs:comment>One agent imparting learned knowledge to another.
            This may have #$subEvents of the student asking or
            responding to questions, but the teacher is the primary performer.</rdfs:comment>
        <guid>bd58b1e0-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#Communicating"/>
        <rdfs:subClassOf rdf:resource="#ServiceEvent"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
    </daml:Class>
    <daml:Class rdf:ID="TechnicalWorker">
        <rdfs:label>technical worker</rdfs:label>
        <rdfs:comment>A collection of persons; a subset of
            #$Professional.  Each element of #$TechnicalWorker is a
            professional who works in some branch of engineering,
            computers, mathematics or one of the natural sciences.
            Negative examples are #$MarketingPerson, #$Manager and #$Psychiatrist.</rdfs:comment>
        <guid>bea834b2-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#OccupationType"/>
        <rdfs:subClassOf rdf:resource="#Professional"/>
    </daml:Class>
    <daml:Class rdf:ID="TeethCleaning">
        <rdfs:label>teeth cleaning</rdfs:label>
        <rdfs:comment>A collection of events.  In each #$TeethCleaning
            event, an animal&apos;s teeth are cleaned.  In order to
            distinguish, e.g., professional teeth cleaning by a dental
            technician from daily personal care, different microtheories
            are used.  Consider just the frequencies of performing this
            action: in the #$HumanActivitiesMt, where a person brushes
            their own teeth as a subevent of #$DailyPersonalCleaning,
            this occurs once or twice per day.  In the
            #$ProviderOfServicePerspectiveMt, that is from the dental
            hygienist&apos;s point of view, it occurs about ten times
            per day.  In the #$RecipientOfServicePerspectiveMt, that is
            from the point of view of someone going to get their teeth
            cleaned at a dentist&apos;s office, it happens a couple
            times per year.</rdfs:comment>
        <guid>bd58a8f8-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#Cleaning"/>
    </daml:Class>
    <daml:Class rdf:ID="TemperateClimateCycle">
        <rdfs:label>temperate climate cycles</rdfs:label>
        <rdfs:comment>A collection of annual climate cycles.  Each
            element of #$TemperateClimateCycle is a year-long event
            consisting of weather occurring (typically) in terrestrial
            regions between (roughly) the Tropic of Cancer and the
            Arctic Circle in the Northern Hemisphere, and between the
            Tropic of Capricorn and the Antarctic Circle in the Southern
            Hemisphere.  Characteristics of a temperate climate include:
            four distinguishable seasons, Spring, Summer, Fall, and
            Winter, with variations in temperature and precipitation;
            overall moderate precipitation.</rdfs:comment>
        <guid>bd58b635-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ClimateCycleType"/>
        <rdfs:subClassOf rdf:resource="#AnnualClimateCycle"/>
    </daml:Class>
    <daml:Class rdf:ID="Temperature">
        <rdfs:label>temperatures</rdfs:label>
        <rdfs:comment>A collection of physical attributes.  Each element
            of #$Temperature is an amount of heat in a particular
            instance of #$PartiallyTangible.  Elements of #$Temperature
            may be either a fixed interval, such as 98.6 degrees
            Fahrenheit, or a range, such as #$HumanHabitableTemperature.
            See #$UnitOfTemperature for the units used by Cyc to measure temperatures.</rdfs:comment>
        <guid>bd589c7c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#FundamentalNumericAttributeType"/>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </daml:Class>
    <daml:Class rdf:ID="TemperatureChangingProcess">
        <rdfs:label>temperature changes</rdfs:label>
        <rdfs:comment>A collection of events.  Each
            #$TemperatureChangingProcess is an #$Event which has, as one
            of its significant effects, changing the #$Temperature of
            some object.  E.g., #$CookingFood is a subset of this
            collection.  A particular event in which somone uses a
            soldering iron to connect a resistor to a circuit board
            would be an element of this collection.  Note that a change
            in temperature is one of the kinds of intrinsic change which
            an object can undergo; i.e., #$TemperatureChangingProcess is
            a subset of #$IntrinsicStateChangeEvent.</rdfs:comment>
        <guid>bd58f9ad-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#IntrinsicStateChangeEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="TemporalObjectType">
        <rdfs:label>temporal object types</rdfs:label>
        <rdfs:comment>A collection of collections.  Each element of each
            element of #$TemporalObjectType is temporally object-like.
            Take an element of #$TemporalObjectType -- say COL.  Take an
            element of that -- say OBJ.  Imagine making a videotape of
            OBJ.  Now play back just a small piece of that videotape.
            It won&apos;t be an element of COL.  E.g., COL could be the
            set of events in which an orange is cut into quarters.  Say
            a videotape of that has been made of one such event, which
            lasted thirty seconds.  Now imagine some 5-second excerpt of
            that videotape.  That, in turn, is not a videotape of
            someone cutting up an orange into four pieces.  So the
            collection of all orange-quartering events is itself an
            element of #$TemporalObjectType; it is NOT an element of
            #$TemporalStuffType (q.v.).    If a collection COL #$isa
            #$TemporalObjectType, it is reasonable to state axioms about
            temporally extrinsic properties of COL&apos;s instances --
            properties such as duration, distance, cost, etc.  E.g., it
            makes sense to talk about the #$duration of a particular
            #$Event in which an orange is quartered.</rdfs:comment>
        <guid>bd58aadf-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="#ObjectType"/>
        <daml:disjointWith rdf:resource="#TemporalStuffType"/>
    </daml:Class>
    <daml:Class rdf:ID="TemporalPartSlot">
        <rdfs:label>temporal part slots</rdfs:label>
        <rdfs:comment>A collection of predicates.  Each element of
            #$TemporalPartSlot is a binary predicate used to relate two
            things which have temporal extent, asserting either that one
            thing is a temporal part of the second thing, or that one
            thing is a temporal composite that includes the second
            thing.  Examples: #$developmentalStages, #$subEvents,
            #$firstSubEvents, #$subAbstrac, #$manufacturingSteps,
            #$beforeActors, #$afterActors.</rdfs:comment>
        <guid>bd58834a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="#NonPhysicalPartPredicate"/>
    </daml:Class>
    <daml:Class rdf:ID="TemporalRelation">
        <rdfs:label>temporal relation</rdfs:label>
        <rdfs:comment>#$TemporalRelations specify relative positions of
            #$TemporalThings in time.  #$PrimitiveTemporalRelations
            (such as #$after) interrelate time points, and
            #$ComplexTemporalRelations (such as #$postEvents and
            #$laterSubAbstractions) interrelate more complicated
            temporal objects such as a pair of events, a pair of
            tangible objects, etc.</rdfs:comment>
        <guid>bd58b887-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="http://www.daml.org/2001/03/daml+oil#Property"/>
        <rdfs:subClassOf rdf:resource="#ExtensionalRepresentationPredicate"/>
    </daml:Class>
    <daml:Class rdf:ID="TemporalStuffType">
        <rdfs:label>temporal stuff types</rdfs:label>
        <rdfs:comment>A collection of collections.  Each element of each
            element of #$TemporalStuffType is temporally substance-like.
            Consider, e.g., #$AnimalWalkingProcess, the set of all
            walking events.  Consider a particular walking event.
            Videotape it.  Play back a few seconds of that videotape,
            showing one of many #$timeSlices of the original walking
            event.  That shorter video is still clearly going to be a
            video of a walking event.  So the collection
            #$AnimalWalkingProcess (the set of all walking events) is an
            element of #$TemporalStuffType; it is NOT an element of
            #$TemporalObjectType (q.v.).    Of course, there is a
            #$granuleOfTime for #$AnimalWalkingProcess, namely,
            #$TakingAStep, such that any #$timeSlices shorter than that
            are likely not to be considered real walking events.   This
            is analogous to granule-size for physical substance types
            such as peanut butter (the granules there are a peanut
            piece, a glob of peanut oil, etc.) or wood (the granule
            there is an individual plant cell).    More esoterically,
            consider a time slice of a person.   `Albert Einstein while
            at Princeton&apos; was still a person.  So #$Person (the set
            of all people) is an element of #$TemporalStuffType.  All
            tangible objects are temporally stuff-like in this fashion.
            If a collection COL #$isa #$TemporalStuffType, it is
            reasonable to state axioms about the temporally intrinsic
            properties of COL&apos;s instances --- properties such as
            rate of speed, cost per pound, kinds of actors, etc.</rdfs:comment>
        <guid>bd58ad37-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#StuffType"/>
        <daml:disjointWith rdf:resource="#TemporalObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="TemporalThing">
        <rdfs:label>things that exists in time</rdfs:label>
        <rdfs:comment>#$TemporalThing is the collection of all things
            which have a particular temporal extent, things about which
            one might sensibly ask `When?&apos;.  #$TemporalThing
            therefore includes many things, such as actions, tangible
            objects, agreements, and abstract pieces of time. Some
            things are NOT instances of #$TemporalThing because they are
            abstract, timeless, etc. -- such as a mathematical set, an
            attribute, an integer, etc.  This collection is designated #$MathematicalOrComputationalThing.</rdfs:comment>
        <guid>bd5880c4-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
        <daml:disjointWith rdf:resource="#MathematicalOrComputationalThing"/>
        <daml:disjointWith rdf:resource="#AttributeValue"/>
    </daml:Class>
    <daml:Class rdf:ID="TemporallyDisjointIntervalType">
        <rdfs:label>temporally disjoint interval type</rdfs:label>
        <rdfs:comment>(#$isa X #$TemporallyDisjointIntervalType) means
            that any two distinct instances of X are
            #$temporallyDisjoint.  It is true that (#$isa #$Wednesday
            #$TemporallyDisjointIntervalType because no Wednesday can
            temporally intersect any other (distinct) Wednesday.  [See
            also #$MutuallyDisjointIntervalCollection.]</rdfs:comment>
        <guid>be011303-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="#TemporalObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="TemporaryChangeOfUserRights">
        <rdfs:label>temporary change of user rights</rdfs:label>
        <rdfs:comment>A collection of events; a subset of
            #$ChangeInUserRights.  In an instance of
            #$TemporaryChangeOfUserRights, one agent temporarily gives
            up user rights over some object (see #$UserRightsAttribute),
            while another agent temporarily gains some user rights over
            that object.  This occurs in renting, loaning, or sharing of things.</rdfs:comment>
        <guid>bd58e056-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#Transaction"/>
        <rdfs:subClassOf rdf:resource="#ChangeInUserRights"/>
    </daml:Class>
    <GeneralMicrotheory rdf:ID="TemporaryEnglishParaphraseMt">
        <rdfs:label>temporary english paraphrase mt</rdfs:label>
        <rdfs:comment>This is a temporary MT for holding paraphrase
            assertions prior to review, after which time they will be
            moved to #$EnglishParaphraseMt</rdfs:comment>
        <guid>bdaa4b0e-9c29-11b1-9dad-c379636f7270</guid>
    </GeneralMicrotheory>
    <WorkStatus rdf:ID="TemporaryWork">
        <rdfs:label>temporary work</rdfs:label>
        <rdfs:comment>An attribute; an element of #$WorkStatus.  The
            attribute of being a temporary worker for an organization.</rdfs:comment>
        <guid>bd58b2af-9c29-11b1-9dad-c379636f7270</guid>
    </WorkStatus>
    <daml:Class rdf:ID="TenderObject">
        <rdfs:label>items of legal tender</rdfs:label>
        <rdfs:comment>A collection of  objects.  Each element of
            #$TenderObject is an item presented  by an agent in
            instances of #$Paying or #$Spending.  Typical examples
            include cash, checks, credit cards, travellers&apos;s
            checks.  Unusual but possible tender objects could be gold,
            goats, or golf balls.</rdfs:comment>
        <guid>bd58c470-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#LiquidAsset"/>
        <rdfs:subClassOf rdf:resource="#InformationBearingObject"/>
    </daml:Class>
    <daml:Class rdf:ID="TensileStrength">
        <rdfs:label>tensile strength</rdfs:label>
        <rdfs:comment>A collection of attributes; a subset of
            #$PhysicalAttribute.  Each element of #$TensileStrength
            describes a specific capacity of a physical object to
            withstand a force pulling it apart.  The higher the tensile
            strength of the object, the higher the force required to
            pull the object apart.  Different tensile strengths may be
            represented using a #$GenericValueFunction.  Tensile
            strengths of objects are indicated with the predicate #$tensileStrengthOfSubstance.</rdfs:comment>
        <guid>bd589ee3-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DerivedNumericAttributeType"/>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </daml:Class>
    <daml:Class rdf:ID="TerminalPhysiologicalCondition">
        <rdfs:label>terminal conditions</rdfs:label>
        <rdfs:comment>A collection of ailments which are distinguished
            by the shared characteristic that if left untreated, those
            ailments will certainly cause a patient to die -- and may
            eventually do so despite treatment.  Subsets of this
            collection include: #$Diabetes, #$Cancer, #$Botulism, and
            #$Rabies. Note that this does not mean: `are 100% likely to
            lead to death if untreated&apos;.  It does not mean `the
            organism will not seek treatment elsewhere,.  Also note that
            this is somewhat context dependent.</rdfs:comment>
        <guid>c0fd6503-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PhysiologicalConditionType"/>
        <rdfs:subClassOf rdf:resource="#LifeThreateningCondition"/>
    </daml:Class>
    <daml:Class rdf:ID="TernaryFunction">
        <rdfs:label>ternary function</rdfs:label>
        <rdfs:comment>#$TernaryFunction is the collection of all Cyc
            functions which take three arguments.</rdfs:comment>
        <guid>c12bfd14-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#TernaryRelation"/>
        <rdfs:subClassOf rdf:resource="#Function-Denotational"/>
    </daml:Class>
    <daml:Class rdf:ID="TernaryPredicate">
        <rdfs:label>ternary predicates</rdfs:label>
        <rdfs:comment>#$TernaryPredicate is the collection of all Cyc
            predicates which take three arguments.</rdfs:comment>
        <guid>bd588101-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
        <rdfs:subClassOf rdf:resource="#TernaryRelation"/>
    </daml:Class>
    <daml:Class rdf:ID="TernaryRelation">
        <rdfs:label>ternary relation</rdfs:label>
        <rdfs:comment>The collection of all #$Relations of arity 3 in
            CycL.  This  collection was created in order to implement
            automatic conclusion of  arity for relations in CycL,
            regardless of whether they are predicates  or functions.</rdfs:comment>
        <guid>c02b14f0-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#FixedArityRelation"/>
    </daml:Class>
    <daml:Class rdf:ID="TerrainAttribute">
        <rdfs:label>terrain attribute</rdfs:label>
        <rdfs:comment>A collection of attributes.  Each element of
            #$TerrainAttribute is an attribute used for describing the
            terrain in a geographic region.  Examples: #$USCS-Code-RK,
            #$Sandy-SoilAttribute, #$RuggedTerrain, #$Desertlike,
            #$SnowCovered, #$HighMountainous.</rdfs:comment>
        <guid>bd5902c7-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#AttributeType"/>
        <rdfs:subClassOf rdf:resource="#AttributeValue"/>
    </daml:Class>
    <daml:Class rdf:ID="TerrestrialDirection">
        <rdfs:label>terrestrial directions</rdfs:label>
        <rdfs:comment>The collection of directions used to describe the
            orientation of objects on or near the surface of the Earth.
            Includes terrestrial directions related to compass points
            (e.g., #$East-Directly) and to the gravitational vector
            (e.g., #$Down-Directly, #$VerticalDirection).  Note that
            assertions in different terrestrial contexts can be
            inconsistent in a neutral context: East in China points in a
            different direction than East in New York!</rdfs:comment>
        <guid>bd588a62-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#UnitVectorInterval"/>
    </daml:Class>
    <FrameOfReference rdf:ID="TerrestrialFrameOfReference">
        <rdfs:label>terrestrial frame of reference</rdfs:label>
        <rdfs:comment>The terrestrial frame of reference is the unique
            individual #$FrameOfReference that generally regards the
            surface of the #$PlanetEarth as fixed in the background
            space.  It permits fixed notions of #$VerticalOrientation
            and #$HorizontalOrientation.  There are multiple standard
            coordinate systems based on the
            #$TerrestrialFrameOfReference, including #$latitude and
            #$longitude, Earth-Centered Cartesian, and others.  Various
            local frames of reference and coordinate systems assume the #$TerrestrialFrameOfReference.</rdfs:comment>
        <guid>bd5905ed-9c29-11b1-9dad-c379636f7270</guid>
    </FrameOfReference>
    <daml:Class rdf:ID="TerrestrialOrganism">
        <rdfs:label>terrestrial organism</rdfs:label>
        <rdfs:comment>The collection of organisms adapted to life on
            land, out of water.  Elements of #$TerrestrialOrganism spend
            all or most of their time out of the water, in air, either
            on the land surface or under it.  #$TerrestrialOrganism
            includes, for example, members of its subsets #$Elephant,
            #$Ladybug, #$Bird, #$Person, etc.</rdfs:comment>
        <guid>bd590841-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#OrganismTypeByHabitat"/>
        <rdfs:subClassOf rdf:resource="#Organism-Whole"/>
    </daml:Class>
    <daml:Class rdf:ID="Territory">
        <rdfs:label>territories</rdfs:label>
        <rdfs:comment>A collection of geopolitical entities.  Each
            element of #$Territory is a geopolitical region which is
            distinct from, but dependent on and controlled by, another
            geopolitical entity.  Examples: #$PuertoRico,
            #$BritishAntarcticTerritory, #$GalapagosIslands, #$RyukyuIslandsTerritory.</rdfs:comment>
        <guid>bd58a1dc-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#ControlledLand"/>
        <rdfs:subClassOf rdf:resource="#CountrySubsidiary"/>
    </daml:Class>
    <daml:Class rdf:ID="TextGroup">
        <rdfs:label>texts</rdfs:label>
        <rdfs:comment>A collection of #$AbstractInformationStructures.
            Each element of #$TextGroup is associated with a
            #$CharacterString which forms a &apos;natural&apos; or
            meaningful group, at or above the  level of a word, a
            multi-character symbol in a #$ComputerProgram-CW, or a chord
            in a #$MusicalText. Thus, &apos;er#q2&apos; would be a
            #$CharacterString not represented by a #$TextGroup, whereas
            the #$Sentence you are now reading is represented by a
            #$TextGroup, as is a paragraph, etc. Note that a #$TextGroup
            is the abstract sequence of symbols, not the tangible
            encoding of them.</rdfs:comment>
        <guid>bfae4fb7-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="TextMicrotheory">
        <rdfs:label>text microtheory</rdfs:label>
        <rdfs:comment>The collection of Microtheories each of which
            contains assertions that convey the information content of a
            particular text.  The propositional content of a text is a
            #$PropositionalInformationThing, and it forms a #$TextMicrotheory.</rdfs:comment>
        <guid>c10b7016-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#PropositionalInformationThing"/>
    </daml:Class>
    <daml:Class rdf:ID="TextileProduct">
        <rdfs:label>textiles</rdfs:label>
        <rdfs:comment>A collection of tangible products.  Each element
            of #$TextileProduct is a product made by spinning, weaving,
            knitting, wrapping, pressing, or other processes used to
            form fibers into usable materials such as cloth or line.
            Examples include elements of the subsets #$Yarn, #$Rope, and #$CottonCloth.</rdfs:comment>
        <guid>bd589b53-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdfs:subClassOf rdf:resource="#Artifact"/>
        <rdfs:subClassOf rdf:resource="#SolidTangibleProduct"/>
        <daml:disjointWith rdf:resource="#Leather"/>
    </daml:Class>
    <daml:Class rdf:ID="TextualMaterial">
        <rdfs:label>texts</rdfs:label>
        <rdfs:comment>A collection of information bearing things (IBTs).
            Each element of #$TextualMaterial is an IBT whose
            informational content is encoded in some instance of
            #$CommunicationConvention which is a linear symbolic
            language; e.g., a newspaper printed in English written with
            the Roman alphabet; a book printed in English using Braille;
            or a poster written in Chinese using characters.  Textual
            material always includes some physical representation of one
            or more elements of #$CharacterString (which are abstract).
            Textual materials may be tangible objects, such as
            newspapers, but also may include intangibles such as
            patterns of light projecting words onto a wall.  The subsets
            of #$TextualMaterial are multifarious, including, e.g.,
            #$GroceryList, #$W2-Form, #$RestaurantMenu, #$GrantProposal,
            #$WillAndTestament, #$BusinessCard, #$MusicalText, #$BalanceSheet.</rdfs:comment>
        <guid>bd5904c7-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#StuffType"/>
        <rdfs:subClassOf rdf:resource="#InformationBearingThing"/>
        <daml:disjointWith rdf:resource="#Agent"/>
    </daml:Class>
    <CoreConstant rdf:ID="TheEmptyList">
        <rdfs:label>the empty list</rdfs:label>
        <rdfs:comment>#$TheEmptyList denotes the empty list--the list
            that has no members at all.  Note that every list that has
            no members is the same as #$TheEmptyList, i.e.,
            #$TheEmptyList is the only list whose length is 0.  Note
            also that #$TheEmptyList is a sublist of every list (see
            #$sublists).  Note, finally, that #$TheEmptyList is not the
            same as #$TheEmptySet.</rdfs:comment>
        <guid>bd79c885-9c29-11b1-9dad-c379636f7270</guid>
    </CoreConstant>
    <TimePoint rdf:ID="TheStartOfTheCommonEra">
        <rdfs:label>the start of the common era</rdfs:label>
        <rdfs:comment>This is the instant of time between the years BC
            and AD.</rdfs:comment>
        <guid>bd58a435-9c29-11b1-9dad-c379636f7270</guid>
    </TimePoint>
    <daml:Class rdf:ID="TheTerm">
        <rdfs:label>the term</rdfs:label>
        <rdfs:comment>A special kind of term that allows back-reference
            to any individual thing that satisfies the constraints on
            the #$TheTerm.  E.g., &apos;Suppose a cat walks into a fish
            store.  The cat is likely to get into a lot of
            trouble.&apos;  &apos;The cat&apos; in the second sentence
            refers back to &apos;a cat&apos; in the first; i.e., any cat
            that walks into a fish store.  In Cyc, the constraints for a
            #$TheTerm in a given context are given by use of the
            predicate #$theTermConstraints on the unit representing that
            context.  In lifting assertions out of that context, the
            constraints are added as antecedents.</rdfs:comment>
        <guid>bd5880cf-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
    </daml:Class>
    <daml:Class rdf:ID="ThermalConductivity">
        <rdfs:label>thermal conductivity</rdfs:label>
        <rdfs:comment>A collection of attributes; a subset of
            #$PhysicalAttribute.  Each element of #$ThermalConductivity
            represents a specific ability of some physical object to
            conduct heat; e.g., #$ConductsHeatPoorly,
            #$ConductsSomeHeat, #$ConductsHeatWell.  An individual
            object&apos;s #$ThermalConductivity is indicated with the
            predicate #$thermalConductivityOfObject.</rdfs:comment>
        <guid>be00cd9e-9c29-11b1-9dad-c379636f7270</guid>
        <rdfs:subClassOf rdf:resource="#PhysicalAttribute"/>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </daml:Class>
    <daml:Class rdf:ID="Thing">
        <rdfs:label>things</rdfs:label>
        <rdfs:comment>#$Thing is the universal set:  the collection of
            everything!  Every Cyc constant in the Knowledge Base is a
            member of this collection; in the prefix notation of the
            language CycL, we express that fact as (#$isa CONST
            #$Thing).  Thus, too, every collection in the Knowledge Base
            is a subset of the collection #$Thing; in CycL, we express
            that fact as (#$genls COL #$Thing).  See #$isa and #$genls
            for further explanation of those relationships.      Note:
            There are even a few collections, such as #$CharacterString
            and #$Integer, which have a #$defnSufficient that recognizes
            non-constants (such as strings and numbers) as instances of #$Thing.</rdfs:comment>
        <guid>bd5880f4-9c29-11b1-9dad-c379636f7270</guid>
        <daml:sameClassAs rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
    </daml:Class>
    <daml:Class rdf:ID="Thinking">
        <rdfs:label>think</rdfs:label>
        <rdfs:comment>A collection of events, a subset of
            #$StrictlyMentalEvent.  Each element of #$Thinking is a
            mental process in a general sense that assumes
            consciousness, has some propositional content and differs
            from experiencing a sensation or emotion.  The collection
            includes both atomic mental events of having a single
            thought, with propositional content, and composite mental
            events involving the processing of thoughts.  Thinking need
            not necessarily be purposeful mental activity.  Obsessive
            thoughts and thinking of a solution to a math problem would
            both be examples of events that belong in this collection.</rdfs:comment>
        <guid>bd58875c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
    </daml:Class>
    <ThreeDimensionalShapeAttribute rdf:ID="ThreeDimensional">
        <rdfs:label>three dimensional</rdfs:label>
        <rdfs:comment>The attribute of being three-dimensional, it
            serves as a #$genlAttributes to any instance of
            #$ThreeDimensionalShape.  Note that spatial things might
            have this attribute in some microtheories and fail to have
            it in others insofar as the size of its third dimension is
            small enough to be disregarded in some situations but
            considered in others.  For instance, we might consider a
            decal to be two dimensional in most situations, but
            three-dimensional in situations where the thickness is
            relevant, e.g., considering what an ant could traverse.</rdfs:comment>
        <guid>c0f82cfc-9c29-11b1-9dad-c379636f7270</guid>
    </ThreeDimensionalShapeAttribute>
    <daml:Class rdf:ID="ThreeDimensionalShape">
        <rdfs:label>three dimensional shapes</rdfs:label>
        <rdfs:comment>A subset of #$GeometricThing. Each element of
            #$ThreeDimensionalShape is a three-dimensional object.
            Examples include spatially localized objects, such as the
            Pentagon, as well as abstract three-dimensional shapes.</rdfs:comment>
        <guid>c0fbbe61-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ShapeType"/>
        <rdfs:subClassOf rdf:resource="#GeometricThing"/>
        <daml:disjointWith rdf:resource="#TwoDimensionalShape"/>
        <daml:disjointWith rdf:resource="#SpacePoint"/>
        <daml:disjointWith rdf:resource="#Line"/>
    </daml:Class>
    <daml:Class rdf:ID="ThreeDimensionalShapeAttribute">
        <rdfs:label>three dimensional shape attribute</rdfs:label>
        <rdfs:comment>The collection of all instances of
            #$ShapeAttribute that are unique to three-dimensional
            objects.  For instance, #$Round is not an instance of
            #$ThreeDimensionalShapeAttribute as it can be held by
            objects that are not three dimensional.  However,
            #$Spherical is a three dimensional shape attribute as being
            three-dimensional is a necessary condition for being spherical.</rdfs:comment>
        <guid>bff13ae7-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#SiblingDisjointAttributeType"/>
        <rdfs:subClassOf rdf:resource="#ShapeAttribute"/>
    </daml:Class>
    <daml:Class rdf:ID="ThreeDimensionalShapeType">
        <rdfs:label>three dimensional shape type</rdfs:label>
        <rdfs:comment>A collection of collections.  Each element of
            #$ThreeDimensionalShapeType is a collection of things which
            are subsets of #$ThreeDimensionalShape.  Examples:
            #$CylinderShape, #$Rectangular3DShape.</rdfs:comment>
        <guid>c0f46ec5-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#ShapeType"/>
        <daml:disjointWith rdf:resource="#TwoDimensionalShapeType"/>
    </daml:Class>
    <daml:Class rdf:ID="ThreeStoryBuilding">
        <rdfs:label>three story buildings</rdfs:label>
        <rdfs:comment>Collection of all three story buildings.</rdfs:comment>
        <guid>bd58c691-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Building"/>
        <daml:disjointWith rdf:resource="#OneStoryBuilding"/>
        <daml:disjointWith rdf:resource="#TwoStoryBuilding"/>
    </daml:Class>
    <daml:Class rdf:ID="Time-Quantity">
        <rdfs:label>times</rdfs:label>
        <rdfs:comment>#$Time-Quantity is a physical   quantity possessed
            by #$TemporalThings.  An #$Event transpires   over a certain
            amount of #$Time-Quantity, a #$SomethingExisting   exists
            for a lifetime which is a certain amount of #$Time-Quantity,
            and of course an abstract #$TimeInterval has a duration
            which   is a certain amount of #$Time-Quantity.   The
            standard unit of   #$Time-Quantity in Cyc is
            #$SecondsDuration (qv) but there can   be and are many other
            ways to specify an amount of time; e.g.,   with other
            #$UnitOfMeasure instances such as #$WeeksDuration   and
            #$YearsDuration, and with reified quantities of (instances
            of) #$Time-Quantity such as #$LongTime, #$Immediately,
            #$AFewDecadesDuration, etc.</rdfs:comment>
        <guid>bd5880a5-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#FundamentalNumericAttributeType"/>
        <rdfs:subClassOf rdf:resource="#PhysicalAttribute"/>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </daml:Class>
    <daml:Class rdf:ID="TimeInterval">
        <rdfs:label>periods of time</rdfs:label>
        <rdfs:comment>#$TimeInterval is a subset of #$TemporalThing.
            Each #$TimeInterval can be characterized fully just by
            specifying its temporal attributes.  Anything which has a
            temporal extent is an instance of #$TemporalThing, but if
            that is essentially ALL that it has, then it is also a
            #$TimeInterval. In this respect #$TimeInterval and
            #$SpaceRegion are similar; they both can be used to talk
            about time and space as &apos;dimensions&apos;.   For
            example, `the year 1967&apos; is a just a #$TimeInterval:
            although many interesting things happened during that year,
            the year itself is completely defined by its temporal
            extent.  `Neil Armstrong Walking on the Moon&apos; is an
            #$Event, not a #$TimeInterval, since it would be defined by
            many non-temporal assertions. And of course, `Neil
            Armstrong&apos; is a #$SomethingExisting, not a
            #$TimeInterval, but like all instances of
            #$SomethingExisting, he does have temporal extent and is
            therefore a #$TemporalThing.  One could, in principle,
            separately reify (name) the #$TimeInterval which is the
            period of existence of any #$SomethingExisting, or the
            period of time during which any #$Event occurred, but in
            practice that is rarely useful.  Since they all have an
            implicit #$TimeInterval associated with them, any predicates
            which one might apply to time intervals can also be applied
            to a football game, a football, etc.  E.g., we can talk
            about the #$startingPoint of a football game, or for that
            matter the #$startingPoint of the football itself (the
            moment of its creation).</rdfs:comment>
        <guid>bd5880c3-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#IntangibleIndividual"/>
        <rdfs:subClassOf rdf:resource="#TemporalThing"/>
        <daml:disjointWith rdf:resource="#SomethingExisting"/>
        <daml:disjointWith rdf:resource="#Event"/>
        <daml:disjointWith rdf:resource="#SpatialThing"/>
        <daml:disjointWith rdf:resource="#Microtheory"/>
        <daml:disjointWith rdf:resource="#LinguisticObject"/>
        <daml:disjointWith rdf:resource="#Language"/>
        <daml:disjointWith rdf:resource="#Product"/>
    </daml:Class>
    <daml:Class rdf:ID="TimeOfDay">
        <rdfs:label>time of day</rdfs:label>
        <rdfs:comment>The collection of all temporal intervals marking
            times of the day.  This includes the twenty-four clock
            hours, and also longer and shorter pieces of time.</rdfs:comment>
        <guid>bd5886f5-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#TimeInterval"/>
    </daml:Class>
    <daml:Class rdf:ID="TimeOfDay-AM">
        <rdfs:label>AMs</rdfs:label>
        <rdfs:comment>The collection of half-days from Midnight to Noon.
            See #$CalendarDay.</rdfs:comment>
        <guid>c0fddfdd-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TimeOfDayType"/>
        <rdfs:subClassOf rdf:resource="#TimeOfDay"/>
    </daml:Class>
    <daml:Class rdf:ID="TimeOfDay-PM">
        <rdfs:label>PMs</rdfs:label>
        <rdfs:comment>The collection of half-days from Noon to Midnight.
            See #$CalendarDay.</rdfs:comment>
        <guid>c0fde0db-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TimeOfDayType"/>
        <rdfs:subClassOf rdf:resource="#TimeOfDay"/>
    </daml:Class>
    <daml:Class rdf:ID="TimeOfDayType">
        <rdfs:label>times of day</rdfs:label>
        <rdfs:comment>A collection of collections, whose elements are
            some class of time of day, such as #$TimeOfDay-PM,
            #$TimeOfDay-9AM, #$TimeOfDay-MidnightHour, and so on.</rdfs:comment>
        <guid>bd588673-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#ConventionalClassificationType"/>
    </daml:Class>
    <daml:Class rdf:ID="TimePoint">
        <rdfs:label>time point</rdfs:label>
        <rdfs:comment>A #$TimePoint is a piece of time which has an
            infinitely small duration.  In Cyc&apos;s basic
            representation of time, all time is like an infinite
            straight line, and any #$TimePoint is like a point on that
            line.  Many temporal attributes of a #$TemporalThing may be
            described in terms of time points; e.g., its
            #$startingPoint.  A #$TimePoint can also be contextual, such
            as #$Now.</rdfs:comment>
        <guid>bd58ca05-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#TimeInterval"/>
        <daml:disjointWith rdf:resource="#CalendarHour"/>
        <daml:disjointWith rdf:resource="#CalendarYear"/>
        <daml:disjointWith rdf:resource="#FiscalYear"/>
        <daml:disjointWith rdf:resource="#CalendarSecond"/>
        <daml:disjointWith rdf:resource="#AcademicTrimester"/>
        <daml:disjointWith rdf:resource="#CalendarCentury"/>
        <daml:disjointWith rdf:resource="#AcademicQuarter"/>
        <daml:disjointWith rdf:resource="#CalendarMonth"/>
        <daml:disjointWith rdf:resource="#CalendarDecade"/>
        <daml:disjointWith rdf:resource="#CalendarHalfCentury"/>
        <daml:disjointWith rdf:resource="#FiscalQuarter"/>
        <daml:disjointWith rdf:resource="#CalendarDay"/>
        <daml:disjointWith rdf:resource="#CalendarMinute"/>
        <daml:disjointWith rdf:resource="#CalendarSeason"/>
        <daml:disjointWith rdf:resource="#CalendarQuarter"/>
        <daml:disjointWith rdf:resource="#AcademicYear"/>
        <daml:disjointWith rdf:resource="#AcademicSemester"/>
    </daml:Class>
    <daml:Class rdf:ID="Title">
        <rdfs:label>titles</rdfs:label>
        <rdfs:comment>The collection of all titles: proper nouns (noun
            phrases) that relate to a person&apos;s status and/or
            function/role in an organization.  E.g.,
            #$SeniorVicePresident-Title, #$MemberOfTechnicalStaff-Title,
            #$Reverend-Title, #$Father-Title, #$Miss, etc.  Note that
            this concept is not (closely) related to the title of a book
            or work of art, nor to the nicknames for a place, etc.</rdfs:comment>
        <guid>bd58acdd-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#LinguisticObjectType"/>
        <rdfs:subClassOf rdf:resource="#LinguisticObject"/>
    </daml:Class>
    <daml:Class rdf:ID="Tool">
        <rdfs:label>tools</rdfs:label>
        <rdfs:comment>A collection of devices; a subset of
            #$PhysicalDevice.  An instance of   #$Tool is a device which
            is used by people to   manipulate and/or alter other objects
            or the immediate  environment in some way (hence, it does
            not include  #$PomPoms). #$Tools are also typically
            controlled by  their user during use (see
            #$Device-UserControlled)  and can be used more than once
            (and is thus   disjoint with the collection
            #$Device-OneTimeUse).  #$Tool includes   devices used in
            many different activities.    A sampling of subsets shows
            some of that variety:   #$WoodworkingTool, #$CarpentryTool,
            #$PlumbingTool, some kinds of  #$MedicalDevices (but not
            all!), #$CleaningImplement, #$WritingImplement.</rdfs:comment>
        <guid>c0fce764-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#PhysicalDevice"/>
    </daml:Class>
    <daml:Class rdf:ID="TopSide">
        <rdfs:label>tops</rdfs:label>
        <rdfs:comment>The collection of all the entire top sides (as
            conventionally understood) of all objects that have distinct
            #$Sides, one of which faces up.</rdfs:comment>
        <guid>bd58c4a5-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#RegionType"/>
        <rdfs:subClassOf rdf:resource="#Side"/>
    </daml:Class>
    <daml:Class rdf:ID="TopographicalFeature">
        <rdfs:label>topographical features</rdfs:label>
        <rdfs:comment>A collection of geographical regions.  Each
            element of #$TopographicalFeature is a three dimensional
            feature of a planet&apos;s surface, typically with
            boundaries defined by formations of rock, dirt, water, etc.,
            or by significant changes in elevation.  Some important
            subsets include the collections #$Mountain, #$MountainRange,
            #$Peninsula, #$Harbor, #$Shoreline, #$Arroyo.  Collections
            of regions defined by the presence of human artifacts (e.g.,
            #$CitySkyline) or ecological characteristics (e.g.,
            #$Forest-Wild) do NOT belong among the subsets of
            #$TopographicalFeature.  Examples of #$TopographicalFeature:
            #$KyushuIsland-Japan, #$SaintThomas-Island, #$LakeErie,
            #$VictoriaFalls, #$MalayPeninsula.</rdfs:comment>
        <guid>bd58ce45-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#GeographicalRegion"/>
        <rdfs:subClassOf rdf:resource="#SurfaceOnTangibleObject"/>
        <rdfs:subClassOf rdf:resource="#OutdoorLocation"/>
    </daml:Class>
    <daml:Class rdf:ID="Torso">
        <rdfs:label>torsos</rdfs:label>
        <rdfs:comment>The collection of all human torsos.  A #$Torso is
            the main portion of the person&apos;s body, and one can
            conceive of a human body as a torso to which are connected
            the head and various appendages (#$Appendage-AnimalBodyPart).</rdfs:comment>
        <guid>bd59098e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#UniqueAnatomicalPartType"/>
        <rdf:type rdf:resource="#AnimalBodyPartType"/>
        <rdfs:subClassOf rdf:resource="#BiologicalLivingObject"/>
    </daml:Class>
    <daml:Class rdf:ID="TotalOrdering">
        <rdfs:label>total ordering</rdfs:label>
        <rdfs:comment>The collection of all those #$PartialOrdering
            ORDER in which the ordering relation R orders elements of
            the #$baseSet S of ORDER into a single line.  A
            #$TotalOrdering is sometimes called a &apos;linear
            ordering&apos; or a &apos;chain&apos;.  A #$PartialOrdering
            ORDER is a #$TotalOrdering if all elements of the #$baseSet
            S of ORDER are comparable by the ordering relation R of
            ORDER, i.e., for any X and Y in S, either R(X Y) or R(Y X).
            For example, if you take a set of real numbers and the usual
            &apos;greater than or equal to&apos; relation among these
            numbers, you have a #$TotalOrdering.  Note that if you want
            a &apos;strict line&apos;, i.e., if you want the ordering
            relation in a total ordering to be irreflexive, see #$TotalOrdering-Strict.</rdfs:comment>
        <guid>bf4734b2-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#TreeOrdering"/>
    </daml:Class>
    <daml:Class rdf:ID="TotalOrdering-Strict">
        <rdfs:label>total ordering - strict</rdfs:label>
        <rdfs:comment>The collection of all those
            #$PartialOrdering-Strict ORDER in which the ordering
            relation R orders elements of the #$baseSet S of ORDER into
            a strict line.  A #$TotalOrdering is sometimes called a
            &apos;strict linear ordering&apos; or a &apos;chain&apos;.
            A #$PartialOrdering-Strict ORDER is a #$TotalOrdering-Strict
            if all elements of the #$baseSet S of ORDER are comparable
            be the ordering relation R of ORDER, i.e., if X and Y are
            elements of S, then either R(X Y) or X = Y or R(Y X).  For
            example, take any set of real numbers with the usual
            &apos;smaller than&apos; relation among those numbers, you
            get yourself a #$TotalOrdering-Strict.  If you want a the
            order relation in a total ordering to be reflexive, see #$TotalOrdering.</rdfs:comment>
        <guid>be4967b0-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#TreeOrdering-Strict"/>
    </daml:Class>
    <daml:Class rdf:ID="TouchPerception">
        <rdfs:label>touches</rdfs:label>
        <rdfs:comment>The collection of sensory-perceptual events
            (#$Perceivings) in which a #$PerceptualAgent perceives
            (acquires information) by touch.</rdfs:comment>
        <guid>bd58ea57-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#Perceiving"/>
    </daml:Class>
    <daml:Class rdf:ID="Train-TransportationDevice">
        <rdfs:label>trains</rdfs:label>
        <rdfs:comment>The collection of all trains, the transportation
            devices that run on #$Railways and consist of multiple
            #$TrainCars coupled together.</rdfs:comment>
        <guid>bd58c825-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="TrainCar">
        <rdfs:label>train cars</rdfs:label>
        <rdfs:comment>The collection of train cars (or train carriages),
            non-motored wheeled vehicles that run on #$Railways.  When
            they are to be moved they are coupled together to form
            trains pulled by train engines.  There are freight
            TrainCars, and passenger TrainCars for transporting people.</rdfs:comment>
        <guid>bd5893b0-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="TrainEngine">
        <rdfs:label>locomotives</rdfs:label>
        <rdfs:comment>The collection of all train engines, each being a
            fuel-powered, non-steerable, wheeled vehicle that runs on
            #$Railway tracks, and has enough power to pull or push a
            group of #$TrainCars with it.</rdfs:comment>
        <guid>bd92500c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdf:type rdf:resource="#ProductType"/>
    </daml:Class>
    <daml:Class rdf:ID="Trajectory">
        <rdfs:label>trajectories</rdfs:label>
        <rdfs:comment>The collection of all trajectories of moving
            objects: each instance of #$Trajectory is the individual
            spatial region consisting of the points in space through
            which an object passes during a #$Movement-TranslationEvent.
            A trajectory may or may not follow some pre-existing or
            pre-defined path (#$Path-Generic).  If it does follow one or
            more such paths, it determines a #$Traversal of those paths.
            A #$Trajectory is understood and defined as a spatial line
            with one of the two possible directions of motion along it.
            It is considered as being a part of some stationary
            background space (thus, in most contexts, a #$Trajectory
            cannot itself &apos;move&apos;).  Unlike a #$Path-Generic, a
            #$Trajectory (or a #$Traversal) can cross itself any number
            of times, and go back along itself, cycle over and over
            again, etc.  If there is a #$Movement-TranslationEvent, then
            that event always has a #$Trajectory; it is linked to its
            #$Trajectory by the #$ActorSlots #$trajectory-Complete and
            possibly #$trajectory-Partial.  In most contexts, a
            #$Trajectory will be a line (or rather a one-manifold)
            through space as traced by some designated point within the
            moving object (e.g., the center of gravity), but the
            collection #$Trajectory-SweptSpace is available to represent
            the whole space (with space and thickness) swept through by
            a moving object.  Contrast #$Trajectory with #$Path-Generic
            and with #$Traversal.</rdfs:comment>
        <guid>bd58d17a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#IntangibleExistingThing"/>
    </daml:Class>
    <daml:Class rdf:ID="Transaction">
        <rdfs:label>transactions</rdfs:label>
        <rdfs:comment>Transaction is the collection of events performed
            by #$Agents cooperating (willingly) under some #$Agreement,
            each performing actions in exchange for the actions of the
            other.  Note:  Attack/counterattack in warfare is not a
            #$Transaction.  Neither is fortuitous cooperation without
            agreement, such as a set of investors who, unknown to each
            other, all buy the same stock almost at once, and end up
            driving its price up.  On the other hand, if you see agents
            acting to mutual benefit, it&apos;s not a bad strategy to
            guess that there is some agreement between them. Note: The
            word &apos;transaction&apos; often means an exchange of user
            rights (to goods and/or money) between agents; see
            #$ExchangeOfUserRights for that concept.  #$Transaction is a
            more general concept, and is a superset of #$ExchangeOfUserRights.</rdfs:comment>
        <guid>bd58dd7f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
        <rdfs:subClassOf rdf:resource="#SocialOccurrence"/>
    </daml:Class>
    <daml:Class rdf:ID="TransferIn">
        <rdfs:label>transfer in</rdfs:label>
        <rdfs:comment>A collection of events.  #$TransferIn includes all
            #$GeneralizedTransfers for which there is a well-defined
            #$to-Generic, but not necessarily a #$from-Generic.  This
            includes, among other things, #$CollectionEvent,
            #$GainingUserRights, and #$AccessingAnIBT.  At the end of a
            #$TransferIn, #$transferredThing is &apos;located&apos; at
            the #$to-Generic.  Some negative examples of #$TransferIn
            are #$AbandoningSomething (when there is no prospective
            owner) and #$IBTGeneration (when the information may go to
            various unspecified locations.</rdfs:comment>
        <guid>bd631969-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#GeneralizedTransfer"/>
    </daml:Class>
    <daml:Class rdf:ID="TransferOut">
        <rdfs:label>transfer out</rdfs:label>
        <rdfs:comment>A collection of events.  #$TransferOut includes
            all #$GeneralizedTransfers for which there is a well-defined
            #$from-Generic, but not necessarily a #$to-Generic.  This
            includes, among other things, #$Emission,
            #$LosingUserRights, and #$DistributionEvent.  At the start
            of a #$TransferOut, #$transferredThing is
            &apos;located&apos; at the #$from-Generic.  Some negative
            examples of #$TransferOut are #$AppropriatingSomething (when
            there is no previous owner) and #$Hearing (when the sounds
            may come from various unspecified locations).  (#$Davis, 5/8/97)</rdfs:comment>
        <guid>bdc16356-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#GeneralizedTransfer"/>
    </daml:Class>
    <daml:Class rdf:ID="TransferringOwnership">
        <rdfs:label>transferring ownership</rdfs:label>
        <rdfs:comment>A collection of events; a subset of
            #$TransferringPossession.  In an instance of
            #$TransferringOwnership, a transfer of ownership occurs.
            This means that in such an event there is a transfer from
            one #$Agent to another of #$FullUseRights and
            #$ExclusiveUserRights (over the
            #$objectOfPossessionTransfer).  Often there is some
            `consideration&apos; for this transfer, of course --- see #$ExchangeOfUserRights.</rdfs:comment>
        <guid>bd5908d3-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#TransferringPossession"/>
    </daml:Class>
    <daml:Class rdf:ID="TransferringPossession">
        <rdfs:label>transfers of possession</rdfs:label>
        <rdfs:comment>A collection of events.  In an instance of
            #$TransferringPossession, the possession of a single object
            (i.e., the #$objectOfPossessionTransfer) is transferred from
            one #$Agent to another.  Thus, a #$TransferringPossession
            event alters the rights of TWO different agents to use the
            object in question; one agent loses some
            #$UserRightsAttribute over it, while the other agent gains
            some #$UserRightsAttribute over it.  Each
            #$TransferringPossession event is both a #$LosingUserRights
            event and a #$GainingUserRights event. Note:  In #$Buying
            events, #$Bartering events, #$Renting events, TWO such
            #$TransferringPossessions occur, because there are TWO
            objects which transfer possession.  For example, in buying a
            car, the right to use the buyer&apos;s money is transferred
            to the auto seller, while the ownership of the car is
            transferred to the buyer.  Both of the
            #$TransferringPossession events (one for each object) are
            #$subEvents of the instance of #$Buying, #$Renting, etc.
            See #$ExchangeOfUserRights.</rdfs:comment>
        <guid>bd588cf3-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#SocialOccurrence"/>
        <rdfs:subClassOf rdf:resource="#LosingUserRights"/>
        <rdfs:subClassOf rdf:resource="#GainingUserRights"/>
        <daml:disjointWith rdf:resource="#AppropriatingSomething"/>
    </daml:Class>
    <daml:Class rdf:ID="TransformationEvent">
        <rdfs:label>transforms</rdfs:label>
        <rdfs:comment>A collection of events.  In each element of
            #$TransformationEvent, at least one thing ceases to exist
            and at least one thing comes into existence.  Usually at
            least some portion of the thing(s) destroyed becomes
            incorporated into the thing(s) that are created.  Note:
            this collection is a superset of, but NOT coextensional
            with, #$TransformationProcess (q.v.).</rdfs:comment>
        <guid>bd589b02-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="TransformationProcess">
        <rdfs:label>transforms</rdfs:label>
        <rdfs:comment>The collection of #$TransformationEvents that also
            are elements of #$TemporalStuffType.  That is, each of their
            temporal parts is also a #$TransformationEvent, in which
            something is destroyed and something created.    Note:  It
            is often the case that a #$TransformationEvent is NOT a
            #$TransformationProcess --- e.g., there may be several
            preparation stages, and then at the end everything is
            brought together and the foaming starts, or the butterfly
            emerges, or whatever transformation occurs.  So
            #$TransformationProcess is a small subset of
            #$TransformationEvent (qv).</rdfs:comment>
        <guid>bd589b87-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#TransformationEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="TransitiveBinaryPredicate">
        <rdfs:label>transitive binary predicate</rdfs:label>
        <rdfs:comment>A collection of predicates; the subset of
            #$BinaryPredicate whose elements are all transitive.  A
            predicate F is an element of #$TransitiveBinaryPredicate if
            and only if F is a binary predicate and (F X Y) and (F Y Z)
            together imply (F X Z).  Examples: #$greaterThan,
            #$geographicalSubRegions, #$cotemporal.</rdfs:comment>
        <guid>bd58c916-9c29-11b1-9dad-c379636f7270</guid>
        <daml:sameClassAs rdf:resource="http://www.daml.org/2001/03/daml+oil#TransitiveProperty"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="http://www.daml.org/2001/03/daml+oil#Property"/>
    </daml:Class>
    <daml:Class rdf:ID="Translation-Complete">
        <rdfs:label>translation - complete</rdfs:label>
        <rdfs:comment>A collection of translational motion events; hence
            a subset of #$Movement-TranslationEvent.  In any element of
            #$Translation-Complete, the whole #$objectMoving moves in
            its entirety from the origin (#$fromLocation) to the
            destination (#$toLocation).  That is, the object completely
            leaves the origin and relocates at the destination.  The
            #$objectMoving may be either a #$NonFluidlike object or a
            #$FluidTangibleThing all of which moves from one place to
            another; e.g., a baseball or the gasoline used to fill a gas
            tank.  Another example: a single molecule of water flowing
            from point A to B in a river.  Negative example: a river
            flowing from A to B  (the river itself is not relocated); a
            rubber band stretching.  A borderline case:  a spider spins
            a web, leaving part of itself, in effect, extended out
            behind it.  In most contexts that would still be considered
            a #$Translation-Complete event.  Note:
            #$Translation-Complete is noncommittal as to whether net
            movement has occurred, so round-trip events qualify as
            complete translations.  (For contrast, see #$Translation-LocationChange).</rdfs:comment>
        <guid>bd61f7aa-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#Movement-TranslationEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="Translation-Flow">
        <rdfs:label>flows</rdfs:label>
        <rdfs:comment>A collection of translational motion events; hence
            a subset of #$Movement-TranslationEvent. In any element of
            #$Translation-Flow, the #$objectMoving is a
            #$FluidTangibleThing (i.e., a portion of some fluid, such as
            a quart of milk) rather than a discrete solid object.  At
            least some of the #$objectMoving leaves the #$fromLocation
            and some arrives at the #$toLocation; but it is not
            necessary that all of the #$objectMoving go from the origin
            (#$fromLocation) to the destination (#$toLocation).  Such
            fluid flows include rivers flowing or winds blowing or air
            filling your lungs when you take a breath.  Note: also
            intended to be included here are flows of
            ``fluids&apos;&apos; such as sand, drifting snow, etc.,
            which are composed of multiple solid particles.  So a
            borderline case would be using a bulldozer to spread out a
            pile of rocks and gravel over a parking lot; depending on
            one&apos;s context (sensors, purposes, etc.) that might or
            might not be considered a #$Translation-Flow event.</rdfs:comment>
        <guid>bd590484-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#Movement-TranslationEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="Translation-LocationChange">
        <rdfs:label>changes of location</rdfs:label>
        <rdfs:comment>A collection of translational motion events; a
            subset of #$Movement-TranslationEvent.  In each element of
            #$Translation-LocationChange, the #$objectMoving ends up in
            a different place than it started; i.e., the #$fromLocation
            cannot be the same as the #$toLocation.  Thus, a round trip
            travel event (#$Translation-RoundTrip) is NOT an instance of
            this collection.  See also #$Translation-NoLocationChange.</rdfs:comment>
        <guid>bd5f8117-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#Action"/>
        <rdfs:subClassOf rdf:resource="#Movement-TranslationEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="Translation-MultiTrajectory">
        <rdfs:label>translation - multi trajectory</rdfs:label>
        <rdfs:comment>A collection of translational motion events; a
            subset of #$Movement-TranslationEvent.  In any element of
            #$Translation-MultiTrajectory, motion may occur
            simultaneously along two or more instances of #$Trajectory
            (which are not related by sub-trajectory relationships.)
            Therefore, there must be at least two #$objectMovings in
            such an event.  There may be more than one #$fromLocation
            and/or more than one #$toLocation.  Elements of
            #$Translation-MultiTrajectory include scattering,
            distributing, and collecting things.  E.g., all of the
            following exhibit multi-trajectory translation movements: a
            rainshower or snowfall; an exploding firework; water being
            ejected from a sprinkling system; the surrounding objects
            being sucked up by a tornado; participants running a 100K
            footrace; pool balls during the opening break.  For
            non-examples of this, see #$Translation-SingleTrajectory.</rdfs:comment>
        <guid>bd5ef8af-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#Movement-TranslationEvent"/>
        <daml:disjointWith rdf:resource="#Translation-SingleTrajectory"/>
    </daml:Class>
    <daml:Class rdf:ID="Translation-NoLocationChange">
        <rdfs:label>translations without location change</rdfs:label>
        <rdfs:comment>A collection of translational motion events; hence
            a subset of #$Movement-TranslationEvent.  In any instance of
            #$Translation-NoLocationChange, the #$objectMoving undergoes
            translational motion but ends up where it started --- i.e.,
            there is no NET movement; i.e., its #$fromLocation and
            #$toLocation are the same.  Between the beginning and the
            end of a #$Translation-NoLocationChange, the #$objectMoving
            may visit the #$toLocation and the #$fromLocation any number
            of times.   E.g., consider the motion of a person who is
            born in, and 80 years later dies in, the very same hospital,
            and has been there a few times in between for operations,
            visiting patients, etc.  A less dramatic example is the
            motion of your car on a particular day, as it gets moved
            around, crosses its own path a few times, etc., but ends the
            day in the same place it started.   Elements of
            #$Translation-NoLocationChange may be periodic or
            nonperiodic movements.  An important subset of
            #$Translation-NoLocationChange is #$Translation-RoundTrip.</rdfs:comment>
        <guid>bd5e4464-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#Movement-TranslationEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="Translation-NonPeriodic">
        <rdfs:label>translation - non periodic</rdfs:label>
        <rdfs:comment>The collection of all non-periodic translational
            movement  events, i.e., the intersection of
            #$Movement-NonPeriodic and  #$Movement-TranslationEvent.  In
            each instance of  #$Translation-NonPeriodic, the
            #$objectMoving is in translational  motion and does not move
            back the same position on the regular  temporal basis (it
            can visit the same location multiple times, just not regularly).</rdfs:comment>
        <guid>bfbfe759-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#Movement-NonPeriodic"/>
        <rdfs:subClassOf rdf:resource="#Movement-TranslationEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="Translation-Periodic">
        <rdfs:label>translation - periodic</rdfs:label>
        <rdfs:comment>A collection of periodic movement events; hence a
            subset of #$Movement-Periodic (q.v.)   In any element of
            #$Translation-Periodic, the periodic motion of the
            #$objectMoving is translational motion (as opposed, e.g., to
            rotation).  E.g., a ball bouncing in place translates
            periodically; so does a planet revolving around a star.  But
            not: a planet rotating on its axis, a top spinning in place.</rdfs:comment>
        <guid>bd5e1d42-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#Movement-Periodic"/>
        <rdfs:subClassOf rdf:resource="#Movement-TranslationEvent"/>
    </daml:Class>
    <daml:Class rdf:ID="Translation-RoundTrip">
        <rdfs:label>round trips</rdfs:label>
        <rdfs:comment>A collection of events, #$Translation-RoundTrip is
            a subset of #$Translation-NoLocationChange.  Each element of
            #$Translation-RoundTrip represents one round trip event.
            That is, an instance of #$Translation-RoundTrip is a
            complete translational movement that begins and ends in the
            same place (thus, the #$fromLocation and #$toLocation are
            identical).  However, a round trip is usually a
            discontinuous motion (cf. #$Movement-TranslationProcess).
            In the simplest case, it has exactly one
            #$outboundLegOfRoundTrip and exactly one
            #$inboundLegOfRoundTrip, and the trip breaks at the
            #$destination-RoundTrip, which is the place that the
            traveller visits in between the two legs of the journey.
            Thus, in addition to a #$fromLocation and #$toLocation, an
            instance of #$Translation-RoundTrip also has an
            #$origin-RoundTrip and #$destination-RoundTrip.  The
            #$origin-RoundTrip is just the same as the #$fromLocation
            and #$toLocation.  For example, in Doug and Mary&apos;s trip
            to Antarctica, the #$origin-RoundTrip was #$CityOfAustinTX,
            the #$destination-RoundTrip was the #$ContinentOfAntarctica.
            Thus, the #$CityOfAustinTX was both the #$fromLocation and
            the #$toLocation of the WHOLE (round) trip, and it was also
            the #$toLocation of the homeward leg of their trip
            (#$inboundLegOfRoundTrip).   The #$ContinentOfAntarctica was
            the #$toLocation for their #$outboundLegOfRoundTrip and the
            #$fromLocation of their homeward leg (i.e., their
            #$inboundLegOfRoundTrip). Note: to describe a multi-stop
            `round trip&apos;,  instead of using #$Translation-RoundTrip
            one can represent it as a circuit composed of a series of
            one-way legs.</rdfs:comment>
        <guid>c10aee07-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#Translation-NoLocationChange"/>
    </daml:Class>
    <daml:Class rdf:ID="Translation-SingleTrajectory">
        <rdfs:label>translation</rdfs:label>
        <rdfs:comment>A subset of #$Movement-TranslationEvent.  Each
            element of #$Translation-SingleTrajectory is a translational
            movement which involves exactly one #$trajectory-Complete.
            One or more items may have the role of #$objectMoving in
            such an event.  Note that although there is a single
            #$trajectory-Complete, it does not follow that there is a
            unique #$fromLocation and a unique #$toLocation because that
            depends on our descriptions of locations.  (A
            single-trajectory movement can be described as from TX to
            PA, or from Austin to Pittsburgh, or even from Northwest in
            Austin to Oakland in Pittsburgh.)  However, the single
            #$trajectory-Complete connects #$fromLocation and
            #$toLocation.  (Similarly there may be a single existing
            #$motionPathway-Complete that the trajectory goes along,
            and/or a single #$Traversal of paths indicated by
            #$traverses-Complete.)  Consider a translational motion
            performed by a whole #$Group; it is likely to be a
            #$Translation-SingleTrajectory ---  e.g., a flock of birds
            flying together, or a snarl of rush-hour traffic on the
            Beltway.  Negative examples (see
            #$Translation-MultiTrajectory) would be: a set of billiard
            balls during the opening break, or a group of water droplets
            that come together into one big drop.</rdfs:comment>
        <guid>bd5b0dc8-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#Movement-TranslationEvent"/>
        <daml:disjointWith rdf:resource="#Translation-MultiTrajectory"/>
    </daml:Class>
    <daml:Class rdf:ID="Translocation">
        <rdfs:label>translocation</rdfs:label>
        <rdfs:comment>A collection of events; a subset of
            #$GeneralizedTransfer.  Each element of #$Translocation is a
            transfer of something across a distance.  Translocations may
            have a #$toLocation and a #$fromLocation.  #$Translocation
            is the common generalization of (i.e., a superset of) both
            #$WavePropagation and #$Movement-TranslationEvent (q.v.). </rdfs:comment>
        <guid>bf81a890-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#MovementEvent"/>
    </daml:Class>
    <Transparency rdf:ID="Translucent">
        <rdfs:label>translucence</rdfs:label>
        <rdfs:comment>#$Translucent is a #$PhysicalAttribute
            representing a specific degree of #$Transparency.
            #$Translucent objects can transmit light, but not enough to
            see clear images.  See also #$transparencyOfObject.</rdfs:comment>
        <guid>bd589226-9c29-11b1-9dad-c379636f7270</guid>
    </Transparency>
    <daml:Class rdf:ID="Transparency">
        <rdfs:label>transparencies</rdfs:label>
        <rdfs:comment>A collection of attributes; a subset of
            #$PhysicalAttribute.  Each element of #$Transparency
            represents a capacity of some tangible object to transmit
            light.  Degrees of #$Transparency may be represented
            qualitatively (e.g., #$Translucent, #$Transparent, #$Murky,
            #$Opaque), or using #$GenericValueFunctions.  Indicate a
            particular object&apos;s #$Transparency with the predicate #$transparencyOfObject.</rdfs:comment>
        <guid>bd58f8db-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MeasurableAttributeType"/>
        <rdfs:subClassOf rdf:resource="#PhysicalAttribute"/>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </daml:Class>
    <Transparency rdf:ID="Transparent">
        <rdfs:label>transparent</rdfs:label>
        <rdfs:comment>#$Transparent is a #$PhysicalAttribute
            representing a specific degree of #$Transparency.
            #$Transparent objects transmit enough light to see clear
            images.  See also #$transparencyOfObject.</rdfs:comment>
        <guid>bd58de31-9c29-11b1-9dad-c379636f7270</guid>
    </Transparency>
    <daml:Class rdf:ID="TransportationCompany">
        <rdfs:label>transportation companies</rdfs:label>
        <rdfs:comment>A collection of organizations; a subset of
            #$ServiceOrganizations.  An element of
            #$TransportationCompany is an organization that provide
            transportation (of goods or persons) to customers for a fee.</rdfs:comment>
        <guid>bd58aa63-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#ServiceOrganization"/>
    </daml:Class>
    <daml:Class rdf:ID="TransportationDevice">
        <rdfs:label>vehicles</rdfs:label>
        <rdfs:comment>A collection of transportation devices; a subset
            of #$Conveyance.  Each element of #$TransportationDevice is
            an artifact designed to play the role of #$transporter in
            transportation events.  Such devices enable something to be
            moved, by (for example) carrying, pulling, or pushing the
            transported things (#$transportees).  Transportation devices
            may or may not have their own power source (see
            #$SelfPoweredDevice).  Those which do, such as automobiles
            and speedboats, constitute the specialization
            #$TransportationDevice-Vehicle.  Other transportation
            devices require an external motive force, e.g., instances of
            #$Wheelbarrow or #$Bicycle.  (For more examples, see
            #$MusclePoweredDevice.)  Because #$transporter and
            #$transportees are specializations of #$objectMoving, it
            follows that any object in the role of #$transporter moves
            as a whole with those objects playing the role of
            #$transportees.  Since any instance of
            #$TransportationDevice has playing the role of #$transporter
            as its intended function, stationary objects which cause
            motion, such as conveyor belts, escalators, rocket
            launchers, slingshots, etc. are excluded from the category
            of #$TransportationDevice.  Also excluded are devices which,
            although they facilitate travel, are worn rather than
            &apos;ridden on&apos;, &apos;ridden with&apos;, or
            &apos;ridden in&apos;.  Ice skates, shoes, skis and other
            specializations of #$WearableConveyance fit this
            exclusionary criterion.   Note that this is not the
            collection of all objects that can be used as transporters.
            For example, in an event of a man riding on a horse, the
            horse is the transporter but not an instance of
            #$TransportationDevice since a horse is not an artifact. So
            the main difference between transporters and transportation
            devices is that the latter have to be artifacts while the
            former do not.</rdfs:comment>
        <guid>bd58d540-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Conveyance"/>
        <rdfs:subClassOf rdf:resource="#PhysicalDevice"/>
    </daml:Class>
    <daml:Class rdf:ID="TransportationDevice-Vehicle">
        <rdfs:label>vehicles</rdfs:label>
        <rdfs:comment>#$TransportationDevice-Vehicle is the
            subcollection of #$TransportationDevice whose instances are
            also instances of #$SelfPoweredDevices, i.e., those that
            move under their own power.  E.g. jet airplanes,
            automobiles, but not skateboards, gliders, or rowboats.
            Note that hand pushed gas powered lawnmowers, even though
            they are #$SelfPoweredDevices, are not instances of
            #$TransportationDevice-Vehicle because they are not their
            own #$providerOfMotiveForce when they move, whereas
            instances of #$LawnMower-Riding are vehicles.</rdfs:comment>
        <guid>c0bce169-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#SelfPoweredDevice"/>
        <rdfs:subClassOf rdf:resource="#TransportationDevice"/>
    </daml:Class>
    <daml:Class rdf:ID="TransportationEvent">
        <rdfs:label>transport</rdfs:label>
        <rdfs:comment>A collection of events.  An instance of
            #$TransportationEvent is an event in which one object (in
            the role of #$transporter) aids in the translational
            movement of another object (having the role of
            #$transportees), so that both objects move together along
            the same #$motionPathway-Complete.  Optionally, one of these
            objects, or some third object moving along with them,
            provides the force to make the movement happen
            (#$providerOfMotiveForce).  Examples of transportation
            events include automobile transportation, dogs pulling goods
            on a sled, a wagon with groceries rolling down a hill, a
            person carrying clothes in a suitcase, etc.  In that last
            case, note that the #$transporter is the suitcase, not the
            person.  Things which are NOT #$TransportationEvents (as
            defined above): a river conveying some flotsam, the wind
            blowing a leaf, a conveyor belt moving a widget to the next
            person on the assembly line, or a walking beast of burden
            without #$transportees on it.  The first 3 of these would be
            instances of #$Conveying-Stationary, since the  would-be
            #$transporter doesn&apos;t actually change its overall
            location, and hence is a #$conveyor-Stationary; in the
            fourth case, the unburdened beast has no #$transportees.</rdfs:comment>
        <guid>bfee877a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#Translation-Complete"/>
        <rdfs:subClassOf rdf:resource="#CausingAnotherObjectsTranslationalMotion"/>
        <rdfs:subClassOf rdf:resource="#Translation-LocationChange"/>
        <rdfs:subClassOf rdf:resource="#Translation-SingleTrajectory"/>
    </daml:Class>
    <daml:Class rdf:ID="TransportingPeople">
        <rdfs:label>transporting people</rdfs:label>
        <rdfs:comment>A specialization of #$TransportationEvent.  In
            each instance of #$TransportingPeople, some instance(s) of
            #$Person are the main transportees (or are among the main
            transportees) in the event.  Note that this collection
            excludes events in which people are merely conveyed (as,
            e.g., by a moving sidewalk), rather than travelling with
            their transporting device.  Note that #$transportees is
            interpreted broadly: even the driver (#$driverActor) of the
            transportation device counts among the #$transportees).  Cf.
            (#$TransportFn #$Person).</rdfs:comment>
        <guid>bf11baba-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#TransportationEvent"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
    </daml:Class>
    <daml:Class rdf:ID="Transubstantiation">
        <rdfs:label>transubstantiation</rdfs:label>
        <rdfs:comment>The collection of events in #$Catholicism in
            which #$CommunionWafer(a sliver of bread) is transformed
            into the body   of #$JesusChrist. #$Transubstantiation is
            one of the key issues of doctrine  that separates
            #$Catholicism and #$ProtestantReligion.</rdfs:comment>
        <guid>c07a6022-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#TransformationEvent"/>
    </daml:Class>
    <TwoDimensionalShapeAttribute rdf:ID="TrapezoidShaped">
        <rdfs:label>trapezoid shaped</rdfs:label>
        <rdfs:comment>#$TrapezoidShaped is the instance of
            #$ShapeAttribute shared by all four sided two dimensional
            figures which contain exactly two parallel sides.</rdfs:comment>
        <guid>bf135604-9c29-11b1-9dad-c379636f7270</guid>
    </TwoDimensionalShapeAttribute>
    <daml:Class rdf:ID="Trapping">
        <rdfs:label>trapping events</rdfs:label>
        <rdfs:comment>A collection of events.  In an instance of
            #$Trapping, an animal is taken into custody by using a
            device that physically captures the body of the animal.  The
            animal may or may not be killed in the event.</rdfs:comment>
        <guid>bd605152-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#CapturingAnimal"/>
    </daml:Class>
    <daml:Class rdf:ID="Traversal">
        <rdfs:label>paths</rdfs:label>
        <rdfs:comment>The collection of all traversals of paths and
            networks.  A traversal is a trace of a pathway along
            pre-existing #$Path-Generics.  It is the
            &apos;path-representation&apos; of certain actual
            trajectories (instances of #$Trajectory) that are confined
            to paths.  Different actual trajectories may have the same
            traversal; to see this, consider two cars driving along a
            block of 10th St.  The actual car movements have different
            trajectories -- say, one drove straight while the other
            switched lanes many times.  The two different trajectories
            are both characterized by the same traversal of that block
            of 10th Street.  A traversal of a network of paths can be
            represented by (#$TraversalFn CHAIN) where CHAIN is a
            #$PathChain.  We may choose to use a more detailed
            representation of the traversal, i.e., use a #$PathChain
            made of more, but shorter, paths.  For example, we may use
            several paths to replace a cycle in CHAIN if we want to be
            clear about the direction in that part of the traversal, or
            we may have to replace a path in CHAIN by several
            &apos;shorter&apos; paths if we want to preserve the fact
            that the object moved backward at a small part of PATH and
            then resumed its original direction.  In summary, a
            traversal is a constraint on a trajectory and a
            characterization of it in terms of traversing pre-existing
            #$Path-Generics.   Technically, a #$Traversal from A to B
            can be expressed as (#$TraversalFn CHAIN) where CHAIN is a
            #$PathChain such that the first item in CHAIN is A and the
            last is B (we can assert: (#$traversalFrom (#$TraversalFn
            CHAIN) A) and (#$traversalTo (#$TraversalFn CHAIN) B)).
            Related constants include #$TraversalFn, #$traversalFrom,
            #$traversalTo, #$pointOnTraversal, #$subTraversals,
            #$traversalPassesThrough, #$traversalInSystem, etc.  Note
            that a #$Traversal, unlike a #$Path-Generic, can cross
            itself, i.e., can &apos;pass through&apos; a point on it
            many times.   (Mathematically: given a #$PathSystem or
            #$CustomarySystemOfLinks, a #$Traversal of it is a directed
            path that has a homomorphism into that system.)</rdfs:comment>
        <guid>be9b2377-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#Individual"/>
    </daml:Class>
    <daml:Class rdf:ID="Tree-PathSystem">
        <rdfs:label>tree - path system</rdfs:label>
        <rdfs:comment>The collection of all those #$ConnectedPathSystems
            that look like trees, i.e., those #$ConnectedPathSystems
            that have no #$Path-Cyclics at all.  Note that since each
            instance of #$Tree-PathSystem has no cycles in it, it has no
            loops, nor multiple links between two nodes.</rdfs:comment>
        <guid>be70229a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PathSystemType-Structural"/>
        <rdfs:subClassOf rdf:resource="#SimplePathSystem"/>
        <rdfs:subClassOf rdf:resource="#ConnectedPathSystem"/>
    </daml:Class>
    <daml:Class rdf:ID="Tree-ThePlant">
        <rdfs:label>trees</rdfs:label>
        <rdfs:comment>A collection of plants; a subset of #$Plant-Woody.
            Each element of #$Tree-ThePlant is a tree, i.e., a tall
            woody plant that is usually taller than a person or a bush,
            generally having a branching form overall, and with roots in
            the ground, a trunk, and the branches having numerous leaves
            exposed to the sky.  Cf. #$Bush.</rdfs:comment>
        <guid>bd58cf75-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdf:type rdf:resource="#OrganismClassificationType"/>
        <rdfs:subClassOf rdf:resource="#Plant-Woody"/>
    </daml:Class>
    <daml:Class rdf:ID="TreeOrdering">
        <rdfs:label>tree ordering</rdfs:label>
        <rdfs:comment>The collection of all those #$PartialOrderings
            ORDER in which the ordering relation R orders elements of
            the #$baseSet S of ORDER into a tree-like structure.  This
            means that each pair of elements of S has a common
            &apos;R-lower-bound&apos; in S (i.e., for each X, Y in S,
            there is a Z in S such that R(Z X) and R(Z Y)), and the set
            of &apos;R-lower-bounds&apos; of each X in S is ordered in a
            chain by R (i.e., {Y: Y is in S and R(Y X)} is a chain).
            Note that a #$TreeOrdering can itself be a chain, i.e., a
            #$TotalOrdering.  Note also that if you want a
            #$RelationalStructure that is just like a #$TreeOrdering but
            with the ordering relation to be irreflexive, see #$TreeOrdering-Strict.</rdfs:comment>
        <guid>beb293c3-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#PartialOrdering"/>
    </daml:Class>
    <daml:Class rdf:ID="TreeOrdering-Strict">
        <rdfs:label>tree ordering - strict</rdfs:label>
        <rdfs:comment>The collection of all those
            #$MathematicalOrderings ORDER in which the ordering relation
            R is irreflexive and transitive on the #$baseSet S of ORDER,
            and in which every pair of different elements of S has a
            common &apos;R-lower-bound&apos;, and the set of
            &apos;R-lower-bounds&apos; of each X in S is ordered in a
            (possibly empty) chain by R (i.e., {Y: Y is in S and R(Y X)}
            is a (possibly empty) chain).  Note that the only difference
            between a #$TreeOrdering and a #$TreeOrdering-Strict is that
            the ordering relation of the former is reflexive while that
            of the latter is irreflexive.</rdfs:comment>
        <guid>c136761b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#PartialOrdering-Strict"/>
    </daml:Class>
    <daml:Class rdf:ID="Trial">
        <rdfs:label>trials</rdfs:label>
        <rdfs:comment>The collection of legal conflicts that are heard
            and decided by a court.</rdfs:comment>
        <guid>bd63d28f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
    </daml:Class>
    <TwoDimensionalShapeAttribute rdf:ID="Triangular">
        <rdfs:label>triangular</rdfs:label>
        <rdfs:comment>#$Triangular is the instance of #$ShapeAttribute
            shared by all triangular-shaped objects.</rdfs:comment>
        <guid>c0eecddb-9c29-11b1-9dad-c379636f7270</guid>
    </TwoDimensionalShapeAttribute>
    <TerrainAttribute rdf:ID="TropicalRainForest">
        <rdfs:label>tropical rain forest</rdfs:label>
        <rdfs:comment>Attribute of areas of dense forest located in the
            tropics and characterized by high annual rainfall and
            continuous high temperature.  Up to three tree layers grow
            above a variable shrub layer.  Source: The Times Atlas of
            the World (1995).</rdfs:comment>
        <guid>c05abb5b-9c29-11b1-9dad-c379636f7270</guid>
    </TerrainAttribute>
    <daml:Class rdf:ID="Truck">
        <rdfs:label>trucks</rdfs:label>
        <rdfs:comment>The collection of all trucks, large #$RoadVehicles
            for ground transportation.  Trucks are most often used to
            haul freight, garbage, materials, liquids and other heavy
            loads.  #$FireTrucks take firemen to fires.  In many parts
            of the world, people routinely ride in the backs of Trucks.
            A Truck has a cab for the driver, separate from the cargo
            area of the Truck.</rdfs:comment>
        <guid>bd58b381-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdf:type rdf:resource="#ProductType"/>
        <rdfs:subClassOf rdf:resource="#TransportationDevice-Vehicle"/>
    </daml:Class>
    <TruthValue rdf:ID="True">
        <rdfs:label>some statement in the KB is true</rdfs:label>
        <rdfs:comment>An element of #$TruthValue.  #$True is logical
            truth in Cyc; this is the abstract logical notion--not to be
            confused with Lisp&apos;s T, nor with the English word `true&apos;.</rdfs:comment>
        <guid>bd5880d9-9c29-11b1-9dad-c379636f7270</guid>
    </TruthValue>
    <daml:Class rdf:ID="TruthFunction">
        <rdfs:label>truth function</rdfs:label>
        <rdfs:comment>Each #$TruthFunction is a relationship which is
            used to form sentences about the world.  Informally, one can
            think of these as functions, which, when used in the
            ``arg0&apos;&apos; or ``predicate&apos;&apos; position in a
            CycL expression with the correct number and type of
            arguments, produce a CycL formula which has a particular
            truth value (true, false or unknown).  #$TruthFunction
            stands in contrast to #$Function-Denotational.  Both are
            special types of #$Relation, but instances of
            #$Function-Denotational are used in expressions to form new
            terms, rather than sentences.</rdfs:comment>
        <guid>bea64551-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#RelationshipType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#Relation"/>
    </daml:Class>
    <daml:Class rdf:ID="TruthValue">
        <rdfs:label>truths</rdfs:label>
        <rdfs:comment>#$TruthValue is a collection of mathematical
            objects; it contains the abstract, logical objects #$True
            and #$False.</rdfs:comment>
        <guid>bd58e3ba-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#MathematicalObject"/>
        <daml:disjointWith rdf:resource="#SubLString"/>
    </daml:Class>
    <daml:Class rdf:ID="TubeShape">
        <rdfs:label>tube shape</rdfs:label>
        <rdfs:comment>A subset of #$CylinderShape. Each element of
            #$TubeShape is a hollow cylinder whose height is much
            greater than the radius of its base. Examples include
            spatially localized objects, such as pipes and hoses, as
            well as some abstract cylinders.</rdfs:comment>
        <guid>c10060cb-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ThreeDimensionalShapeType"/>
        <rdf:type rdf:resource="#GenericShapeType"/>
    </daml:Class>
    <ThreeDimensionalShapeAttribute rdf:ID="TubeShaped">
        <rdfs:label>tube shaped</rdfs:label>
        <rdfs:comment>#$TubeShaped is the instance of #$ShapeAttribute
            shared by all cylindrical objects for which it is true that
            the height (#$heightOfObject) is much greater than the
            radius of its base.  This includes objects that are hollow
            or solid objects.</rdfs:comment>
        <guid>c1169e71-9c29-11b1-9dad-c379636f7270</guid>
    </ThreeDimensionalShapeAttribute>
    <daml:Class rdf:ID="Tumor">
        <rdfs:label>tumours</rdfs:label>
        <rdfs:comment>Each element of this collection is an abnormal
            tissue mass found in an animal.  Instances of #$Tumor
            include both malignant (cancerous -- see #$Cancer) and
            benign (non-cancerous) growths which have no normal
            physiological cause or function within the animal&apos;s body.</rdfs:comment>
        <guid>c0fd58aa-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#OrganismPart"/>
    </daml:Class>
    <TerrainAttribute rdf:ID="Tundra">
        <rdfs:label>tundra</rdfs:label>
        <rdfs:comment>Attribute of terrain types characterized by
            permanently frozen treeless land supporting a growth of
            mosses, lichens, grasses, rushes, and very few other forms
            of plant life. Source: The Times Atlas of the World (1995).</rdfs:comment>
        <guid>bee38400-9c29-11b1-9dad-c379636f7270</guid>
    </TerrainAttribute>
    <daml:Class rdf:ID="Tuple">
        <rdfs:label>tuple</rdfs:label>
        <rdfs:comment>A collection of mathematical objects.  Each
            element of #$Tuple is a complex which contains some number
            (greater than or equal to 1) of ordered (or otherwise
            indexed) components (it might be a pair, a triple, etc., or
            there may be a function from column names into their value
            domains).  For example, #$BloodPressureReading is a
            specialized subset of #$Tuple; each element of
            #$BloodPressureReading is an ordered or column-indexed pair
            (of numbers), in which the first is the systolic reading,
            the second the diastolic reading.  Components of tuples need
            not be restricted to numbers; for example, the entries in a
            data base (e.g., my address book) also qualify as tuples,
            whose components are name, address, phone, email address,
            etc.   A significant subset of #$Tuple is #$NTupleInterval
            (q.v.), whose elements are tuples consisting of intervals
            only; e.g., complex numbers, physical vectors.  Technically,
            if the index set for the #$Tuple is the counting numbers in
            their usual order, then the implied order alone can be used
            to pick a member of the tuple, and the tuple is in fact a
            #$List.  In the general case, any index set (distinct column
            names, for example, in a relational database) may be used to
            index the members of a tuple, not just their order-position numbers.</rdfs:comment>
        <guid>bd58f8d8-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#Situation"/>
        <rdfs:subClassOf rdf:resource="#MathematicalObject"/>
        <daml:disjointWith rdf:resource="#SpatialThing"/>
    </daml:Class>
    <daml:Class rdf:ID="TurningOffPoweredDevice">
        <rdfs:label>turning off powered device</rdfs:label>
        <rdfs:comment>The collection of actions in which the
            #$DeviceState of a #$PhysicalDevice changes from #$DeviceOn
            to #$DeviceOff.</rdfs:comment>
        <guid>bd590669-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#ChangingDeviceState"/>
    </daml:Class>
    <daml:Class rdf:ID="TurningOnPoweredDevice">
        <rdfs:label>turning on powered device</rdfs:label>
        <rdfs:comment>The collection of actions in which the
            #$DeviceState of a #$PhysicalDevice changes from #$DeviceOff
            to #$DeviceOn.</rdfs:comment>
        <guid>bd590628-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#ChangingDeviceState"/>
    </daml:Class>
    <daml:Class rdf:ID="Twilight">
        <rdfs:label>twilights</rdfs:label>
        <rdfs:comment>The union of the two collections of time intervals
            #$Dawn and #$Dusk.  Each #$Twilight is a situation where the
            sky is indirectly illuminated by the #$Sun, either just
            before a #$Sunrise or just after a #$Sunset.</rdfs:comment>
        <guid>c0f71446-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#QualitativeTimeOfDay"/>
    </daml:Class>
    <TwoDimensionalShapeAttribute rdf:ID="TwoDimensional">
        <rdfs:label>two dimensional</rdfs:label>
        <rdfs:comment>The most general shape attribute (see
            #$ShapeAttribute) held by all two-dimensional things.</rdfs:comment>
        <guid>bedaa3b5-9c29-11b1-9dad-c379636f7270</guid>
    </TwoDimensionalShapeAttribute>
    <daml:Class rdf:ID="TwoDimensionalShape">
        <rdfs:label>two dimensional shapes</rdfs:label>
        <rdfs:comment>A subset of #$GeometricThing. Each element of
            #$TwoDimensionalShape is a two-dimensional object. Examples
            include spatially localized objects, such as the flat
            surface of a table, as well as abstract two-dimensional objects.</rdfs:comment>
        <guid>bd58c2a5-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ShapeType"/>
        <rdf:type rdf:resource="#GenericShapeType"/>
        <rdfs:subClassOf rdf:resource="#GeometricThing"/>
        <daml:disjointWith rdf:resource="#ThreeDimensionalShape"/>
        <daml:disjointWith rdf:resource="#SpacePoint"/>
        <daml:disjointWith rdf:resource="#Line"/>
    </daml:Class>
    <daml:Class rdf:ID="TwoDimensionalShapeAttribute">
        <rdfs:label>two dimensional shape attribute</rdfs:label>
        <rdfs:comment>The collection of instances of #$ShapeAttribute
            that are held by spatial things that are two-dimensional.</rdfs:comment>
        <guid>bff550c9-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#SiblingDisjointAttributeType"/>
        <rdfs:subClassOf rdf:resource="#ShapeAttribute"/>
    </daml:Class>
    <daml:Class rdf:ID="TwoDimensionalShapeType">
        <rdfs:label>two dimensional shape type</rdfs:label>
        <rdfs:comment>A collection of collections.  Each instance of
            #$TwoDimensionalShapeType is a collection of things which
            are subsets of #$TwoDimensionalShape.</rdfs:comment>
        <guid>c0f46e93-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#ShapeType"/>
        <daml:disjointWith rdf:resource="#ThreeDimensionalShapeType"/>
    </daml:Class>
    <daml:Class rdf:ID="TwoStoryBuilding">
        <rdfs:label>two-stories</rdfs:label>
        <rdfs:comment>Collection of all two story buildings.</rdfs:comment>
        <guid>bd58c6cb-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Building"/>
        <daml:disjointWith rdf:resource="#ThreeStoryBuilding"/>
        <daml:disjointWith rdf:resource="#OneStoryBuilding"/>
    </daml:Class>
    <daml:Class rdf:ID="TypePredicate">
        <rdfs:label>type predicate</rdfs:label>
        <rdfs:comment>A collection of predicates.  Each element of
            #$TypePredicate is a predicate used in asserting relations
            between #$Collections, or between #$Individuals and
            #$Collections, which in turn imply further assertions
            involving instances of the #$Collections.  Examples:
            #$primaryActivityType, #$insuredEventTypes,
            #$anatomicalPartTypeAffected, #$frequencyOfActionType, #$objectTypesCollected.</rdfs:comment>
        <guid>bd58a9e4-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#RelationshipType"/>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
    </daml:Class>
    <daml:Class rdf:ID="USCity">
        <rdfs:label>American cities</rdfs:label>
        <rdfs:comment>A collection of cities.  Each element of #$USCity
            is a city in the #$UnitedStatesOfAmerica.  Note that #$City
            (q.v.) is widely construed to include towns and villages.
            Examples of #$USCity: #$CityOfAustinTX,
            #$CityOfGainesvilleFL, #$CityOfLongBeachCA,
            #$CityOfArmonkNewYork, #$CityOfEssexJunctionVermont,
            #$CityOfCambridgeMA, #$CityOfPaloAltoCA, #$CityOfRedmondWA.</rdfs:comment>
        <guid>bd5884c0-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#SpatiallyDisjointRegionType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#UrbanArea"/>
        <rdfs:subClassOf rdf:resource="#City"/>
    </daml:Class>
    <daml:Class rdf:ID="USFederalGovernmentOrganization">
        <rdfs:label>federal government organizations</rdfs:label>
        <rdfs:comment>A collection of government organizations.  An
            instance of #$USFederalGovernmentOrganization is an element
            of #$LegalGovernmentOrganization which is part of the
            #$UnitedStatesFederalGovernment.  This collection includes
            the U.S. military, Federal courts, U.S. Congress, U.S.
            territorial governments, Federal departments and independent
            agencies, and the city of Washington, D.C.; it does NOT
            include U.S. states, interstate compacts, and cities (other
            than Washington, D.C.).</rdfs:comment>
        <guid>c1005ad7-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#LegalGovernmentOrganization"/>
    </daml:Class>
    <daml:Class rdf:ID="UltraSound">
        <rdfs:label>ultra sound</rdfs:label>
        <rdfs:comment>A collection of events; a subset of #$Sound.  Each
            element of #$UltraSound is a sound wave having a #$Frequency
            greater than 20,000 cycles per second, which is above the
            range of human hearing.</rdfs:comment>
        <guid>c02c1799-9c29-11b1-9dad-c379636f7270</guid>
        <rdfs:subClassOf rdf:resource="#Sound"/>
    </daml:Class>
    <daml:Class rdf:ID="UnalloyedMetal">
        <rdfs:label>unalloyed metals</rdfs:label>
        <rdfs:comment>A collection of tangible stuffs; a subset of
            #$Metal.  Every instance of #$UnalloyedMetal is a metal
            which is also an element, i.e., a substance of unmixed
            chemical type.  Thus, each subset of #$UnalloyedMetal is a
            subset of both #$Metal and #$ElementStuff.  Examples of
            #$UnalloyedMetal include the instances of #$Gold, #$Iron,
            #$Uranium, #$Antimony, #$Titanium, and many more.</rdfs:comment>
        <guid>bd5908f8-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TangibleStuffCompositionType"/>
        <rdfs:subClassOf rdf:resource="#Metal"/>
        <rdfs:subClassOf rdf:resource="#ElementStuff"/>
    </daml:Class>
    <daml:Class rdf:ID="UnaryFunction">
        <rdfs:label>unary function</rdfs:label>
        <rdfs:comment>#$UnaryFunction is the subset of
            #$Function-Denotational whose elements take only a single
            argument. </rdfs:comment>
        <guid>bd58af89-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#UnaryRelation"/>
        <rdfs:subClassOf rdf:resource="#Function-Denotational"/>
    </daml:Class>
    <daml:Class rdf:ID="UnaryPredicate">
        <rdfs:label>unary predicate</rdfs:label>
        <rdfs:comment>#$UnaryPredicate is the subset of #$Predicate
            whose elements take only a single argument.  Note, however,
            that most unary properties are implemented in Cyc as
            elements of #$Collection or of #$AttributeValue, rather than
            of #$UnaryPredicate.  So there should not be very many
            instances of this collection.</rdfs:comment>
        <guid>bd5e7a9e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PredicateCategory"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#Predicate"/>
        <rdfs:subClassOf rdf:resource="#UnaryRelation"/>
    </daml:Class>
    <daml:Class rdf:ID="UnaryRelation">
        <rdfs:label>unary relation</rdfs:label>
        <rdfs:comment>The collection of all #$Relations of arity 1 in
            CycL.  This  collection was created in order to implement
            automatic conclusion of  arity for relations in CycL,
            regardless of whether they are predicates  or functions.</rdfs:comment>
        <guid>bee5923d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#FixedArityRelation"/>
        <daml:disjointWith rdf:resource="#Role"/>
        <daml:disjointWith rdf:resource="#PartiallyCommutativeRelation"/>
        <daml:disjointWith rdf:resource="#CommutativeRelation"/>
    </daml:Class>
    <Alertness rdf:ID="Unconscious">
        <rdfs:label>unconsciousness</rdfs:label>
        <rdfs:comment>#$Unconscious is the #$Alertness attribute of
            being #$Unconscious.  It is the opposite of #$Awake.  A
            specialization of this attribute is #$Asleep.</rdfs:comment>
        <guid>bd58a4f4-9c29-11b1-9dad-c379636f7270</guid>
    </Alertness>
    <daml:Class rdf:ID="UnemployedPerson">
        <rdfs:label>unemployed people</rdfs:label>
        <rdfs:comment>A collection of persons.  Each instance of
            #$UnemployedPerson is a worker who is unemployed.  An
            unemployed worker is someone who either has worked
            previously and could still do so (if s/he had a job), or
            someone who is qualified to work (e.g., a recent graduate)
            but has not yet worked.</rdfs:comment>
        <guid>bd588cd7-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PersonByActivityType"/>
        <rdfs:subClassOf rdf:resource="#Person"/>
    </daml:Class>
    <daml:Class rdf:ID="UnintendedLossOfUserRights">
        <rdfs:label>unintended loss of user rights</rdfs:label>
        <rdfs:comment>Nondeliberate loss of some #$UserRightsAttribute;
            for example, when something is stolen, appropriated, or, in
            some cases, simply lost.</rdfs:comment>
        <guid>bd62c758-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#LosingUserRights"/>
        <daml:disjointWith rdf:resource="#GivingSomething"/>
    </daml:Class>
    <daml:Class rdf:ID="UniqueAnatomicalPartType">
        <rdfs:label>unique anatomical part type</rdfs:label>
        <rdfs:comment>A collection of collections.  Instances are types
            of #$OrganismParts that occur uniquely in the organisms
            (#$Organism-Whole) that have them.  For example, #$Head-AnimalBodyPart.</rdfs:comment>
        <guid>c0fe0533-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdf:type rdf:resource="#SiblingDisjointCollection"/>
    </daml:Class>
    <daml:Class rdf:ID="UnitOfAcceleration">
        <rdfs:label>units of acceleration</rdfs:label>
        <rdfs:comment>The collection of functions which return elements
            of Acceleration.  For example, the value of the function
            #$MetersPerSecondPerSecond applied to the real number 9.8 --
            (#$MetersPerSecondPerSecond 9.8) -- is 9.8 meters per second squared.</rdfs:comment>
        <guid>bd58eadf-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#InterconvertibleUnitType"/>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </daml:Class>
    <daml:Class rdf:ID="UnitOfAngularAcceleration">
        <rdfs:label>units of angular acceleration</rdfs:label>
        <rdfs:comment>The collection of functions which return elements
            of #$AngularAccelerationRate (i.e., the rate of change in
            the #$RateOfRotation).</rdfs:comment>
        <guid>bd58eb20-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#InterconvertibleUnitType"/>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </daml:Class>
    <daml:Class rdf:ID="UnitOfAngularDistance">
        <rdfs:label>units of angular distance</rdfs:label>
        <rdfs:comment>The collection of functions which return elements
            of #$AngularDistance.  E.g., (#$Radian 5) denotes 5 radians.</rdfs:comment>
        <guid>bd58ab94-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#InterconvertibleUnitType"/>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </daml:Class>
    <daml:Class rdf:ID="UnitOfAngularSpeed">
        <rdfs:label>units of angular speed</rdfs:label>
        <rdfs:comment>The collection of functions which return elements
            of #$RateOfRotation.  E.g., (#$RadiansPerSecond 5) denotes a
            change of 5 radians in angular distance per second.</rdfs:comment>
        <guid>bd58accb-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#InterconvertibleUnitType"/>
        <rdfs:subClassOf rdf:resource="#UnitOfRate"/>
    </daml:Class>
    <daml:Class rdf:ID="UnitOfArea">
        <rdfs:label>units of area</rdfs:label>
        <rdfs:comment>The collection of functions which return elements
            of #$Area; e.g., (#$SquareYard 4) returns an area of 4
            square yards.</rdfs:comment>
        <guid>bd58c2c7-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#InterconvertibleUnitType"/>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </daml:Class>
    <daml:Class rdf:ID="UnitOfCapacitance">
        <rdfs:label>units of capacitance</rdfs:label>
        <rdfs:comment>The collection of functions which return elements
            of #$ElectricalCapacitance.  E.g., (#$Farad 20) denotes an
            electrical capacitance of 20 farads.</rdfs:comment>
        <guid>bd5888a4-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#InterconvertibleUnitType"/>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </daml:Class>
    <daml:Class rdf:ID="UnitOfCharge">
        <rdfs:label>units of charge</rdfs:label>
        <rdfs:comment>The collection of functions which return elements
            of #$ElectricalCharge.  E.g., (#$Coulomb 3) denotes an
            electrical charge of 3 coulombs.</rdfs:comment>
        <guid>bd588a31-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#InterconvertibleUnitType"/>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </daml:Class>
    <daml:Class rdf:ID="UnitOfConcentration">
        <rdfs:label>units of concentration</rdfs:label>
        <rdfs:comment>The collection of functions which return elements
            of #$ConcentrationStrength-Generic (i.e., mass of some
            element of #$ExistingStuffType per unit of #$Volume).  E.g.,
            (#$GramsPerMilliliter 0.1) denotes a concentration of 0.1
            grams per milliliter of one substance within another.</rdfs:comment>
        <guid>bd6754a3-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#InterconvertibleUnitType"/>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </daml:Class>
    <daml:Class rdf:ID="UnitOfCurrent">
        <rdfs:label>units of current</rdfs:label>
        <rdfs:comment>The collection of functions which return elements
            of #$ElectricalCurrent.  E.g., (#$Ampere 2) denotes an
            instance of #$ElectricalCurrent that would measure two amps.</rdfs:comment>
        <guid>bd58a8db-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#InterconvertibleUnitType"/>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </daml:Class>
    <daml:Class rdf:ID="UnitOfDistance">
        <rdfs:label>units of distance</rdfs:label>
        <rdfs:comment>The collection of functions which return elements
            of #$Distance; e.g., (#$Mile 26.2) denotes 26.2 miles.</rdfs:comment>
        <guid>bd588ab7-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#InterconvertibleUnitType"/>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </daml:Class>
    <daml:Class rdf:ID="UnitOfEnergy">
        <rdfs:label>units of energy</rdfs:label>
        <rdfs:comment>The collection of functions which return elements
            of #$EnergyAsAQuantity.  E.g., (#$Joule 5) denotes 5 joules.</rdfs:comment>
        <guid>bd58dd71-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#InterconvertibleUnitType"/>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </daml:Class>
    <daml:Class rdf:ID="UnitOfFlowRate">
        <rdfs:label>units of flow rate</rdfs:label>
        <rdfs:comment>The collection of functions which return elements
            of #$FlowRate (i.e.,volume of stuff passing a point per unit
            of time).  E.g., (#$CubicMeterPerSec 2000) denotes a
            #$FlowRate of 2000 cubic meters per second.</rdfs:comment>
        <guid>bd5899d1-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#InterconvertibleUnitType"/>
        <rdfs:subClassOf rdf:resource="#UnitOfRate"/>
    </daml:Class>
    <daml:Class rdf:ID="UnitOfFrequency">
        <rdfs:label>units of frequency</rdfs:label>
        <rdfs:comment>The collection of functions which are used for
            expressing how often something occurs during an interval of
            time, i.e., functions which return an element of
            #$Frequency.  E.g., (#$MegaHertz 89.5) returns a frequency
            of 89.5 MHz.</rdfs:comment>
        <guid>bd58ac89-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#InterconvertibleUnitType"/>
        <rdfs:subClassOf rdf:resource="#UnitOfRate"/>
    </daml:Class>
    <daml:Class rdf:ID="UnitOfMass">
        <rdfs:label>units of mass</rdfs:label>
        <rdfs:comment>The collection of functions which return elements
            of #$Mass.  E.g. (#$Kilogram 5) denotes 5 kilograms.</rdfs:comment>
        <guid>bd588a72-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#InterconvertibleUnitType"/>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </daml:Class>
    <daml:Class rdf:ID="UnitOfMeasure">
        <rdfs:label>units of measure</rdfs:label>
        <rdfs:comment>#$UnitOfMeasure is the collection of all functions
            which return elements of #$ScalarInterval that describe
            physical quantities such as #$Speed, #$Volume, etc.  Those
            functions are usually grouped into subsets depending on what
            they measure (e.g., #$UnitOfSpeed,#$UnitOfVolume).
            Functions which belong to #$UnitOfMeasure are variable-arity
            relations that take either one or two arguments, both of
            which must be elements of #$SubLRealNumber. If only one
            argument is given (e.g. (#$Meter 5)), the expression stands
            for a precise quantity (here, 5 meters); see also
            #$ScalarPointValue.  If two arguments are given (e.g.
            (#$Meter 5 10)), the expression stands for a closed interval
            and the arguments are interpreted as the interval&apos;s
            mininum and maximum, respectively. Following are a few
            example uses of some elements of #$UnitOfMeasure:
            `10 years&apos;: (#$YearsDuration 10)              `2
            feet&apos;: (#$Foot-UnitOfMeasure 2)              `50
            dollars and 2 cents&apos;: (#$Dollar-UnitedStates 50.02)
            `between 1 and 50 pounds per square inch, inclusive&apos;:
            (#$PoundsPerSquareInch 1 50)              `dimensionless
            quantity between 3 and 4.1, inclusive&apos;: (#$Unity 3 4.1).</rdfs:comment>
        <guid>bd5880aa-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#RelationshipType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#IndividualDenotingFunction"/>
        <rdfs:subClassOf rdf:resource="#VariableArityRelation"/>
        <rdfs:subClassOf rdf:resource="#UnreifiableFunction"/>
        <daml:disjointWith rdf:resource="#LinguisticObject"/>
    </daml:Class>
    <daml:Class rdf:ID="UnitOfMeasureNoPrefix">
        <rdfs:label>units of measure without a prefix</rdfs:label>
        <rdfs:comment>Please see the #$SharedNote #$NoteForUnitOfMeasureWithPrefixAndNoPrefix.</rdfs:comment>
        <guid>bd5883ec-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </daml:Class>
    <daml:Class rdf:ID="UnitOfMeasureWithPrefix">
        <rdfs:label>unit of measure with prefix</rdfs:label>
        <rdfs:comment>Please see the #$SharedNote #$NoteForUnitOfMeasureWithPrefixAndNoPrefix.</rdfs:comment>
        <guid>bd58f899-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </daml:Class>
    <daml:Class rdf:ID="UnitOfMonetaryFlowRate">
        <rdfs:label>units of monetary flow rate</rdfs:label>
        <rdfs:comment>The collection of functions which return elements
            of #$MonetaryFlowRate (i.e. transfer of money per unit of
            time).  E.g., (#$DollarsPerHour 10) denotes a
            #$MonetaryFlowRate of $10 per hour.</rdfs:comment>
        <guid>bd589991-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#InterconvertibleUnitType"/>
        <rdfs:subClassOf rdf:resource="#UnitOfRate"/>
    </daml:Class>
    <daml:Class rdf:ID="UnitOfMoney">
        <rdfs:label>units of money</rdfs:label>
        <rdfs:comment>A collection of Cyc functions.
            #$Dollar-UnitedStates, #$Peso-Mexico, and #$Yen-Japan are
            each elements of this collection (along with functions for
            many other nations&apos;s monetary units).  Each of these is
            a function which, given real numbers as arguments, returns
            an instance of the collection #$Money (q.v.).  For example,
            (#$Dollar-UnitedStates 5.99) denotes an element of #$Money
            whose size, or amount, is five dollars and 99 cents,
            expressed in the `unit of measure&apos; US dollars; in
            short, (#$Dollar-UnitedStates 5.99) denotes $5.99.    Note:
            The monetary values associated with the members of
            #$UnitOfMoney, and the exchange rates between them,
            fluctuate (sometimes widely) over very short periods of time
            -- daily, even hourly.  In being heavily time-dependent,
            #$UnitOfMoney is unlike most other subsets of #$UnitOfMeasure.</rdfs:comment>
        <guid>bd5883c5-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#InterconvertibleUnitType"/>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </daml:Class>
    <daml:Class rdf:ID="UnitOfPower">
        <rdfs:label>units of power</rdfs:label>
        <rdfs:comment>The collection of functions which return elements
            of #$Power.  E.g., (#$Watt 5) denotes 5 watts.</rdfs:comment>
        <guid>bd58ea5a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#InterconvertibleUnitType"/>
        <rdfs:subClassOf rdf:resource="#UnitOfRate"/>
    </daml:Class>
    <daml:Class rdf:ID="UnitOfPressure">
        <rdfs:label>units of pressure</rdfs:label>
        <rdfs:comment>The collection of functions which return elements
            of #$Pressure (i.e., force per unit #$Area) or #$Elasticity.
            E.g., (#$Pascal-UnitOfPressure 175) denotes a #$Pressure of
            175 pascals.</rdfs:comment>
        <guid>bd58c776-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#InterconvertibleUnitType"/>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </daml:Class>
    <daml:Class rdf:ID="UnitOfRate">
        <rdfs:label>units of rate</rdfs:label>
        <rdfs:comment>The collection of functions which return elements
            of #$Rate.  This includes any measurement function (see
            #$UnitOfMeasure) whose #$unitOfMeasureExpansions list
            includes the factor (-1 #$UnitOfTime).  For example,
            (#$DollarsPerDay 1000) denotes $1000 per day.</rdfs:comment>
        <guid>bd5890ac-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#InterconvertibleUnitType"/>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </daml:Class>
    <daml:Class rdf:ID="UnitOfSpeed">
        <rdfs:label>units of speed</rdfs:label>
        <rdfs:comment>The collection of functions which return elements
            of Speed.  For example, the value of the function
            #$MilesPerHour applied to the number five -- (#$MilesPerHour
            5) -- is five miles per hour.</rdfs:comment>
        <guid>bddfadc2-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#InterconvertibleUnitType"/>
        <rdfs:subClassOf rdf:resource="#UnitOfRate"/>
    </daml:Class>
    <daml:Class rdf:ID="UnitOfTemperature">
        <rdfs:label>units of temperature</rdfs:label>
        <rdfs:comment>The collection of functions which return elements
            of #$Temperature.  E.g., (#$DegreeFahrenheit 451) denotes a
            #$Temperature of 451 F.</rdfs:comment>
        <guid>bd58b17f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#InterconvertibleUnitType"/>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </daml:Class>
    <daml:Class rdf:ID="UnitOfTime">
        <rdfs:label>units of time</rdfs:label>
        <rdfs:comment>The collection of functions which return elements
            of #$Time-Quantity; e.g., (#$YearsDuration 100) returns a
            time period equal to a century.</rdfs:comment>
        <guid>bd58f9c5-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#InterconvertibleUnitType"/>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </daml:Class>
    <daml:Class rdf:ID="UnitOfVoltage">
        <rdfs:label>units of voltage</rdfs:label>
        <rdfs:comment>The collection of functions which return elements
            of #$Voltage.  E.g., (#$Volt 120) denotes an electrical
            voltage of 120 volts.</rdfs:comment>
        <guid>bd58ea9c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#InterconvertibleUnitType"/>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </daml:Class>
    <daml:Class rdf:ID="UnitOfVolume">
        <rdfs:label>units of volume</rdfs:label>
        <rdfs:comment>The collection of functions which return elements
            of #$Volume.  E.g., (#$Liter 5) denotes 5 liters.</rdfs:comment>
        <guid>bd58fd9f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#InterconvertibleUnitType"/>
        <rdfs:subClassOf rdf:resource="#UnitOfMeasure"/>
    </daml:Class>
    <daml:Class rdf:ID="UnitVector-Precise">
        <rdfs:label>unit vector - precise</rdfs:label>
        <rdfs:comment>The collection #$UnitVector-Precise is a subset of
            #$Vector-Precise and of #$UnitVectorInterval.  Each element
            of #$UnitVector-Precise is a vector interval with a
            magnitude of 1 and a precisely specified direction (e.g.,
            due North, straight down).  Thus, one precise unit vector
            differs from another only in direction, since each vector
            consists of a magnitude and a direction (in a space of n
            &gt; 1 dimensions).  So elements of #$UnitVector-Precise in
            effect indicate different directions such as `straight
            up&apos; or `due East&apos;.</rdfs:comment>
        <guid>bd58ec98-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#UnitVectorInterval"/>
        <rdfs:subClassOf rdf:resource="#Vector-Precise"/>
    </daml:Class>
    <daml:Class rdf:ID="UnitVectorInterval">
        <rdfs:label>unit vector interval</rdfs:label>
        <rdfs:comment>The collection #$UnitVectorInterval is a subset of
            #$VectorInterval.  Each element of #$UnitVectorInterval is a
            vector interval with a magnitude of 1.  The range of the
            endpoints of all the unit vectors  [#$UnitVector-Precise]
            form a contiguous curve (in 2 space), surface (in 3 space),
            volume (in 4 space), etc. depending upon the dimentionality
            of the vector.  One #$UnitVectorInterval differs from
            another only in range of direction, since the magnitude of
            every #$UnitVectorInterval is the same.  An element of
            #$UnitVectorInterval may specify either a precise unit
            vector [#$UnitVector-Precise] or a generalized range of
            directions such as `in front of&apos;.  The range of
            directions in 3-space may be quite irregular, such as the
            direction interval from #$Chile to #$Russia.</rdfs:comment>
        <guid>bd58eb0c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#VectorInterval"/>
    </daml:Class>
    <Entity rdf:ID="UnitedKingdomOfGreatBritainAndNorthernIreland">
        <rdfs:label>the United Kingdom</rdfs:label>
        <rdfs:comment>The United Kingdom of Great Britain and Northern
            Ireland, (the United Kingdom, or UK), an independent country
            off the northwest coast of Europe consisting of #$England,
            #$Scotland, #$Wales, and #$NorthernIreland, and possessing
            all British colonies and other possessions.  It technically
            excludes the #$IsleOfMan-Island and the #$ChannelIslands,
            which are realms of the British monarch.</rdfs:comment>
        <guid>bd589184-9c29-11b1-9dad-c379636f7270</guid>
    </Entity>
    <InternationalOrganizationOfCountries rdf:ID="UnitedNationsOrganization">
        <rdfs:label>United Nations</rdfs:label>
        <rdfs:comment>This constant represents the United Nations (U.N.)
            -- the international organization founded at the end of
            World War II and now comprising almost all of the countries
            in the world (with some exceptions, e.g., Taiwan).</rdfs:comment>
        <guid>bd590c36-9c29-11b1-9dad-c379636f7270</guid>
    </InternationalOrganizationOfCountries>
    <IndependentCountry rdf:ID="UnitedStatesOfAmerica">
        <rdfs:label>the United States</rdfs:label>
        <rdfs:comment>The United States of America, a large independent
            country constisting of the territory, population, and
            infrastructure of the United States, considered as a whole,
            i.e., an element of #$GeopoliticalEntity.  The nation is
            mostly in the #$ContinentOfNorthAmerica south and west of
            #$Canada and north of #$Mexico.  It was founded in 1776 by
            emigrants from Europe.</rdfs:comment>
        <guid>bd58a42a-9c29-11b1-9dad-c379636f7270</guid>
    </IndependentCountry>
    <daml:Class rdf:ID="UnitedStatesPerson">
        <rdfs:label>united states person</rdfs:label>
        <rdfs:comment>A collection of persons.  Each element of
            #$UnitedStatesPerson is a person who either was born in the
            #$UnitedStatesOfAmerica or is currently among that
            country&apos;s #$citizens.</rdfs:comment>
        <guid>bd58f5ce-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#Nationality"/>
        <rdfs:subClassOf rdf:resource="#Person"/>
    </daml:Class>
    <daml:Class rdf:ID="UnitedStatesPresident">
        <rdfs:label>United States presidents</rdfs:label>
        <rdfs:comment>A collection of temporal slices (#$subAbstrac) of
            persons.  Each element of #$UnitedStatesPresident is a
            person who holds the office of #$UnitedStatesPresident under
            the Constitution.  Examples: #$BillClinton from January 1993
            through the present (January 1998); #$RichardNixon from
            January 1969 till his resignation in 1974; #$LyndonJohnson
            from November 1963 until January 1969.  John Hansen and
            others who held the title under the Articles of
            Confederation, are not included in this collection.
            Although ex-U.S. Presidents have, in recent journalistic
            practice, tended to retain the title `President&apos;,
            although those individuals are no longer members of the
            collection #$UnitedStatesPresident after they leave office.</rdfs:comment>
        <guid>c10052d1-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#OccupationType"/>
        <rdfs:subClassOf rdf:resource="#Politician"/>
        <rdfs:subClassOf rdf:resource="#HeadOfGovernment"/>
        <rdfs:subClassOf rdf:resource="#PublicOfficial"/>
        <rdfs:subClassOf rdf:resource="#President-HeadOfGovernmentOrHeadOfState"/>
        <rdfs:subClassOf rdf:resource="#UnitedStatesPerson"/>
        <rdfs:subClassOf rdf:resource="#HumanAdult"/>
    </daml:Class>
    <daml:Class rdf:ID="University">
        <rdfs:label>universities</rdfs:label>
        <rdfs:comment>A collection of educational organizations. An
            element  of #$University is an organization, usually (but
            not always) called  `University&apos;, which does
            university-level teaching and/or research. Some
            universities comprise multiple `colleges&apos; and
            professional schools.  Some universities lie within a more
            or less local and spatially  contiguous campus (e.g.
            #$UniversityOfTexasAtAustin) while others  consist of a
            system of campuses (e.g. #$UniversityOfTexas).</rdfs:comment>
        <guid>bd58e3be-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#ResearchOrganization"/>
        <rdfs:subClassOf rdf:resource="#EducationalOrganization"/>
    </daml:Class>
    <CycHLTruthValue rdf:ID="Unknown-HLTruthValue">
        <rdfs:label>unknown - h l truth value</rdfs:label>
        <rdfs:comment/>
        <guid>bd58f8fe-9c29-11b1-9dad-c379636f7270</guid>
    </CycHLTruthValue>
    <daml:Class rdf:ID="UnorderedAttributeType">
        <rdfs:label>unordered attribute type</rdfs:label>
        <rdfs:comment>A collection of collections.  Each element of
            #$UnorderedAttributeType is a collection of attributes whose
            values are not ordered over their whole range of possible
            values.  A collection belonging to #$UnorderedAttributeType
            contains values that are incommensurable with one another.
            For example, the `suit&apos; attribute of playing cards
            (unlike the number or face value of the cards) is an
            unordered attribute in card games where no suit is
            considered higher than another.  The `gender&apos; attribute
            of animals is an #$UnorderedAttributeType, as well.  By
            contrast, see #$PrimitiveAttributeType.</rdfs:comment>
        <guid>bd58d593-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#SiblingDisjointCollection"/>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="#AttributeType"/>
    </daml:Class>
    <daml:Class rdf:ID="UnreifiableFunction">
        <rdfs:label>unreifiable function</rdfs:label>
        <rdfs:comment>The collection of all Cyc functions whose values
            CANNOT be reified and treated like Cyc constants.  Usually
            we want to make functions reifiable for efficiency reasons
            (see #$ReifiableFunction), but on the other hand, it is not
            desirable to reify every non-atomic term; for example, all
            the measurable quantities, such as (#$Inch 5), and the
            numbers which result from using elements of
            #$FunctionFromQuantitiesToQuantities (e.g., #$PlusFn),
            should all be instances of #$UnreifiableFunction.</rdfs:comment>
        <guid>bd992179-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#RelationshipType"/>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#Function-Denotational"/>
        <daml:disjointWith rdf:resource="#ReifiableFunction"/>
    </daml:Class>
    <TerrestrialDirection rdf:ID="Up-Directly">
        <rdfs:label>up - directly</rdfs:label>
        <rdfs:comment>The direction straight up.  In the terrestrial
            context, #$Up-Directly points in the opposite direction of
            Earth&apos;s gravitational force vector.</rdfs:comment>
        <guid>bd5889a9-9c29-11b1-9dad-c379636f7270</guid>
    </TerrestrialDirection>
    <TerrestrialDirection rdf:ID="Up-Generally">
        <rdfs:label>upward</rdfs:label>
        <rdfs:comment>The element of #$VectorInterval which comprises
            the cone-shaped set of vectors pointing (from some reference
            point) within approximately forty-five degrees of #$Up-Directly.</rdfs:comment>
        <guid>bd58a4d6-9c29-11b1-9dad-c379636f7270</guid>
    </TerrestrialDirection>
    <OrientationAttribute rdf:ID="UpSideDown">
        <rdfs:label>upside-down</rdfs:label>
        <rdfs:comment>(#$orientation OBJECT #$UpSideDown) means that
            OBJECT&apos;s intrinsic bottom (e.g., the hull of a ship) is
            above (#$above-Directly) its intrinsic top (e.g., the
            masthead).  Many things don&apos;t work properly when upside
            down, e.g., sailboats, salad bowls, newspapers.</rdfs:comment>
        <guid>c0fbac43-9c29-11b1-9dad-c379636f7270</guid>
    </OrientationAttribute>
    <Posture rdf:ID="UprightPosture">
        <rdfs:label>stance</rdfs:label>
        <rdfs:comment>The attribute that describes an #$Animal in an
            upright, i.e. vertically extended, #$Posture.
            (#$postureOfAnimal ANIMAL #$UprightPosture) is implied by
            walking and running, as well as by standing.</rdfs:comment>
        <guid>bd5903e0-9c29-11b1-9dad-c379636f7270</guid>
    </Posture>
    <daml:Class rdf:ID="UrbanArea">
        <rdfs:label>urban areas</rdfs:label>
        <rdfs:comment>A collection of geographical regions; a subset of
            #$HumanResidenceArea.  Each element of #$UrbanArea is a
            region that has urban features.  Elements of #$UrbanArea can
            be as small as an urban neighborhood, or as big as, say, the
            New York City Metropolitan Area.  By default, urbanness is
            an intrinsic property of such areas; i.e., every subregion
            of an element of #$UrbanArea is also an instance of
            #$UrbanArea.  Examples: #$UTAustinCampus, #$WestlakeHills,
            #$CityOfAustinTX, #$CityOfToulouseFrance,
            #$CityOfMurmanskRussia, #$CityOfTaipeiTaiwan, #$ResearchTrianglePark.</rdfs:comment>
        <guid>bd58caec-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#HumanResidenceArea"/>
    </daml:Class>
    <daml:Class rdf:ID="UrgeToScratch">
        <rdfs:label>itches</rdfs:label>
        <rdfs:comment>This is a #$Collection of physical urges of a
            certain type, namely the urges that animals have to scratch
            an itch (and their accompanying internal sensations.)</rdfs:comment>
        <guid>bd58a509-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PhysicalUrgeType"/>
        <rdfs:subClassOf rdf:resource="#AnimalPhysiologicalAttribute"/>
        <rdfs:subClassOf rdf:resource="#InternalSensoryAttribute"/>
    </daml:Class>
    <daml:Class rdf:ID="UrgeToSneeze">
        <rdfs:label>urge to sneeze</rdfs:label>
        <rdfs:comment>This is a #$Collection of physical urges of a
            certain type, namely the urges that animals have to sneeze
            (and their accompanying internal sensations.)</rdfs:comment>
        <guid>bd58a54a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#PhysicalUrgeType"/>
        <rdfs:subClassOf rdf:resource="#AnimalPhysiologicalAttribute"/>
        <rdfs:subClassOf rdf:resource="#InternalSensoryAttribute"/>
    </daml:Class>
    <daml:Class rdf:ID="UserRightsAttribute">
        <rdfs:label>property rights</rdfs:label>
        <rdfs:comment>A collection of attributes.  An instance of
            #$UserRightsAttribute describes what right an agent has to
            use something.  For example, the rights of an owner of a
            house can be distinguished from the rights of a renter by
            specifying the appropriate #$UserRightsAttributes.  Elements
            of #$UserRightsAttributes include: #$FullUseRights (the
            agent can do whatever s/he wants with it),
            #$ExclusiveUserRights (the agent is the only authorized
            user), #$PrimaryUserRights (this agent&apos;s uses take
            priority over everyone else&apos;s),
            #$GroupUserRightsAttribute (the agent&apos;s right to use
            something depends on membership in a group), and more.</rdfs:comment>
        <guid>bd58e3d4-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#UnorderedAttributeType"/>
        <rdfs:subClassOf rdf:resource="#AttributeValue"/>
    </daml:Class>
    <daml:Class rdf:ID="Utterance">
        <rdfs:label>utterances</rdfs:label>
        <rdfs:comment>A collection of information bearing things (IBTs);
            a subset of #$AnimalSound.  Each element of #$Utterance is a
            sound which was initially generated by someone speaking or
            making some sound with the mouth.  If such IBTs are recorded
            and played back, the sound generated is still considered an
            element of #$Utterance.  Examples: your spouse saying `Good
            morning&apos; today; Ed McMahon saying `Here&apos;s
            Johnny&apos; (on almost innumerable occasions); a child
            screaming at a playmate; Humphrey Bogart saying `Here&apos;s
            looking at you&apos; on the set of `Casablanca&apos;.</rdfs:comment>
        <guid>bd590c24-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#AudibleSound"/>
        <rdfs:subClassOf rdf:resource="#AnimalSound"/>
        <rdfs:subClassOf rdf:resource="#SoundInformationBearingThing"/>
    </daml:Class>
    <daml:Class rdf:ID="VariableArityRelation">
        <rdfs:label>variable arity relation</rdfs:label>
        <rdfs:comment>A collection of relationships.  Each element of
            #$VariableArityRelation is a relationship that can take a
            variable number of arguments, making it unlike most
            relationships, which have a fixed number of argument places.
            Examples of #$VariableArityRelation include conjunction
            (#$and) and functions such as addition (#$PlusFn) that
            accept a variable number of arguments.</rdfs:comment>
        <guid>bd5d0b56-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdfs:subClassOf rdf:resource="#Relation"/>
    </daml:Class>
    <daml:Class rdf:ID="VariableAritySkolemFuncN">
        <rdfs:label>variable arity skolem func n</rdfs:label>
        <rdfs:comment>The subcollection of #$SkolemFuncNs with variable
            arity. These are only created when a sequence variable is in
            the scope of  a bounded existential.</rdfs:comment>
        <guid>becf783a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdf:type rdf:resource="#RelationshipType"/>
        <rdfs:subClassOf rdf:resource="#SkolemFuncN"/>
        <rdfs:subClassOf rdf:resource="#VariableAritySkolemFunction"/>
    </daml:Class>
    <daml:Class rdf:ID="VariableAritySkolemFunction">
        <rdfs:label>variable arity skolem function</rdfs:label>
        <rdfs:comment>The subcollection of #$SkolemFunctions with
            variable arity. These are only created when a sequence
            variable is in the scope of the skolem.</rdfs:comment>
        <guid>bdb0bfbf-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#CoreConstant"/>
        <rdf:type rdf:resource="#RelationshipType"/>
        <rdfs:subClassOf rdf:resource="#SkolemFunction"/>
        <rdfs:subClassOf rdf:resource="#VariableArityRelation"/>
    </daml:Class>
    <daml:Class rdf:ID="Vector-Precise">
        <rdfs:label>vector - precise</rdfs:label>
        <rdfs:comment>A collection of vectors; a subset of
            #$VectorInterval.  Each element of #$Vector-Precise is an
            exactly indicated (i.e., point) vector, such as `5 feet due
            West&apos;.  Both direction and distance are precise.  Thus,
            #$Vector-Precise is to #$VectorInterval what
            #$ScalarPointValue is to #$ScalarInterval.  #$Vector-Precise
            includes all the instances of #$UnitVector-Precise.</rdfs:comment>
        <guid>bd58dd86-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#VectorInterval"/>
    </daml:Class>
    <daml:Class rdf:ID="VectorInterval">
        <rdfs:label>vector interval</rdfs:label>
        <rdfs:comment>The collection #$VectorInterval is a subset of
            #$NTupleInterval.  Each element of #$VectorInterval is an
            n-tuple of intervals (where n &gt; 1), one of which is a
            direction.  Like the elements of #$ScalarInterval, the
            intervals in an element of #$VectorInterval may be
            point-valued or cover a range of values.  The minimal
            interval (i.e., point-valued) type of vector interval is
            exemplified by a vector such as `10 meters due east&apos;.
            Vectors may also cover a range of values; e.g., `at least 10
            feet away and in a horizontal direction&apos;; `between ten
            to twelve miles NNW&apos;.</rdfs:comment>
        <guid>bd58ec12-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#NTupleInterval"/>
    </daml:Class>
    <daml:Class rdf:ID="Vegetable-Food">
        <rdfs:label>vegetables</rdfs:label>
        <rdfs:comment>A collection of edible stuff.  Each element of
            #$Vegetable-Food is a foodstuff which is derived from a
            plant and is ordinarily considered a vegetable; e.g., a
            carrot (an instance of #$Carrot-Foodstuff), a potato (an
            instance of #$Potato-Foodstuff), a lima bean (a
            #$Bean-Foodstuff), a tomato (a #$Tomato-Foodstuff).  Note:
            #$Vegetable-Food includes certain plant parts that are
            technically classified as fruits by botanists, but which are
            treated as vegetables in food classification -- such as
            tomatoes.  These would, e.g., be found in the vegetables
            section of a supermarket, and they satisfy more of the
            axioms about vegetables than those about fruits (e.g., sweetness.)</rdfs:comment>
        <guid>bd58eacd-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#DefaultDisjointFoodType"/>
        <rdfs:subClassOf rdf:resource="#EdibleStuff"/>
        <rdfs:subClassOf rdf:resource="#PlantProduct"/>
        <rdfs:subClassOf rdf:resource="#VegetableMatter"/>
    </daml:Class>
    <daml:Class rdf:ID="Vegetable-Plant">
        <rdfs:label>vegetables</rdfs:label>
        <rdfs:comment>A collection of plants that play a special role in
            human nutrition.  Each element of #$Vegetable-Plant is a
            plant that produces the edible things that we normally call
            `vegetables&apos; (which can include fruits, seeds, stalks,
            leaves, or other parts, or even the whole plant).  The
            elements of #$Vegetable-Plant grow in gardens and produce
            the vegetables that are eaten; vegetable plants are not
            necessarily also elements of #$Food.  See #$Vegetable-Food
            for the collection of vegetables--plants or (more usually)
            plant parts--that are eaten by humans.</rdfs:comment>
        <guid>bd58c247-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Plant-NonWoody"/>
    </daml:Class>
    <daml:Class rdf:ID="VegetableMatter">
        <rdfs:label>vegetable matter</rdfs:label>
        <rdfs:comment>A collection of tangible stuff.  Each element of
            #$VegetableMatter is a piece of stuff (solid, liquid, or,
            improbably but conceivably, gaseous) which is a piece of
            vegetable material.  This includes all instances of
            #$PlantProduct (such as elements of its subsets
            #$VegetableOil, #$TobaccoLeaf, #$Jute-Fiber,
            #$VanillaExtract, etc.), as well as naturally occurring
            pieces of vegetable matter (e.g., a clod of peat in a bog,
            an apple hanging on a tree, a mushroom growing wild in a forest).</rdfs:comment>
        <guid>bd58c455-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdfs:subClassOf rdf:resource="#NaturalTangibleStuff"/>
        <rdfs:subClassOf rdf:resource="#OrganicStuff"/>
        <daml:disjointWith rdf:resource="#Animal"/>
    </daml:Class>
    <daml:Class rdf:ID="Verb">
        <rdfs:label>verbs</rdfs:label>
        <rdfs:comment>The collection of all verbs. Verbs usually denote
            events, states, or processes. Verbs can be conjugated.
            Example: `eat&apos;.</rdfs:comment>
        <guid>bd58807c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#LinguisticObjectType"/>
        <rdf:type rdf:resource="#SpeechPart"/>
    </daml:Class>
    <daml:Class rdf:ID="Vermin">
        <rdfs:label>varmints</rdfs:label>
        <rdfs:comment>A collection of animals considered undesirable to
            find living in human habitation buildings or other
            facilities. </rdfs:comment>
        <guid>bd58a57c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#NonPersonAnimal"/>
    </daml:Class>
    <daml:Class rdf:ID="Vertebrate">
        <rdfs:label>vertebrates</rdfs:label>
        <rdfs:comment>A collection of animals; one of the #$taxonMembers
            of the #$ChordataPhylum.   Each element of #$Vertebrate is
            an animal that has a backbone or spine made of bony or
            cartilaginous vertebrae, which may be separate or fused.
            #$Vertebrate includes the most familiar animals, viz., the
            instances of #$Mammal, #$Reptile, #$Bird, #$Fish.  Some
            biologists class the &apos;Vertebrata&apos; as a sub-phylum
            of the #$ChordataPhylum.  #$Vertebrate excludes Amphioxus.</rdfs:comment>
        <guid>bd58a5e6-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#BiologicalSubphylum"/>
        <rdf:type rdf:resource="#BiologicalTaxon"/>
        <rdfs:subClassOf rdf:resource="#ChordataPhylum"/>
        <rdfs:subClassOf rdf:resource="#Animal"/>
        <daml:disjointWith rdf:resource="#Invertebrate"/>
    </daml:Class>
    <TerrestrialDirection rdf:ID="VerticalDirection">
        <rdfs:label>vertical</rdfs:label>
        <rdfs:comment>The element of #$VectorInterval that comprises all
            the vectors that are parallel to #$Up-Directly and #$Down-Directly.</rdfs:comment>
        <guid>bd58baba-9c29-11b1-9dad-c379636f7270</guid>
    </TerrestrialDirection>
    <OrientationAttribute rdf:ID="VerticalOrientation">
        <rdfs:label>vertical</rdfs:label>
        <rdfs:comment>(#$orientation OBJECT #$VerticalOrientation) means
            that OBJECT is vertical with respect to the current instance
            of #$FrameOfReference.  A linear (#$LongAndThin) object is
            vertical if and only if its longest dimension is
            perpendicular to horizontal (#$HorizontalDirection).  A
            planar (#$SheetShaped) object has #$VerticalOrientation if
            and only if its planar surface is perpendicular to the
            current horizontal plane.  Typically, vertical objects
            include window panes, skyscrapers, trees, radio towers, and walls.</rdfs:comment>
        <guid>c0fbad0b-9c29-11b1-9dad-c379636f7270</guid>
    </OrientationAttribute>
    <Alertness rdf:ID="VeryAlert">
        <rdfs:label>very alert</rdfs:label>
        <rdfs:comment>#$VeryAlert is an #$Alertness attribute which is a
            specialization of #$Awake.  It is the state of an #$Animal
            paying particular attention to its environment (or a
            specific aspect thereof).  It is the state an #$Antelope is
            in after smelling a #$Lion, or a burglar is in after hearing
            the front door open.</rdfs:comment>
        <guid>bd58a67c-9c29-11b1-9dad-c379636f7270</guid>
    </Alertness>
    <daml:Class rdf:ID="VeterinaryHospital">
        <rdfs:label>veterinary hospitals</rdfs:label>
        <rdfs:comment>The collection of all local organizations that
            provide professional medical care to non-human animals.
            Note that this is not a specialization of Hospital.  The
            names may be the same, but hospitals provide medical care to
            persons only.</rdfs:comment>
        <guid>c10c37d5-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#MedicalCareOrganization"/>
    </daml:Class>
    <daml:Class rdf:ID="VibrationThroughAMediumSensor">
        <rdfs:label>vibration sensors</rdfs:label>
        <rdfs:comment>A subset of #$Sensor, namely those sensors that
            detect amplitude and frequency of vibrations through a
            physical medium.  This includes ears, skin, and also
            artificial devices such as microphones, seismographs, etc.
            Note:  #$Eyes are not #$VibrationThroughAMediumSensors
            because there need not be any physical medium for
            electromagnetic wave propagation.  This is a somewhat close
            call, and indeed in past centuries most people believed that
            light propagated through aether, but what it comes down to
            is this:  consider all the axioms that apply only to the
            structure, function, and operation, failure, etc. of a
            #$VibrationThroughAMediumSensor, and of that set how many
            hold true for eyes --- and the answer is No, most of them
            don&apos;t.  So parsimony dictates that #$Eye not be a
            subset of #$VibrationThroughAMediumSensor.</rdfs:comment>
        <guid>bd58dbc2-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Sensor"/>
    </daml:Class>
    <daml:Class rdf:ID="Vine-Plant">
        <rdfs:label>vines</rdfs:label>
        <rdfs:comment>The collection of vine plants, #$Plants that are
            in the form (gross form and habit) of long tendrils or long,
            narrow, flexible ropy strands.</rdfs:comment>
        <guid>bd58c2a3-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdf:type rdf:resource="#OrganismClassificationType"/>
        <rdfs:subClassOf rdf:resource="#Plant"/>
        <rdfs:subClassOf rdf:resource="#TerrestrialOrganism"/>
    </daml:Class>
    <daml:Class rdf:ID="Virus">
        <rdfs:label>viruses</rdfs:label>
        <rdfs:comment>The collection of tiny microbes called viruses,
            each consisting mainly of a capsid (capsule chamber)
            containing viral DNA or RNA.  Viruses have no cells, but
            reproduce by inserting into living cells the viral DNA or
            RNA, which then uses cellular mechanisms to create new
            viruses.  Viruses cause many diseases in all other
            organisms; some can infect elements of #$Bacterium.  #$Virus
            excludes prions, bacteria, rickettsia, and protists.</rdfs:comment>
        <guid>bd589742-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#OrganismClassificationType"/>
    </daml:Class>
    <daml:Class rdf:ID="Visa-Permit">
        <rdfs:label>visas</rdfs:label>
        <rdfs:comment>A collection of permissions.  Each element of
            #$Visa-Permit is an authorization issued by the government
            of some country to one (or more) person(s), stating that
            s/he is allowed to enter that country and remain for a
            certain period of time while engaging in certain specified
            activities (e.g., study, travel, work).  Examples: (United
            States) #$H1WorkVisa, #$F1WorkVisa, #$GreenCard.</rdfs:comment>
        <guid>bd5af45a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Credential"/>
        <rdfs:subClassOf rdf:resource="#Permission"/>
        <rdfs:subClassOf rdf:resource="#LegalAgreement"/>
    </daml:Class>
    <daml:Class rdf:ID="Viscosity">
        <rdfs:label>viscosities</rdfs:label>
        <rdfs:comment>A collection of attributes; a subset of
            #$PhysicalAttribute.  Each element of #$Viscosity represents
            a specific viscosity (i.e., `runniness&apos;) of some
            #$LiquidTangibleThing.  The lower the viscosity of a liquid,
            the more easily it flows or spreads out.  Different
            viscosities may be represented with a #$GenericValueFunction
            (q.v.), or by using some common substance as a reference
            (e.g., #$ViscousAsWater, #$ViscousAsHoney).  Vicosities of
            objects are indicated with the predicate #$viscosityOfSubstance.</rdfs:comment>
        <guid>bd5904a7-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MeasurableAttributeType"/>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </daml:Class>
    <daml:Class rdf:ID="Visibility">
        <rdfs:label>visibility</rdfs:label>
        <rdfs:comment>A collection of attributes; a subset of
            #$ScalarInterval.  Each element of #$Visibility is a
            characterization of how clear the ambient fluid at a
            location is.  Higher values indicate one can see farther
            (than one could have at lower values at the same location).
            Different degrees of visibility may be designated using a
            #$GenericValueFunction.  Visibility at a location is
            expressed with the predicate #$ambientVisibility.</rdfs:comment>
        <guid>bd58d2a5-9c29-11b1-9dad-c379636f7270</guid>
        <rdfs:subClassOf rdf:resource="#PhysicalAttribute"/>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </daml:Class>
    <daml:Class rdf:ID="VisibleLight">
        <rdfs:label>light waves</rdfs:label>
        <rdfs:comment>A collection of events; a subset of
            #$ElectromagneticRadiation.  Each element of #$VisibleLight
            is an instance of electromagnetic radiation having a
            wavelength approximately between 3800 and 7750 #$Angstroms,
            i.e., light visible to human eyes.</rdfs:comment>
        <guid>bd58f608-9c29-11b1-9dad-c379636f7270</guid>
    </daml:Class>
    <daml:Class rdf:ID="VisitingSomeone">
        <rdfs:label>visits</rdfs:label>
        <rdfs:comment>A collection of actions.  In a #$VisitingSomeone
            event, one #$Agent travels or moves to the vicinity of
            another #$Agent for the purpose of meeting with that other
            #$Agent.  Each #$VisitingSomeone is purposeful, at least on
            the part of the #$Agent doing the travelling, and that
            #$Agent is typically a #$Person, and the purpose is often
            social in nature.</rdfs:comment>
        <guid>bd58d4d3-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
        <rdfs:subClassOf rdf:resource="#SociabilityBasedAction"/>
    </daml:Class>
    <daml:Class rdf:ID="VisualCommunicating">
        <rdfs:label>visual communicating</rdfs:label>
        <rdfs:comment>A collection of information transfer events; a
            subset of #$Communicating.  Each element of
            #$VisualCommunicating is an action in which information is
            transmitted by visual media.  Every element of
            #$VisualCommunicating has at least one #$communicationToken
            which is an instance of #$VisualInformationSource.  Examples
            of #$VisualCommunicating: a performance by mime Marcel
            Marceau; Seiji Ozawa conducting the Boston Symphony
            Orchestra; a policeman directing traffic; shaking a fist at
            someone in anger; sending a message with flags, light
            pulses, or smoke signals.</rdfs:comment>
        <guid>bd58a4fc-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#Communicating"/>
    </daml:Class>
    <daml:Class rdf:ID="VisualImage">
        <rdfs:label>images</rdfs:label>
        <rdfs:comment>A collection of information bearing things (IBTs);
            a subset of #$InformationBearingWavePropagation.  Each
            element of #$VisualImage is an #$Event in which visible
            light is generated in a particular pattern.  The generated
            pattern of light contains information for an observer
            familiar with the interpretive conventions.  Visual images
            may be produced by illuminating some instance of
            #$VisualInformationSource, which is a tangible object (e.g.,
            a photograph, movie film, or page of print), or by direct
            manipulation of light(s) to produce a pattern (e.g.,
            nautical code lights).  Visual images may be instantaneous
            or extended in time.  Visual images may be classified by
            features of their appearance (e.g., #$ColorImage,
            #$BlackAndWhiteImage), by their origin (e.g., #$XRayImage,
            #$PenOrPencilDrawing, #$SatelliteImage), their content
            (e.g., #$LandscapeImage), and other distinctions.  Note:
            The #$VisualImage is #$InformationBearingWavePropagation
            #$Event, not the abstract pattern which may be shared
            between such Events.</rdfs:comment>
        <guid>bd590bda-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#VisibleLight"/>
        <rdfs:subClassOf rdf:resource="#InformationBearingWavePropagation"/>
    </daml:Class>
    <daml:Class rdf:ID="VisualInformationConveyingAct">
        <rdfs:label>visual information conveying act</rdfs:label>
        <rdfs:comment>The collection of actions that express (transmit)
            visual information.</rdfs:comment>
        <guid>bd58f666-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#IBTGeneration"/>
    </daml:Class>
    <daml:Class rdf:ID="VisualInformationSource">
        <rdfs:label>visual information sources</rdfs:label>
        <rdfs:comment>A collection of information  bearing things
            (IBTs).  Each element of #$VisualInformationSource is  an
            IBT from which information is extracted by viewing it (with
            the  appropriate interpretive conventions).  Examples of
            #$VisualInformationSource include handwritten letters;
            newspapers and  other print media objects; paintings,
            sculpture, and other visual art  objects; projected images,
            neon signs, etc.  The information content  of instances of
            #$VisualInformationSource may or may not be  propositional
            in nature.  In the proper conditions elements of
            #$VisualInformationSources produce #$VisualImages.  For
            example, if  one shines light on a photograph, a
            characteristic #$VisualImage is  produced.  Likewise, if one
            electrifies a neon sign a #$VisualImage is  produced.</rdfs:comment>
        <guid>bd58cfb6-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdf:type rdf:resource="#ObjectType"/>
        <rdfs:subClassOf rdf:resource="#InformationBearingThing"/>
    </daml:Class>
    <daml:Class rdf:ID="VisualMark">
        <rdfs:label>markings</rdfs:label>
        <rdfs:comment>A collection of information bearing things (IBTs);
            a subset of #$VisualInformationSource.  Each element of
            #$VisualMark is a visible marking on some object.  Visual
            markings may be applied to an object using ink, paint, or
            pencil; they may be engraved into or molded out of the
            object&apos;s material; they may be made of other objects
            affixed to or resting on the object (e.g., a plaque bearing
            a house number); or they may consist of contrasting areas of
            color or light level (e.g., markings on a computer screen).</rdfs:comment>
        <guid>bd590b98-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingStuffType"/>
        <rdfs:subClassOf rdf:resource="#VisualInformationSource"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangible"/>
    </daml:Class>
    <daml:Class rdf:ID="VisualPerception">
        <rdfs:label>glimpses</rdfs:label>
        <rdfs:comment>The collection of sensory #$Perceivings in which a
            #$PerceptualAgent #$sees something by means of an
            #$ElectroMagneticRadiationSensor detecting wavelengths of
            visible light, and thereby acquires information about it.
            Note:  one eye is sufficient for #$VisualPerception, and
            limited short-distance #$DepthPerception, but `true&apos;
            long-distance #$DepthPerception requires two eyes.</rdfs:comment>
        <guid>bd58f0b6-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#Perceiving"/>
    </daml:Class>
    <daml:Class rdf:ID="VisualRepresentationMicrotheory">
        <rdfs:label>visual representation microtheory</rdfs:label>
        <rdfs:comment>A collection of microtheories.  Each element of
            #$VisualRepresentationMicrotheory is a context in which to
            state the propositional content of a particular visual
            representation.  Visual representations include paintings,
            photographs, digitized images, moving pictures, statues,
            etc.  For example, a visual representation microtheory of
            the #$StatueOfLiberty would include such assertions as `a
            woman holds up a torch in her right hand&apos;, `the woman
            is dressed in a neo-Classical robe&apos;, etc.; it would NOT
            include such information as, e.g., the #$StatueOfLiberty is
            made of copper or the #$StatueOfLiberty is in New York harbor.</rdfs:comment>
        <guid>bd5f2401-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MicrotheoryType"/>
        <rdfs:subClassOf rdf:resource="#PropositionalInformationThing"/>
    </daml:Class>
    <daml:Class rdf:ID="Volatility">
        <rdfs:label>volatilities</rdfs:label>
        <rdfs:comment>A collection of attributes; a subset of
            #$PhysicalAttribute.  Each element of #$Volatility
            represents the specific readiness of some liquid to
            evaporate.  Higher volatility indicates a faster rate of
            evaporation.  Volatilities of substances are indicated with
            the predicate #$volatilityOfSubstance.</rdfs:comment>
        <guid>bd58be35-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#MeasurableAttributeType"/>
        <rdfs:subClassOf rdf:resource="#AttributeValue"/>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </daml:Class>
    <daml:Class rdf:ID="Volume">
        <rdfs:label>volumes</rdfs:label>
        <rdfs:comment>A collection of physical attributes.  Each element
            of #$Volume is an amount of three-dimensional space occupied
            by one or more three-dimensional objects.  Elements of
            #$Volume may be either a fixed interval, such as the volume
            of a five-gallon aquarium, or a range, such as &apos;fits in
            a bread box&apos;.  See #$UnitOfVolume for the units used by
            Cyc to measure volumes.</rdfs:comment>
        <guid>bd58eee4-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DerivedNumericAttributeType"/>
        <rdfs:subClassOf rdf:resource="#PhysicalAttribute"/>
        <rdfs:subClassOf rdf:resource="#ScalarInterval"/>
    </daml:Class>
    <daml:Class rdf:ID="VoluntaryBodyMovement">
        <rdfs:label>voluntary body movements</rdfs:label>
        <rdfs:comment>The collection of acts concerned with an
            agent&apos;s intentionally moving one part of its body
            relative to another part of its body.  The energy source is
            the agent&apos;s own body, not some external force.  Each
            instance of #$WavingAHand is an instance of
            #$VoluntaryBodyMovement --- the focus of that action is on
            the hand moving relative to the body.  By way of constrast,
            an instance of #$OpeningADrawer is probably not going to be
            an instance of #$VoluntaryBodyMovement, even though the
            person opening the drawer probably does move their hand
            relative to their body, because the focus of the
            #$OpeningADrawer action is not on the hand moving, but
            rather on the drawer opening.</rdfs:comment>
        <guid>bd58f69f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#BodyMovementEvent"/>
        <rdfs:subClassOf rdf:resource="#PurposefulAction"/>
    </daml:Class>
    <daml:Class rdf:ID="WagingWar">
        <rdfs:label>warz</rdfs:label>
        <rdfs:comment>The fighting of two or more armies through the use
            of weapons.  The same as doing battle.</rdfs:comment>
        <guid>bd58dfab-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
    </daml:Class>
    <daml:Class rdf:ID="Wagon">
        <rdfs:label>carts</rdfs:label>
        <rdfs:comment>The collection of all carts and wagons, relatively
            small non-motorized wheeled devices with two or more wheels,
            used for moving goods.  Usually they are human-powered or
            #$EquineAnimal driven.</rdfs:comment>
        <guid>c0fd662e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdf:type rdf:resource="#ProductType"/>
        <rdfs:subClassOf rdf:resource="#MusclePoweredDevice"/>
    </daml:Class>
    <daml:Class rdf:ID="WakingUpFromSleep">
        <rdfs:label>wake</rdfs:label>
        <rdfs:comment>The collection of events in which an #$Animal goes
            from the state of being asleep to being in a waking state.</rdfs:comment>
        <guid>bd58abc5-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#SingleDoerAction"/>
        <rdfs:subClassOf rdf:resource="#IntrinsicStateChangeEvent"/>
        <rdfs:subClassOf rdf:resource="#AnimalActivity"/>
    </daml:Class>
    <daml:Class rdf:ID="WallOfAConstruction">
        <rdfs:label>wall of a construction</rdfs:label>
        <rdfs:comment>Any wall which is a part of a
            #$HumanShelterConstruction.  This includes includes the
            walls on the outside of the building as well as those on the
            inside such as the wall separating two rooms in a house.</rdfs:comment>
        <guid>bd58f8d3-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <daml:disjointWith rdf:resource="#FloorInAConstruction"/>
    </daml:Class>
    <daml:Class rdf:ID="Warplane">
        <rdfs:label>warplanes</rdfs:label>
        <rdfs:comment>The collection of all #$Airplanes which are
            designed (and often used) as weapons of war.</rdfs:comment>
        <guid>c13f5369-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Airplane"/>
    </daml:Class>
    <daml:Class rdf:ID="Warranty">
        <rdfs:label>guarantees</rdfs:label>
        <rdfs:comment>A collection of agreements; a subset of
            #$AuthorizedAgreement.  Each element of #$Warranty is an
            agreement between the seller (and/or manufacturer) and the
            purchaser of some object or service.  In a warranty, the
            seller/manufacturer promises that the object or service will
            be satisfactory in some indicated way (e.g., free of
            defects, effective, etc.).  Usually a warranty specifies
            what compensation an unsatisfied purchaser is entitled to
            (e.g., free repairs, a refund), and how s/he can claim it.</rdfs:comment>
        <guid>bd589ead-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#AuthorizedAgreement"/>
    </daml:Class>
    <daml:Class rdf:ID="Washing">
        <rdfs:label>washes</rdfs:label>
        <rdfs:comment>A collection of events, and a subset of
            #$Cleaning.  In a #$Washing event, some #$Water is being
            employed in the cleaning, typically with some surfactant
            such as soap dissolved in the water.  If only water (i.e.,
            no soap) is used in a #$Washing, then the event also belongs
            to a particular subset of #$Washing, namely #$Rinsing.</rdfs:comment>
        <guid>bd589c84-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#Cleaning"/>
    </daml:Class>
    <daml:Class rdf:ID="WatchingSomething">
        <rdfs:label>watching events</rdfs:label>
        <rdfs:comment>A collection of events involving the deliberate
            direction of #$VisualPerception on the part of an #$Agent.</rdfs:comment>
        <guid>c0ed09e7-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#VisualPerception"/>
        <rdfs:subClassOf rdf:resource="#Perceiving-Voluntary"/>
        <rdfs:subClassOf rdf:resource="#Perceiving"/>
    </daml:Class>
    <daml:Class rdf:ID="Water">
        <rdfs:label>water</rdfs:label>
        <rdfs:comment>A collection of tangible things; a subset of
            #$Oxide.  Each instance of #$Water is one piece of all the
            portions of the chemical compound H2O.  Those instances may
            be in a gaseous, liquid, or solid  #$stateOfMatter; they may
            be salty, not salty, drinkable, or not drinkable.  Examples
            of #$Water include portions of the ocean, such as the
            #$BayOfBiscay and the #$BayOfBengal (see also #$SeaWater);
            bodies of fresh water, such as #$NiagaraFalls or the
            #$GangesRiver; quantities of chlorinated water (see
            #$PoolWater); and the contents of bottles of tonic water
            (see #$SeltzerWater).  Things that have one or more
            important properties different from water&apos;s, but
            consist mostly of water, don&apos;t belong to the collection
            #$Water but have an element of #$Water as their
            #$mainConstituent; e.g., urine, coffee, lemonade.</rdfs:comment>
        <guid>bd58c01d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ChemicalCompoundType"/>
        <rdfs:subClassOf rdf:resource="#Oxide"/>
        <daml:disjointWith rdf:resource="#SomethingToWear"/>
    </daml:Class>
    <daml:Class rdf:ID="Water-Saline">
        <rdfs:label>water - saline</rdfs:label>
        <rdfs:comment>A collection of tangible things; a subset of
            #$Water.  Each element of #$Water-Saline is a portion of
            water with some substantial concentration of salt mixed into
            it.  For example, the #$RedSea, #$GreatSaltLake, or the salt
            water I mix up for gargling.</rdfs:comment>
        <guid>bd5905d8-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TangibleStuffCompositionType"/>
        <rdfs:subClassOf rdf:resource="#Water"/>
        <rdfs:subClassOf rdf:resource="#Solution"/>
    </daml:Class>
    <daml:Class rdf:ID="WaterTransportationDevice">
        <rdfs:label>water crafts</rdfs:label>
        <rdfs:comment>A collection of transportation devices.  An
            instance of #$WaterTransportationDevice is a vehicle used
            for transportation on or through water (not a device for
            transporting water).  Subsets of #$WaterTransportationDevice
            include the collections #$Ship, #$Watercraft, #$Sailboard,
            #$JetSki, etc.</rdfs:comment>
        <guid>bd58c685-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#TransportationDevice"/>
    </daml:Class>
    <daml:Class rdf:ID="Watercraft">
        <rdfs:label>boats</rdfs:label>
        <rdfs:comment>A collection of water transportation devices.  An
            instance of #$Watercraft is a device for transporting people
            and/or objects over water or through water under the surface
            without getting them wet; thus, instances of #$Submarine,
            #$Rowboat or #$Ship (as opposed to #$JetSki or #$Surfboard
            or #$Sailboard).</rdfs:comment>
        <guid>bd58bee7-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#WaterTransportationDevice"/>
    </daml:Class>
    <daml:Class rdf:ID="WavePropagation">
        <rdfs:label>wave propagations</rdfs:label>
        <rdfs:comment>A collection of events.  Each element of
            #$WavePropagation is an event in which a wavelike
            disturbance propagates through space, with or without a
            medium.  A wave propagation is like a translational movement
            in that it can have a #$fromLocation and a #$toLocation, but
            differs in that there is no #$objectMoving. #$Sound and
            #$ElectromagneticRadiation are types of #$WavePropagation.
            Elements of #$WavePropagation include the sounds from
            exploding firecrackers at Penn State&apos;s Homecoming
            celebration in 1989; the light shining from my desk lamp
            right now; the X-rays generated in the dentist&apos;s office
            last Tuesday, for examining my teeth.</rdfs:comment>
        <guid>c10080f5-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdfs:subClassOf rdf:resource="#Translocation"/>
    </daml:Class>
    <daml:Class rdf:ID="WavePropagationType">
        <rdfs:label>wave propagation type</rdfs:label>
        <rdfs:comment>A collection of collections.  Each element of
            #$WavePropagationType is itself a collection, containing one
            type of #$WavePropagation events.  Examples include the
            collections #$ElectromagneticRadiation, #$Sound,
            #$VisibleLight, and #$XRay.</rdfs:comment>
        <guid>bf331d6f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#SiblingDisjointCollection"/>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="#TemporalStuffType"/>
    </daml:Class>
    <daml:Class rdf:ID="Weapon">
        <rdfs:label>weapons</rdfs:label>
        <rdfs:comment>A collection of physical devices.  An instance of
            #$Weapon is a device primarily designed for destructive
            action against animals (often against other sentient beings,
            most often humans) and/or their habitats (or, more rarely,
            some class of possessions of theirs.)  This collection
            includes weapons as traditionally defined (e.g., instances
            of #$Sword, instances of #$Gun-Portable, #$Bombs, etc.) and
            also miscellaneous military hardware used to kill, to
            destroy, to immobilize, etc. in military operations.  Note
            that in the case of missile weapons, both the launcher and
            the ammunition are considered #$Weapons in this sense.
            E.g., a bow, an arrow, a missile launcher, an ICBM missile,
            a gun, a bullet.  This may seem odd at first glance, but in
            many contexts most of the same axioms apply to both.  Even
            in our linguistic utterances this carries over; e.g., if
            asked what killed JFK we can say a rifle, or a bullet from a
            rifle.  Of course there are specializations (subsets) of
            #$Weapon that limit themselves to `the real weapon
            itself&apos; and to `ammunition for missile weapons.&apos;</rdfs:comment>
        <guid>bd58fc57-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#PartiallyTangibleProduct"/>
        <rdfs:subClassOf rdf:resource="#Artifact"/>
    </daml:Class>
    <daml:Class rdf:ID="WearingSomething">
        <rdfs:label>instances of wearing something</rdfs:label>
        <rdfs:comment>A collection of situations; a subset of
            #$Configuration.  Such a configuration has a temporal as
            well as a spatial extent, but activity is not implied.  Each
            element of #$WearingSomething is an arrangement of tangible
            objects, one of which is wearing the other(s).  Typically
            the wearer is a living person or animal, although surrogates
            are possible (e.g., mannequins, dolls, or corpses).  Objects
            worn are elements of #$SomethingToWear.  See also #$wearer, #$wearsClothing.</rdfs:comment>
        <guid>bd589e09-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#SituationType"/>
        <rdfs:subClassOf rdf:resource="#Configuration"/>
    </daml:Class>
    <daml:Class rdf:ID="WeatherAttribute">
        <rdfs:label>weather attributes</rdfs:label>
        <rdfs:comment>A collection of attributes.  Each element of
            #$WeatherAttribute is an attribute that can be used to
            describe the weather occurring in a geographic region.
            Examples: #$Snowy, #$Foggy.  See also #$weatherAttributes.</rdfs:comment>
        <guid>bd58e085-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#UnorderedAttributeType"/>
        <rdf:type rdf:resource="#AttributeType"/>
    </daml:Class>
    <daml:Class rdf:ID="WeatherEvent">
        <rdfs:label>weather events</rdfs:label>
        <rdfs:comment>A collection of events.  Each element of
            #$WeatherEvent is a meteorological event of some duration,
            occurring over some spatial region.  Some weather events are
            almost instantaneous (e.g., elements of the collection
            #$LightningEvent); others encompass an entire
            #$AnnualClimateCycle.  Spatially, weather events may cover a
            small locality or a large portion of a continent.  Weather
            events are regional weather (in the short term) and are, or
            partially constitute, the annual climate of a region (in the
            long term).</rdfs:comment>
        <guid>bd58b679-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#PhysicalEvent"/>
    </daml:Class>
    <ThreeDimensionalShapeAttribute rdf:ID="WedgeShaped">
        <rdfs:label>wedge shaped</rdfs:label>
        <rdfs:comment>#$WedgeShaped is the instance of #$ShapeAttribute
            shared by all three dimensional objects such that any cross
            section that is sliced parallel to the two triangular ends
            will result in a triangle congruent to those ends. For
            instance, a pup tent would have this shape attribute.</rdfs:comment>
        <guid>c13af9f1-9c29-11b1-9dad-c379636f7270</guid>
    </ThreeDimensionalShapeAttribute>
    <daml:Class rdf:ID="WeeklyEventType">
        <rdfs:label>weekly event type</rdfs:label>
        <rdfs:comment>The collection of event-types that occur weekly.
            Each #$WeeklyEventType is a collection of events, all of
            which are synchronized with the calendar and which occur
            once a week.  E.g., once instance #$WeeklyEventType is
            #$CycStaffMeeting, since there is an instance of
            #$CycStaffMeeting once a week.</rdfs:comment>
        <guid>c0f7df0f-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#CollectionType"/>
        <rdfs:subClassOf rdf:resource="#TemporalObjectType"/>
    </daml:Class>
    <GeographicalDirection rdf:ID="West-Directly">
        <rdfs:label>west - directly</rdfs:label>
        <rdfs:comment>Due West, an element of #$TerrestrialDirection.</rdfs:comment>
        <guid>bd58f165-9c29-11b1-9dad-c379636f7270</guid>
    </GeographicalDirection>
    <GeographicalDirection rdf:ID="West-Generally">
        <rdfs:label>west - generally</rdfs:label>
        <rdfs:comment>The general direction of West.  The element of
            #$VectorInterval that comprises the cone-shaped set of
            vectors pointing (from some reference point) within
            approximately forty-five degrees of #$West-Directly.</rdfs:comment>
        <guid>bd58a517-9c29-11b1-9dad-c379636f7270</guid>
    </GeographicalDirection>
    <JobAttribute rdf:ID="WhiteCollar">
        <rdfs:label>white collar</rdfs:label>
        <rdfs:comment>An attribute; an element of #$JobAttribute.  White
            collar jobs are those requiring little or no manual/physical
            labor; they are usually indoor jobs.</rdfs:comment>
        <guid>bd58a85e-9c29-11b1-9dad-c379636f7270</guid>
    </JobAttribute>
    <daml:Class rdf:ID="WildAnimal">
        <rdfs:label>wild animals</rdfs:label>
        <rdfs:comment>The collection of all animals that are not
            domesticated or tame.  Note that a captive animal may still
            be a wild animal, e.g., zoo animals that are not tame or
            domesticated.  Cf. #$CaptiveAnimal, #$DomesticatedAnimal.</rdfs:comment>
        <guid>c100532b-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#NonPersonAnimal"/>
        <daml:disjointWith rdf:resource="#DomesticatedAnimal"/>
    </daml:Class>
    <daml:Class rdf:ID="WindPoweredDevice">
        <rdfs:label>wind-powered</rdfs:label>
        <rdfs:comment>The subset of #$KineticEnergyPoweredDevice (q.v.)
            whose elements are powered by the wind.  For example,
            instances of the collection #$Windmill.</rdfs:comment>
        <guid>bd58ff2d-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#PhysicalDevice"/>
        <rdfs:subClassOf rdf:resource="#KineticEnergyPoweredDevice"/>
    </daml:Class>
    <daml:Class rdf:ID="WindProcess">
        <rdfs:label>winds</rdfs:label>
        <rdfs:comment>The collection of events in which the ambient air
            at a #$GeographicalRegion (or some significant part of the
            total air mass) is in motion.</rdfs:comment>
        <guid>bd58e8ad-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#StuffType"/>
        <rdfs:subClassOf rdf:resource="#ImmediateWeatherProcess"/>
        <rdfs:subClassOf rdf:resource="#Translation-Flow"/>
    </daml:Class>
    <daml:Class rdf:ID="WindowPane">
        <rdfs:label>window panes</rdfs:label>
        <rdfs:comment>Each individual pane in a window. A window may
            only have one window pane.</rdfs:comment>
        <guid>bd588640-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#SolidTangibleProduct"/>
    </daml:Class>
    <daml:Class rdf:ID="WindowPortal">
        <rdfs:label>windows</rdfs:label>
        <rdfs:comment>Windows are one kind of portal found in a human
            occupation construct.  They are usually covered by
            #$WindowThePortalCovering, which is the physical object made
            primarily of glass through which one can see.</rdfs:comment>
        <guid>bd58f957-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#RegionType"/>
        <rdfs:subClassOf rdf:resource="#PartOfBuilding"/>
        <rdfs:subClassOf rdf:resource="#Portal"/>
    </daml:Class>
    <daml:Class rdf:ID="WindowThePortalCovering">
        <rdfs:label>windows</rdfs:label>
        <rdfs:comment>The physical object which &apos;covers&apos; or
            fills in the #$WindowPortal. It is a physical barrier, but
            because it is made primarily of glass, it allows light to enter.</rdfs:comment>
        <guid>bd589e6e-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#PortalCovering"/>
        <rdfs:subClassOf rdf:resource="#PartOfBuilding"/>
    </daml:Class>
    <daml:Class rdf:ID="WinterSeason">
        <rdfs:label>winters</rdfs:label>
        <rdfs:comment>The collection of Winter seasons.  In the
            #$TemperateClimateCycle, generally a time of cold and
            dormancy.  #$WinterSeason represents the climatic aspects of
            Winter; for its purely temporal aspects, see #$CalendarWinter.</rdfs:comment>
        <guid>bd5901c1-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <rdf:type rdf:resource="#TemporalObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="WomensClothing">
        <rdfs:label>womens clothing</rdfs:label>
        <rdfs:comment>A collection of objects.  Each element of
            #$WomensClothing is a clothing item worn usually by women,
            i.e., items normally found in the women&apos;s section of
            department stores.  Subsets include #$Skirts and #$HairPins.</rdfs:comment>
        <guid>bd58dd8a-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ProductType"/>
        <rdf:type rdf:resource="#ExistingObjectType"/>
    </daml:Class>
    <daml:Class rdf:ID="Wood">
        <rdfs:label>wood</rdfs:label>
        <rdfs:comment>A collection of tangible things.  Each element of
            #$Wood is a piece of solid, rigid, fibrous organic substance
            in or #$derivedFrom the inside of the trunks and limbs of
            trees.  For example, any pieces of wooden furniture, doors,
            boards, fences, firewood, wooden spoons, etc.  Use the Cyc
            function #$WoodFn with a collection of trees of one species,
            to designate the collection of all pieces of wood from a
            particular species of tree; e.g., (#$WoodFn #$OakTree).
            Note: cork and amber are NOT included in the collection #$Wood.</rdfs:comment>
        <guid>bd58a6c4-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TangibleStuffCompositionType"/>
        <rdfs:subClassOf rdf:resource="#PlantProduct"/>
        <rdfs:subClassOf rdf:resource="#StructuralSupportStuff"/>
    </daml:Class>
    <daml:Class rdf:ID="WorkAgreement">
        <rdfs:label>jobs</rdfs:label>
        <rdfs:comment>A collection of intangible objects; a subset of
            #$Agreement.  Every element of #$WorkAgreement is an
            agreement between an employer and an employee, regarding the
            duties and remuneration which pertain to that worker&apos;s
            job for that employer.  Elements of #$WorkAgreement consist
            of various #$subAgreements, typically including elements of
            #$JobDescription, #$CompensationPackage, and some #$CodeOfConduct.</rdfs:comment>
        <guid>bd58d6b7-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#Agreement"/>
    </daml:Class>
    <daml:Class rdf:ID="WorkStatus">
        <rdfs:label>work status</rdfs:label>
        <rdfs:comment>A collection of attributes.  Each element of
            #$WorkStatus is a classification commonly used by human
            resources departments to describe the status of workers on
            the company payroll.  Note that these attributes describe a
            person&apos;s status in a job, rather than the position
            itself.  Examples of #$WorkStatus include #$Commissioned,
            #$HourlyWork, #$FullTime, #$PartTime, #$TemporaryWork. Also
            see #$employeeStatus.</rdfs:comment>
        <guid>bd58b854-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#AttributeType"/>
        <rdfs:subClassOf rdf:resource="#CompositeAttribute"/>
    </daml:Class>
    <daml:Class rdf:ID="Workplace">
        <rdfs:label>workplaces</rdfs:label>
        <rdfs:comment>The collection of places where people customarily
            work (not the employing organizations).  #$Workplace
            includes offices, restaurant buildings, construction sites,
            agricultural sites, the #$SpaceNeedle, etc.  Some places may
            be #$Workplaces only during a small part of their existence
            (a piece of residential property while the house is being
            built, perhaps); some may almost always be #$Workplaces
            (grocery store buildings, office buildings, smithies,
            hospitals, etc.).</rdfs:comment>
        <guid>bd58899c-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ContactLocationType"/>
        <rdfs:subClassOf rdf:resource="#PhysicalContactLocation"/>
    </daml:Class>
    <daml:Class rdf:ID="Writing">
        <rdfs:label>writings</rdfs:label>
        <rdfs:comment>The collection of actions in which text is
            produced, either via writing by hand, with a typewriter,
            with a computer, etc.  Could be a single episode of writing,
            or a discontinuous set of episodes (as when one writes a
            letter over a few days).  #$Writing is not a
            #$Communicating, because there is not necessarily a
            successful transfer of information to some other agent.  Of
            course, instances of #$Writing can be #$subEvents of such transfers.</rdfs:comment>
        <guid>bd58cbbe-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdf:type rdf:resource="#TemporalObjectType"/>
        <rdfs:subClassOf rdf:resource="#VisualInformationConveyingAct"/>
        <rdfs:subClassOf rdf:resource="#HumanActivity"/>
    </daml:Class>
    <daml:Class rdf:ID="WritingByHand">
        <rdfs:label>writing by hand</rdfs:label>
        <rdfs:comment>Writing is the formation of characters or symbols
            on a suitable surface for transmitting information.</rdfs:comment>
        <guid>bd588ca7-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#TemporalStuffType"/>
        <rdf:type rdf:resource="#DefaultDisjointScriptType"/>
        <rdfs:subClassOf rdf:resource="#SingleDoerAction"/>
        <rdfs:subClassOf rdf:resource="#MarkingOnASurface"/>
        <rdfs:subClassOf rdf:resource="#Writing"/>
    </daml:Class>
    <daml:Class rdf:ID="WritingImplement">
        <rdfs:label>writing implements</rdfs:label>
        <rdfs:comment>A collection of tools.  An instance of
            #$WritingImplement is a hand-held tool which is intended to
            be primarily used, by a person, for writing.  Subsets
            include the collections #$Chalk and #$WritingPen (but not
            #$Typewriter).   Note: A marginal example is a PDA, such as
            an Apple Newton, with a stylus; both items, the PDA and the
            stylus, can be held in one&apos;s hands and used to record
            one&apos;s handwritten notes.  Another marginal positive
            example is a stylus designed to held in the mouth by a
            quadraplegic person; i.e., `hand-held&apos; is not an
            absolutely hard and fast constraint here.  A close
            NON-example is a handheld calculator.</rdfs:comment>
        <guid>bd58ffe6-9c29-11b1-9dad-c379636f7270</guid>
        <rdf:type rdf:resource="#ExistingObjectType"/>
        <rdfs:subClassOf rdf:resource="#HandTool"/>
        <rdfs:subClassOf rdf:resource="#Shaft"/>
    </daml:Class>
    <daml:Class rdf:ID="XRay">
        <rdfs:label>x-rays</rdfs:label>
        <rdfs:comment>A collection of events; a subset of
            #$ElectromagneticRadiation.  Each element of #$XRay is an
            instance of electromagnetic radiation that has a
            #$wavelength range from about 1 #$Angstrom to 1x10^-3
            #$Angstroms.  Includes X-rays produced both naturally and artificially.</rdfs:comment>
        <guid>bf85c802-9c29-11b1-9dad-c379636f7270</guid>
        <rdfs:subClassOf rdf:resource="#ElectromagneticRadiation"/>
    </daml:Class>
    <daml:Property rdf:ID="abnormal">
        <rdfs:label>abnormal</rdfs:label>
        <rdfs:comment>Every default rule in our system      P(x1,...,xn)
            =&gt; Q(x1,...,xn)    is implicitly treated as
            (not(abnormal(x1,...,xn)) and P(x1,...,xn) =&gt;
            Q(x1,...,xn)    This allows rules without exceptions to
            never have to incur the  overhead of default reasoning.
            Exceptions to rules are written like so:      (#$exceptWhen
            R(x1,...,xn) Rule001)    and get canonicalized into rules
            concluding abnormal like so:      R(x1,...,xn) =&gt;
            (#$abnormal(x1,....,xn) Rule001)    Since a different
            &apos;abnormality&apos; predicte is needed for every default
            rule in the system, we instead handle this uniqueness
            requirement by  having a single #$abnormal predicate which
            takes the rule in question  as an argument.    Also, the
            variables over which abnormality is computed is given as a
            single list.  This allows #$abnormal to be binary rather
            than  arbitrary arity. </rdfs:comment>
        <guid>bd5880bd-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#SubLList"/>
        <daml:range rdf:resource="#CycLAssertion"/>
    </daml:Property>
    <daml:Property rdf:ID="above-Directly">
        <rdfs:label>above - directly</rdfs:label>
        <rdfs:comment>(#$above-Directly ABOVE BELOW) means either (1)
            the volumetric center of ABOVE is directly above some point
            of BELOW, if ABOVE is smaller than BELOW; or (2) otherwise,
            it means that some point of ABOVE is directly above the
            volumetric center of BELOW.</rdfs:comment>
        <guid>bd58fbde-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#above-Generally"/>
    </daml:Property>
    <daml:Property rdf:ID="above-Generally">
        <rdfs:label>above - generally</rdfs:label>
        <rdfs:comment>(#$above-Generally OBJ1 OBJ2) means that OBJ1 is
            more or less above OBJ2. To be more precise: if OBJ1 would
            be within a cone-shaped set of vectors within about 45
            degrees of #$Up-Directly pointing up from OBJ2 (see
            #$Up-Generally), then (#$above-Generally OBJ1 OBJ2). This is
            a wider predicate than #$above-Directly, but narrower than
            #$above-Higher. It probably most closely conforms to the
            English word &apos;above.&apos;</rdfs:comment>
        <guid>be69c623-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#above-Higher"/>
    </daml:Property>
    <daml:Property rdf:ID="above-Higher">
        <rdfs:label>above - higher</rdfs:label>
        <rdfs:comment>(#$above-Higher OBJ-A OBJ-B) means that OBJ-A is
            ``higher up&apos;&apos; than OBJ-B.  Since most contexts are
            terrestrial (see #$TerrestrialFrameOfReferenceMt) ``higher
            up&apos;&apos; typically means that the
            #$altitudeAboveGround of OBJ-A is greater than that of OBJ-B.</rdfs:comment>
        <guid>bf020f6c-9c29-11b1-9dad-c379636f7270</guid>
    </daml:Property>
    <daml:Property rdf:ID="above-Overhead">
        <rdfs:label>above - overhead</rdfs:label>
        <rdfs:comment>(#$above-Overhead ABOVE BELOW) means that ABOVE is
            directly above BELOW, all points of ABOVE are higher than
            all points of BELOW, and they do NOT touch.  Examples: a
            bomb falling directly above a bunker; a street lamp shining
            directly above a person standing below.</rdfs:comment>
        <guid>bd58b981-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#above-Directly"/>
    </daml:Property>
    <daml:Property rdf:ID="above-Touching">
        <rdfs:label>above - touching</rdfs:label>
        <rdfs:comment>(#$above-Touching ABOVE BELOW) means that ABOVE is
            located over BELOW and they are touching.  More precisely,
            it implies both (#$above-Directly ABOVE BELOW) and that
            ABOVE #$touches BELOW.  Examples: a person sitting on a
            chair; coffee in a cup; a boat on water; a hat on a head.
            (Note that not every point of ABOVE must be higher than
            every point of BELOW.)</rdfs:comment>
        <guid>bd58f620-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#touches"/>
        <daml:subPropertyOf rdf:resource="#above-Directly"/>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:Property>
    <daml:Property rdf:ID="accountAdministrator">
        <rdfs:label>account administrator</rdfs:label>
        <rdfs:comment>The predicate #$accountAdministrator identifies
            the agent who administers a particular account.
            (#$accountAdministrator ACCT AGENT) means that the #$Account
            ACCT is administered by the individual or organization AGENT.</rdfs:comment>
        <guid>bd58e1c4-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Account"/>
        <daml:range rdf:resource="#Agent"/>
    </daml:Property>
    <daml:Property rdf:ID="accountBalance">
        <rdfs:label>balance</rdfs:label>
        <rdfs:comment>The predicate #$accountBalance is used to indicate
            the balance of a particular account.  (#$accountBalance ACCT
            BAL) means that the #$FinancialAccount ACCT has the balance
            BAL; BAL is the amount of #$Money either owed by, or
            available to, the #$accountHolder (depending upon the type
            of account).</rdfs:comment>
        <guid>bd588d44-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#FinancialAccount"/>
        <daml:range rdf:resource="#Money"/>
    </daml:Property>
    <daml:Property rdf:ID="accountHolder">
        <rdfs:label>account holder</rdfs:label>
        <rdfs:comment>The predicate #$accountHolder identifies the
            holder of a particular account.  (#$accountHolder ACCT
            AGENT) means that the #$Account ACCT is held by the
            individual or organization AGENT; thus, money (or some other
            valuable) is owed to or from AGENT, in the amount shown in
            the account (see #$accountBalance).</rdfs:comment>
        <guid>bd58e205-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Account"/>
        <daml:range rdf:resource="#Agent"/>
    </daml:Property>
    <daml:Property rdf:ID="accountStatus">
        <rdfs:label>account status</rdfs:label>
        <rdfs:comment>The predicate #$accountStatus indicates whether a
            particular account is paid up, overdue, delinquent, etc.
            (#$accountStatus ACCT STATUS) means that the #$Account ACCT
            has the attribute STATUS (see also #$AccountStatusAttribute).</rdfs:comment>
        <guid>bd588cc0-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasAttributes"/>
        <daml:domain rdf:resource="#Account"/>
        <daml:range rdf:resource="#AccountStatusAttribute"/>
    </daml:Property>
    <daml:Property rdf:ID="acknowledgedAct">
        <rdfs:label>acknowledged act</rdfs:label>
        <rdfs:comment>(#$acknowledgedAct ACKACT COMACT) means that the
            #$CommunicationAct-Single COMACT is acknowledged and
            replied-to by the responsive
            #$Acknowledging-CommunicationAct ACKACT.   Particular
            acceptances or rejections of a particular project proposal
            would involve examples of this predicate, as would a person
            responding to a wedding invitation, or a court responding to
            a motion.  See also #$acknowledgementOf which refers to the
            abstract content of the communication.</rdfs:comment>
        <guid>bd58dd20-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#startsAfterEndingOf"/>
        <daml:domain rdf:resource="#Acknowledging-CommunicationAct"/>
        <daml:range rdf:resource="#CommunicationAct-Single"/>
    </daml:Property>
    <daml:Property rdf:ID="acknowledgementOf">
        <rdfs:label>acknowledgement of</rdfs:label>
        <rdfs:comment>(#$acknowledgementOf ACT PIT) means that ACT is an
            acknowledging act to signify receipt of the abstract
            information PIT that is being acknowledged and to indicate a
            response.  The ACT may be an #$Accepting-CommunicationAct or
            a #$Rejecting-CommunicationAct, or several others.  Some may
            be combinations, e.g. David may accept part of
            #$Wanda&apos;s order (say the part about cleaning the
            kitchen) but not the other part (say cleaning the bathroom).
            See also #$acknowledgedAct which relates the two acts directly.</rdfs:comment>
        <guid>bd5905b9-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Acknowledging-CommunicationAct"/>
        <daml:range rdf:resource="#PropositionalInformationThing"/>
    </daml:Property>
    <daml:Property rdf:ID="acquaintedWith">
        <rdfs:label>acquaintance</rdfs:label>
        <rdfs:comment>(#$acquaintedWith AGENT1 AGENT2) means the
            #$IndividualAgent AGENT1 is acquainted with the
            #$IndividualAgent AGENT2 (in the minimal sense that AGENT1
            has come into physical or conversational contact with
            AGENT2, or that they have somehow knowingly communicated
            with each other).  This typically means that each
            #$IndividualAgent is aware of some facts about the other.
            In cases where one of the #$IndividualAgents is sentient,
            this typically includes the ability of this agent to
            recognize the other by appearance, voice, scent, or some
            other physical attribute.</rdfs:comment>
        <guid>bd58beb6-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <daml:domain rdf:resource="#IndividualAgent"/>
        <daml:range rdf:resource="#IndividualAgent"/>
    </daml:Property>
    <daml:Property rdf:ID="actionExpressesFeeling">
        <rdfs:label>action expresses feeling</rdfs:label>
        <rdfs:comment>(#$actionExpressesFeeling ACT EMOTYPE) means that
            the particular action ACT actually expresses the doer&apos;s
            feeling of EMOTYPE. Note: additional  complications arise in
            using this in inference, as people can `fake&apos; actions
            such as laughing, crying, etc., to mislead other people. See
            also  #$actionExpressesFeelingToward. If one wishes to make
            statements about tendencies rather than actual expressions,
            e.g. ``smiling tends to express  happiness&apos;&apos;, see #$actionTypeExpressesFeeling.</rdfs:comment>
        <guid>bd58801d-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Action"/>
        <daml:range rdf:resource="#FeelingAttributeType"/>
    </daml:Property>
    <daml:Property rdf:ID="actorPartsAffected">
        <rdfs:label>actor parts affected</rdfs:label>
        <rdfs:comment>(#$actorPartsAffected ACT PART) means that PART is
            an #$objectActedOn in ACT, and it is one of the
            #$anatomicalParts of the organism which is #$bodilyActedOn
            in ACT.  For example, during a man&apos;s morning shave, his
            #$Beard is an #$actorPartsAffected, but the hand with which
            he shaves is not, because his beard is changed, but his hand
            is not changed (`acted on&apos;) in any significant way.</rdfs:comment>
        <guid>bd58b54b-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#objectActedOn"/>
        <daml:subPropertyOf rdf:resource="#nonDeliberateActors"/>
        <daml:domain rdf:resource="#Event"/>
        <daml:range rdf:resource="#OrganismPart"/>
    </daml:Property>
    <daml:Property rdf:ID="actorPartsInvolved">
        <rdfs:label>actor parts involved</rdfs:label>
        <rdfs:comment>(#$actorPartsInvolved ACT PART) means that PART is
            one of the #$anatomicalParts of an organism who has an
            active role in the event ACT, and, moreover, that PART is
            somehow involved in the action.  Note that the organism to
            which PART belongs either performs or does ACT; it is not
            merely an #$objectActedOn.  Some examples of
            #$actorPartsInvolved  include: the eyes of someone who is
            sneezing (or crying); the left foot of someone playing in a
            football game; the right hand of someone who is shaking
            hands; the claws of a cat who is scratching someone.  As a
            negative example, consider your hair while you are getting a
            haircut.  It is not an #$actorPartsInvolved, because you are
            passive in that event; it is, though, an
            #$actorPartsAffected in that event.</rdfs:comment>
        <guid>bd58b6d2-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#preActors"/>
        <daml:subPropertyOf rdf:resource="#nonDeliberateActors"/>
        <daml:domain rdf:resource="#Event"/>
        <daml:range rdf:resource="#OrganismPart"/>
    </daml:Property>
    <daml:Property rdf:ID="actors">
        <rdfs:label>actor</rdfs:label>
        <rdfs:comment>The predicate #$actors is the most general
            instance of #$ActorSlot.  All other actor slots are
            specializations of this predicate.  Thus, #$actors is a
            broad concept which includes any entity which is involved in
            an action.  (#$actors EVENT ACTOR) means that ACTOR is
            somehow meaningfully (directly or indirectly) involved in
            EVENT during EVENT.  Mere cotemporality of objects
            (somewhere in the universe) with a particular event is not
            enough `involvement&apos; to make those objects #$actors of
            that event.  Nor is a representation of an event among the
            #$actors of that event, unless the representation affects
            the event.</rdfs:comment>
        <guid>bd58c5a5-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <daml:domain rdf:resource="#Event"/>
        <daml:range rdf:resource="#SomethingExisting"/>
    </daml:Property>
    <daml:Property rdf:ID="addressText">
        <rdfs:label>address text</rdfs:label>
        <rdfs:comment>The predicate #$addressText maps a particular
            element of #$ContactLocation to its
            #$Address-LocationDesignator, ADDRESS.  (#$addressText LOC
            ADDRESS) means that the #$ContactLocation LOC has the
            address ADDRESS.  For example, the #$addressText of the
            Cycorp #$MailingLocation is `Cycorp, 3721 Executive Center
            Dr., Ste. 100, Austin, TX 78731-1615.&apos;  See also #$ContactLocation.</rdfs:comment>
        <guid>bd58be81-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#ContactLocation"/>
        <daml:range rdf:resource="#Address-LocationDesignator"/>
    </daml:Property>
    <daml:Property rdf:ID="adjacentPathsAtJunction">
        <rdfs:label>adjacent paths at junction</rdfs:label>
        <rdfs:comment>(adjacentPathsAtJunction JUNCT PATH) means that
            the #$JunctionOfPaths JUNCT has PATH as one of the paths
            (instances of #$Path-Generic) joining it.  A junction may
            connect many paths (it must connect at least three distinct
            paths), and a path may pass through many junctions, and may
            end at a junction.  Examples: all the streets meeting at a
            certain #$Intersection-Street, the particular #$Trachea and
            both primary bronchi meeting at the
            #$TracheobronchialJunction between a certain person&apos;s
            #$Lungs, and three #$LongitudeLines intersecting at the
            #$SouthPole.  Neither PATH nor JUNCTION need be instances of
            #$PartiallyTangible, #$TemporalThing, or #$SpatialThing;
            however if PATH is, JUNCTION must also be.</rdfs:comment>
        <guid>bfd6e907-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#JunctionOfPaths"/>
        <daml:range rdf:resource="#Path-Generic"/>
    </daml:Property>
    <daml:Property rdf:ID="adjacentTo">
        <rdfs:label>adjacent to</rdfs:label>
        <rdfs:comment>(#$adjacentTo OBJ1 OBJ2) means that OBJ1 and OBJ2
            are touching such that their region of contact is (at least
            for practical purposes,  relative to the objects&apos;
            dimensions and shapes) a line (i.e. the contact region is
            not a point, though the  line  of contact might actually
            have some height).    Also, OBJ1 is neither mostly above nor
            mostly below OBJ2.  Positive examples:  adjacent squares on
            a chessboard, bordering countries, a connected pair of
            puzzle pieces.  Negative examples: diagonally touching
            squares on a chessboard, a geographical region and the air
            directly above it, one block stacked on top of another.</rdfs:comment>
        <guid>bd5904a2-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#touches"/>
        <daml:domain rdf:resource="#SpatialThing"/>
        <daml:range rdf:resource="#SpatialThing"/>
    </daml:Property>
    <daml:Property rdf:ID="admittedFirstArgument">
        <rdfs:label>admitted first argument</rdfs:label>
        <rdfs:comment>(#$admittedArgument TERM RELATION) states that
            TERM satisfies the first argument constraint of RELATION.
            For example, (#$admittedFirstArgument #$AbrahamLincoln
            #$wife) and (#$admittedFirstArgument #$Cougar #$JuvenileFn).
            This predicate is a binary form of #$admittedArgument.</rdfs:comment>
        <guid>be0ae094-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
        <daml:range rdf:resource="#Relation"/>
    </daml:Property>
    <daml:Property rdf:ID="admittedFourthArgument">
        <rdfs:label>admitted fourth argument</rdfs:label>
        <rdfs:comment>(#$admittedArgument TERM RELATION) states that
            TERM satisfies the fourth argument constraint of RELATION.
            For example, (#$admittedThirdArgument #$supportedObject
            #$SceneWithTypeInRoleFn) and (#$admittedFourthArgument
            #$CouncilOfEurope #$groupMembersHaveProperty).  This
            predicate is a binary form of #$admittedArgument.</rdfs:comment>
        <guid>bda6cf03-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
        <daml:range rdf:resource="#Relation"/>
    </daml:Property>
    <daml:Property rdf:ID="admittedSecondArgument">
        <rdfs:label>admitted second argument</rdfs:label>
        <rdfs:comment>(#$admittedArgument TERM RELATION) states that
            TERM satisfies the second argument constraint of RELATION.
            For example, (#$admittedSecondArgument #$JuliaChild #$wife)
            and (#$admittedSecondArgument #$TheYear2000
            #$OccasionInYearFn).  This predicate is a binary form of #$admittedArgument.</rdfs:comment>
        <guid>be8af18d-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
        <daml:range rdf:resource="#Relation"/>
    </daml:Property>
    <daml:Property rdf:ID="admittedThirdArgument">
        <rdfs:label>admitted third argument</rdfs:label>
        <rdfs:comment>(#$admittedArgument TERM RELATION) states that
            TERM satisfies the third argument constraint of RELATION.
            For example, (#$admittedThirdArgument #$Edema-Condition
            #$hasImmunityWithRespectToDisease) and
            (#$admittedThirdArgument #$EiffelTower #$MentalSituationFn).
            This predicate is a binary form of #$admittedArgument.</rdfs:comment>
        <guid>bed49e66-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
        <daml:range rdf:resource="#Relation"/>
    </daml:Property>
    <daml:Property rdf:ID="affiliatedWith">
        <rdfs:label>affiliated with</rdfs:label>
        <rdfs:comment>(#$affiliatedWith AGENT1 AGENT2) means AGENT1 and
            AGENT2 are somehow affiliated.  This is a broad relation,
            involving at least the voluntary entry into an understood
            relationship, with rights and obligations, by at least one
            of the affiliated #$Agents.  For example, the agents might
            be business partners, kin, employer/employee,
            parent-company/subsidiary, or one (say a person) may be a
            member of the other (say an organization).</rdfs:comment>
        <guid>c10aea4a-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#conceptuallyRelated"/>
        <daml:domain rdf:resource="#Agent"/>
        <daml:range rdf:resource="#Agent"/>
    </daml:Property>
    <daml:Property rdf:ID="after">
        <rdfs:label>after</rdfs:label>
        <rdfs:comment>(#$after LATER EARLIER) means #$TimePoint LATER is
            after (occurs later in time than) #$TimePoint EARLIER.
            Note:  Individual #$TimePoints are seldom mentioned in
            axioms; rather, the axiom is likely to use some
            #$ComplexTemporalRelation, such as #$startsAfterEndingOf,
            which holds between two #$TemporalThings.   These
            #$ComplexTemporalRelations are themselves usually defined in
            terms of #$PrimitiveTemporalRelations, such as #$after and
            #$simultaneousWith, which relate one #$TimePoint to another.</rdfs:comment>
        <guid>bd58a4b9-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#startsAfterEndingOf"/>
        <daml:domain rdf:resource="#TimePoint"/>
        <daml:range rdf:resource="#TimePoint"/>
    </daml:Property>
    <daml:Property rdf:ID="afterAdding">
        <rdfs:label>after adding</rdfs:label>
        <rdfs:comment>Whenever a source is added to a gaf use of a
            predicate, each of that predicate&apos;s #$afterAdding
            functions is called on that source.</rdfs:comment>
        <guid>bd58ba7a-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Predicate"/>
        <daml:range rdf:resource="#SubLSymbol"/>
    </daml:Property>
    <daml:Property rdf:ID="afterRemoving">
        <rdfs:label>after removing</rdfs:label>
        <rdfs:comment>Whenever a source is removed from a gaf use of a
            predicate, each of that predicate&apos;s #$afterRemoving
            functions is called on that source.</rdfs:comment>
        <guid>bd58ba7e-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Predicate"/>
        <daml:range rdf:resource="#SubLSymbol"/>
    </daml:Property>
    <daml:Property rdf:ID="age">
        <rdfs:label>oldness</rdfs:label>
        <rdfs:comment>(#$age THING TIME) means that the thing THING  has
            the age TIME, where thing can be a person, a galaxy, or
            anything else with temporal extent, e.g., (#$age
            #$MaryShepherd          (#$YearsDuration 40)). The previous
            assertion is not quite right, however:  notice that one can
            talk about the #$birthDate of a person quite safely, but
            whenever one makes a statement about the AGE of a person
            that statement will only be true `for a while&apos; -- i.e.,
            in some temporal context.  Therefore it would be a mistake
            to simply assert to Cyc that (#$age #$Lenat (#$YearsDuration
            45)), because that would be true in some contexts and false
            in others.  So what one does is to assert an expression of
            the form  (#$holdsIn X (#$age Y Z)) to indicate that during
            time interval X, the thing Y has age Z.  For example,
            (#$holdsIn (#$QuarterFn 2 (#$YearFn 1996)) (#$age #$Lenat
            (#$YearsDuration 45)), which means that Doug is a
            45-year-old during the entire second quarter of 1996.  It is
            seldom correct to use #$age outside of some temporal qualification.</rdfs:comment>
        <guid>bd58ba2b-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#SomethingExisting"/>
        <daml:range rdf:resource="#Time-Quantity"/>
    </daml:Property>
    <daml:Property rdf:ID="agreeingAgents">
        <rdfs:label>agreeing agents</rdfs:label>
        <rdfs:comment>The predicate #$agreeingAgents relates a
            particular agreement to the agents who are making the
            agreement.  (#$agreeingAgents AGR PARTY) means that the
            #$Agreement AGR has the #$Agent PARTY among its agreeing
            parties.  #$agreeingAgents may have specialized roles, such
            as #$agreeingBuyer or #$agreeingSeller, #$insuringAgent or
            #$policyHolder, #$employedAgent or #$employingAgent.  The
            #$agreeingAgents will be mentioned in their agreement.</rdfs:comment>
        <guid>bd58dc25-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#containsInformationAbout"/>
        <daml:domain rdf:resource="#Agreement"/>
        <daml:range rdf:resource="#Agent"/>
    </daml:Property>
    <daml:Property rdf:ID="agreementPeriod">
        <rdfs:label>agreement period</rdfs:label>
        <rdfs:comment>The predicate #$agreementPeriod is used to
            indicate the period of time during which a particular
            agreement is in force.  (#$agreementPeriod AGR TIME) means
            that the #$Agreement AGR holds during the #$TimeInterval
            TIME; i.e., TIME is the period during which the assertions
            made in AGR are supposed to be true.  TIME may or may not
            begin at the moment that AGR is created; e.g., I may sign an
            employment contract on the very day I begin working or
            several weeks before, to begin on a specified future date.
            Or an #$agreementPeriod could begin before the agreement was
            made, e.g., when an agent agreed to pay disputed royalties retroactively.</rdfs:comment>
        <guid>c10ad9c8-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Agreement"/>
        <daml:range rdf:resource="#TimeInterval"/>
    </daml:Property>
    <daml:Property rdf:ID="alertnessLevel">
        <rdfs:label>alertness level</rdfs:label>
        <rdfs:comment>Predicate (#$alertnessLevel SENTIENT_BEING LEVEL)
            indicates how alert SENTIENT_BEING is in the period in which
            the predicate holds.  The major levels are #$Unconscious and
            #$Awake, but more specific attributes such as #$Asleep and
            #$VeryAlert exist as well.</rdfs:comment>
        <guid>bd58ad46-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasAttributes"/>
        <daml:domain rdf:resource="#IndividualAgent"/>
        <daml:range rdf:resource="#Alertness"/>
    </daml:Property>
    <daml:Property rdf:ID="ambientRelativeHumidity">
        <rdfs:label>ambient relative humidity</rdfs:label>
        <rdfs:comment>(#$ambientRelativeHumidity LOC DEGREE) indicates
            the DEGREE to which the water vapor content of the air at
            LOC approaches the total possible saturation (at that temperature).</rdfs:comment>
        <guid>bd58e8ee-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasAttributes"/>
        <daml:domain rdf:resource="#GeographicalRegion"/>
        <daml:range rdf:resource="#RelativeHumidity"/>
    </daml:Property>
    <daml:Property rdf:ID="ambientTemperature">
        <rdfs:label>ambient temperature</rdfs:label>
        <rdfs:comment>The predicate #$ambientTemperature is used to
            indicate the average temperature in the free space around a
            particular object.  (#$ambientTemperature OBJ TEMP) means
            that the space around the tangible object OBJ is at the
            #$Temperature TEMP.  Used with #$holdsIn (q.v.),
            #$ambientTemperature expresses the surrounding temperature
            for a given object at some point in time.  For the
            temperature of the object itself, use #$temperatureOfObject (q.v.).</rdfs:comment>
        <guid>bd58ffd4-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#Temperature"/>
    </daml:Property>
    <daml:Property rdf:ID="ambientVisibility">
        <rdfs:label>ambient visibility</rdfs:label>
        <rdfs:comment>(#$ambientVisibility LOC DEGREE) indicates how
            clear the ambient fluid is at the location LOC.  Higher
            values of DEGREE mean one can see farther (than one could
            have at lower values).</rdfs:comment>
        <guid>bd58a0d8-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasAttributes"/>
        <daml:domain rdf:resource="#GeographicalRegion"/>
        <daml:range rdf:resource="#Visibility"/>
    </daml:Property>
    <daml:Property rdf:ID="amplitudeOfSignal">
        <rdfs:label>amplitude of signal</rdfs:label>
        <rdfs:comment>(#$amplitudeOfSignal ?WAVE ?AMP) means the
            distance from the average to the extremes of the signal
            ?WAVE is ?AMP.</rdfs:comment>
        <guid>be5d5b47-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#WavePropagation"/>
    </daml:Property>
    <daml:Property rdf:ID="analogousFeelings">
        <rdfs:label>analogous feelings</rdfs:label>
        <rdfs:comment>(#$analogousFeelings EMOTYPE1 EMOTYPE2) means that
            a feeling of the type EMOTYPE1 is analogous to a feeling of
            the type EMOTYPE2.  In part, this means that there is a high
            probability that an agent having an emotion of one type is
            also feeling an emotion of the other type.  Often the two
            feelings differ only in degree, context, etc.  E.g.,
            (#$analogousFeelings #$Irritation #$Anger) and
            (#$analogousFeelings #$Irritation #$Impatience).</rdfs:comment>
        <guid>bd5883c1-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#FeelingAttributeType"/>
        <daml:range rdf:resource="#FeelingAttributeType"/>
    </daml:Property>
    <daml:Property rdf:ID="anatomicalPartTypeAffected">
        <rdfs:label>anatomical part type affected</rdfs:label>
        <rdfs:comment>(#$anatomicalPartTypeAffected ACT BODYPARTTYPE)
            means that body parts of the #$AnimalBodyPartType
            BODYPARTTYPE are affected by the action ACT.  For example,
            if BRUSHING is a #$TeethCleaning event, then
            (#$anatomicalPartTypeAffected BRUSHING #$SetOfTeeth).</rdfs:comment>
        <guid>bd589f12-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#AnimalActivity"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
    </daml:Property>
    <daml:UnambiguousProperty rdf:ID="anatomicalParts">
        <rdfs:label>anatomical part</rdfs:label>
        <rdfs:comment>(#$anatomicalParts ORGM PART) means that PART is
            an anatomical part of the (whole) organism ORGM.   Note that
            to represent the decomposition of parts of subparts --- for
            example, to say that a finger is part of a hand --- one
            should use the predicate #$physicalParts (qv), not #$anatomicalParts.</rdfs:comment>
        <guid>bd58ee7e-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#possesses"/>
        <daml:subPropertyOf rdf:resource="#physicalParts"/>
        <daml:domain rdf:resource="#Organism-Whole"/>
        <daml:range rdf:resource="#OrganismPart"/>
    </daml:UnambiguousProperty>
    <daml:Property rdf:ID="ancestors">
        <rdfs:label>ancestor</rdfs:label>
        <rdfs:comment>(#$ancestors YOUNGER OLDER) means OLDER is one of
            the biological ancestors of YOUNGER.  OLDER could be one of
            YOUNGER&apos;s biological parents, biological grandparents,
            biological great-grandparents, etc.</rdfs:comment>
        <guid>bd58b102-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#biologicalRelatives"/>
        <daml:subPropertyOf rdf:resource="#startsAfterStartingOf"/>
        <daml:domain rdf:resource="#Animal"/>
        <daml:range rdf:resource="#Animal"/>
    </daml:Property>
    <LogicalConnective rdf:ID="and">
        <rdfs:label>and</rdfs:label>
        <rdfs:comment>The predicate #$and is the conjunction relation in
            Cyc.  #$and is a variable-arity predicate and takes any
            number of elements of #$ELSentence-Assertible as its
            arguments.  (#$and P Q ... Z) is true if all of the formulas
            P, Q, ..., and Z are true in Cyc.</rdfs:comment>
        <guid>bd5880f9-9c29-11b1-9dad-c379636f7270</guid>
    </LogicalConnective>
    <daml:Property rdf:ID="angularAcceleration">
        <rdfs:label>angular acceleration</rdfs:label>
        <rdfs:comment>The rate at which the angle to an object is accelerating</rdfs:comment>
        <guid>bd58c0b4-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasAttributes"/>
        <daml:domain rdf:resource="#PhysicalEvent"/>
        <daml:range rdf:resource="#AngularAccelerationRate"/>
    </daml:Property>
    <daml:Property rdf:ID="approximatePay">
        <rdfs:label>salary</rdfs:label>
        <rdfs:comment>The predicate #$approximatePay is used to estimate
            a typical amount of pay offered to workers in a specific
            occupation.  (#$approximatePay JOBTYPE RATE) means that a
            person working in the #$OccupationType JOBTYPE makes
            approximately the #$MonetaryFlowRate RATE, as earned income.
            RATE might be expressed in, e.g., #$DollarsPerHour,
            pounds-per-week, or yen-per-year.  RATE refers to average
            pay for the occupation JOBTYPE, excluding any unearned pay
            (such as matching 401K contributions) and the value of other
            employee benefits.</rdfs:comment>
        <guid>bd58b1e1-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#OccupationType"/>
        <daml:range rdf:resource="#MonetaryFlowRate"/>
    </daml:Property>
    <daml:Property rdf:ID="areaOfObject">
        <rdfs:label>surface area</rdfs:label>
        <rdfs:comment>This predicate relates a spatial thing to its
            two-dimensional size or #$Area (q.v.).  (#$areaOfObject OBJ
            AREA) means that  the two-dimensional size of OBJ is AREA.
            OBJ might be, for example, a desk top,  a geographical
            region, or a cross-section of wire.   Of course not every
            spatial thing has an area.  Purely #$TwoDimensional (q.v.)
            things like discs, interiors of squares, and cross sections
            have areas; and so do three-dimensional things that have
            only two  salient  dimensions in most contexts, such as
            floors, tennis courts, and geograhical regions.  For the
            areas of the latter sort of thing, consider using the
            specialization #$areaOfRegion.</rdfs:comment>
        <guid>bd589f18-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasAttributes"/>
        <daml:range rdf:resource="#Area"/>
    </daml:Property>
    <daml:Property rdf:ID="areaOfRegion">
        <rdfs:label>area of region</rdfs:label>
        <rdfs:comment>This predicate relates a geographical region to
            its physical size or area. (#$areaOfRegion REGION AREA)
            means that the physical size of REGION is AREA.  Examples:
            (#$areaOfRegion #$LakeErie (#$SquareMile 9940)),
            (#$areaOfRegion #$Elba-Island-Italy (#$SquareMile 86)),
            (#$areaOfRegion #$VaticanCity (#$SquareMile 0.17)),
            (#$areaOfRegion #$China-PeoplesRepublic (#$SquareMile
            3705390)).  For stating the areas of other (strictly or
            roughly  two-dimensional ) sorts of objects, see the
            generalization #$areaOfObject; and see #$Area for ways of
            representing areas.</rdfs:comment>
        <guid>bd58eb3e-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#areaOfObject"/>
        <daml:domain rdf:resource="#GeographicalRegion"/>
        <daml:range rdf:resource="#Area"/>
    </daml:Property>
    <daml:Property rdf:ID="areasOfOrigin">
        <rdfs:label>areas of origin</rdfs:label>
        <rdfs:comment>The predicate #$areasOfOrigin relates an ethnic
            group to a particular region in which its members
            originated.  (#$areasOfOrigin GROUP REGION) means that the
            #$EthnicGroupType GROUP originated in the
            #$GeographicalRegion REGION.  For example, to indicate that
            Circassians originated in Asia, we would say
            (#$areasOfOrigin #$EthnicGroupOfCircassians
            #$ContinentOfAsia).  Ethnic groups may have originated in
            several different areas; e.g., the #$EthnicGroupOfHutu is
            native to #$Rwanda, #$Burundi, #$Tanzania, and #$Uganda.</rdfs:comment>
        <guid>bd58dd37-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#EthnicGroupType"/>
        <daml:range rdf:resource="#GeographicalRegion"/>
    </daml:Property>
    <daml:Property rdf:ID="arg1Format">
        <rdfs:label>arg 1 format</rdfs:label>
        <rdfs:comment>(#$arg1Format PRED FORMAT) means that FORMAT tells
            how many different first arguments there can be to PRED,
            given some fixed set of other arguments.  See #$Format for a
            description of the possible values for FORMAT.</rdfs:comment>
        <guid>bd61886b-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Predicate"/>
        <daml:range rdf:resource="#Format"/>
    </daml:Property>
    <daml:Property rdf:ID="arg1Genl">
        <rdfs:label>arg 1 genl</rdfs:label>
        <rdfs:comment>(#$arg1Genl REL COL) means that the predicate or
            function, REL, accepts only first arguments that have the
            #$Collection COL among their #$genls.</rdfs:comment>
        <guid>bd588b1d-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Relation"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
    </daml:Property>
    <daml:Property rdf:ID="arg1Isa">
        <rdfs:label>arg 1 isa</rdfs:label>
        <rdfs:comment>(#$arg1Isa REL COL) means that anything given as
            the first argument to the #$Relation REL must be an element
            of the #$Collection COL.  Examples: (#$arg1Isa
            #$formsBorderBetween #$SpatialThing), (#$arg1Isa
            #$seriesOrderedBy #$Series), (#$arg1Isa #$uniquePartTypes #$ExistingObjectType).</rdfs:comment>
        <guid>bd588118-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Relation"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
    </daml:Property>
    <daml:Property rdf:ID="arg2Format">
        <rdfs:label>arg 2 format</rdfs:label>
        <rdfs:comment>(#$arg2Format PRED FORMAT) means that FORMAT tells
            how many different second arguments there can be to PRED,
            given some fixed set of other arguments.  See #$Format for a
            description of the possible values for FORMAT.</rdfs:comment>
        <guid>bd5a142d-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Predicate"/>
        <daml:range rdf:resource="#Format"/>
    </daml:Property>
    <daml:Property rdf:ID="arg2Genl">
        <rdfs:label>arg 2 genl</rdfs:label>
        <rdfs:comment>(#$arg2Genl REL COL) means that the predicate or
            function, REL, accepts only second arguments that have the
            #$Collection COL among their #$genls.</rdfs:comment>
        <guid>bd58dcda-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Relation"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
    </daml:Property>
    <daml:Property rdf:ID="arg2Isa">
        <rdfs:label>arg 2 isa</rdfs:label>
        <rdfs:comment>(#$arg2Isa REL COL) means that anything given as
            the second argument to the #$Relation REL must be an element
            of the #$Collection COL.  Examples: (#$arg2Isa
            #$sheetSurfaceConnected #$PartiallyTangible), (#$arg2Isa
            #$salutation #$CourtesyTitle), (#$arg2Isa #$mother #$FemaleAnimal).</rdfs:comment>
        <guid>bd588117-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Relation"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
    </daml:Property>
    <daml:Property rdf:ID="arg3Format">
        <rdfs:label>arg 3 format</rdfs:label>
        <rdfs:comment>(#$arg3Format PRED FORMAT) means that FORMAT tells
            how many different third arguments there can be to PRED,
            given some fixed set of other arguments.  See #$Format for a
            description of the possible values for FORMAT.</rdfs:comment>
        <guid>bd5b6d60-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Predicate"/>
        <daml:range rdf:resource="#Format"/>
    </daml:Property>
    <daml:Property rdf:ID="arg3Genl">
        <rdfs:label>arg 3 genl</rdfs:label>
        <rdfs:comment>(#$arg3Genl REL COL) means that the predicate or
            function, REL, accepts only third arguments that have the
            #$Collection COL among their #$genls.</rdfs:comment>
        <guid>bd58b8c3-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Relation"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
    </daml:Property>
    <daml:Property rdf:ID="arg3Isa">
        <rdfs:label>arg 3 isa</rdfs:label>
        <rdfs:comment>(#$arg3Isa REL COL) means that anything given as
            the third argument to the #$Relation REL must be an element
            of the #$Collection COL.</rdfs:comment>
        <guid>bd588116-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Relation"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
    </daml:Property>
    <daml:Property rdf:ID="arg4Format">
        <rdfs:label>arg 4 format</rdfs:label>
        <rdfs:comment>(#$arg4Format PRED FORMAT) means that FORMAT tells
            how many different fourth arguments there can be to PRED,
            given some fixed set of other arguments.  See #$Format for a
            description of the possible values for FORMAT.</rdfs:comment>
        <guid>bd678812-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Predicate"/>
        <daml:range rdf:resource="#Format"/>
    </daml:Property>
    <daml:Property rdf:ID="arg4Genl">
        <rdfs:label>arg 4 genl</rdfs:label>
        <rdfs:comment>(#$arg4Genl REL COL) means that the fourth
            argument to the #$Relation (i.e., predicate or function) REL
            must be a subset of the #$Collection COL.</rdfs:comment>
        <guid>bd67e911-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Relation"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
    </daml:Property>
    <daml:Property rdf:ID="arg4Isa">
        <rdfs:label>arg 4 isa</rdfs:label>
        <rdfs:comment>(#$arg4Isa REL COL) means that anything given as
            the fourth argument to the #$Relation REL must be an element
            of the #$Collection COL.</rdfs:comment>
        <guid>bd588115-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Relation"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
    </daml:Property>
    <daml:Property rdf:ID="arg5Format">
        <rdfs:label>arg 5 format</rdfs:label>
        <rdfs:comment>(#$arg5Format PRED FORMAT) means that FORMAT tells
            how many different fifth arguments there can be to PRED,
            given some fixed set of other arguments.  See #$Format for a
            description of the possible values for FORMAT.</rdfs:comment>
        <guid>bd60a887-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Predicate"/>
        <daml:range rdf:resource="#Format"/>
    </daml:Property>
    <daml:Property rdf:ID="arg5Genl">
        <rdfs:label>arg 5 genl</rdfs:label>
        <rdfs:comment>(#$arg5Genl REL COL) means that the fifth argument
            to the #$Relation (predicate or function) REL must be a
            subset of the #$Collection COL.</rdfs:comment>
        <guid>bd5d7783-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Relation"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
    </daml:Property>
    <daml:Property rdf:ID="arg5Isa">
        <rdfs:label>arg 5 isa</rdfs:label>
        <rdfs:comment>(#$arg5Isa REL COL) means that anything given as
            the fifth argument to the #$Relation REL must be an element
            of the #$Collection COL.</rdfs:comment>
        <guid>bd588114-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Relation"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
    </daml:Property>
    <daml:Property rdf:ID="arg6Format">
        <rdfs:label>arg 6 format</rdfs:label>
        <rdfs:comment>(#$arg6Format PRED FORMAT) means that FORMAT tells
            how many different sixth arguments  there can be to PRED,
            given some fixed set of other arguments.  See  #$Format for
            a description of the possible values for FORMAT.</rdfs:comment>
        <guid>bff82c25-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Predicate"/>
        <daml:range rdf:resource="#Format"/>
    </daml:Property>
    <daml:Property rdf:ID="arg6Genl">
        <rdfs:label>arg 6 genl</rdfs:label>
        <rdfs:comment>(#$arg6Genl REL COL) means that anything given as
            the first argument  to the #$Relation REL must have COL
            among its #$genls.</rdfs:comment>
        <guid>bf476137-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Relation"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
    </daml:Property>
    <daml:Property rdf:ID="arg6Isa">
        <rdfs:label>arg 6 isa</rdfs:label>
        <rdfs:comment>(#$arg6Isa REL COL) means that anything given as
            the sixth argument    to the relationship REL must be an
            element of the collection COL.</rdfs:comment>
        <guid>bf6d1d3a-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Relation"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
    </daml:Property>
    <daml:Property rdf:ID="argsGenl">
        <rdfs:label>args genl</rdfs:label>
        <rdfs:comment>When a relation REL is an element of
            #$VariableArityRelation, i.e., it takes a variable number of
            arguments, then (#$argsGenl REL COL) means that all of those
            arguments must be subsets of COL.</rdfs:comment>
        <guid>bd651c1b-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Relation"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
    </daml:Property>
    <daml:Property rdf:ID="argsIsa">
        <rdfs:label>args isa</rdfs:label>
        <rdfs:comment>The predicate #$argsIsa is used with elements of
            #$Relation that take an indefinite number of arguments, in
            order to specify that the values of all the arguments used
            with that relation must be of a certain type.  E.g., to
            specify that all the arguments to Cyc&apos;s addition
            function, #$PlusFn, must be measurable quantities (i.e.,
            elements of #$ScalarInterval), we assert: (#$argsIsa
            #$PlusFn #$ScalarInterval).  Additional examples: `paths
            branch only into other paths&apos;, i.e., (#$argsIsa
            #$branchesInto #$Path-Generic); `dinars are measured only in
            numbers&apos;, i.e., (#$argsIsa #$Dinar-Jordan #$SubLRealNumber).</rdfs:comment>
        <guid>bd58803d-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Relation"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
    </daml:Property>
    <daml:UniqueProperty rdf:ID="arity">
        <rdfs:label>arity</rdfs:label>
        <rdfs:comment>(#$arity REL NUMBER) means that the #$Relation REL
            takes the number of arguments given by NUMBER.  For example,
            the #$arity of all instances of #$BinaryPredicate is 2.  In
            particular, (#$arity #$arity 2) since #$arity takes 2 arguments.</rdfs:comment>
        <guid>bd5880ce-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#FixedArityRelation"/>
        <daml:range rdf:resource="#NonNegativeInteger"/>
    </daml:UniqueProperty>
    <daml:UniqueProperty rdf:ID="arityMax">
        <rdfs:label>arity max</rdfs:label>
        <rdfs:comment>(#$arityMax REL NUMBER) means that the
            #$VariableArityRelation REL takes at most the number of
            arguments given by NUMBER.  For example, the #$arityMax of
            all instances of #$UnitOfMeasure is 2.  See also #$arityMin
            and #$arity.</rdfs:comment>
        <guid>bd6a2d94-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#VariableArityRelation"/>
        <daml:range rdf:resource="#NonNegativeInteger"/>
    </daml:UniqueProperty>
    <daml:UniqueProperty rdf:ID="arityMin">
        <rdfs:label>arity min</rdfs:label>
        <rdfs:comment>(#$arityMin REL NUMBER) means that the
            #$VariableArityRelation REL takes at least the number of
            arguments given by NUMBER.  For example, the #$arityMin of
            all instances of #$UnitOfMeasure is 1.  See also #$arityMax
            and #$arity.</rdfs:comment>
        <guid>c128c4f1-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#VariableArityRelation"/>
        <daml:range rdf:resource="#NonNegativeInteger"/>
    </daml:UniqueProperty>
    <daml:Property rdf:ID="artifactHonors">
        <rdfs:label>honoree</rdfs:label>
        <rdfs:comment>(#$artifactHonors ARTIFACT HONOREE) means that
            ARTIFACT is created or constructed to honor or commemmorate
            HONOREE, and to cause people who perceive ARTIFACT to
            remember and respect HONOREE.  HONOREE is usually a
            #$Person, but sometimes it can be a group of people, a pet,
            an event, or another physical object (even a body part, in
            the case of the statue at Saratoga honoring Gen. Benedict
            Arnold&apos;s untainted leg).  Usually, but not always, the
            ARTIFACT is created by someone other than HONOREE (but some
            people build monuments to themselves).  If HONOREE is a
            living #$Person when ARTIFACT is created, HONOREE is
            probably present at an #$Event of announcing, inaugurating
            or unveiling the ARTIFACT; see #$eventHonors.  Usually, if
            HONOREE is dead, the ARTIFACT will be an instance of
            #$Monument; see the more specific predicate #$monumentHonors
            for this case.</rdfs:comment>
        <guid>be1bbe5d-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#symbolizes"/>
        <daml:domain rdf:resource="#Artifact"/>
        <daml:range rdf:resource="#TemporalThing"/>
    </daml:Property>
    <daml:Property rdf:ID="assertedTermSentences">
        <rdfs:label>asserted term sentences</rdfs:label>
        <rdfs:comment>(#$assertedTermSentences TERM FORMULA) determines
            whether a Cyc #$CycLAssertion of the form FORMULA exists
            such that TERM is referred to as a term within that formula.
            See also #$assertedSentence and #$assertedPredicateArg for
            related predicates about assertions, and #$termFormulas for
            a more general predicate that does not require that an
            assertion for FORMULA exists.</rdfs:comment>
        <guid>be8f47a3-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
        <daml:range rdf:resource="#ELSentence-Assertible"/>
    </daml:Property>
    <daml:Property rdf:ID="assertionTimeOfMicrotheory">
        <rdfs:label>assertion time of microtheory</rdfs:label>
        <rdfs:comment>(#$assertionTimeOfMicrotheory MICROTHEORY
            TIME-INTERVAL) means that the assertions in the
            #$Microtheory MICROTHEORY were set forth during the
            #$TimeInterval TIME-INTERVAL.  For example, the assertion
            time of the #$CIAWorldFactbook1997Mt, which contains
            information in the CIA 1997 World Factbook, is the year
            1997.  Note that the assertion time is not the time interval
            referenced in assertions within MICROTHEORY; for example,
            the #$CIAWorldFactbook1997Mt contains assertions about the
            1996 gross domestic product of various countries.  Nor is
            the assertion time the date on which assertions in
            MICROTHEORY were entered in the Knowledge Base; again, the
            #$CIAWorldFactbook1997Mt is a good example, since it was
            created in 1998.  Generally, when the source of the
            assertions in a microtheory is a publication, the assertion
            time will be (or subsume) the publication date.
            (Specifically, date of first publication, in the case of
            unrevised subsequent editions.  However, if the material in
            the source is made publicly available prior to the formal
            publication date, the assertion time will be the earlier
            date.  Also, it seems best to treat as an exception a case
            such as the publication of a diary written years before.)
            Note that it will only make sense to assign an assertion
            time to a microtheory when the contents of the microtheory
            represent propositions that were the object of assertion,
            interrogation, etc. by some source or agent; not all
            microtheories fall into this category.  See also #$mtTime
            and #$MtTimeFn.--Schwartz, Jul 23, 1998</rdfs:comment>
        <guid>be110b0d-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Microtheory"/>
        <daml:range rdf:resource="#TimeInterval"/>
    </daml:Property>
    <daml:Property rdf:ID="assistingAgent">
        <rdfs:label>assistants</rdfs:label>
        <rdfs:comment>(#$assistingAgent ACT AGENT) means that AGENT is
            one of the agents assisting in the performance of ACT; AGENT
            itself may or may not also be performing ACT.  AGENT is
            doing some tasks related to ACT but which are not directly
            #$subEvents of performing the main or focus action.  Thus,
            `assisting&apos; here means doing such supporting activities
            as fetching supplies or tools needed in ACT; helping to
            manipulate objects involved in ACT; gathering an audience,
            or booking the performer, if ACT is a public performance,
            and so forth.</rdfs:comment>
        <guid>c0fd5da3-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#deliberateActors"/>
        <daml:domain rdf:resource="#Event"/>
        <daml:range rdf:resource="#Agent"/>
    </daml:Property>
    <daml:UnambiguousProperty rdf:ID="atomicNumber">
        <rdfs:label>atomic number</rdfs:label>
        <rdfs:comment>The predicate #$atomicNumber indicates the atomic
            number of a type of element.  (#$atomicNumber E N) means
            that E, a collection belonging to
            #$ElementStuffTypeByNumberOfProtons, has the positive
            integer N for its atomic number.  This means that any
            instance of (#$AtomFn E) must have N #$Protons in its
            #$AtomicNucleus.  For example, (#$atomicNumber #$Carbon 6),
            and every instance of (#$AtomFn #$Carbon) has six protons in
            its nucleus.</rdfs:comment>
        <guid>bd5890dc-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#ElementStuffTypeByNumberOfProtons"/>
        <daml:range rdf:resource="#PositiveInteger"/>
    </daml:UnambiguousProperty>
    <daml:Property rdf:ID="background-RST">
        <rdfs:label>background - r s t</rdfs:label>
        <rdfs:comment>The discourse relation that holds between two
            segments of text when ARG2 specifies something which makes
            it easier to understand the content of or motivation for ARG1.</rdfs:comment>
        <guid>bf1b6759-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#LinguisticObject"/>
        <daml:range rdf:resource="#LinguisticObject"/>
    </daml:Property>
    <daml:Property rdf:ID="barometricPressure">
        <rdfs:label>barometric pressure</rdfs:label>
        <rdfs:comment>(#$barometricPressure GAS PRESS) means that the
            instance of #$GaseousTangibleThing GAS has the #$Pressure
            PRESS.  Typically, GAS is a piece of atmosphere;
            #$barometricPressure indicates the atmospheric pressure in
            and around that `object&apos;.</rdfs:comment>
        <guid>bd58a16f-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#GaseousTangibleThing"/>
        <daml:range rdf:resource="#Pressure"/>
    </daml:Property>
    <daml:UniqueProperty rdf:ID="baseOfUnit">
        <rdfs:label>base of unit</rdfs:label>
        <rdfs:comment>(#$baseOfUnit PUN BUN) means that PUN is an
            instance of #$UnitOfMeasureWithPrefix that is formed by
            affixing an instance of #$MetricUnitPrefix to BUN.</rdfs:comment>
        <guid>bf5765a6-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#UnitOfMeasureWithPrefix"/>
        <daml:range rdf:resource="#UnitOfMeasureNoPrefix"/>
    </daml:UniqueProperty>
    <daml:UniqueProperty rdf:ID="baseSet">
        <rdfs:label>base set</rdfs:label>
        <rdfs:comment>(#$baseSet STRUCTURE SET) means that SET is the
            base set of #$RelationalStructure STRUCTURE.  That is, SET
            is the domain from which the individual elements of the
            structure are drawn.  Although there may be several
            relations involved in the relational structure, they all
            relate members of the base set.  As each relational
            structure has a unique base set, this predicate is functional.</rdfs:comment>
        <guid>be51a217-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#RelationalStructure"/>
        <daml:range rdf:resource="#Set-Mathematical"/>
    </daml:UniqueProperty>
    <daml:Property rdf:ID="basicPrice">
        <rdfs:label>price</rdfs:label>
        <rdfs:comment>The predicate #$basicPrice indicates the price of
            a particular item.  (#$basicPrice THING MONEY) means that
            the object or service, THING, has the basic price MONEY.
            (MONEY can be an interval representing a range of prices.)
            This predicate can be used to indicate the price of a
            particular chunk of stuff too.   Note that #$basicPrice
            refers to the `ticket price&apos; of an item when it is
            actually bought or offered for sale; #$basicPrice does NOT
            refer to appraised value (where that differs from an actual
            selling price).  Since prices are time-sensitive, assertions
            about #$basicPrice should be suitably qualified.  For
            example, the price of a fast-food #$HamburgerSandwich in
            1996 is a magnitude greater than what it was in 1965.  For
            the total charge for purchase of an object, including tax,
            shipping, handling, etc., use #$totalCharge (q.v.).</rdfs:comment>
        <guid>bd588c7f-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#TemporalThing"/>
        <daml:range rdf:resource="#Money"/>
    </daml:Property>
    <daml:Property rdf:ID="behind-Directly">
        <rdfs:label>behind - directly</rdfs:label>
        <rdfs:comment>(#$behind-Directly AFT FORE) means that AFT is
            directly behind tangible object FORE.  More precisely, it
            implies both (#$behind-Generally AFT FORE) and that there is
            at least one line parallel to the backward pointing axis of
            FORE that intersects both AFT and FORE.  Note that FORE must
            have a back side.  AFT may be intangible, such as an image
            projected behind an actor on a stage.</rdfs:comment>
        <guid>bd58b3c4-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#behind-Generally"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:Property>
    <daml:Property rdf:ID="behind-Generally">
        <rdfs:label>posterior</rdfs:label>
        <rdfs:comment>(#$behind-Generally AFT FORE) means that AFT is
            behind FORE.  More precisely, a line originating at the
            center of FORE projecting away from the front side of FORE
            and parallel to the intrinsic front-to-back axis of FORE
            forms an angle of less than 45 degrees with a line
            intersecting both AFT and FORE.  AFT may be intangible.</rdfs:comment>
        <guid>bd58b405-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#near"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:Property>
    <daml:Property rdf:ID="beliefStatements">
        <rdfs:label>belief statements</rdfs:label>
        <rdfs:comment>(#$beliefStatements BSYS PROP) indicates that a
            belief of the belief system BSYS is stated in the
            proposition PROP (represented by a #$ELSentence-Assertible).
            In other words, each #$BeliefSystems comprises a set of
            tenets, statements linked to it via this predicate.   Note:
            This is NOT the predicate that ties a particular #$Agent to
            his/her/its beliefs; for that, see #$beliefs and #$hasBeliefSystems.</rdfs:comment>
        <guid>bd58fdaf-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#BeliefSystem"/>
        <daml:range rdf:resource="#ELSentence-Assertible"/>
    </daml:Property>
    <daml:Property rdf:ID="beliefs">
        <rdfs:label>believe</rdfs:label>
        <rdfs:comment>(#$beliefs AGT PROP) means that the #$Agent AGT
            subscribes to the truth of the proposition PROP (represented
            by a #$ELSentence-Assertible).  PROP states something that
            AGT believes to be true, but of course PROP may or may not
            actually be true.  Another way to think of this is that PROP
            is true in the context whose epistemological status is `what
            AGT believes&apos;.  Naturally, PROP may itself be a
            proposition about beliefs; one would use nested #$beliefs in
            this fashion to express a rule such as `most Canadians
            believe that most Americans believe Canada is a US State.&apos;</rdfs:comment>
        <guid>bd5880d2-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#IntelligentAgent"/>
        <daml:range rdf:resource="#ELSentence-Assertible"/>
    </daml:Property>
    <daml:Property rdf:ID="beneficiary">
        <rdfs:label>beneficiaries</rdfs:label>
        <rdfs:comment>(#$beneficiary ACT AGT) means that the #$Agent AGT
            benefits from the performance of the action ACT.  Some
            desire or interest of AGT is served, enabled, helped, or
            satisfied by the performance of ACT.</rdfs:comment>
        <guid>bd5890e5-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Event"/>
        <daml:range rdf:resource="#Agent"/>
    </daml:Property>
    <daml:Property rdf:ID="biases">
        <rdfs:label>bias</rdfs:label>
        <rdfs:comment>(#$biases AGT PROP) means that the #$Agent AGT has
            the unsubstantiated belief PROP (represented by a
            #$ELSentence-Assertible).  Biases generally are so deeply
            rooted in the agent that the agent may not be consciously
            aware that PROP is rationally undersupported, and it may be
            concomittantly harder to change their mind about PROP.
            Note:  PROP might or might not turn out to be true (in
            various contexts); often, PROP is some overgeneralization
            which is sometimes true but often false, or which once was
            true but now is usually false, etc.</rdfs:comment>
        <guid>bd590b2f-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#opinions"/>
        <daml:domain rdf:resource="#IntelligentAgent"/>
        <daml:range rdf:resource="#ELSentence-Assertible"/>
    </daml:Property>
    <daml:UniqueProperty rdf:ID="biologicalFather">
        <rdfs:label>biological father</rdfs:label>
        <rdfs:comment>(#$biologicalFather OFFSPRING MALE) means that
            #$MaleAnimal MALE is the male biological parent of #$Animal OFFSPRING.</rdfs:comment>
        <guid>bd5884c2-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#father"/>
        <daml:subPropertyOf rdf:resource="#biologicalParents"/>
        <daml:domain rdf:resource="#Animal"/>
        <daml:range rdf:resource="#MaleAnimal"/>
    </daml:UniqueProperty>
    <daml:UniqueProperty rdf:ID="biologicalMother">
        <rdfs:label>biological mother</rdfs:label>
        <rdfs:comment>(#$biologicalMother OFFSPRING FEMALE) means that
            #$FemaleAnimal FEMALE is the female biological parent of the
            #$Animal OFFSPRING.</rdfs:comment>
        <guid>bd58b088-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#mother"/>
        <daml:subPropertyOf rdf:resource="#biologicalParents"/>
        <daml:domain rdf:resource="#Animal"/>
        <daml:range rdf:resource="#FemaleAnimal"/>
    </daml:UniqueProperty>
    <daml:Property rdf:ID="biologicalParents">
        <rdfs:label>parent</rdfs:label>
        <rdfs:comment>(#$biologicalParents OFFSPRING PARENT) means that
            PARENT is the biological parent of OFFSPRING.</rdfs:comment>
        <guid>bd58b184-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#biologicalRelatives"/>
        <daml:domain rdf:resource="#Animal"/>
        <daml:range rdf:resource="#Animal"/>
    </daml:Property>
    <daml:Property rdf:ID="biologicalRelatives">
        <rdfs:label>biological relatives</rdfs:label>
        <rdfs:comment>(#$biologicalRelatives ORG1 ORG2) means that ORG1
            and ORG2 are biological relatives, related by birth.</rdfs:comment>
        <guid>bd58b143-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#relatives"/>
        <daml:domain rdf:resource="#Animal"/>
        <daml:range rdf:resource="#Animal"/>
    </daml:Property>
    <daml:UnambiguousProperty rdf:ID="birthChild">
        <rdfs:label>birth child</rdfs:label>
        <rdfs:comment>(#$birthChild BIRTH ANIM) means that ANIM is the
            #$Animal that is born in the #$BirthEvent BIRTH.</rdfs:comment>
        <guid>c0fd68e5-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#objectOfStateChange"/>
        <daml:subPropertyOf rdf:resource="#bodilyActedOn"/>
        <daml:domain rdf:resource="#BirthEvent"/>
        <daml:range rdf:resource="#Animal"/>
    </daml:UnambiguousProperty>
    <daml:Property rdf:ID="birthDate">
        <rdfs:label>birthdate</rdfs:label>
        <rdfs:comment>(#$birthDate X Y) indicates that the #$Entity X
            came into existence during #$Date Y.  For people, this is
            the date at which they were born, hence the name of this
            predicate.  The first argument to this predicate must be an
            #$Entity, and not just any old #$SomethingExisting, because
            we don&apos;t want to talk about the #$birthDate or
            #$dateOfDeath of a subabstraction like
            AlbertEinsteinWhileAtPrinceton; in other words, proper
            subabstractions will have #$startingDates and #$endingDates,
            but only true #$Entitys will have a #$birthDate or
            #$dateOfDeath.  To specify the #$DayOfYearType on which a
            #$Person was born, use #$birthDay.</rdfs:comment>
        <guid>bd58ebc5-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#startingDate"/>
        <daml:domain rdf:resource="#Entity"/>
        <daml:range rdf:resource="#Date"/>
    </daml:Property>
    <daml:Property rdf:ID="birthParent">
        <rdfs:label>birth parent</rdfs:label>
        <rdfs:comment>(#$birthParent BIRTH PAR) means that PAR is the
            parent who is #$bodilyDoer in the #$BirthEvent BIRTH -
            typically this is also the #$femaleParentActor of the
            preceding #$BiologicalReproductionEvent.</rdfs:comment>
        <guid>c0fd68d7-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#bodilyDoer"/>
        <daml:subPropertyOf rdf:resource="#objectOfStateChange"/>
        <daml:domain rdf:resource="#BirthEvent"/>
        <daml:range rdf:resource="#Animal"/>
    </daml:Property>
    <daml:Property rdf:ID="boardMembers">
        <rdfs:label>board members</rdfs:label>
        <rdfs:comment>The predicate #$boardMembers relates a particular
            organization to the persons who serve on its board of
            directors.  (#$boardMembers ORG PERSON) means PERSON belongs
            to that instance of #$BoardOfDirectors which is responsible
            for oversight of the #$Organization ORG.  A member of the
            Board of Directors of an organization may or may not be an
            executive of the organization.</rdfs:comment>
        <guid>bd589954-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasMembers"/>
        <daml:domain rdf:resource="#Organization"/>
        <daml:range rdf:resource="#Person"/>
    </daml:Property>
    <daml:Property rdf:ID="bodilyActedOn">
        <rdfs:label>bodily acted on</rdfs:label>
        <rdfs:comment>The predicate #$bodilyActedOn is used to describe
            an event in which a living organism is acted on by some
            external agency.  (#$bodilyActedOn EVENT ORG) means that ORG
            is a living organism (i.e., an #$Organism-Whole) that is
            being affected in EVENT.  ORG itself may be intentionally
            participating in EVENT (e.g., a person voluntarily getting a
            haircut) or not (e.g., an animal hit by a car).  Either way,
            the organism ORG is not an active primary `doer&apos; of
            EVENT.  This predicate is appropriately used to identify
            actors who undergo (instances of) #$DrugTherapy or
            #$IncurringAnInjury. Note an important contrast with
            #$bodilyDoer (q.v.):  #$bodilyActedOn is for events that
            merely happen to the body, as opposed to actions the body
            does.  Because the body of an organism is an active
            `doer&apos; in its instances of #$PhysiologicalCondition,
            including any #$InjuryCondition (which is the physical
            process of a body sustaining an injury and responding by
            healing or deteriorating), an organism is related to events
            of those kinds with #$bodilyDoer rather than
            #$bodilyActedOn.  By contrast, organisms involved in
            instances of #$DrugTherapy (which refers to the effect of a
            drug on the patient) or #$IncurringAnInjury (which refers to
            the event in which an organism gets injured, rather than the
            process of its being in an injured and hopefully healing
            state) should be related to events of those types with #$bodilyActedOn.</rdfs:comment>
        <guid>bd58d02b-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#objectActedOn"/>
        <daml:domain rdf:resource="#Event"/>
        <daml:range rdf:resource="#Organism-Whole"/>
    </daml:Property>
    <daml:Property rdf:ID="bodilyDoer">
        <rdfs:label>bodily doers</rdfs:label>
        <rdfs:comment>The predicate #$bodilyDoer relates an event to an
            organism which does it non-deliberately, which in Cyc means
            without conscious intention or volition.  (#$bodilyDoer
            EVENT DOER) means that DOER does EVENT (i.e., DOER is not
            merely subjected to EVENT by external forces), but DOER does
            EVENT non-deliberately.  Note that for certain kinds of
            actions, considered as a class, organisms are necessarily
            merely #$bodilyDoers; for example, physical growth,
            peristalsis, and reflex actions.  For other actions, such as
            breathing, flinching, or shouting, an organism commonly (but
            not necessarily) acts as #$bodilyDoer; some cases of such
            events may be deliberately #$performedBy the doer.  Note: an
            organism which dies of natural causes (#$Dying) is the
            #$bodilyDoer of that event, because of the internal
            processes the body performs during #$Dying.  Also, in
            certain #$PhysiologicalConditions, including an
            #$AilmentCondition (such as #$DiabetesMellitus) or a healing
            process, organisms are considered to be #$bodilyDoers
            because their own bodily processes are creating or
            sustaining those conditions.  An organism killed by an
            external agent, however, is just the #$bodilyActedOn (q.v.)
            in that event; therefore, instances of #$Killing-Biological
            should use #$bodilyActedOn to refer to the organism
            killed.--Nichols, Nov. 21, 1996</rdfs:comment>
        <guid>bd5fc61f-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#nonDeliberateActors"/>
        <daml:subPropertyOf rdf:resource="#doneBy"/>
        <daml:domain rdf:resource="#PhysicalEvent"/>
        <daml:range rdf:resource="#Organism-Whole"/>
    </daml:Property>
    <daml:Property rdf:ID="boilingPoint">
        <rdfs:label>boiling point</rdfs:label>
        <rdfs:comment>(#$boilingPoint STUFF TEMP) means that TEMP is the
            temperature at which the substance STUFF changes from having
            the attribute #$LiquidStateOfMatter to
            #$GaseousStateOfMatter (when sufficient energy is input to
            raise STUFF&apos;s temperature through that point).  Note
            that the boiling point of most substances is
            context-dependent; on a mountaintop in Tibet the boiling
            point of water is much lower than it is in New York City.</rdfs:comment>
        <guid>bd58b243-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#Temperature"/>
    </daml:Property>
    <daml:Property rdf:ID="borderSubRegions">
        <rdfs:label>border sub regions</rdfs:label>
        <rdfs:comment>(#$borderSubRegions REGION BORDERREGION) means
            that BORDERREGION is a subregion of REGION which borders on
            some region outside of REGION.</rdfs:comment>
        <guid>be96aa64-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#subRegions"/>
    </daml:Property>
    <daml:Property rdf:ID="bordersOn">
        <rdfs:label>border</rdfs:label>
        <rdfs:comment>(#$bordersOn REGION1 REGION2) means that the
            #$GeographicalRegions REGION1 and REGION2 are physically
            adjacent to each other,  i.e. they share a border.
            Examples: (#$bordersOn #$CentralUSATimeZone
            #$MountainUSATimeZone), (#$bordersOn #$Nepal #$Tibet).</rdfs:comment>
        <guid>bd58e17a-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#touchesDirectly"/>
        <daml:subPropertyOf rdf:resource="#adjacentTo"/>
        <daml:domain rdf:resource="#GeographicalRegion"/>
        <daml:range rdf:resource="#GeographicalRegion"/>
    </daml:Property>
    <daml:Property rdf:ID="boss">
        <rdfs:label>boss</rdfs:label>
        <rdfs:comment>(#$boss PERSON1 PERSON2) means PERSON1 has PERSON2
            for his or her immediate boss or supervisor.   Note:  There
            can be more than one boss of a person, even cotemporally.
            Note: (#$genlPreds #$boss #$acquaintedWith) means that if
            (#$boss x y), then (#$acquaintedWith x y), which in turn
            means (#$acquaintances x y #$SimpleContactAcquaintance).
            I.e., a person and their direct boss are at least simple
            contact acquaintances.</rdfs:comment>
        <guid>bd58bf7d-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#acquaintedWith"/>
        <daml:domain rdf:resource="#Person"/>
        <daml:range rdf:resource="#Person"/>
    </daml:Property>
    <daml:Property rdf:ID="businessPartners">
        <rdfs:label>partner</rdfs:label>
        <rdfs:comment>The predicate #$businessPartners indicates that
            two agents have jointly undertaken some business project;
            they are combining resources in some way to further their
            interests.  (#$businessPartners AGENT1 AGENT2) means AGENT1
            is in partnership with AGENT2 to engage in business
            activities.  The partners are instances of #$Agent and may
            belong to either #$Person or #$Organization.  The
            partnership may be formally recognized (e.g., a
            #$Partnership or some other form of business) or informal.</rdfs:comment>
        <guid>c10afd13-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#positiveVestedInterest"/>
        <daml:domain rdf:resource="#Agent"/>
        <daml:range rdf:resource="#Agent"/>
    </daml:Property>
    <daml:Property rdf:ID="buyer">
        <rdfs:label>buyer</rdfs:label>
        <rdfs:comment>The predicate #$buyer relates an agent to a
            business activity.  (#$buyer EVENT AGENT) means that the
            #$Agent AGENT purchases the goods for sale in the
            #$CommercialActivity EVENT.  The #$buyer may purchase the
            goods or services directly or through an agent.  See also
            and compare: #$buyingPerformer, #$buyingAgent.</rdfs:comment>
        <guid>bd58d07b-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#exchangers"/>
        <daml:domain rdf:resource="#MonetaryExchangeOfUserRights"/>
        <daml:range rdf:resource="#SocialBeing"/>
    </daml:Property>
    <daml:UniqueProperty rdf:ID="buyingAgent">
        <rdfs:label>buyer</rdfs:label>
        <rdfs:comment>(#$buyingAgent SALE AGENT) means that in the
            #$CommercialActivity SALE, the #$LegalAgent AGENT acts on
            behalf of a would-be buyer to bring about a purchase.  A
            #$buyingAgent performs the buying but is not the #$buyer.
            See also and compare: #$buyingPerformer, #$buyer.</rdfs:comment>
        <guid>bd589057-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#mediators"/>
        <daml:subPropertyOf rdf:resource="#buyingPerformer"/>
        <daml:domain rdf:resource="#CommercialActivity"/>
        <daml:range rdf:resource="#SocialBeing"/>
    </daml:UniqueProperty>
    <daml:UniqueProperty rdf:ID="buyingPerformer">
        <rdfs:label>buying performer</rdfs:label>
        <rdfs:comment>(#$buyingPerformer COM AGENT) means that AGENT is
            the agent actually attempting to obtain goods or services in
            a purchase, by performing an active role in the
            #$CommercialActivity COM.  Generally, the agent who is the
            #$buyingPerformer is identical with the #$buyer, but in some
            cases the #$buyingPerformer is instead a #$buyingAgent
            representing the #$buyer.</rdfs:comment>
        <guid>c0fd62ac-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#socialParticipants"/>
        <daml:subPropertyOf rdf:resource="#performedBy"/>
        <daml:subPropertyOf rdf:resource="#preActors"/>
        <daml:domain rdf:resource="#CommercialActivity"/>
        <daml:range rdf:resource="#SocialBeing"/>
    </daml:UniqueProperty>
    <daml:UnambiguousProperty rdf:ID="byProducts">
        <rdfs:label>by-product</rdfs:label>
        <rdfs:comment>(#$byProducts EV OBJ) means that OBJ is one of the
            outputs of EV, but not one of its intended outputs.  For
            intended outputs, see #$products.  For a particular EV and
            OBJ, it will not be true that both (#$products EV OBJ) and
            (#$byProducts EV OBJ).</rdfs:comment>
        <guid>bd58c25c-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#outputs"/>
        <daml:domain rdf:resource="#PurposefulAction"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:UnambiguousProperty>
    <daml:UniqueProperty rdf:ID="canContainShapes">
        <rdfs:label>can contain shapes</rdfs:label>
        <rdfs:comment>The predicate #$canContainShapes is used to give
            an approximation of the internal size and shape of
            particular tangible objects, by relating an object to an
            abstract region of space described as a geometric shape with
            definite dimensions.  (#$canContainShapes OBJ SHAPE) gives
            an upper bound for the size of things that can be contained
            in the object OBJ, by specifying the dimensions of an
            abstract shape which OBJ can contain.  #$canContainShapes
            uses the elements of #$ShapeFunction (q.v.) for reference,
            especially the basic shapes generated by
            #$RectangularSolidFn, #$CylinderFn, and #$SphereFn.  For
            example, the trunk of my Honda Civic #$canContainShapes of
            (#$RectangularSolidFn (#$Meter 1) (#$Meter 0.5) (#$Meter
            0.75)).  Cf. #$fitsIn.</rdfs:comment>
        <guid>bd58d16d-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#GeometricThing-Abstract"/>
    </daml:UniqueProperty>
    <daml:Property rdf:ID="capitalCity">
        <rdfs:label>capital city</rdfs:label>
        <rdfs:comment>The predicate #$capitalCity is used to indicate
            the capital of a country (only).  (#$capitalCity CNTRY CITY)
            means that CITY is the capital city of the #$Country CNTRY.
            Examples: the #$capitalCity of the #$UnitedStatesOfAmerica
            is the #$CityOfWashingtonDC; the #$capitalCity of #$Armenia
            is Yerevan.  Note: for regional capitals, use #$capitalCityOfThisState.</rdfs:comment>
        <guid>bd590b5f-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#GeopoliticalEntity"/>
        <daml:range rdf:resource="#CapitalCityOfRegion"/>
    </daml:Property>
    <daml:UniqueProperty rdf:ID="cardinality">
        <rdfs:label>cardinality</rdfs:label>
        <rdfs:comment>(#$cardinality SETORCOL N) means that the
            #$SetOrCollection SETORCOL has N members. For instance,
            #$TheEmptySet has a #$cardinality 0. Note that cardinality
            is most clear for finite sets, and only in special branches
            of mathematics does one speak of cardinality of infinite
            sets. See also, #$entityCardinality,
            #$Note-cardinality-vs-entityCardinality,  #$groupCardinality.</rdfs:comment>
        <guid>bd58bbcf-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#SetOrCollection"/>
    </daml:UniqueProperty>
    <daml:Property rdf:ID="carriesInfectionType">
        <rdfs:label>carry</rdfs:label>
        <rdfs:comment>The predicate (#$carriesInfectionType OBJECT
            INFECT_TYPE) relates a particular organism or other object
            to a type of infection that it carries.
            (#$carriesInfectionType OBJ INFTYP) means that the
            individual OBJ is a carrier of the #$InfectionType INFTYP.
            For example, (#$carriesInfectionType TyphoidMary
            #$TyphoidFever) or (#$carriesInfectionType Needle0567 #$AIDS).</rdfs:comment>
        <guid>c0fd68e7-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#InfectionType"/>
    </daml:Property>
    <daml:Property rdf:ID="catalyst">
        <rdfs:label>catalyst</rdfs:label>
        <rdfs:comment>The predicate #$catalyst identifies the particular
            thing that acts as a catalyst in a particular chemical
            reaction.  (#$catalyst R X) means that the
            #$ChemicalReaction R has the particular quantity of
            substance X as a catalyst.  For example, every instance of
            #$Photosynthesis-Generic has some portion of #$Chlorophyll
            as a catalyst; an amount of #$Water may be a #$catalyst in
            some #$OxidationProcess of a #$Metal.</rdfs:comment>
        <guid>be011804-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#unchangedActors"/>
        <daml:domain rdf:resource="#ChemicalReaction"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:Property>
    <daml:Property rdf:ID="causedBy">
        <rdfs:label>caused by</rdfs:label>
        <rdfs:comment>#$causedBy is the predicate used for   token-token
            event causation, i.e., causation between individual  events.
            (#$causedBy EVENT1 EVENT2) means that EVENT1 is causedBy
            EVENT2.  See #$causes-ThingProp to state that a
            #$TemporalThing causes a proposition.  See #$causes-PropProp
            to express a causal link between one proposition and another.</rdfs:comment>
        <guid>bd58aa06-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#startsAfterStartingOf"/>
        <daml:domain rdf:resource="#Event"/>
        <daml:range rdf:resource="#Event"/>
    </daml:Property>
    <daml:Property rdf:ID="causes-PropProp">
        <rdfs:label>causes - prop prop</rdfs:label>
        <rdfs:comment>(#$causes-PropProp p1 p2) means that p1 causes p2.
            That is, the state of affairs described by proposition p1
            causally leads to the state of affairs described by p2.
            This is stronger than material implication; i.e., it must
            also be the case that (#$implies p1 p2).  Note that
            #$causes-PropProp means more than #$implies, of course:
            there is a temporal ordering involved, there is a presumed
            mechanism of causation, etc.  Unlike #$implies,
            #$causes-PropProp is not reflexive; one would not say that
            p1 causes p1, even though p1 implies p1.  Another difference
            between #$implies and #$causes-PropProp is that
            #$causes-PropProp is a predicate, not a logical connective.
            Just because (#$causes-PropProp p1 p2) is true that does NOT
            entail that (#$causes-PropProp (#$not p2) (#$not p1)) is
            true.  Note that (#$causes-PropProp p1 p2) is generally a
            more accurate way of talking about causation than saying
            that some event e1 causes event e2 (which one can do in Cyc,
            using the predicate #$causes-EventEvent) since often there
            are a few key aspects of e1 that cause a few key aspects of
            e2, and the remaining details of e1 and e2 were, to first
            order, irrelevant.  Note that, similarly, (#$causes-PropProp
            p1 p2) is generally a more accurate way of talking about
            causation than saying that some situation (see #$Situation)
            SIT caused something to be true (which one can do in Cyc,
            using the predicate #$causes-SitProp) since often there is
            some specific aspect of the situation that is the cause of
            the proposition&apos;s becoming satisfied.  Because this
            predicate is asymmetric and since effect (p2) can not
            temporally precede cause (p1), #$causes-PropProp may not be
            used to express mutual causation, e.g. feedback loops for
            which it may be said that two events (probably more
            process-like) cause each other.  We consider mutual
            causation to be a different form of causation and should be
            expressed using some as of yet (Dec 96) unreified
            relationship.  See #$NoteAboutCausalityPredicates for a map
            of related predicates.--#$BillJ, Feb 17, 1998</rdfs:comment>
        <guid>bd62368e-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#causes-ThingProp"/>
        <daml:domain rdf:resource="#ELSentence-Assertible"/>
        <daml:range rdf:resource="#ELSentence-Assertible"/>
    </daml:Property>
    <daml:Property rdf:ID="causes-ThingProp">
        <rdfs:label>induce</rdfs:label>
        <rdfs:comment>(#$causes-ThingProp THING PROP) means that THING
            causes the proposition PROP to become true.  THING may be an
            #$Agent, a #$Situation, or  a #$ELSentence-Assertible.  This
            is a very general predicate.  It is almost always better to
            use a more specialized predicate such as #$causes-PropProp,
            #$causes-EventEvent, or #$causes-SitProp, particularly in
            rules.  Nonetheless, #$causes-ThingProp can be useful if one
            wishes to collect all the possible causes of some
            proposition be they #$Situations, #$Agents, other
            propositions (see #$ELSentence-Assertible).  See
            #$NoteAboutCausalityPredicates for a map of related predicates.</rdfs:comment>
        <guid>bd590af4-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Individual"/>
        <daml:range rdf:resource="#ELSentence-Assertible"/>
    </daml:Property>
    <daml:Property rdf:ID="cavityConnectedAlongPathSide">
        <rdfs:label>cavity connected along path side</rdfs:label>
        <rdfs:comment>(cavityConnectedAlongPathSide PATH CAVITY) means
            that there is a portal somewhere along the wall of the
            #$Path-Generic (which must also be #$PartiallyTangible) PATH
            which leads to the #$CavityOrContainer CAVITY. It does not
            apply if an end of PATH is the portal, nor to a branching of
            the path, nor a small hole in an otherwise dead end of the
            path. The portal is substantially smaller in width than the
            path, and instead of a smaller path connected there, the
            portal opens into a neighboring #$CavityOrContainer.
            Example: an #$Alveolus attached to a #$RespiratoryBronchiole
            in the #$Lung is so connected.  Or, a room opening along the
            side of a hallway.</rdfs:comment>
        <guid>bf852702-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasPortalToRegion"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:Property>
    <daml:Property rdf:ID="cavityHasWall">
        <rdfs:label>cavity has wall</rdfs:label>
        <rdfs:comment>(cavityHasWall CAV WALL) means that the the
            #$Cavity CAV has WALL as one of its walls (or part of one of
            its walls), or partly-enclosing inner surfaces.
            #$cavityHasWall is often used for describing the
            relationship between some space or part of a
            #$ConstructionArtifact and the substructures that bound or
            enclose it (e.g., the relationship between a room and its
            walls, floor(s), and ceiling(s)).</rdfs:comment>
        <guid>bd58c7f2-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#physicalParts"/>
        <daml:range rdf:resource="#SolidTangibleThing"/>
    </daml:Property>
    <daml:UnambiguousProperty rdf:ID="cavityInteriorRegionOf">
        <rdfs:label>cavity interior region of</rdfs:label>
        <rdfs:comment>(#$cavityInteriorRegionOf INT OBJ) means that INT
            is all of the interior space (see #$CavityInteriorRegion)
            within the #$Cavity or cavities (possibly discontinuous
            chambers, passages, pockets, bubbles, etc.) that occur
            inside of OBJ. Instances of #$CavityInteriorRegion, unlike
            instances of #$CavityWithWalls, do not include the walls of
            the chamber  or passage, just the interior space itself
            without any of the  enclosing walls, panels or membranes.
            See also #$CavityInteriorRegionFn.</rdfs:comment>
        <guid>be8f89ae-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#inRegion"/>
        <daml:domain rdf:resource="#CavityInteriorRegion"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:UnambiguousProperty>
    <daml:Property rdf:ID="chiefPorts">
        <rdfs:label>chief ports</rdfs:label>
        <rdfs:comment>This is a list of the chief ports for a given
            geographical region.</rdfs:comment>
        <guid>bd58cbbc-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#geographicalSubRegions"/>
        <daml:domain rdf:resource="#GeographicalRegion"/>
        <daml:range rdf:resource="#City"/>
    </daml:Property>
    <daml:Property rdf:ID="children">
        <rdfs:label>offspring</rdfs:label>
        <rdfs:comment>(#$children PARENT CHILD) means that CHILD is a
            child of PARENT in the sense that PARENT cares for CHILD as
            a parent would, whether or not they are biologically related.</rdfs:comment>
        <guid>bd58cf70-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#relatives"/>
        <daml:domain rdf:resource="#Animal"/>
        <daml:range rdf:resource="#Animal"/>
    </daml:Property>
    <daml:Property rdf:ID="circumferenceOfObject">
        <rdfs:label>circumference</rdfs:label>
        <rdfs:comment>The distance around a circular object</rdfs:comment>
        <guid>bd58a060-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#SpatialThing"/>
        <daml:range rdf:resource="#Distance"/>
    </daml:Property>
    <daml:Property rdf:ID="citizens">
        <rdfs:label>citizen</rdfs:label>
        <rdfs:comment>The predicate #$citizens indicates that a
            particular person is a citizen of a particular
            country/state/... .  (#$citizens GEOPOL PERSON) means that
            GEOPOL is a #$GeopoliticalEntity in which the #$Person
            PERSON has full rights of citizenship (whatever those rights
            might consist of in GEOPOL).</rdfs:comment>
        <guid>bd588008-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#affiliatedWith"/>
        <daml:domain rdf:resource="#GeopoliticalEntity"/>
        <daml:range rdf:resource="#Person"/>
    </daml:Property>
    <daml:UniqueProperty rdf:ID="cityInState">
        <rdfs:label>city in state</rdfs:label>
        <rdfs:comment>(#$cityInState CITY STATE) means that the
            #$UrbanArea CITY is physically located in the geopolitical
            sub-region STATE.  Note that STATE may be an element of
            #$State-Geopolitical (q.v.), or it may be some other kind of
            #$CountrySubsidiary, such as #$Territory. Examples: the
            #$CityOfDurhamNC in a #$cityInState of
            #$NorthCarolina-State; Xiamen (Amoy) is a #$cityInState of Fujian.</rdfs:comment>
        <guid>bd58b907-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#City"/>
        <daml:range rdf:resource="#CountrySubsidiary"/>
    </daml:UniqueProperty>
    <daml:UniqueProperty rdf:ID="cityOfAddress">
        <rdfs:label>city of address</rdfs:label>
        <rdfs:comment>(#$cityOfAddress LOC CITY) means that the
            #$ContactLocation LOC is found in the #$City CITY. For
            example, as   #$CycorpHeadquarters is a #$ContactLocation
            for #$Cycorp, then   (#$cityOfAddress #$CycorpHeadquarters
            #$CityOfAustinTX) means that the   Cycorp Headquarters
            building is located in Austin, Texas.  Note that the
            arg-constraint on the first argument should be an instance
            of #$ContactLocation   which serves as a #$pointsOfContact
            for an agent and not the agent itself.</rdfs:comment>
        <guid>bd59017b-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#objectFoundInLocation"/>
        <daml:domain rdf:resource="#ContactLocation"/>
        <daml:range rdf:resource="#City"/>
    </daml:UniqueProperty>
    <daml:Property rdf:ID="clients">
        <rdfs:label>client</rdfs:label>
        <rdfs:comment>This predicate relates two agents.  (#$clients
            AGENT1 AGENT2) means that AGENT1 provides goods and/or
            services to AGENT2.  AGENT2 may or may not pay AGENT1 for
            the goods/services received.  The predicate #$clients can
            indicate either a one-time or a more long-term relationship.
            See also #$suppliers and #$customers.</rdfs:comment>
        <guid>bd58cb16-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Agent"/>
        <daml:range rdf:resource="#Agent"/>
    </daml:Property>
    <daml:Property rdf:ID="cloudinessOfRegion">
        <rdfs:label>cloudiness of region</rdfs:label>
        <rdfs:comment>(#$cloudinessOfRegion LOC DEGREE) means that the
            #$OutdoorLocation LOC has this DEGREE of cloud cover.</rdfs:comment>
        <guid>bd58f223-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasAttributes"/>
        <daml:domain rdf:resource="#OutdoorLocation"/>
        <daml:range rdf:resource="#Cloudiness"/>
    </daml:Property>
    <daml:Property rdf:ID="coExtensional">
        <rdfs:label>co extensional</rdfs:label>
        <rdfs:comment>(#$coExtensional COLL1 COLL2) means that the
            collections COLL1 and COLL2 have all their instances in
            common:  every element of one collection is an element of
            the other. Since  #$Collections (q.v.) are intensionally
            defined, however, unlike mathematical  sets, two collections
            can be coextensional without thereby being  identical (see #$equals).</rdfs:comment>
        <guid>bd59083a-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#genls"/>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
    </daml:Property>
    <daml:Property rdf:ID="cohabitants">
        <rdfs:label>cohabitants</rdfs:label>
        <rdfs:comment>(#$cohabitants X Y) means that X and Y live
            together in the same dwelling structure, nest, etc.    Note:
            in some contexts (in the real Cyc knowledge base) the
            arguments to this predicate are restricted to being
            #$Persons.  Note: in many parts of the world, esp. in past
            centuries, people cohabit (have cohabited) with domesticated
            animals that are/were not pets.</rdfs:comment>
        <guid>bd589224-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#acquaintedWith"/>
        <daml:domain rdf:resource="#Animal"/>
        <daml:range rdf:resource="#Animal"/>
    </daml:Property>
    <daml:Property rdf:ID="cohabitingFamilyMembers">
        <rdfs:label>cohabiting family members</rdfs:label>
        <rdfs:comment>(#$cohabitingFamilyMembers X Y) means that X and Y
            are family members (relatives, spouses, in-laws) living with
            one another.  If the members of a family no longer live
            together, they are still members of a #$Family-SocialEntity,
            but they are no longer members of the same
            #$FamilyCohabitationUnit. Note: In the #$HumanSocialLifeMt
            context, X and Y must be #$Persons.  In the
            #$NaiveBiologicalDescentMt context, they can be any
            #$Animals at all.</rdfs:comment>
        <guid>bd58a4bb-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#positiveVestedInterest"/>
        <daml:subPropertyOf rdf:resource="#cohabitants"/>
        <daml:subPropertyOf rdf:resource="#relatives"/>
        <daml:domain rdf:resource="#Animal"/>
        <daml:range rdf:resource="#Animal"/>
    </daml:Property>
    <daml:Property rdf:ID="cohesivenessOfObject">
        <rdfs:label>cohesiveness of object</rdfs:label>
        <rdfs:comment>(#$cohesivenessOfObject OBJ DEGREE) indicates how
            tightly a tangible object OBJ coheres.  A higher value of
            DEGREE means that it is harder to separate away chunks from
            the object.</rdfs:comment>
        <guid>be00bb87-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasAttributes"/>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#Cohesiveness"/>
    </daml:Property>
    <daml:Property rdf:ID="comment">
        <rdfs:label>comment</rdfs:label>
        <rdfs:comment>#$comment is a predicate belonging to the Cyc
            collection #$DocumentationConstant.  #$comment is used to
            relate Cyc constants to (usually) brief English explanations
            of their meaning and use, as an aid to humans browsing
            through the Cyc Knowledge Base.  (#$comment CONST STRING)
            means that STRING is an instance of #$SubLString that
            contains an explanation of the Cyc constant CONST.  Example:
            what you are reading now.</rdfs:comment>
        <guid>bd588109-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#CycLIndexedTerm"/>
        <daml:range rdf:resource="#SubLString"/>
    </daml:Property>
    <daml:Property rdf:ID="commitsForFutureUses">
        <rdfs:label>commits for future uses</rdfs:label>
        <rdfs:comment>(#$commitsForFutureUses EVENT OBJECT) means that
            as a result of EVENT, OBJECT is subsequently put into a
            configuration and/or a form where it is serving some ongoing
            #$Role.  Things which are re-usable in their typical uses: a
            videocassette, a battery, a brick, an artist&apos;s canvas,
            a canvas tent.  Non-reusable things: paint, glue, mortar.
            See also #$inputsCommitted, #$recyclableActors.   Consider a
            brick in a wall in a building.  It is `committed for future
            use&apos; in the role of part-of-a-wall in the event of that
            building existing.  While the building is standing, it
            can&apos;t be part-of-a-wall in another building, though it
            could serve other roles such as an artistic accent, or to
            anchor a coat-hook.  After the building is torn down, that
            brick might still be intact, and could be used as
            part-of-a-wall in a future building.  Notice that the brick
            isn&apos;t necessarily transformed by being part of a wall.
            However, so long as OBJECT serves the use to which it is
            `assigned&apos; by EVENT, OBJECT is unavailable to be
            assigned the same #$Role by another event of the same type,
            at least an event that would temporally intersect with this
            committed use of OBJECT.  That is what is meant by it being
            `committed&apos; for a particular future use.  An object may
            be re-used in a similar event, ONLY IF the #$Role to which
            it was assigned in EVENT either comes to its natural end or
            is given up (or thwarted), or in cases where EVENT is
            composed of discontinous pieces of time --- to illustrate
            that latter case, consider a tent that&apos;s used to
            shelter a certain group of workers on weekdays, but is used
            to shelter a different group in a different location on weekends.</rdfs:comment>
        <guid>bd5907f0-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#preActors"/>
        <daml:domain rdf:resource="#Event"/>
        <daml:range rdf:resource="#SomethingExisting"/>
    </daml:Property>
    <daml:Property rdf:ID="communicationTarget">
        <rdfs:label>communication target</rdfs:label>
        <rdfs:comment>The predicate #$communicationTarget is used to
            indicate the intended recipient in a communication.
            (#$communicationTarget COMM OBJ) means that the agent who
            originates the #$CommunicationAct-Single COM intends the
            #$recipientOfInfo to be OBJ.  Normally, OBJ is an instance
            of #$Agent.</rdfs:comment>
        <guid>bd5c2e85-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#target"/>
        <daml:subPropertyOf rdf:resource="#preActors"/>
        <daml:domain rdf:resource="#CommunicationAct-Single"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:Property>
    <daml:Property rdf:ID="communicationToken">
        <rdfs:label>communication token</rdfs:label>
        <rdfs:comment>The predicate #$communicationToken is used to
            indicate the particular IBT (i.e., element of
            #$InformationBearingThing) that is instrumental in a
            particular communication.  (#$communicationToken COM IBT)
            means that IBT is an #$InformationBearingThing that carries
            the information transferred in the #$Communicating COM.  A
            communication event transfers the information content of IBT
            from one agent to some other(s).  IBT may be a tangible
            object (e.g., a newspaper), a sound (e.g., a voice), an
            image (e.g., from a television broadcast), or even a touch
            (e.g., a staying hand).</rdfs:comment>
        <guid>bd58ef66-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Communicating"/>
        <daml:range rdf:resource="#InformationBearingThing"/>
    </daml:Property>
    <daml:Property rdf:ID="competingAgents">
        <rdfs:label>competitors</rdfs:label>
        <rdfs:comment>(#$competingAgents COMPETITION AGENT) means that
            the AGENT is a competitor in the contest or competition
            COMPETITION, and thus has a chance of being a winner of the
            competition.  This excludes many participants of such
            events, such as referees, judges, and spectators.  If the
            COMPETITION is a team competition, the individual team
            members  are also excluded.</rdfs:comment>
        <guid>bd58b70f-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#socialParticipants"/>
        <daml:subPropertyOf rdf:resource="#majorUndertakingsOf"/>
        <daml:subPropertyOf rdf:resource="#preActors"/>
        <daml:domain rdf:resource="#Competition"/>
        <daml:range rdf:resource="#Agent"/>
    </daml:Property>
    <daml:Property rdf:ID="compressibilityOfObject">
        <rdfs:label>compressibility of object</rdfs:label>
        <rdfs:comment>(#$compressibilityOfObject OBJ DEGREE) indicates
            how readily the tangible object OBJ can be compressed to a
            smaller volume.  The higher the DEGREE of compressibility,
            the more easily the object can be compressed to a smaller
            volume.  A related concept is #$elasticityOfObject.</rdfs:comment>
        <guid>be00baaa-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasAttributes"/>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#Compressibility"/>
    </daml:Property>
    <daml:Property rdf:ID="conceptuallyRelated">
        <rdfs:label>conceptually related</rdfs:label>
        <rdfs:comment>The purpose of this predicate is to record the
            existence of a conceptual link between two Cyc constants
            that would otherwise require a very complex explicit
            assertion to be related to one another. Good examples of
            such couples are #$PublicTransportationDevice and
            #$PublicTransportationScheduleDocument or #$Dog and
            #$DogFood. The knowledge representation philosophy here is
            similar to that behind many #$RuleMacroPredicates. Having
            complex relationships represented -- possibly redundantly --
            in a more compact fashion makes for faster retrieval.
            Because Cyc constants can be conceptually related in many
            different ways, no explicit definition for this predicate is provided.</rdfs:comment>
        <guid>bd58803e-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
    </daml:Property>
    <daml:Property rdf:ID="concessive-RST">
        <rdfs:label>concessive - r s t</rdfs:label>
        <rdfs:comment>The discourse relation that holds between two
            segments of text when the speaker presents ARG1, and then
            ARG2 is a seemingly inconguous statement, but where the
            speaker wants ARG1 and ARG2 to be accepted as compatible.
            Example: &apos;You&apos;re a good typist, but we&apos;ve
            offered the job to someone else.&apos;.</rdfs:comment>
        <guid>be3abdeb-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#LinguisticObject"/>
        <daml:range rdf:resource="#LinguisticObject"/>
    </daml:Property>
    <daml:Property rdf:ID="connectedTo">
        <rdfs:label>connection</rdfs:label>
        <rdfs:comment>(#$connectedTo OBJ1 OBJ2) means that OBJ1 and OBJ2
            are (directly or indirectly) physically attached in a way
            that allows at most only limited types of relative motion
            between them.  A hinged connection, for example, allows
            limited rotational motion between OBJ1 and OBJ2.  OBJ1 and
            OBJ2 must be in a #$SolidStateOfMatter.  In many cases,
            being #$connectedTo implicitly involves another object(s);
            e.g. a door is #$connectedTo a door frame by a hinge, which
            is itself #$connectedTo-Directly (q.v.) both the door and
            the frame.</rdfs:comment>
        <guid>bd590527-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:Property>
    <daml:Property rdf:ID="connectedTo-Rigidly">
        <rdfs:label>connected to - rigidly</rdfs:label>
        <rdfs:comment>(#$connectedTo-Rigidly OBJ1 OBJ2) means that OBJ1
            and OBJ2 are joined so that no relative motion between them
            can occur at the point of connection unless the connection
            is severed by breakage of some part of the connected objects
            or by disassembly of the connection.  Further, no relative
            motion between the contact surfaces of OBJ1 nor OBJ2 may
            occur.  Thus, if a nail is rigidly connected to a board, the
            only way for that relationship to no longer hold is if the
            nail is pulled out of the hole (e.g. by a hammer or crowbar)
            or if the nail or board is broken in a critical location.
            Note that (#$connectedTo-Rigidly OBJ1 OBJ2) does admit cases
            in which OBJ1 or OBJ2 undergo  plastic deformation.  For
            example, consider the case of a disc rigidly connected via
            glue (see #$gluedTo) to a rubber sheet.  The rubber sheet
            and disc may undergo significant relative motion.  Both of
            the connected objects are solid.</rdfs:comment>
        <guid>bd58a606-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#touchesDirectly"/>
        <daml:domain rdf:resource="#SolidTangibleThing"/>
        <daml:range rdf:resource="#SolidTangibleThing"/>
    </daml:Property>
    <daml:Property rdf:ID="connectedTo-SemiRigidly">
        <rdfs:label>connected to - semi rigidly</rdfs:label>
        <rdfs:comment>(#$connectedTo-SemiRigidly OBJ1 OBJ2) means that
            there is a physical connection between OBJ1 and OBJ2 such
            that due to the flexibility of a connector, OBJ1, or OBJ2,
            limited movement around the point of connection is possible.
            Positive exemplars include a book flap hinged to the spine
            of a book (see #$flapHingedTo), the #$GallBladder&apos;s
            attachment to the #$Liver.  Negative exemplars include a
            wheel and axle or a door hinged to a door frame because the
            degrees of freedom of the object arise out of
            geometrical/mechanical properties of the objects and their
            connectors, not out of the flexibity of said objects.  Note
            that all flexible connections have a limit to their relative
            motion.  An extreme example of such a limit is in the
            connection between a propeller and the fuselage of a rubber
            band powered airplane.</rdfs:comment>
        <guid>c1007845-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#connectedTo"/>
        <daml:domain rdf:resource="#SolidTangibleThing"/>
        <daml:range rdf:resource="#SolidTangibleThing"/>
    </daml:Property>
    <daml:UnambiguousProperty rdf:ID="constantID">
        <rdfs:label>constant i d</rdfs:label>
        <rdfs:comment>(#$constantID CONSTANT ID) states that the integer
            ID is the unique internal id for the #$CycLConstant CONSTANT.</rdfs:comment>
        <guid>bf8d3988-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#CycLConstant"/>
        <daml:range rdf:resource="#NonNegativeInteger"/>
    </daml:UnambiguousProperty>
    <daml:UnambiguousProperty rdf:ID="constantName">
        <rdfs:label>constant name</rdfs:label>
        <rdfs:comment>(#$constantName CONSTANT STRING) states that
            STRING is the name for the #$CycLConstant CONSTANT.  Since
            constants can be renamed, this predicate is computed from
            the current state of the KB.</rdfs:comment>
        <guid>bd7183b0-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#CycLConstant"/>
        <daml:range rdf:resource="#SubLString"/>
    </daml:UnambiguousProperty>
    <daml:Property rdf:ID="constituents">
        <rdfs:label>constituent</rdfs:label>
        <rdfs:comment>The predicate #$constituents is used to indicate a
            particular #$PartiallyTangible which makes up another
            (possibly non-distinct) #$PartiallyTangible thing.
            (#$constituents WHL PART) means that the individual object
            WHL is partially constituted by PART, and PART is more or
            less uniformly distributed in WHL.  For example, the two
            teaspoons of chocolate syrup that I put in my milk become
            #$constituents of my glass of chocolate milk.  Note that
            #$constituents does not entail any special kind of
            association or bond among the constituents of a thing; they
            might be simply mixed, they might be chemically bonded, and
            they might be part of some complex structure.</rdfs:comment>
        <guid>bd58d277-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#physicalDecompositions"/>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:Property>
    <daml:Property rdf:ID="constrainingObject">
        <rdfs:label>constraining object</rdfs:label>
        <rdfs:comment>(#$constrainingObject MOTION OBJ) means that OBJ
            physically constrains the motion of some #$objectMoving in
            the #$MovementEvent MOTION.  The #$constrainingObject
            necessarily #$touches the #$objectMoving during at least
            part of MOTION.  Examples of #$constrainingObjects include:
            an axle constraining a wheel turning, a car or other
            #$transporter carrying passengers, and a railroad track
            guiding a train.  As these examples show, a
            #$constrainingObject may or may not be moving.  A road
            driven on by a car is a marginally negative example of a
            #$constrainingObject, because the car can drive off the
            road, though the road does facilitate its motion.</rdfs:comment>
        <guid>c0cd3b6a-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#postActors"/>
        <daml:subPropertyOf rdf:resource="#preActors"/>
        <daml:domain rdf:resource="#MovementEvent"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:Property>
    <daml:Property rdf:ID="constrainsArg">
        <rdfs:label>constrains arg</rdfs:label>
        <rdfs:comment>(#$constrainsArg METAPRED N) means that  METAPRED
            can be used to put a constraint on a given relation&apos;s
            Nth  argument-place. For example, we have (#$constrainsArg
            #$arg2Isa 2).  There is one exception: By convention, we
            take (#$constrainsArg METAPRED 0) to mean that METAPRED can
            be used to constrain _any_ of a relation&apos;s argument
            places.  Examples of such metapredicates are #$argsIsa and #$argsGenl.</rdfs:comment>
        <guid>bfa067af-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#MetaPredicate"/>
        <daml:range rdf:resource="#NonNegativeInteger"/>
    </daml:Property>
    <daml:Property rdf:ID="consumesPortion">
        <rdfs:label>consumes portion</rdfs:label>
        <rdfs:comment>(#$consumesPortion EV OBJ) means that a portion of
            the object OBJ is used up (consumed) in the event EV.
            However, enough of OBJ remains at the end of EV for it to
            maintain its identity.  Thus #$consumesPortion would be
            appropriate for an apple that has a bite taken out of it in
            an eating event, but not for an apple that has been eaten to
            its core, since the latter is no longer an apple.</rdfs:comment>
        <guid>bd5903e4-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#objectActedOn"/>
        <daml:domain rdf:resource="#Event"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:Property>
    <daml:UnambiguousProperty rdf:ID="containsCavity">
        <rdfs:label>contains cavity</rdfs:label>
        <rdfs:comment>(containsCavity OBJ CAV) means that the object OBJ
            contains the #$Cavity CAV somewhere in it or on its surface.
            The cavity of a container could be, e.g., the interior of a
            box with its walls.</rdfs:comment>
        <guid>bd5891ec-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#physicalDecompositions"/>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#Cavity"/>
    </daml:UnambiguousProperty>
    <daml:Property rdf:ID="containsInformation">
        <rdfs:label>contains information</rdfs:label>
        <rdfs:comment>(#$containsInformation IBT INFO) means that INFO
            is part of the information content of the
            #$InformationBearingThing, IBT.</rdfs:comment>
        <guid>bd58c240-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#intangibleParts"/>
        <daml:domain rdf:resource="#InformationBearingThing"/>
        <daml:range rdf:resource="#AbstractInformationalThing"/>
    </daml:Property>
    <daml:Property rdf:ID="containsInformationAbout">
        <rdfs:label>concern</rdfs:label>
        <rdfs:comment>(#$containsInformationAbout Is THING) means that
            the #$InformationStore IS is generally &apos;about&apos;
            THING -- which may be any #$Thing at all.  This is a very
            general notion of aboutness, which does not require that
            THING be explicitly named in IS, nor that it be the main topic.</rdfs:comment>
        <guid>bd58a9fe-9c29-11b1-9dad-c379636f7270</guid>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
    </daml:Property>
    <daml:Property rdf:ID="containsInformationAbout-Focally">
        <rdfs:label>contains information about - focally</rdfs:label>
        <rdfs:comment>(#$containsInformationAbout-Focally IS THING)
            means that the #$InformationStore IS is generally
            &apos;about&apos; THING -- which may be any #$Thing at all.
            This is a very general notion of aboutness, which does not
            require that THING be explicitly named in IS, but that it be
            one of the main topics of IS.  Use the more general
            predicate #$containsInformationAbout to specify that IS
            contains some information about THING, but that THING is not
            necessarily a topic [#$topicOfIndividual] of IS.</rdfs:comment>
        <guid>c0dcec97-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#containsInformationAbout"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
    </daml:Property>
    <daml:Property rdf:ID="containsMisinformationAbout">
        <rdfs:label>contains misinformation about</rdfs:label>
        <rdfs:comment>(#$containsMisinformationAbout IBT THING) means
            that IBT contains false information about THING.</rdfs:comment>
        <guid>bffe4545-9c29-11b1-9dad-c379636f7270</guid>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
    </daml:Property>
    <daml:UnambiguousProperty rdf:ID="containsPortals">
        <rdfs:label>contains portals</rdfs:label>
        <rdfs:comment>(#$containsPortals OBJECT PORTAL) means that the
            OBJECT has PORTAL as one of its holes, passages, exits or entrances.</rdfs:comment>
        <guid>bd58d235-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#containsCavity"/>
        <daml:subPropertyOf rdf:resource="#physicalParts"/>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#Portal"/>
    </daml:UnambiguousProperty>
    <daml:UniqueProperty rdf:ID="containsPropositionalInfo-Complete">
        <rdfs:label>contains propositional info - complete</rdfs:label>
        <rdfs:comment>(#$containsPropositionalInfo-Complete IBT INFO)
            means that instance of #$PropositionalInformationThing INFO
            contains all and only  the propositional information content
            of the #$InformationBearingThing, IBT.</rdfs:comment>
        <guid>bdb1489e-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#containsInformation"/>
        <daml:domain rdf:resource="#InformationBearingThing"/>
        <daml:range rdf:resource="#PropositionalInformationThing"/>
    </daml:UniqueProperty>
    <daml:Property rdf:ID="contiguousAfter">
        <rdfs:label>contiguous after</rdfs:label>
        <rdfs:comment>(#$contiguousAfter AFTER BEFORE) means that AFTER
            starts immediately following BEFORE.  The two events have no
            time points in common, but there is no time point between
            them --- i.e., between the ending of the first one (BEFORE)
            and the starting of the second one (AFTER).  E.g., one can
            use this predicate to state an axiom that adolescence is
            #$contiguousAfter childhood.    Note:  This Cyc temporal
            relation is similar, but not equivalent to, what James Allen
            independently dubbed the METBY relation.</rdfs:comment>
        <guid>bd58a7e2-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#startsAfterEndingOf"/>
        <daml:domain rdf:resource="#TemporalThing"/>
        <daml:range rdf:resource="#TemporalThing"/>
    </daml:Property>
    <daml:Property rdf:ID="continuouslyConnectedTo">
        <rdfs:label>continuously connected to</rdfs:label>
        <rdfs:comment>(continuouslyConnectedTo OBJ1 OBJ2) means that
            OBJ1 and OBJ2 are #$PartiallyTangibles which are are
            directly and almost seamlessly connected (e.g. they are
            formed from the same chunk of material, with no substantial
            barrier or surface or gap separating them.).</rdfs:comment>
        <guid>bd589fde-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#touchesDirectly"/>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:Property>
    <daml:UnambiguousProperty rdf:ID="contraryFeelings">
        <rdfs:label>contrary feelings</rdfs:label>
        <rdfs:comment>(#$contraryFeelings EMOTYPE CONTTYPE) means that a
            feeling of the type EMOTYPE is contrary to a feeling of the
            type CONTTYPE.  One feeling is contrary to another if they
            are opposed in almost all their components.  See also
            #$contrastedFeelings.  It would be very rare for someone to
            feel both an EMOTYPE and CONTTYPE at the same time,
            especially about the same thing/event/situation.  E.g.,
            (#$contraryFeelings #$Gloominess #$Cheerfulness),
            (#$contraryFeelings #$Respect #$Contempt),
            (#$contraryFeelings #$Shame #$Pride), and so on.</rdfs:comment>
        <guid>bd588489-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#contrastedFeelings"/>
        <daml:domain rdf:resource="#FeelingAttributeType"/>
        <daml:range rdf:resource="#FeelingAttributeType"/>
    </daml:UnambiguousProperty>
    <daml:Property rdf:ID="contrastedFeelings">
        <rdfs:label>contrasted feelings</rdfs:label>
        <rdfs:comment>(#$contrastedFeelings EMOTYPE CONTTYPE) means that
            a feeling of the type EMOTYPE differs in enough components
            from a feeling of the type CONTTYPE that it is unlikely (but
            not virtually impossible, as in the case of
            #$contraryFeelings) that someone would simultaneously
            experience feelings of both types EMOTYPE and CONTTYPE,
            especially with respect to the same object. E.g.,
            (#$contrastedFeelings #$Pride #$Remorse),
            (#$contrastedFeelings #$Abhorrence #$Respect),
            (#$contrastedFeelings #$Entertained-Emotion #$Panic), etc.
            That last assertion expresses the rule of thumb that one
            does not often feel both entertained and panicy at the same
            time, though those two emotions are clearly not each
            other&apos;s `opposite&apos; by any means.</rdfs:comment>
        <guid>bd58850e-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#FeelingAttributeType"/>
        <daml:range rdf:resource="#FeelingAttributeType"/>
    </daml:Property>
    <daml:Property rdf:ID="contrastive-RST">
        <rdfs:label>contrastive - r s t</rdfs:label>
        <rdfs:comment>The discourse relation that holds between two
            segments of text when ARG1 and ARG2 are presented as being
            similar in many ways but contrasting in ways the speaker
            wants to point out.</rdfs:comment>
        <guid>bea0d091-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#LinguisticObject"/>
        <daml:range rdf:resource="#LinguisticObject"/>
    </daml:Property>
    <daml:Property rdf:ID="controls">
        <rdfs:label>controls</rdfs:label>
        <rdfs:comment>(#$controls X Y) represents the assertion that
            agent X controls the object Y, in one of the following 2
            senses:  X can influence (prohibit, enable or constrain) the
            behavior of Y; or else X can at least influence (prohibit,
            enable or constrain) the behavior of other #$Agents
            in/concerning Y.  For example, Fred may control his horse
            directly, forcing it to do things, or not do them; and he
            also could control the horse indirectly, by deciding who
            else has access to and use of that horse.  Control of one
            agent over another agent is rarely total, of course, so this
            predicate is most likely to apply to a Y which is a
            non-living possession, and/or to apply in a very narrow
            context.  X&apos;s control over Y is usually either actual
            (de facto) control or legal (de jure) control.  It is
            usually #$cotemporal, meaning that some time slice of X
            controls the same time slice of Y.</rdfs:comment>
        <guid>bd58a36a-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#positiveVestedInterest"/>
        <daml:domain rdf:resource="#Agent"/>
        <daml:range rdf:resource="#TemporalThing"/>
    </daml:Property>
    <daml:UnambiguousProperty rdf:ID="convexHullOf">
        <rdfs:label>convex hull of</rdfs:label>
        <rdfs:comment>(#$convexHullOf SURFACE OBJECT) means that SURFACE
            is the convex hull that encloses, precisely, all of the
            minimal convex region of space that spatiallySubsumes all
            parts of OBJECT. See also #$ConvexHullFn for the
            corresponding function. The convex hull is a surface; for
            the minimal convex region of space, see
            #$minimalConvexSpaceSubsuming. </rdfs:comment>
        <guid>bfebc157-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Surface-Intangible"/>
        <daml:range rdf:resource="#SpatialThing"/>
    </daml:UnambiguousProperty>
    <daml:Property rdf:ID="conveyor-Stationary">
        <rdfs:label>conveyor - stationary</rdfs:label>
        <rdfs:comment>(#$conveyor-Stationary TRAN CONV) means that in
            the transportation event TRAN, CONV is a conveyor just like
            a #$transporter except it does not move together with the
            #$transportees along the path of the transportation.  For
            example, a #$River can move a boat [#$Watercraft] from one
            location to another, and a #$ConveyorBelt can move some
            objects from one place to another, without itself moving
            translationally, i.e., the river does not change its
            location (although some pieces of #$Water in the river do)
            together with the boat, nor does the #$ConveyorBelt move
            with the objects on it from place to place (though some
            parts of it do).</rdfs:comment>
        <guid>c1581b7b-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#instrument-Generic"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:Property>
    <daml:Property rdf:ID="cost">
        <rdfs:label>cost</rdfs:label>
        <rdfs:comment>(#$cost OBJECT MONEY) means that buying OBJECT
            costs the amount MONEY, where this amount can be an
            interval.  The #$cost of something is time- and
            seller-dependent.  For example, the cost of a particular
            mansion Grey Gables is US$800,000 in an actual sale, or when
            offered for sale; #$cost does not refer to appraised value.</rdfs:comment>
        <guid>bd58d495-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#TemporalThing"/>
        <daml:range rdf:resource="#Money"/>
    </daml:Property>
    <daml:Property rdf:ID="cotemporal">
        <rdfs:label>cotemporal</rdfs:label>
        <rdfs:comment>(#$cotemporal X Y) means that X and Y have the
            exact same temporal extent.  This is a much stronger
            relation than #$temporalBoundsIdentical (q.v.).        Note:
            Cyc&apos;s #$cotemporal relation is equivalent to what James
            Allen independently dubbed the EQUALS relation.</rdfs:comment>
        <guid>bd58d6cf-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#temporallySubsumes"/>
        <daml:subPropertyOf rdf:resource="#temporalBoundsIdentical"/>
        <daml:domain rdf:resource="#TemporalThing"/>
        <daml:range rdf:resource="#TemporalThing"/>
    </daml:Property>
    <daml:Property rdf:ID="cotemporalSubEvents">
        <rdfs:label>cotemporal sub events</rdfs:label>
        <rdfs:comment>The Cyc predicate #$cotemporalSubEvents is used to
            relate an event to some sub-portion of the event which has
            the same duration as the whole event but doesn&apos;t
            include everything that happens.  (#$cotemporalSubEvents
            WHOLE PART) means that WHOLE and PART are cotemporal events
            (i.e., they have the same exact duration), and PART is a
            component of WHOLE.  For example, a particular element of
            #$RainStorm may have distinguishable #$cotemporalSubEvents
            for (1) raining and (2) wind blowing.  Or, an instance of
            swimming #$Backstroke has separable events for (1) kicking
            and (2) arm motion throughout the swimming.
            #$cotemporalSubEvents allows us to identify them and state
            different things about the distinct processes.  See also
            #$cotemporal, #$subEvents.</rdfs:comment>
        <guid>bd5906be-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#subEvents"/>
        <daml:subPropertyOf rdf:resource="#cotemporal"/>
        <daml:domain rdf:resource="#Event"/>
        <daml:range rdf:resource="#Event"/>
    </daml:Property>
    <daml:UniqueProperty rdf:ID="countryOfAddress">
        <rdfs:label>country of address</rdfs:label>
        <rdfs:comment>(#$countryOfAddress LOC COUNTRY) means that the
            #$ContactLocation LOC is located in the #$Country COUNTRY.
            For example, #$Cycorp&apos;s #$countryOfAddress is the
            #$UnitedStatesOfAmerica.  See also #$ContactLocation.</rdfs:comment>
        <guid>bd58e6ca-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#inRegion"/>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#Country"/>
    </daml:UniqueProperty>
    <daml:Property rdf:ID="covering">
        <rdfs:label>covering</rdfs:label>
        <rdfs:comment>(#$covering SETORCOL COVER) means that the
            mathematical set or collection COVER is a covering of the
            mathematical set or collection SETORCOL -- that is, the
            elements of COVER are themselves mathematical sets or
            collections, and every element of SETORCOL is an element of
            at least one of the elements of COVER.  For example, the
            Linnaean taxonomy of types of living things (Dog, Mammal,
            Chordate, Fungus, etc.) is a covering of the set of all
            animals alive today.  Every animal alive today is a member
            of one or more of the Linnaean categories.  A covering set
            or collection COVER may contain `extra&apos; elements, which
            are not members of SETORCOL.  For example, the union of all
            the Linnaean categories (see #$OrganismClassificationType)
            is actually much larger than the set of animals alive today,
            encompassing plants, extinct animal species, etc.  In order
            to express an assertion about covering, one need not create
            a new constant from scratch to play the role of COVER if
            such a constant doesn&apos;t already exist.  Instead, one
            can specify a covering set by enumerating its elements,
            using the function #$TheCovering.  (This is a special
            #$ReifiableFunction whose principal reason-for-being is to
            facilitate the inference heuristics associated with
            assertions about covering.)</rdfs:comment>
        <guid>bd58d560-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#SetOrCollection"/>
    </daml:Property>
    <daml:Property rdf:ID="covers-Baglike">
        <rdfs:label>covers - baglike</rdfs:label>
        <rdfs:comment>(#$covers-Baglike WRAP OBJECT) means that WRAP
            covers OBJECT as a continuous sheet wrapping wholly around
            object.  WRAP #$touches OBJECT, so there is nothing greater
            than a sheet thickness separating them.  OBJECT is totally
            enclosed in WRAP.</rdfs:comment>
        <guid>bd58b489-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#touches"/>
        <daml:subPropertyOf rdf:resource="#surroundsCompletely"/>
        <daml:domain rdf:resource="#SheetOfSomeStuff"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:Property>
    <daml:Property rdf:ID="covers-Hairlike">
        <rdfs:label>covers - hairlike</rdfs:label>
        <rdfs:comment>(#$covers-Hairlike HAIR OBJECT) means that HAIR
            consists of a mob of things that are embedded close together
            in OBJECT and cover some portion of its surface.  See also #$Mob.</rdfs:comment>
        <guid>bd58d760-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#touchesDirectly"/>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:Property>
    <daml:Property rdf:ID="covers-Paintlike">
        <rdfs:label>covers - paintlike</rdfs:label>
        <rdfs:comment>(#$covers-Paintlike COATING OBJECT) means that
            COATING adheres to and covers OBJECT like a coat of paint.
            COATING #$touchesDirectly onto OBJECT.  COATING may be
            either dry (e.g., dried paint) or liquid (e.g., lubricant
            spread on a surface, like cooking oil on a baking pan). Like
            paint, COATING isn&apos;t more cohesive with itself than it
            is with OBJECT, so (if dry) it would tend to peel or flake
            off in small pieces, rather than as a whole.</rdfs:comment>
        <guid>bd58cc20-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#touchesDirectly"/>
        <daml:subPropertyOf rdf:resource="#touches"/>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:Property>
    <daml:Property rdf:ID="covers-Ruglike">
        <rdfs:label>covers - ruglike</rdfs:label>
        <rdfs:comment>(#$covers-Ruglike MAT OBJECT) means that MAT
            covers at least part of one surface of OBJECT.  MAT is
            #$SheetShaped, and MAT lies with its two longer dimensions
            parallel to OBJECT.  See also #$coversWithConformity.</rdfs:comment>
        <guid>bd58848f-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#SolidTangibleThing"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:Property>
    <daml:UnambiguousProperty rdf:ID="covers-Skinlike">
        <rdfs:label>covers - skinlike</rdfs:label>
        <rdfs:comment>(#$covers-Skinlike SKIN OBJECT) means that SKIN
            forms all or part of OBJECT&apos;s outer surface, shell, or
            skin.  The predicate is agnostic as to whether SKIN is a
            part of OBJECT.</rdfs:comment>
        <guid>bd58d0ef-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#touches"/>
        <daml:subPropertyOf rdf:resource="#touchesDirectly"/>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:UnambiguousProperty>
    <daml:Property rdf:ID="customers">
        <rdfs:label>client</rdfs:label>
        <rdfs:comment>This predicate relates an agent to another agent
            to whom the former sells goods or services.  (#$customers
            SELLER CUSTOMER) means SELLER sells goods and/or services to
            CUSTOMER.  CUSTOMER must actually buy something from SELLER
            in order to be one of SELLER&apos;s #$customers.  (Thus,
            #$customers has a narrower meaning than `customer&apos; in
            colloquial English, which includes potential buyers.)  See
            also #$clients.  Cf. #$buyingAgent (in a particular sales
            event). </rdfs:comment>
        <guid>bd58cad4-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#doesBusinessWith"/>
        <daml:subPropertyOf rdf:resource="#clients"/>
        <daml:domain rdf:resource="#Agent"/>
        <daml:range rdf:resource="#Agent"/>
    </daml:Property>
    <daml:Property rdf:ID="cycleInSystem">
        <rdfs:label>cycle in system</rdfs:label>
        <rdfs:comment>(#$cycleInSystem CYCLE SYS) means that CYCLE is a
            cycle in the path system SYS.  A cycle in SYS is either a
            loop in SYS or the concatenation of two different paths
            PATH1 and PATH2 in SYS satisfying (i) there are two points X
            and Y in SYS such that (#$pathBetweenInSystem PATH1 X Y SYS)
            and (#$pathBetweenInSystem PATH2 X Y SYS), and (ii) no point
            in SYS other than X and Y is on both PATH1 and PATH2.</rdfs:comment>
        <guid>be94da63-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Path-Cyclic"/>
        <daml:range rdf:resource="#PathSystem"/>
    </daml:Property>
    <daml:Property rdf:ID="cyclistNotes">
        <rdfs:label>cyclist notes</rdfs:label>
        <rdfs:comment>(#$cyclistNotes X S) means that S is a string of
            text that usually conveys a message useful to others
            involved in building the Cyc KB.  This might include
            warnings (&apos;don&apos;t use this!&apos;), plans for
            future expansion or changes, etc.</rdfs:comment>
        <guid>bd588108-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#CycLIndexedTerm"/>
        <daml:range rdf:resource="#SubLString"/>
    </daml:Property>
    <daml:Property rdf:ID="dailyHighTemperature">
        <rdfs:label>daily high temperature</rdfs:label>
        <rdfs:comment>(#$dailyHighTemperature PLACE TEMP) means that the
            #$Temperature TEMP is the high temperature for a day at the
            #$GeographicalRegion PLACE.  #$dailyHighTemperature is
            typically used for a specified period of time (e.g., a
            particular day or a specific season); it may be used with
            generic temperature ranges as well as precise temperatures.
            Examples: using #$holdsIn, we can say that Austin&apos;s
            temperature for 7/20/96 is 102 degrees Fahrenheit; or we can
            say that for any #$SummerSeason, Austin&apos;s [typical]
            #$dailyHighTemperature is #$VeryHot.</rdfs:comment>
        <guid>bd58f32a-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#GeographicalRegion"/>
        <daml:range rdf:resource="#Temperature"/>
    </daml:Property>
    <daml:Property rdf:ID="dailyLowTemperature">
        <rdfs:label>daily low temperature</rdfs:label>
        <rdfs:comment>(#$dailyLowTemperature PLACE TEMP) means that the
            #$Temperature TEMP is the low temperature for a day at the
            #$GeographicalRegion PLACE.  #$dailyLowTemperature is
            typically used for a specified period of time (e.g., a
            particular day or a specific season); it may be used with
            generic temperature ranges as well as precise temperatures.</rdfs:comment>
        <guid>bd58f2e9-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#GeographicalRegion"/>
        <daml:range rdf:resource="#Temperature"/>
    </daml:Property>
    <daml:Property rdf:ID="damages">
        <rdfs:label>damage</rdfs:label>
        <rdfs:comment>(#$damages EV OBJ) means that OBJ is acted on in
            EV in such a way as to end up damaged.  Destruction is
            considered an extreme form of damage.</rdfs:comment>
        <guid>bd589fb0-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#objectActedOn"/>
        <daml:domain rdf:resource="#Event"/>
        <daml:range rdf:resource="#SomethingExisting"/>
    </daml:Property>
    <daml:Property rdf:ID="dateOfDeath">
        <rdfs:label>date of death</rdfs:label>
        <rdfs:comment>(#$dateOfDeath X Y) indicates that the #$Entity X
            ceased to exist during #$Date Y. For people, this is the
            date at which they died, hence the name of the predicate.
            The first argument to this predicate must be an #$Entity,
            and not just any old #$SomethingExisting, because we
            don&apos;t want to talk about the #$birthDate or
            #$dateOfDeath of a subabstraction like
            AlbertEinsteinWhileAtPrinceton; in other words, proper
            subabstractions will have #$startingDates and #$endingDates,
            but only true #$Entitys will have a #$birthDate or #$dateOfDeath</rdfs:comment>
        <guid>bd58dd0e-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#endingDate"/>
        <daml:domain rdf:resource="#Entity"/>
        <daml:range rdf:resource="#Date"/>
    </daml:Property>
    <daml:Property rdf:ID="deadEndInSystem">
        <rdfs:label>dead end in system</rdfs:label>
        <rdfs:comment>(#$deadEndInSystem END SYS) means that END is a
            dead-end node in the specified #$PathSystem SYS.  A node X
            in SYS is a dead-end node in SYS if there is exactly one
            link LINK in SYS that END is on and END is not on any loop
            in SYS.  One easy way to illustrate a deadend X in SYS is to
            picture it as a node with only one path (possibly very
            &apos;short&apos;) in the system through which one can
            approach or leave X.  Note that no totally isolated node in
            SYS can be a deadend in SYS, neither can any point in SYS
            that is on a loop in SYS.  If there is no specified
            #$PathSystem in which the path ends, but the ending is a
            dead end of a #$Path-Customary like a road or wire, then use
            #$pathTerminus instead.</rdfs:comment>
        <guid>c12c9294-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#nodeInSystem"/>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
        <daml:range rdf:resource="#PathSystem"/>
    </daml:Property>
    <daml:Property rdf:ID="dealerFor">
        <rdfs:label>dealer for</rdfs:label>
        <rdfs:comment>The predicate #$dealerFor relates a retailer to
            the manufacturer(s) whose products are sold by that
            retailer.  (#$dealerFor RETAILER MANUF) means that the
            #$RetailOrganization RETAILER is a dealer for products made
            by the #$ManufacturingOrganization MANUF.  RETAILER may be
            only one of many dealers.  RETAIL sells MANUF&apos;s
            products to the final consumers.</rdfs:comment>
        <guid>bd58fe87-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#RetailOrganization"/>
        <daml:range rdf:resource="#ManufacturingOrganization"/>
    </daml:Property>
    <daml:Property rdf:ID="defendants">
        <rdfs:label>defendant</rdfs:label>
        <rdfs:comment>(#$defendants ARG1 ARG2) means that the agent ARG2
            is the accused party in the lawsuit ARG1.</rdfs:comment>
        <guid>bd58d099-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#litigants"/>
        <daml:domain rdf:resource="#Trial"/>
        <daml:range rdf:resource="#Agent"/>
    </daml:Property>
    <daml:UniqueProperty rdf:ID="definingMt">
        <rdfs:label>defining mt</rdfs:label>
        <rdfs:comment>(#$definingMt TERM MT) states that TERM only
            begins to have semantic meaning in microtheory MT. In
            microtheories in which MT is not  accessible, TERM is
            #$undefined. Additionally,  (#$termDependsOn TERM MT).</rdfs:comment>
        <guid>bde5ec9c-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#termDependsOn"/>
        <daml:domain rdf:resource="#CycLReifiableDenotationalTerm"/>
        <daml:range rdf:resource="#Microtheory"/>
    </daml:UniqueProperty>
    <daml:UniqueProperty rdf:ID="defnIff">
        <rdfs:label>defn iff</rdfs:label>
        <rdfs:comment>(#$defnIff COL TEST) means that TEST is the name
            of a piece of code in the Cyc system substrate, and TEST
            acts as a necessary and sufficient test for inclusion in the
            #$Collection COL.  If TEST returns T [True] when applied to
            a particular item, that item is considered an element of
            COL; all elements of COL must fulfill TEST&apos;s
            requirements.  Cf. #$defnNecessary, #$defnSufficient.</rdfs:comment>
        <guid>bd5880ed-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#defnNecessary"/>
        <daml:subPropertyOf rdf:resource="#defnSufficient"/>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <daml:range rdf:resource="#SubLSymbol"/>
    </daml:UniqueProperty>
    <daml:Property rdf:ID="defnNecessary">
        <rdfs:label>defn necessary</rdfs:label>
        <rdfs:comment>(#$defnNecessary COL TEST) means that TEST is the
            name of a piece of code in the Cyc system substrate, and
            TEST acts as a necessary definition for membership in the
            Cyc #$Collection COL.   Only if TEST returns T [True] when
            applied to a particular item can that item be considered an
            element of COL; all elements of COL must fulfill TEST&apos;s
            requirements, although there may be additional requirements
            for membership in COL as well.  Cf. #$defnIff and #$defnSufficient.</rdfs:comment>
        <guid>bd60e145-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <daml:range rdf:resource="#SubLSymbol"/>
    </daml:Property>
    <daml:Property rdf:ID="defnSufficient">
        <rdfs:label>defn sufficient</rdfs:label>
        <rdfs:comment>(#$defnSufficient COL TEST) means that TEST is the
            name of a piece of code in the Cyc system substrate, and
            TEST acts as a sufficient definition for inclusion in the
            Cyc #$Collection COL.  If TEST returns T [True] when applied
            to a particular item, that item is considered an element of
            COL.  Note that TEST isn&apos;t necessarily a necessary test
            for membership in COL; i.e., not all elements of COL must
            pass the test, unless TEST is also a #$defnNecessary for
            COL.  Cf. #$defnNecessary, #$defnIff.</rdfs:comment>
        <guid>bd5880ee-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <daml:range rdf:resource="#SubLSymbol"/>
    </daml:Property>
    <daml:Property rdf:ID="deliberateActors">
        <rdfs:label>deliberate</rdfs:label>
        <rdfs:comment>(#$deliberateActors ACT ACTR) means that the
            #$Agent ACTR is conscious, volitional, purposeful in the
            event ACT.   ACTR is aware of acting in ACT and chooses to
            play the role he/she/it has in that event; i.e., ACTR has
            some purpose in mind.  Note:  If you do something
            deliberately but you fail, you are still a
            #$deliberateActors.  For instance, you are a near-sighted
            doer of #$ShowingSupportForSomeone at a fencing match, and
            it turns out you were cheering for Fred when you thought you
            were cheering for Joe; nevertheless, you are still one of
            the #$deliberateActors in the #$ShowingSupportForSomeone
            event.  Note: Legal responsibility is a separate issue from
            `deliberateness.&apos;  Doing something in a fit of rage
            (e.g., a crime of passion) still involves purpose, volition,
            and consciousness even if considered for only an instant,
            and even if the laws and courts find you not
            guilty.--Pittman, Aug. 26, 1996</rdfs:comment>
        <guid>c0fd5f1c-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#preActors"/>
        <daml:domain rdf:resource="#Event"/>
        <daml:range rdf:resource="#Agent"/>
    </daml:Property>
    <daml:Property rdf:ID="densityOfObject">
        <rdfs:label>density of object</rdfs:label>
        <rdfs:comment>(#$densityOfObject OBJ DENS) means that the
            tangible thing OBJ has the #$Density DENS.</rdfs:comment>
        <guid>bd5898e0-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasAttributes"/>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#Density"/>
    </daml:Property>
    <daml:Property rdf:ID="desires">
        <rdfs:label>desire</rdfs:label>
        <rdfs:comment>(#$desires AGT PROP) means that the #$Agent AGT
            desires that the world be as the proposition PROP
            (represented by a #$ELSentence-Assertible) describes it to
            be.  #$desires is implied by #$goals, but is weaker:  PROP
            might be some desirable state of affairs that the agent is
            not actively working, or planning, to make/keep true; e.g.,
            #$WorldPeace.  See also #$goals and #$intends.</rdfs:comment>
        <guid>bd5880d0-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#IntelligentAgent"/>
        <daml:range rdf:resource="#ELSentence-Assertible"/>
    </daml:Property>
    <daml:Property rdf:ID="destination-RoundTrip">
        <rdfs:label>destination - round trip</rdfs:label>
        <rdfs:comment>(#$destination-RoundTrip TRIP PLACE) means that
            PLACE is the destination (i.e., the #$toLocation) of the
            OUTBOUND leg of the round-trip event TRIP.  PLACE is where
            the #$objectMoving in TRIP goes and then returns from.  See
            also #$origin-RoundTrip, #$Translation-RoundTrip, #$outboundLegOfRoundTrip.</rdfs:comment>
        <guid>c10aee64-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#nonDeliberateActors"/>
        <daml:domain rdf:resource="#Translation-RoundTrip"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:Property>
    <daml:Property rdf:ID="developerOfIBTType">
        <rdfs:label>developer of i b t type</rdfs:label>
        <rdfs:comment>The predicate #$developerOfIBTType relates a
            specific work to its creator(s).  (#$developerOfIBTType
            IBTTYPE AGENT) means that AGENT is one of the people,
            corporations, publishers, etc., responsible for the
            invention or bringing into being of the
            #$SpecifiedInformationBearingThingType IBTTYPE, which may be
            a book, television show, computer program, musical score,
            etc.  Examples: #$Lenat is a #$developerOfIBTType for the
            #$CycKB; #$OrsonWelles is a #$developerOfIBTType for #$CitizenKane-TheMovie.</rdfs:comment>
        <guid>bd58da57-9c29-11b1-9dad-c379636f7270</guid>
        <daml:range rdf:resource="#Agent"/>
    </daml:Property>
    <daml:Property rdf:ID="deviceControlledBy">
        <rdfs:label>device controlled by</rdfs:label>
        <rdfs:comment>(#$deviceControlledBy DEV CONTROL) means that
            CONTROL is a #$ControlDevice that controls #$PhysicalDevice
            DEV.  Most of the time, the controls will be #$physicalParts
            of the device.  However there are some notable exceptions --
            one&apos;s TV remote control, for example -- which control a
            device but are not #$physicalParts of that device.</rdfs:comment>
        <guid>bd5cbb65-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#PhysicalDevice"/>
        <daml:range rdf:resource="#ControlDevice"/>
    </daml:Property>
    <daml:Property rdf:ID="deviceUsed">
        <rdfs:label>device used</rdfs:label>
        <rdfs:comment>The predicate #$deviceUsed indicates that a
            particular device is used in a particular event.
            (#$deviceUsed EVENT OBJECT) means that the #$PhysicalDevice
            OBJECT plays an instrumental role in the #$Event EVENT.
            (See also #$instrument-Generic.) OBJECT is intentionally
            used in EVENT, and standardly (e.g., in the
            #$HumanActivitiesMt) OBJECT&apos;s role in EVENT is
            consistent with the object&apos;s #$primaryFunction.</rdfs:comment>
        <guid>bd5d0531-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#instrument-Generic"/>
        <daml:domain rdf:resource="#Event"/>
        <daml:range rdf:resource="#PhysicalDevice"/>
    </daml:Property>
    <daml:Property rdf:ID="directedCycleInSystem">
        <rdfs:label>directed cycle in system</rdfs:label>
        <rdfs:comment>(#$directedCycleInSystem CYCLE SYS) means that
            CYCLE is a cycle in the #$Semi-DirectedPathSystem SYS that
            observes the directions of paths in SYS, i.e., all parts of
            CYCLE that are paths in SYS must observe the orders or
            directions of the paths in SYS.  For example, if PATH is a
            path in SYS directed from X to Y in SYS, and if LINK is a
            link in SYS directed from Y to X, and in addition if LINK is
            different from PATH, then (#$JoinPathsIntoCycleFn (#$TheList
            X PATH Y LINK X)) is a cycle in SYS that observes the
            directions of paths in SYS. Note that in a
            #$Semi-DirectedPathSystem SYS, every loop in SYS is a
            directed cycle in SYS.  Otherwise a directed cycle is a
            &apos;proper&apos; cycle, i.e., it is the concatenation of
            some directed paths in SYS.</rdfs:comment>
        <guid>bfaae4c0-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#cycleInSystem"/>
        <daml:domain rdf:resource="#Path-Cyclic"/>
        <daml:range rdf:resource="#Semi-DirectedPathSystem"/>
    </daml:Property>
    <daml:Property rdf:ID="directingAgent">
        <rdfs:label>directors</rdfs:label>
        <rdfs:comment>(#$directingAgent ACT AGENT) means that AGENT is
            one of the agents that is in control of or directing ACT,
            but not necessarily directly performing it.  If, in the
            event ACT, an agent other than AGENT has the #$performedBy
            role, then that performer&apos;s actions in ACT are directed
            by AGENT.  For example, (#$directingAgent
            PSOBicentennialConcertOfBeethovensNinth WilliamSteinberg) is
            true, because Steinberg was the conductor of that concert;
            he directed the many other musicians who performed in that
            event.  Another case: (#$directingAgent MassacreAtMyLai
            LtWilliamCalley).  The type of direction implied by
            #$directingAgent is the kind that can be accomplished by
            AGENT communicating its desires to the actual performer(s)
            of ACT.  So, a person would be the #$directingAgent in a
            clothes-washing event #$doneBy a washing machine ONLY in
            those contexts (if any) in which we can consider the machine
            an agent, acting intentionally.</rdfs:comment>
        <guid>bd589690-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#deliberateActors"/>
        <daml:domain rdf:resource="#Event"/>
        <daml:range rdf:resource="#Agent"/>
    </daml:Property>
    <daml:Property rdf:ID="direction-Pointing">
        <rdfs:label>direction - pointing</rdfs:label>
        <rdfs:comment>(#$direction-Pointing OBJ DIR) means that the
            intrinsic pointing axis of OBJ points in the direction DIR
            (which is described using an instance of
            #$UnitVectorInterval).  Pointing axes may be ascribed to
            certain objects especially in relation to their function(s);
            e.g., objects which are intended to indicate direction
            (e.g., a pointer stick, a compass needle); objects which
            cause motion in a certain direction (e.g., a gun, a train);
            objects which are accessed from a certain direction (e.g.,
            cupboards, couches).</rdfs:comment>
        <guid>bd58b9fb-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#SpatialThing"/>
        <daml:range rdf:resource="#UnitVectorInterval"/>
    </daml:Property>
    <daml:Property rdf:ID="directionOfTranslation-Avg">
        <rdfs:label>direction of translation - avg</rdfs:label>
        <rdfs:comment>Predicate used to specify the &apos;general&apos;
            direction of travel in a  #$Movement-TranslationEvent. The
            direction will be stated as a range  specified with a vector
            interval. </rdfs:comment>
        <guid>c07c2ac0-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Movement-TranslationEvent"/>
        <daml:range rdf:resource="#UnitVectorInterval"/>
    </daml:Property>
    <daml:Property rdf:ID="directionOfTranslation-Throughout">
        <rdfs:label>direction</rdfs:label>
        <rdfs:comment>(#$directionOfTranslation-Throughout MOVEMENT DIR)
            means that the  #$objectMoving in MOVEMENT moves in the
            direction DIR *throughout*  MOVEMENT.  I.e. for every
            #$timeSlices of MOVEMENT the direction of  the
            #$objectMoving is DIR.  This is useful for talking about the
            &apos;instantaneous direction&apos; of a translation event.
            It is also useful  for talking about the direction of motion
            in a movement event in which  there is no curving.  Note
            that the semantics of this can get  confusing when
            #$directionOfTranslation-Throughout is inside #$holdsIn
            expressions.  For example, let&apos;s say a particle P,
            moves in a great  arcing motion event M which lasts for one
            hour.  If we pick two  *instances*, I1 and I2 within that
            hour, the value of DIR (if it is a  precise vector) must be
            different.  Thus, in CycL the values of D1 and  D2 would be
            different (#$holdsIn I1
            (#$directionOfTranslation-Throughout M D1)), (#$holdsIn I2
            (#$directionOfTranslation-Throughout M D2)) because the
            instantaneous  direction of travel would be changing
            thoughout M.  Furthermore, it  would be impossible to
            ascribe a precise vector value for DIR that  would apply to
            (#$holdsIn M (#$directionOfTranslation-Throughout M  D3)) or
            equivalently to (#$directionOfTranslation-Throughout M D3)
            for  the same reason, i.e. that the direction is constantly
            changing  throughout M.</rdfs:comment>
        <guid>bd58ba7c-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#directionOfTranslation-Avg"/>
        <daml:domain rdf:resource="#Movement-TranslationEvent"/>
        <daml:range rdf:resource="#UnitVectorInterval"/>
    </daml:Property>
    <daml:Property rdf:ID="directionPreservingSubSystems">
        <rdfs:label>direction preserving sub systems</rdfs:label>
        <rdfs:comment>(#$directionPreservingSubSystems SYS SUBSYS) means
            that (i) both SYS and SUBSYS are semi-directed path systems
            (see #$Semi-DirectedPathSystem), (ii) SUBSYS is a subsystem
            of SYS, and (iii) SUBSYS &apos;preserves&apos; the
            directions of links, i.e., for each link LINK in SUBSYS,
            (#$linkFromToInSystem LINK X Y SUBSYS) iff
            (#$linkFromToInSystem LINK X Y SYS).</rdfs:comment>
        <guid>c06e260d-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#subPathSystems"/>
        <daml:domain rdf:resource="#Semi-DirectedPathSystem"/>
        <daml:range rdf:resource="#Semi-DirectedPathSystem"/>
    </daml:Property>
    <daml:Property rdf:ID="dirtinessOfObject">
        <rdfs:label>dirtiness of object</rdfs:label>
        <rdfs:comment>(#$dirtinessOfObject OBJ DEGREE) means that the
            tangible object OBJ has this DEGREE of #$Dirtiness.</rdfs:comment>
        <guid>bd58e326-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasAttributes"/>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#Dirtiness"/>
    </daml:Property>
    <daml:Property rdf:ID="disjointWith">
        <rdfs:label>disjoint with</rdfs:label>
        <rdfs:comment>This predicate relates any two set-or-collections
            that have no elements in common.  (#$disjointWith SETORCOL1
            SETORCOL2) means that SETORCOL1 is disjoint with SETORCOL2:
            they have no elements in common.  (#$disjointWith SETORCOL
            SETORCOL) entails that SETORCOL is empty, i.e has   no elements.</rdfs:comment>
        <guid>bd5880e3-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#SetOrCollection"/>
        <daml:range rdf:resource="#SetOrCollection"/>
    </daml:Property>
    <daml:Property rdf:ID="dislikesObject">
        <rdfs:label>dislike</rdfs:label>
        <rdfs:comment>(#$dislikesObject AGT OBJ) means that AGT feels an
            emotion of #$Dislike when interacting with OBJ in some way.
            See #$likesObject for elaboration.</rdfs:comment>
        <guid>bd68379b-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#negativeVestedInterest"/>
        <daml:domain rdf:resource="#Agent"/>
        <daml:range rdf:resource="#SomethingExisting"/>
    </daml:Property>
    <daml:Property rdf:ID="dislikesSensorially">
        <rdfs:label>dislike</rdfs:label>
        <rdfs:comment>(#$dislikesSensorially AGT SENSUM) means that the
            #$PerceptualAgent AGT feels some physical discomfort from
            the sensory experience of SENSUM (a taste, an odor, a
            particular level of pain, etc. --- see #$SensoryAttribute).
            Note: this is a stronger statement than (#$not
            (#$likesSensorially AGT SENSUM)), as there may be many
            #$SensoryAttributes which one neither particularly likes nor dislikes.</rdfs:comment>
        <guid>bd590ae5-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#PerceptualAgent"/>
        <daml:range rdf:resource="#SensoryAttribute"/>
    </daml:Property>
    <daml:Property rdf:ID="distanceAboveSeaLevel">
        <rdfs:label>distance above sea level</rdfs:label>
        <rdfs:comment>(#$distanceAboveSeaLevel REG DIST) means that the
            altitude above sea level of the #$GeographicalRegion REG is
            the #$Distance DIST.  For elements of #$Mountain, distance
            is measured from sea level to the peak; for elements of
            #$Lake, from the surface to sea level; for cities, from the
            center of town to sea level.  Examples:
            (#$distanceAboveSeaLevel #$PikesPeak-Mount
            (#$Foot-UnitOfMeasure 14110)); (#$distanceAboveSeaLevel
            #$MountEverest (#$Foot-UnitOfMeasure 29028));
            (#$distanceAboveSeaLevel #$MountFuji-Volcano
            (#$Foot-UnitOfMeasure 12389)); (#$distanceAboveSeaLevel
            #$LakeHuron (#$Foot-UnitOfMeasure 580)).  To describe
            ``distance above sea level&apos;&apos; for a
            non-#$GeographicalRegion, see #$altitudeAboveSeaLevel.</rdfs:comment>
        <guid>bd58cf53-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#GeographicalRegion"/>
        <daml:range rdf:resource="#Distance"/>
    </daml:Property>
    <daml:Property rdf:ID="distanceOfRotation">
        <rdfs:label>distance of rotation</rdfs:label>
        <rdfs:comment>This predicate indicates, for a particular
            rotational motion event, the total absolute value of the
            angular distance travelled by the #$objectMoving in that
            event.  (#$distanceOfRotation ROT DIST) means that in the
            event ROT, the #$objectMoving travelled the angular distance
            DIST.  Note that this is not the same as the net angular
            displacement of the #$objectMoving, but rather the entire
            angular distance travelled.  So if you unscrew a jar lid 1/6
            of a turn, and later screw it back on, the
            #$distanceOfRotation is 120 degrees, not zero; and if you
            spin around ten times, your #$distanceOfRotation is 3600
            degrees, not zero.  Angular distance is measured in degrees,
            radians, etc.</rdfs:comment>
        <guid>bf2978c4-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Movement-Rotation"/>
    </daml:Property>
    <daml:Property rdf:ID="distanceTranslated">
        <rdfs:label>distance translated</rdfs:label>
        <rdfs:comment>This predicate relates a translational movement
            event to the total distance travelled by the #$objectMoving
            in that event.  (#$distanceTranslated MOVE DIST) means that
            in the event MOVE, the #$objectMoving covered the distance
            DIST.  Note that DIST is the actual distance travelled by
            the object, not merely its net change in position; so if the
            #$motionPathway-Complete of MOVE is a round trip a mile each
            way to the store, the #$distanceTranslated would be 2 miles,
            not zero.</rdfs:comment>
        <guid>bd5898d6-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Movement-TranslationEvent"/>
        <daml:range rdf:resource="#Distance"/>
    </daml:Property>
    <daml:Property rdf:ID="doesBusinessWith">
        <rdfs:label>does business with</rdfs:label>
        <rdfs:comment>The predicate #$doesBusinessWith relates two
            agents who do business with each other.  (#$doesBusinessWith
            AGENT1 AGENT2) means that AGENT1 does some business with
            AGENT2.  Minimally, that means the two agents at least
            occasionally negotiate to buy or sell products or services
            from one other. The two agents may or may not complete the
            sales/purchase and enter into actual contracts.</rdfs:comment>
        <guid>c10ae4a1-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Agent"/>
        <daml:range rdf:resource="#Agent"/>
    </daml:Property>
    <daml:Property rdf:ID="domainAssumptions">
        <rdfs:label>domain assumptions</rdfs:label>
        <rdfs:comment>(#$domainAssumptions M P) means that the
            microtheory M has the proposition P as a domain assumption.
            See the comment for #$Microtheory for a detailed explanation
            of what the `assumptions&apos; of a mt are, as opposed to
            its `content&apos;.  In brief, it means that all the
            `content&apos; assertions of M assume that P is true.
            Another way of thinking of this is that one is `in&apos;
            context M only if all its domain assumptions are true.
            Another way of thinking of this is that the various
            `content&apos; assertions of M only apply to objects that
            satisfy all its #$domainAssumptions.  Yes, that means that
            the `domain of quantifiers&apos; (#$forAll and
            #$thereExists) is limited to the universe of such objects.
            So if it&apos;s true in M that (#$forAll ?x Q), and if we
            lift this axiom to another theory M2 that does not make the
            domain assumption P, then the axiom becomes (#$forAll ?x
            (#$implies P Q)).      Note:  Actually, what becomes true in
            M2 is slightly more complicated, namely: (#$forAll ?x
            (#$implies (#$and P1 P2 P3...) Q)), where P1, P2, P3,... are
            all the domain assumptions of M which are not implied by the
            domain assumptions of M2.    Note:  Domain assumption
            propositions --- in this case P --- must have a special
            format:  P must contain the free variable ?U, and this ?U
            represents `some term which is talked about in M&apos;.  The
            idea is that one could have a domain assumption that said
            `if ?U is a person, ?U must have been born after 1950&apos;,
            or which said `if ?U is the performer of an event, then ?U
            is a person&apos; etc.  For example:  (#$implies (#$isa ?U
            #$PhysicalStateChangeEvent) (#$isa ?U
            #$CreationOrDestructionEvent)) is one of the
            #$domainAssumptions of the #$NaiveStateChangeMt context.  It
            says that, in that context, physical state changes of an
            object (e.g., melting or boiling) are viewed as creations
            and destructions, in which elements of #$Entity come into or
            go out of existence, rather than viewing them as events
            which preserve entityhood.    See also #$mtAdditionConstraint.</rdfs:comment>
        <guid>bd5880d7-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Microtheory"/>
        <daml:range rdf:resource="#ELSentence-Assertible"/>
    </daml:Property>
    <daml:Property rdf:ID="doneBy">
        <rdfs:label>doers</rdfs:label>
        <rdfs:comment>The predicate #$doneBy relates an event to its
            `doer&apos;.  (#$doneBy EVENT DOER) means that DOER is the
            `doer&apos; in the event EVENT.  Some action on the part of
            the doer causes or carries out the event.  This predicate is
            agnostic as to whether DOER does EVENT intentionally or not
            (DOER need not even be animate; e.g., the event in which
            Mount Vesuvius erupted and buried Pompeii was #$doneBy Mount
            Vesuvius).  See #$performedBy and #$bodilyDoer for the more
            specific senses of `doer&apos; when DOER is, respectively,
            an agent (#$Agent) acting deliberately or a biological
            organism (#$Organism-Whole).</rdfs:comment>
        <guid>c0fd4798-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#preActors"/>
        <daml:domain rdf:resource="#Event"/>
        <daml:range rdf:resource="#SomethingExisting"/>
    </daml:Property>
    <daml:UnambiguousProperty rdf:ID="doorwayHasCovering">
        <rdfs:label>doorway has covering</rdfs:label>
        <rdfs:comment>Relates a #$Doorway to the physical covering used
            to seal it.  The user should be aware that #$Doorway, the
            designated arg1 for this predicate, is currently constrained
            to be a physical part of some instance of
            #$ShelterConstruction.  This is because, in normal English
            parlance, doorways are the portals through which people pass
            to get in and out of shelter constructions, and from room to
            room.  Planes, trains, automobiles, and other vehicles are
            not conventionally said to have #$Doorways, and if the aim
            is to assert something about the #$PortalCoverings of a
            vehicle, #$portalHasCovering would be the appropriate
            predicate to use.</rdfs:comment>
        <guid>bd58cf22-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#portalHasCovering"/>
        <daml:domain rdf:resource="#Doorway"/>
        <daml:range rdf:resource="#DoorwayCovering"/>
    </daml:UnambiguousProperty>
    <daml:Property rdf:ID="driverActor">
        <rdfs:label>drivers</rdfs:label>
        <rdfs:comment>(#$driverActor DRIVE DRIVER) means that DRIVER
            controls (see #$ControllingATransporter) the #$transporter
            in DRIVE.  DRIVER steers the wheel, grasps the tiller,
            controls the throttle, the reins, the brakes, etc., of the
            #$transporter, e.g., a boat, train, windsurfer, mule, plane,
            horse and carriage, spaceship, sled, etc.  DRIVER is not a
            #$passengers in DRIVE.  Because #$transporter and
            #$transportees are disjoint and #$driverActor has
            #$transportees as a #$genlPreds, DRIVER is distinct from the
            value on #$transporter.  Thus a person walking while
            carrying a watermelon would not be a #$driverActor in their
            own walking.  DRIVER is usually in #$SittingPosture during
            DRIVE.  For any given instant of DRIVE there is exactly one
            DRIVER.  Until we have more extensive vocabulary,
            #$transportees is the most specific we can be about events
            in which multiple drivers share driving responsibility
            throughout the event or if there is a pilot/co-pilot combination.</rdfs:comment>
        <guid>bd58bf45-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#transportees"/>
        <daml:subPropertyOf rdf:resource="#performedBy"/>
        <daml:range rdf:resource="#Person"/>
    </daml:Property>
    <daml:Property rdf:ID="ductilityOfObject">
        <rdfs:label>ductility of object</rdfs:label>
        <rdfs:comment>(#$ductilityOfObject OBJ DEGREE) means that the
            instance of #$SolidTangibleThing OBJ has this DEGREE of
            #$Ductility (q.v.).</rdfs:comment>
        <guid>bd58d2f7-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasAttributes"/>
        <daml:domain rdf:resource="#SolidTangibleThing"/>
        <daml:range rdf:resource="#Ductility"/>
    </daml:Property>
    <daml:Property rdf:ID="duration">
        <rdfs:label>duration</rdfs:label>
        <rdfs:comment>This predicate relates a temporal thing to the
            length of time it happened or existed.  (#$duration
            TEMPTHING DURATION) means that DURATION is the length of
            time TEMPTHING happened (if an event) or existed (if a
            physical object or static situation).  If TEMPTHING is
            #$temporallyContinuous,  its #$duration is the same as its
            #$measure (the elapsed time from start to end); but if
            TEMPTHING is discontinuous, its #$duration is strictly less
            than its #$measure.  For example, the #$duration of
            Sundays-in-April-2001 is (#$DaysDuration 5), whereas the
            #$measure of that same temporal object is (#$DaysDuration 29).</rdfs:comment>
        <guid>bd58a3b3-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#TemporalThing"/>
        <daml:range rdf:resource="#NonNegativeScalarInterval"/>
    </daml:Property>
    <daml:Property rdf:ID="eastOf">
        <rdfs:label>east of</rdfs:label>
        <rdfs:comment>(#$eastOf EASTREGION WESTREGION) means that the
            #$GeographicalRegion EASTREGION is to the east of the
            #$GeographicalRegion WESTREGION, when viewed in the
            terrestrial frame of reference.  Note that WESTREGION is
            therefore west of EASTREGION; thus, no distinct predicate is
            needed to represent `west of&apos;.  Example: (#$eastOf
            #$EasternUSATimeZone #$CentralUSATimeZone).  See also
            #$northOf and #$directionBetweenObjects.  To express
            &apos;(westOf x y)&apos; all we need is to say (#$eastOf y x).</rdfs:comment>
        <guid>bd58e48b-9c29-11b1-9dad-c379636f7270</guid>
    </daml:Property>
    <daml:Property rdf:ID="eatsWillingly">
        <rdfs:label>eats willingly</rdfs:label>
        <rdfs:comment>The predicate #$eatsWillingly is used to relate an
            #$Animal to the type of food it will willingly eat.  In a
            normal #$EatingEvent, the food consumed is of a type that
            the eater #$eatsWillingly.  As negative examples, no
            vegetarian or herbivore #$eatsWillingly meat.</rdfs:comment>
        <guid>bd589419-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Animal"/>
        <daml:range rdf:resource="#TemporalStuffType"/>
    </daml:Property>
    <daml:Property rdf:ID="educationLevel">
        <rdfs:label>education level</rdfs:label>
        <rdfs:comment>(#$educationLevel PRSN LVL) means #$Person PRSN
            has had formal schooling up to the highest level
            #$EducationLevelAttribute LVL at one or more
            #$EducationalOrganizations.  This will refer to a particular
            #$subAbstrac of a #$Person, not to the person as a whole
            lifetime #$Entity.</rdfs:comment>
        <guid>bd58a758-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Person"/>
        <daml:range rdf:resource="#EducationLevelAttribute"/>
    </daml:Property>
    <daml:UnambiguousProperty rdf:ID="elInverse">
        <rdfs:label>el inverse</rdfs:label>
        <rdfs:comment>arg1 is a binary predicate, otherwise
            unrestricted; arg2 is also a   binary predicate such that
            (a) it can be thought of as the inverse of   arg1, and (b)
            arg2 is an #$ELRelation; e.g., (#$elInverse #$genls #$specs).</rdfs:comment>
        <guid>c073820f-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Property"/>
        <daml:range rdf:resource="#ELRelation"/>
    </daml:UnambiguousProperty>
    <daml:Property rdf:ID="elaboration-RST">
        <rdfs:label>elaboration - r s t</rdfs:label>
        <rdfs:comment>The discourse relation that holds between two
            segments of text when ARG2 specifies something which is an
            elaboration of the information described in ARG1.</rdfs:comment>
        <guid>bfd88463-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#LinguisticObject"/>
        <daml:range rdf:resource="#LinguisticObject"/>
    </daml:Property>
    <daml:Property rdf:ID="elaborationAttribute-RST">
        <rdfs:label>elaboration attribute - r s t</rdfs:label>
        <rdfs:comment>The relation of elaboration attribute as used in
            Rhetorical Structure Theory.</rdfs:comment>
        <guid>bdbfb7ee-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#LinguisticObject"/>
        <daml:range rdf:resource="#LinguisticObject"/>
    </daml:Property>
    <daml:Property rdf:ID="elaborationGeneralSpecific-RST">
        <rdfs:label>elaboration general specific - r s t</rdfs:label>
        <rdfs:comment>The discourse relation that holds between two
            segments of text when ARG2 specifies something which is an
            elaboration of the information described in ARG1 in the
            sense that is gives more specific information about ARG1.</rdfs:comment>
        <guid>c0257e5a-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#elaboration-RST"/>
        <daml:domain rdf:resource="#LinguisticObject"/>
        <daml:range rdf:resource="#LinguisticObject"/>
    </daml:Property>
    <daml:Property rdf:ID="elaborationProcessStep-RST">
        <rdfs:label>elaboration process step - r s t</rdfs:label>
        <rdfs:comment>The discourse relation that holds between two
            segments of text when ARG2 specifies something which is an
            elaboration of the information described in ARG1 in the
            sense that it is seen as a step in the process of doing ARG1.</rdfs:comment>
        <guid>bf4ddebe-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#elaboration-RST"/>
        <daml:domain rdf:resource="#LinguisticObject"/>
        <daml:range rdf:resource="#LinguisticObject"/>
    </daml:Property>
    <daml:Property rdf:ID="elasticityOfObject">
        <rdfs:label>elasticity of object</rdfs:label>
        <rdfs:comment>(#$elasticityOfObject OBJ DEGREE) indicates how
            readily the solid tangible thing OBJ returns to its original
            shape after being deformed (but not broken).  The higher the
            DEGREE of elasticity, the more quickly and completely the
            object returns to its previous shape.  Billiard balls, for
            example, are highly elastic in this sense.  A related
            concept is #$compressibilityOfObject.</rdfs:comment>
        <guid>bd589f65-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasAttributes"/>
        <daml:domain rdf:resource="#SolidTangibleThing"/>
        <daml:range rdf:resource="#Elasticity"/>
    </daml:Property>
    <daml:Property rdf:ID="elementOf">
        <rdfs:label>element of</rdfs:label>
        <rdfs:comment>(#$elementOf THNG SETORCOL) means that THNG is an
            element of the mathematical set or collection SETORCOL.
            #$elementOf is a more general relation than the
            more-heavily-used #$isa, which is used to talk about
            membership in a natural kind (an element of #$Collection).
            #$elementOf can also be used to talk about membership in an
            arbitrarily-defined mathematical set (an instance of
            #$Set-Mathematical), such as those denoted by #$TheSet expressions.</rdfs:comment>
        <guid>c0659a2b-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
        <daml:range rdf:resource="#SetOrCollection"/>
    </daml:Property>
    <daml:Property rdf:ID="emitter">
        <rdfs:label>emitters</rdfs:label>
        <rdfs:comment>The Cyc predicate #$emitter is used to identify
            the source of an emission.  (#$emitter EMIT OBJ) means that
            OBJ provides the force involved in making the
            #$objectEmitted move from OBJ to someplace outside of OBJ.
            See also #$providerOfMotiveForce, #$fromLocation.</rdfs:comment>
        <guid>bd58dcf1-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#fromLocation"/>
        <daml:subPropertyOf rdf:resource="#providerOfMotiveForce"/>
        <daml:domain rdf:resource="#Emission"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:Property>
    <daml:Property rdf:ID="employedAgent">
        <rdfs:label>employed agent</rdfs:label>
        <rdfs:comment>The predicate #$employedAgent identifies the
            particular employee who is covered by a particular work
            agreement.  (#$employedAgent AGREE WORKER) means that AGREE
            is an instance of #$WorkAgreement covering the employee WORKER.</rdfs:comment>
        <guid>bd58d7c7-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#agreeingAgents"/>
        <daml:domain rdf:resource="#WorkAgreement"/>
        <daml:range rdf:resource="#Agent"/>
    </daml:Property>
    <daml:Property rdf:ID="employeeStatus">
        <rdfs:label>employee status</rdfs:label>
        <rdfs:comment>The predicate #$employeeStatus describes a
            worker&apos;s job as full-time, part-time, salaried,
            commissioned, paid by the hour, or etc.  More than one may
            apply.  (#$employeeStatus WORKER STATUS) means that STATUS
            indicates the #$WorkStatus of WORKER.  For example, the
            #$employeeStatus of an auto worker at GM probably includes
            the #$WorkStatus attributes #$FullTime and #$HourlyWork.</rdfs:comment>
        <guid>bd58ff9f-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasAttributes"/>
        <daml:domain rdf:resource="#Person"/>
        <daml:range rdf:resource="#WorkStatus"/>
    </daml:Property>
    <daml:Property rdf:ID="employees">
        <rdfs:label>employee</rdfs:label>
        <rdfs:comment>The predicate #$employees relates a particular
            employer to one of its paid employees.  (#$employees
            EMPLOYER WORKER) means WORKER regularly performs work for
            EMPLOYER, and EMPLOYER pays WORKER for that activity (often
            by paycheck).  EMPLOYER directs the manner in which WORKER
            performs the work and may provide the workplace, tools,
            capital, and other assistance for the work.  EMPLOYER is
            commonly an organization but may be a person. E.g.,
            (#$employees PerryMason PaulDrake); (#$employees #$Cycorp
            #$Lenat).  Uses of this predicate require proper temporal
            qualification; e.g., (#$holdsIn (#$YearFn 1995) (#$employees
            #$CarnegieMellonUniversity #$Derthick)).</rdfs:comment>
        <guid>bd58cb96-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasWorkers"/>
        <daml:subPropertyOf rdf:resource="#affiliatedWith"/>
        <daml:domain rdf:resource="#Agent"/>
        <daml:range rdf:resource="#Agent"/>
    </daml:Property>
    <daml:Property rdf:ID="employingAgent">
        <rdfs:label>employing agent</rdfs:label>
        <rdfs:comment>The predicate #$employingAgent identifies the
            employer in a particular work agreement.  (#$employingAgent
            AGREE EMPLOYER) means that the #$Agent EMPLOYER has entered
            into the #$WorkAgreement AGREE with some employee, and AGREE
            obligates EMPLOYER to compensate that employee for specified
            work.  See also #$Agreement, #$obligatedAgent.</rdfs:comment>
        <guid>bd58d706-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#agreeingAgents"/>
        <daml:domain rdf:resource="#WorkAgreement"/>
        <daml:range rdf:resource="#Agent"/>
    </daml:Property>
    <daml:Property rdf:ID="emptiesInto">
        <rdfs:label>empties into</rdfs:label>
        <rdfs:comment>(#$emptiesInto RIV WAT) means that the #$Stream
            RIV flows into WAT, an element of #$BodyOfWater that is not
            a #$Stream.  Examples: (#$emptiesInto #$AmazonRiver
            #$AtlanticOcean); (#$emptiesInto #$HuangHeRiver #$YellowSea).</rdfs:comment>
        <guid>bd59083c-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#bordersOn"/>
        <daml:domain rdf:resource="#Stream"/>
        <daml:range rdf:resource="#BodyOfWater"/>
    </daml:Property>
    <daml:Property rdf:ID="enablement-RST">
        <rdfs:label>enablement - r s t</rdfs:label>
        <rdfs:comment>The discourse relation that holds between two
            segments of text when ARG2 specifies something which could
            enable the listener to carry out the actions described in ARG1.</rdfs:comment>
        <guid>bd91eb29-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#LinguisticObject"/>
        <daml:range rdf:resource="#LinguisticObject"/>
    </daml:Property>
    <daml:Property rdf:ID="endToEndConnected">
        <rdfs:label>end to end connected</rdfs:label>
        <rdfs:comment>(#$endToEndConnected PATH1 PATH2) means that one
            end of #$Path-Simple PATH1 is connected to one end of
            another #$Path-Simple, PATH2, end-to-end (i.e., without
            sharing any subpaths), allowing flow or transport between
            them.  This kind of connection is not a #$JunctionOfPaths
            since there is no third distinct path joined there.  In pipe
            welding, these end-to-end connections are called butt welds
            or circumferential pipe welds.</rdfs:comment>
        <guid>bf11c86e-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#connectedTo"/>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:Property>
    <daml:Property rdf:ID="endingDate">
        <rdfs:label>ending date</rdfs:label>
        <rdfs:comment>(#$endingDate X Y) indicates that Y is a #$Date
            such that (#$temporallySubsumes Y (#$EndFn X)). This is NOT
            the same as #$endingPoint.  Rather, it means that X stopped
            happening (went out of existence, etc.) sometime on that
            date.  Note:  the date is tied to a time interval on a
            calendar, but need not be a particular day; it might be a
            particular calendar month, a particular calendar year, etc.</rdfs:comment>
        <guid>bd58a22c-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <daml:domain rdf:resource="#TemporalThing"/>
        <daml:range rdf:resource="#Date"/>
    </daml:Property>
    <daml:UniqueProperty rdf:ID="endingPoint">
        <rdfs:label>end</rdfs:label>
        <rdfs:comment>This predicate relates a temoral thing to the time
            point at which it ends or ceases to exist.  (#$endingPoint
            THING POINT) means that THING ends at POINT, which is the
            last moment of its temporal extent.  See also #$startingPoint.</rdfs:comment>
        <guid>be00f6d1-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#temporallyCoterminal"/>
        <daml:subPropertyOf rdf:resource="#temporallySubsumes"/>
        <daml:domain rdf:resource="#TemporalThing"/>
        <daml:range rdf:resource="#TimePoint"/>
    </daml:UniqueProperty>
    <daml:Property rdf:ID="endsAfterEndingOf">
        <rdfs:label>ends after ending of</rdfs:label>
        <rdfs:comment>(#$endsAfterEndingOf LATER EARLY) means that LATER
            ends after EARLY ends -- in Cyc terms, (#$after (#$EndFn
            LATER) (#$EndFn EARLY)).  That is, the #$endingPoint of
            LATER is later than the #$endingPoint of EARLY.   This
            implies nothing about whether LATER and EARLY overlap, or
            how much they overlap, except that they can&apos;t be fully
            #$cotemporal.  Examples: rinsing while showering ends after
            soaping while showering; the process of hiring a contractor
            ends after the process of collecting bids.</rdfs:comment>
        <guid>bd58d61d-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#endsAfterStartingOf"/>
        <daml:domain rdf:resource="#TemporalThing"/>
        <daml:range rdf:resource="#TemporalThing"/>
    </daml:Property>
    <daml:Property rdf:ID="endsAfterStartingOf">
        <rdfs:label>ends after starting of</rdfs:label>
        <rdfs:comment>(#$endsAfterStartingOf X Y) means (#$after
            (#$EndFn X) (#$StartFn Y)).  That is, the #$endingPoint of X
            is later than the #$startingPoint of Y.  This implies
            nothing about whether X and Y overlap, or how much they overlap.</rdfs:comment>
        <guid>bd58c819-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#TemporalThing"/>
        <daml:range rdf:resource="#TemporalThing"/>
    </daml:Property>
    <daml:Property rdf:ID="endsDuring">
        <rdfs:label>expire</rdfs:label>
        <rdfs:comment>(#$endsDuring X Y) means Y covers the end of X,
            i.e. the #$endingPoint of X is properly contained in
            (#$temporalBoundsContain) Y.  Note that X and Y don&apos;t
            necessarily intersect, however, if Y is continuous, they do.</rdfs:comment>
        <guid>bd58d9b6-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#endsAfterStartingOf"/>
        <daml:subPropertyOf rdf:resource="#temporalBoundsIntersect"/>
        <daml:domain rdf:resource="#TemporalThing"/>
        <daml:range rdf:resource="#TemporalThing"/>
    </daml:Property>
    <daml:Property rdf:ID="endsOfPathSegment">
        <rdfs:label>ends of path segment</rdfs:label>
        <rdfs:comment>(#$endsOfPathSegment PATH LOC) means that LOC is
            at one end of the #$Path-Generic PATH; LOC may be either a
            junction or a genuine terminal-end of the path segment
            (indicated by #$pathTerminus).  This refers to the two ends
            of any kind of #$Path-Simple, or the the single
            &apos;end&apos; of a #$Path-Cyclic that goes from thing back
            to itself.  If PATH is an instance of #$PartiallyTangible,
            #$SpatialThing, or #$TemporalThing, then LOC is also;
            however, neither of them need to be an instance of any of
            these collections.</rdfs:comment>
        <guid>c088e410-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Path-Generic"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
    </daml:Property>
    <daml:Property rdf:ID="equalStrings-CaseInsensitive">
        <rdfs:label>equal strings - case insensitive</rdfs:label>
        <rdfs:comment>(#$equalStrings-CaseInsensitive ?STRING1 ?STRING2)
            is true when ?STRING1 and ?STRING2 are strings of characters
            which differ only in case.</rdfs:comment>
        <guid>beab79ec-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#CharacterString"/>
        <daml:range rdf:resource="#CharacterString"/>
    </daml:Property>
    <daml:Property rdf:ID="equalSymbols">
        <rdfs:label>equal symbols</rdfs:label>
        <rdfs:comment>This binary predicate, both of whose arguments
            are #$quotedArguments, can be used to make identity
            assertions about symbols.  Stated loosely,  (#$equalSymbols
            X Y) means that X and Y are one and the same symbol.  Given
            that the arguments are  quoted , however, it is more
            accurate to say: A GAF consisting of the expression
            &apos;#$equalSymbols&apos; followed by CycL expressions A
            and B (all enclosed within a pair of parentheses) is true if
            and only if A and B are (two occurrences of) the same
            expression.  Note that this is stronger than merely saying
            that A and B denote the same thing.  As an example (using
            English expressions for convenience), the name
            &apos;Bertrand   Russell&apos; and the description &apos;the
            author of  On Denoting &apos; are two different
            expressions, even though they both denote the same person.
            Two symbols can even share the same intensional meaning and
            still be different symbols; e.g. &apos;bachelor&apos; and
            &apos;unmarried male&apos;. The relation #$equalSymbols does
            hold, however,  between &apos;bachelor&apos; and
            &apos;bachelor&apos; (at least if we pretend that
            &apos;bachelor&apos; is a   CycL expression), as it does
            between the CycL constant &apos;#$BertrandRussell&apos; and
            the Cycl constant &apos;#$BertrandRussell&apos;.  See also
            #$differentSymbols and #$equals.</rdfs:comment>
        <guid>c05e110e-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#equals"/>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
    </daml:Property>
    <daml:Property rdf:ID="equals">
        <rdfs:label>equal</rdfs:label>
        <rdfs:comment>The predicate #$equals is the CycL version of the
            identity relation.  (#$equals THING1 THING2) means that
            THING1 and THING2 are numerically identical, i.e. they are
            one and the same thing.  A formula of this form is true if
            and only if the terms occupying #$equals&apos;s two
            argument-places denote the same thing.</rdfs:comment>
        <guid>bd5880c9-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
    </daml:Property>
    <CommutativeRelation rdf:ID="equiv">
        <rdfs:label>equiv</rdfs:label>
        <rdfs:comment>The logical connective #$equiv represents
            bi-directional implication.  #$equiv takes two arguments,
            each of which must be an element of
            #$ELSentence-Assertible. (#$equiv FORMULA-1 FORMULA-2) means
            that formula FORMULA-1    is true precisely when formula
            FORMULA-2 is true; in other words, FORMULA-1 is true if and
            only if FORMULA-2 is true.  An EL #$equiv formula is
            translated during canonicalization into an equivalent
            (though less compact) conjunction of #$implies formulas (see
            the #$expansion gaf for #$equiv).</rdfs:comment>
        <guid>bda887b6-9c29-11b1-9dad-c379636f7270</guid>
    </CommutativeRelation>
    <daml:Property rdf:ID="ethnicGroupsHere">
        <rdfs:label>ethnic groups here</rdfs:label>
        <rdfs:comment>The ethnic groups that inhabit a geographical region.</rdfs:comment>
        <guid>bd58df06-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#inhabitantTypes"/>
        <daml:domain rdf:resource="#GeopoliticalEntity"/>
        <daml:range rdf:resource="#EthnicGroupType"/>
    </daml:Property>
    <daml:Property rdf:ID="ethnicity">
        <rdfs:label>ethnicity</rdfs:label>
        <rdfs:comment>(#$ethnicity PERSON GROUPTYPE) means #$Person
            PERSON belongs to the #$EthnicGroupType GROUPTYPE.   E.g.,
            (#$ethnicity #$JohnWilkesBooth #$CensusGroupOfCaucasians).
            One #$Person may belong to more than one #$EthnicGroupType.
            See also #$residesInRegion.</rdfs:comment>
        <guid>bd589a59-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#isa"/>
        <daml:domain rdf:resource="#Person"/>
        <daml:range rdf:resource="#EthnicGroupType"/>
    </daml:Property>
    <daml:Property rdf:ID="evaluate">
        <rdfs:label>evaluate</rdfs:label>
        <rdfs:comment>(#$evaluate VAR EXPRESSION) is satisfied by an HL
            module which evaluates EXPRESSION and binds VAR to the
            result.  For example, (#$evaluate ?SUM (#$PlusFn 1 2)) would
            bind ?SUM to 3.</rdfs:comment>
        <guid>c03afa6d-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
    </daml:Property>
    <daml:UniqueProperty rdf:ID="evaluationDefn">
        <rdfs:label>evaluation defn</rdfs:label>
        <rdfs:comment>The Cyc predicate #$evaluationDefn is used to
            relate an evaluatable Cyc function or predicate to the name
            of the piece of code that is used to evaluate it.
            (#$evaluationDefn E-REL NAME) means that the #$SubLSymbol
            NAME is the name of a piece of Heuristic Level (SubL) code
            in the Cyc system which is used to compute the value of
            expressions containing the #$EvaluatableRelation E-REL.</rdfs:comment>
        <guid>bd5880c1-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#EvaluatableRelation"/>
        <daml:range rdf:resource="#SubLSymbol"/>
    </daml:UniqueProperty>
    <daml:Property rdf:ID="eventHonors">
        <rdfs:label>honoree</rdfs:label>
        <rdfs:comment>(#$eventHonors OCCURRENCE AGENT) means that AGENT
            is honored or commemorated by OCCURRENCE.  If AGENT is a
            living #$Person, AGENT is probably present at OCCURRENCE.
            This is the appropriate predicate for relating a #$Funeral
            to the deceased person for whom the #$Funeral is in honor.</rdfs:comment>
        <guid>bd588dbf-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#SocialOccurrence"/>
        <daml:range rdf:resource="#Agent"/>
    </daml:Property>
    <daml:Property rdf:ID="eventOccursAt">
        <rdfs:label>location</rdfs:label>
        <rdfs:comment>The predicate #$eventOccursAt relates a particular
            event to the instance of #$SpatialThing-Localized in which
            it occurs.  (#$eventOccursAt EVENT PT) means that the
            spatial extent of EVENT is within PT. For example,
            (#$eventOccursAt LomaPrietaEarthquake SanFranciscoBayArea).
            Use the predicate #$eventPartiallyOccursAt to relate an
            event to any instance of #$SpatialThing-Localized in which
            some sub-event of it occurs.</rdfs:comment>
        <guid>bd58d59e-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#preActors"/>
        <daml:subPropertyOf rdf:resource="#eventOccursNear"/>
        <daml:domain rdf:resource="#Event"/>
        <daml:range rdf:resource="#SomethingExisting"/>
    </daml:Property>
    <daml:Property rdf:ID="eventOccursNear">
        <rdfs:label>event occurs near</rdfs:label>
        <rdfs:comment>The predicate #$eventOccursNear relates an event
            to its approximate location.  (#$eventOccursNear EVENT LOC)
            means that EVENT occurs at or near (see #$near) LOC.
            #$eventOccursNear is useful when the more exact location is
            unknown, hard to specify, or not worth reifying; otherwise
            use  #$eventOccursAt.  For example, #$eventOccursNear could
            be used to CycLify   Bob was cycling by the dam ,  We played
            checkers near the TV , and  He is standing by the
            horse&apos;s hind legs .  See the #$cyclistNotes for ideas
            on how to formalize this.</rdfs:comment>
        <guid>c0fbb7cb-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Event"/>
        <daml:range rdf:resource="#SomethingExisting"/>
    </daml:Property>
    <daml:Property rdf:ID="eventToAchieve-SitType">
        <rdfs:label>event to achieve - sit type</rdfs:label>
        <rdfs:comment>(#$eventToAchieve-SitType EVT SIT_TYPE) means
            that, in the planning context, it is part of the purpose of
            EVT that a situation of type SIT_TYPE become true in EVT but
            not hold true for the duration of EVT.</rdfs:comment>
        <guid>bf7c13ba-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#PurposefulAction"/>
    </daml:Property>
    <daml:Property rdf:ID="eventToInsure-SitType">
        <rdfs:label>event to insure - sit type</rdfs:label>
        <rdfs:comment>(eventToInsure-SitType EVT SITTYPE) means that in
            the planning context it is part of the purpose of EVT that a
            situation of type SITTYPE should &apos;happen&apos; at some
            time in the course of EVT.  It is presupposed that no
            #$Situation of type SITTYPE obtains at the start of EVT, and
            that the situation should persist after its inception.</rdfs:comment>
        <guid>c10ec858-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#PurposefulAction"/>
    </daml:Property>
    <daml:Property rdf:ID="eventToInterrupt-SitType">
        <rdfs:label>event to interrupt - sit type</rdfs:label>
        <rdfs:comment>(#$eventToInterrupt-SitType EVT SIT_TYPE) means
            that, in the planning context, it is part of the purpose of
            EVT that a situation of type SIT_TYPE should cease to obtain
            at some point in EVENT but that a situation of type SIT_TYPE
            should become true again sometime before the end of EVENT.</rdfs:comment>
        <guid>c1412a40-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#PurposefulAction"/>
    </daml:Property>
    <daml:Property rdf:ID="eventToMaintain-SitType">
        <rdfs:label>event to maintain - sit type</rdfs:label>
        <rdfs:comment>(#$eventToMaintain-SitType EVT SIT_TYPE) means
            that, in the planning context, the maintainance of a
            pre-existing #$Situation satisfying the description of
            SIT_TYPE throughout the course of EVT is part of the purpose
            of EVT.</rdfs:comment>
        <guid>be75e96d-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#PurposefulAction"/>
    </daml:Property>
    <daml:Property rdf:ID="eventToPrevent-SitType">
        <rdfs:label>event to prevent - sit type</rdfs:label>
        <rdfs:comment>(#$eventToPrevent-SitType EVT SITTYPE) means that,
            in the planning context, a #$Situation satisfying the
            description of SITTYPE must NOT come about at any time
            during the course of EVT in order for EVT to count as
            &apos;successful&apos;.  It is presupposed that no
            #$Situation of type SITTYPE obtains at the start of SIT.</rdfs:comment>
        <guid>bfa85c4b-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#PurposefulAction"/>
    </daml:Property>
    <daml:Property rdf:ID="eventToStop-SitType">
        <rdfs:label>event to stop - sit type</rdfs:label>
        <rdfs:comment>(#$eventToStop-SitType EVT SITTYPE) means that, in
            the planning context, the success of EVT is contingent upon
            a pre-existing situation of type SITTYPE ceasing to obtain
            at some time in the course of SIT.</rdfs:comment>
        <guid>c01f994f-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#PurposefulAction"/>
    </daml:Property>
    <daml:Property rdf:ID="eventToThwart-SitType">
        <rdfs:label>event to thwart - sit type</rdfs:label>
        <rdfs:comment>(#$eventToThwart-SitType EVENT SIT_TYPE) means
            that if a #$Situation of type SIT_TYPE obtains at the start
            of EVT, then it is part of the purpose of EVT that it be
            stopped some time in the course of SIT, and if a #$Situation
            of type SIT_TYPE does not obtain at the start of EVT, then
            it is part of the purpose of EVT that such a situation be
            prevented throughout EVT.  The predicate is defined in terms
            of #$eventToStop-SitType and #$eventToPrevent-SitType.</rdfs:comment>
        <guid>bf5107f2-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Event"/>
    </daml:Property>
    <daml:Property rdf:ID="eventToUphold-SitType">
        <rdfs:label>event to uphold - sit type</rdfs:label>
        <rdfs:comment>(#$eventToUphold-SitType EVT SIT_TYPE) means that
            if a  #$Situation of type SIT_TYPE does not obtain at the
            start of EVT, then  it is part of the purpose of EVT in the
            planning context that such a  #$Situation be brought about
            some time in the course of EVT, and if a  #$Situation of
            type SIT_TYPE does obtain at the start of EVT, then it  is
            part of the purpose of EVT that such a #$Situation be
            maintained  throughout EVT.  The predicate is defined in
            terms of  #$eventToMaintain-SitType and #$eventToInsure-SitType.</rdfs:comment>
        <guid>c074a154-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Event"/>
    </daml:Property>
    <daml:Property rdf:ID="exampleAssertions">
        <rdfs:label>example assertions</rdfs:label>
        <rdfs:comment/>
        <guid>c000f476-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#CycLReifiableDenotationalTerm"/>
        <daml:range rdf:resource="#CycLAssertion"/>
    </daml:Property>
    <daml:Property rdf:ID="exchangers">
        <rdfs:label>exchangers</rdfs:label>
        <rdfs:comment>The predicate #$exchangers is used to identify the
            (typically, two) #$Agents involved in an instance of
            #$ExchangeOfUserRights.   In such an event, each of the
            #$exchangers gives up possession of one thing and gains
            possession of another which was previously possessed by the
            other agent.  (#$exchangers EXCH AGENT) means that AGENT is
            one of the parties having such a dual role in the
            #$ExchangeOfUserRights EXCH.  Every instance of
            #$ExchangeOfUserRights has two sub-events which are
            instances of #$TransferringPossession (e.g., a dollar bill
            goes in one direction and some french fries and a few coins
            go in the other direction.)  Each of the #$exchangers is
            both a #$toPossessor (in one of the two
            #$TransferringPossession sub-events of EXCH) and a
            #$fromPossessor (in the other sub-event).</rdfs:comment>
        <guid>bd5dfbff-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#postActors"/>
        <daml:subPropertyOf rdf:resource="#preActors"/>
        <daml:subPropertyOf rdf:resource="#socialParticipants"/>
        <daml:domain rdf:resource="#ExchangeOfUserRights"/>
        <daml:range rdf:resource="#SocialBeing"/>
    </daml:Property>
    <daml:Property rdf:ID="executionOfPlan">
        <rdfs:label>execution of plan</rdfs:label>
        <rdfs:comment>(executionOfPlan PLAN EVENT) means that EVENT is a
            complex  #$Event that  figures as an execution of the #$Plan
            represented by PLAN.  EVENT may  be reified within the
            #$Microtheory PLAN itself, or it may be in a  higher-order
            mt to which PLAN has access.</rdfs:comment>
        <guid>bdfb6731-9c29-11b1-9dad-c379636f7270</guid>
        <daml:range rdf:resource="#PurposefulAction"/>
    </daml:Property>
    <daml:Property rdf:ID="exhibitors">
        <rdfs:label>exhibitors</rdfs:label>
        <rdfs:comment>(#$exhibitors GATHERING AGENT) means that AGENT
            actively presents information, markets a product, displays
            merchandise or artwork to the attendees of GATHERING.</rdfs:comment>
        <guid>bd5bba85-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#socialParticipants"/>
        <daml:subPropertyOf rdf:resource="#deliberateActors"/>
        <daml:subPropertyOf rdf:resource="#preActors"/>
        <daml:domain rdf:resource="#SocialGathering"/>
        <daml:range rdf:resource="#Agent"/>
    </daml:Property>
    <daml:UniqueProperty rdf:ID="expansion">
        <rdfs:label>expansion</rdfs:label>
        <rdfs:comment>Some relations (e.g., instances of
            #$RuleMacroPredicate) can be defined in terms of more basic
            or primitive constructs. (#$expansion RELATION FORMULA)
            associates RELATION with the FORMULA that defines it.  The
            arg2 is allowed to reference generic-argument keywords, such
            as :ARG1 :ARG2  which represent respectively the arg1 and
            the arg2 within uses of RELATION.  For example, (#$expansion
            #$genls (#$implies (#$isa ?object :ARG1) (#$isa ?object
            :ARG2))) indicates that the gaf (#$genls #$Poodle #$Dog) is
            defined as  (#$implies (#$isa ?object #$Poodle) (#$isa
            ?object #$Dog))).  Importantly, the expansion-formula arg2
            must be necessary and sufficient; it denotes the definition
            of the uses of relation arg1; there can be only one
            expansion for any relation.  Furthermore, no two relations
            can share a common expansion; thus, there can be only one
            possible contraction from a formula that corresponds to an
            expansion into a compact form that references expandable
            relations.  For example, (#$implies (#$isa ?object #$Poodle)
            (#$isa ?object #$Dog))) has the unambiguous contraction of
            (#$genls #$Poodle #$Dog).  The expansion arg2 can (and
            should when possible) make use of relations that have
            expansions.  Note that the example above references
            #$implies which would itself have the expansion (#$or (#$not
            :ARG1) :ARG2).  Thus, the full expansion of a relation can
            involve recursive expansions.  For example, the full
            expansion of #$genls would be (#$or (#$isa ?object :ARG1)
            (#$not (#$isa ?object :ARG2)))).  No relation may reference
            itself (either directly or indirectly via recursion) in its
            expansion (or in its full recursive expansion).   See
            #$GenericArgTemplate, #$ELRelation, #$expansionAxiom.</rdfs:comment>
        <guid>bd58e0ec-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Relation"/>
        <daml:range rdf:resource="#ELTemplate"/>
    </daml:UniqueProperty>
    <daml:Property rdf:ID="expansionAxiom">
        <rdfs:label>expansion axiom</rdfs:label>
        <rdfs:comment>(#$expansionAxiom PRED ASSERT) means that the
            assertion ASSERT is part of the expansion of PRED.</rdfs:comment>
        <guid>bdfabffc-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#salientAssertions"/>
        <daml:domain rdf:resource="#RuleMacroPredicate"/>
        <daml:range rdf:resource="#CycLAssertion"/>
    </daml:Property>
    <daml:UniqueProperty rdf:ID="expansionDefn">
        <rdfs:label>expansion defn</rdfs:label>
        <rdfs:comment>(#$expansionDefn &lt;Relation&gt; &lt;Symbol&gt;)
            denotes that during canonicalization  the subl function
            definition of &lt;Symbol&gt; is used to transform an EL
            expression  (&lt;Relation&gt; . &lt;args&gt;) into the
            appropriate HL formula.</rdfs:comment>
        <guid>be31edd4-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Relation"/>
        <daml:range rdf:resource="#SubLSymbol"/>
    </daml:UniqueProperty>
    <daml:Property rdf:ID="expects">
        <rdfs:label>expect</rdfs:label>
        <rdfs:comment>(#$expects AGT PROP) means that the agent AGT
            believes it highly likely that the proposition PROP
            (represented by a #$ELSentence-Assertible) will be true
            sometime in the future.  A use of this predicate is to state
            rules such as: when someone confirms that they will be
            participating in a social event, the host(ess) #$expects
            that they will participate.  This is somewhat weaker than
            stating that an agent believes (see #$beliefs) that PROP
            will become true.</rdfs:comment>
        <guid>bd590aaa-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#IntelligentAgent"/>
        <daml:range rdf:resource="#ELSentence-Assertible"/>
    </daml:Property>
    <daml:Property rdf:ID="exports">
        <rdfs:label>exports</rdfs:label>
        <rdfs:comment>(#$exports COUNTRY PRODUCT-TYPE) means that the
            region COUNTRY has substantial regular exports of the goods
            or services PRODUCT-TYPE to other countries. </rdfs:comment>
        <guid>bd588ed3-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#GeographicalRegion"/>
        <daml:range rdf:resource="#ProductType"/>
    </daml:Property>
    <daml:UniqueProperty rdf:ID="extentCardinality">
        <rdfs:label>extent cardinality</rdfs:label>
        <rdfs:comment>(#$extentCardinality SETORCOL N) means that there
            are N terms in the currently represented extent of
            #$SetOrCollection SETORCOL.  See also, #$cardinality,
            #$entityCardinality, #$Note-cardinality-vs-entityCardinality.</rdfs:comment>
        <guid>be2e94bb-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#SetOrCollection"/>
        <daml:range rdf:resource="#NonNegativeInteger"/>
    </daml:UniqueProperty>
    <daml:Property rdf:ID="externalParts">
        <rdfs:label>external part</rdfs:label>
        <rdfs:comment>(#$externalParts OBJ PART) means that OBJ has PART
            as one of its external #$physicalParts. See #$surfaceParts,
            an important specialization of #$externalParts, for parts
            which do not extend from one side to the opposite side of ARG1.</rdfs:comment>
        <guid>bd58cfa4-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#physicalParts"/>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:Property>
    <daml:Property rdf:ID="eyeColor">
        <rdfs:label>eye color</rdfs:label>
        <rdfs:comment>(#$eyeColor ANIMAL COLOR) means that the #$Animal
            ANIMAL has eyes whose #$Color is COLOR  (more precisely,
            this means that their irises appear to have that color, in
            sunlight).  E.g., (#$eyeColor AmyIrving #$PurpleColor).</rdfs:comment>
        <guid>bd5895a7-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Animal"/>
        <daml:range rdf:resource="#Color"/>
    </daml:Property>
    <daml:Property rdf:ID="facesDirection">
        <rdfs:label>faces direction</rdfs:label>
        <rdfs:comment>(#$facesDirection OBJ DIR) means that the
            intrinsic forward axis of OBJ (i.e., the vector normal to
            its intrinsic front side) points in the direction DIR.  Note
            that an object only has an intrinsic forward axis if it has
            some intrinsic front side by virtue of its design or
            function.  For example, trains, cars, and bullets have
            intrinsic front faces by virtue of the direction in which
            they are intended to travel.  Other objects, such as
            refrigerators, bookshelves against walls, and televisions,
            have front faces by virtue of how people usually view the
            object.  Spheres, being symmetric, do not have an intrinsic
            forward axis.</rdfs:comment>
        <guid>bd58b302-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#UnitVectorInterval"/>
    </daml:Property>
    <daml:Property rdf:ID="failureForAgents">
        <rdfs:label>failure</rdfs:label>
        <rdfs:comment>The predicate #$failureForAgents is used to
            indicate that a particular agent fails to achieve (at least
            one of) its goals in a particular action.
            (#$failureForAgents ENDEAVOR AGT) means that the #$Agent AGT
            had some purpose in performing ENDEAVOR that was not
            realized.  See also #$purposeInEvent.</rdfs:comment>
        <guid>c1560de3-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#performedBy"/>
        <daml:domain rdf:resource="#Event"/>
        <daml:range rdf:resource="#Agent"/>
    </daml:Property>
    <daml:Property rdf:ID="fanOutArg">
        <rdfs:label>fan out arg</rdfs:label>
        <rdfs:comment>(#$fanOutArg ?PRED ?N) means that
            transitively-related assertions using ?PRED usually
            &apos;&apos;fan out&apos;&apos; in the direction of argument
            position ?N.  For example, (#$fanOutArg
            #$geographicalSubRegions 2).  This means there are more
            non-subsumed arg2s for a given arg1 to
            #$geographicalSubRegions than there would be non-subsumed
            arg1s for a given arg2.</rdfs:comment>
        <guid>be92128d-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#TransitiveProperty"/>
        <daml:range rdf:resource="#PositiveInteger"/>
    </daml:Property>
    <daml:Property rdf:ID="fartherNorthThan">
        <rdfs:label>farther north than</rdfs:label>
        <rdfs:comment>(#$fartherNorthThan THING-1 THING-2) means that
            THING-1 is farther to the north than THING-2 is, although it
            need not be #$northOf THING-2; they must be on the same
            planet surface, and the northernmost point(s) of THING-1 is,
            strictly speaking, closer to the North Pole than the
            northernmost point(s) of THING-2.   Example:
            (#$fartherNorthThan #$CityOfRomeItaly #$CityOfBostonMA). An
            example shows a technical difference between #$northOf and
            #$fartherNorthThan:  the #$CityOfRioDeJaneiroBrazil is
            #$fartherNorthThan the #$CityOfMelbourneAustralia, even
            though the shortest air route from Melbourne to Rio is to
            fly directly south (almost over the #$SouthPole).</rdfs:comment>
        <guid>c145b1bd-9c29-11b1-9dad-c379636f7270</guid>
    </daml:Property>
    <daml:Property rdf:ID="fastenedTo">
        <rdfs:label>fastened to</rdfs:label>
        <rdfs:comment>(#$fastenedTo OBJ1 OBJ2) means that there is an
            assembly consisting of OBJ1, OBJ2, and one or more fasteners
            configured so that OBJ1 and OBJ2 are rigidly connected.
            Many types of fastener are covered by #$fastenedTo; e.g.,
            screws, nails, rivets, nuts and bolts.  The fastener
            penetrates all the way through OBJ1 and may or may not go
            all the way through OBJ2.  Examples: a utility shelf screwed
            into the wall; paper notices stapled to a bulletin board;
            shingles nailed to the roof of a house.</rdfs:comment>
        <guid>bd58eba2-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#connectedTo-Rigidly"/>
        <daml:domain rdf:resource="#SolidTangibleThing"/>
        <daml:range rdf:resource="#SolidTangibleThing"/>
    </daml:Property>
    <daml:Property rdf:ID="father">
        <rdfs:label>father</rdfs:label>
        <rdfs:comment>(#$father OFFSPRING MALE) means that #$MaleAnimal
            MALE is the male biological parent of #$Animal OFFSPRING.</rdfs:comment>
        <guid>bd58d2fc-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#biologicalFather"/>
        <daml:domain rdf:resource="#Animal"/>
        <daml:range rdf:resource="#MaleAnimal"/>
    </daml:Property>
    <daml:Property rdf:ID="faxNumberText">
        <rdfs:label>fax number text</rdfs:label>
        <rdfs:comment>The predicate #$faxNumberText relates a particular
            location to the fax number at that location.
            (#$faxNumberText LOC NUM) means that NUM is a string
            denoting (one of) the fax number(s) of the #$ContactLocation LOC.</rdfs:comment>
        <guid>bd5900f8-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#ContactLocation"/>
        <daml:range rdf:resource="#PhoneNumber"/>
    </daml:Property>
    <daml:UniqueProperty rdf:ID="femaleParentActor">
        <rdfs:label>mother</rdfs:label>
        <rdfs:comment>(#$femaleParentActor ?EVENT ?ORGANISM) means that
            ?ORGANISM is the female parent in the
            #$SexualReproductionEvent ?EVENT.</rdfs:comment>
        <guid>bd58c757-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#parentActors"/>
        <daml:range rdf:resource="#BiologicalLivingObject"/>
    </daml:UniqueProperty>
    <daml:Property rdf:ID="fieldsOfActivity">
        <rdfs:label>fields of activity</rdfs:label>
        <rdfs:comment>(#$fieldsOfActivity X FLD) means the #$Person X
            was or is active in the #$FieldOfStudy FLD, and usually is
            making, has made, or intends to make some contribution to
            FLD.  E.g., (#$fieldsOfActivity #$Thales #$MilesianSchool)
            and, to take a more recent example, (#$fieldsOfActivity
            #$Lenat #$ArtificialIntelligence).</rdfs:comment>
        <guid>bd58fc22-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#fieldsOfCompetence"/>
        <daml:domain rdf:resource="#Person"/>
        <daml:range rdf:resource="#FieldOfStudy"/>
    </daml:Property>
    <daml:Property rdf:ID="fieldsOfCompetence">
        <rdfs:label>fields of competence</rdfs:label>
        <rdfs:comment>(#$fieldsOfCompetence Z FLD) means the #$Person Z
            has actual competence and knowledgeability in the
            #$FieldOfStudy FLD, or else at least is recognized by peers
            and colleagues in the same field as being competent in that
            field.  E.g., (#$fieldsOfCompetence #$Nichols
            #$PhilosophyAncient).  See also #$expertRegarding and #$domainsOfSpecialization.</rdfs:comment>
        <guid>bd58b7ba-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#knowsAbout"/>
        <daml:domain rdf:resource="#Person"/>
        <daml:range rdf:resource="#FieldOfStudy"/>
    </daml:Property>
    <daml:Property rdf:ID="fieldsOfFormalEducation">
        <rdfs:label>study</rdfs:label>
        <rdfs:comment>(#$fieldsOfFormalEducation Z FLD) means that
            #$Person Z has had formal academic or tutorial education in
            the #$FieldOfStudy FLD.  E.g., (#$fieldsOfFormalEducation
            #$Colvin #$Linguistics).  This is a good example of a
            predicate whose precise meaning, and associated heuristic
            rules, vary quite a bit from context to context, such as
            from culture to culture, from century to century, etc.</rdfs:comment>
        <guid>bd58b6ff-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#fieldsOfCompetence"/>
        <daml:domain rdf:resource="#Person"/>
        <daml:range rdf:resource="#FieldOfStudy"/>
    </daml:Property>
    <daml:UniqueProperty rdf:ID="firstName">
        <rdfs:label>first name</rdfs:label>
        <rdfs:comment>(#$firstName X STRNG) means that #$Person X is
            known by the #$HumanGivenNameString STRNG as his or her
            first name.  E.g., (#$firstName #$Lenat
            ``Douglas&apos;&apos;).  A person rarely has more than one
            first name, though they may have many nicknames which
            acquaintences use almost interchangably with the
            person&apos;s first and/or last names.</rdfs:comment>
        <guid>bd58c6fa-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#nameOfAgent"/>
        <daml:domain rdf:resource="#CycLReifiableDenotationalTerm"/>
        <daml:range rdf:resource="#HumanGivenNameString"/>
    </daml:UniqueProperty>
    <daml:Property rdf:ID="firstSubEvents">
        <rdfs:label>first sub events</rdfs:label>
        <rdfs:comment>(#$firstSubEvents EVENT START) implies
            (#$subEvents EVENT START) and (#$temporallyStartedBy EVENT
            START).  For example, if one is #$RelievingPain by taking a
            pill, then the #$firstSubEvents in that event is an
            #$Ingesting event.  See also #$lastSubEvents.</rdfs:comment>
        <guid>bd58d6a0-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#subEvents"/>
        <daml:subPropertyOf rdf:resource="#temporallyStartedBy"/>
        <daml:domain rdf:resource="#Event"/>
        <daml:range rdf:resource="#Event"/>
    </daml:Property>
    <daml:UniqueProperty rdf:ID="fitsIn">
        <rdfs:label>fits in</rdfs:label>
        <rdfs:comment>The predicate #$fitsIn is used to give an
            approximation of the external size and shape of particular
            tangible objects, by relating an object to an abstract
            region of space described as a geometric shape with definite
            dimensions.  (#$fitsIn OBJ SHAPE) gives an upper bound for
            the size of the object OBJ, by stating what sized shape OBJ
            will fit inside.  #$fitsIn uses the elements of
            #$ShapeFunction (q.v.) for reference, especially the basic
            shapes generated by #$RectangularSolidFn, #$CylinderFn, and
            #$SphereFn.  (Note: actual instances of
            AbstractPhysicalShape are NOT used for assertions made with
            #$fitsIn.)  Examples: (#$fitsIn #$Pittman
            (#$RectangularSolidFn (#$Meter 2) (#$Meter 0.35) (#$Meter
            0.25))) and (#$fitsIn HopeDiamond (#$CylinderFn (#$Centi
            (#$Meter 10) (#$Centi(#$Meter 10))).  When #$fitsIn is used
            in a rule to represent a class of objects with variable
            sizes, the #$ShapeFunction used should refer to the largest
            size that such objects normally have.  For example, by
            default, any sandwich SW (#$fitsIn SW (#$RectangularSolidFn
            (#$Inch 12) (#$Inch 12) (#$Inch 6))).</rdfs:comment>
        <guid>bd590bea-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#GeometricThing-Abstract"/>
    </daml:UniqueProperty>
    <daml:Property rdf:ID="flammabilityOfObject">
        <rdfs:label>flammability</rdfs:label>
        <rdfs:comment>(#$flammabilityOfObject SUBST DEGREE) means that
            the tangible SUBST has this DEGREE of #$Flammability.  A
            higher value of DEGREE describes objects that catch fire and
            burn more quickly and easily than those with a lower value.</rdfs:comment>
        <guid>bd58b60b-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasAttributes"/>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#Flammability"/>
    </daml:Property>
    <daml:Property rdf:ID="fluidPressure">
        <rdfs:label>fluid pressure</rdfs:label>
        <rdfs:comment>(#$fluidPressure FLUID PRESS) means that the
            #$FluidTangibleThing FLUID exerts the #$Pressure PRESS at
            its surface.</rdfs:comment>
        <guid>bd589144-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#FluidTangibleThing"/>
        <daml:range rdf:resource="#Pressure"/>
    </daml:Property>
    <daml:Property rdf:ID="followingIntervalType">
        <rdfs:label>following interval type</rdfs:label>
        <rdfs:comment>(#$followingIntervalType X Y) indicates that every
            instance of X is followed by some instance of Y, and every
            instance of Y is preceded by some instance of X.  The
            instance of Y is #$contiguousAfter the instance of X.  For
            example,  (#$followingIntervalType #$Saturday #$Sunday).
            Every Saturday is followed by a Sunday, and every Sunday is
            preceded by a Saturday; the Sunday is #$contiguousAfter the Saturday.</rdfs:comment>
        <guid>be010ec8-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#TemporalObjectType"/>
        <daml:range rdf:resource="#TemporalObjectType"/>
    </daml:Property>
    <daml:Property rdf:ID="followingValue">
        <rdfs:label>following value</rdfs:label>
        <rdfs:comment>The Cyc predicate #$followingValue is used to
            represent an ordering of generic attributes.
            (#$followingValue VAL1 VAL2) means that VAL2 is a greater
            value than VAL1 on a scale that they share.
            (#$followingValue VAL1 VAL2) implies (#$greaterThan VAL2
            VAL1).  Typically, one uses #$followingValue when the values
            VAL1 and VAL2 are elements of #$GenericQuantity, and they
            are not grounded in numerically quantifiable units of
            measure (see
            #$NoteAboutGivingGenericValueFunctionsNumericValues).  If
            VAL1 and VAL2 do have numerical grounding, a
            #$followingValue formula is unnecessary since
            #$numericallyEqual, #$greaterThanOrEqualTo, and
            #$greaterThan, are automatically computable using arithmetic
            relations holding between the minimum and maximum of val1
            and val2.  (See #$minQuantValue, #$maxQuantValue.)  For
            example, one must use #$followingValue to state that
            (#$HighAmountFn #$Glamor) is more glamorous than
            (#$LowAmountFn #$Glamor).  On the other hand, it is
            unnecessary to assert a #$followingValue relation between
            (#$MilesPerHour 5) and (#$MilesPerHour 25 60) since
            #$greaterThan is arithmetically determinable.  See also
            #$GenericQuantity, #$GenericValueFunction.</rdfs:comment>
        <guid>bd5892af-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#negationAttribute"/>
        <daml:domain rdf:resource="#ScalarInterval"/>
        <daml:range rdf:resource="#ScalarInterval"/>
    </daml:Property>
    <daml:Property rdf:ID="foodSourceFor">
        <rdfs:label>food source for</rdfs:label>
        <rdfs:comment>The predicate #$foodSourceFor is used to relate a
            particular organism to the kinds of things it usually eats.
            (#$foodSourceFor ORG OBJTYPE) means ORG is an organism that
            typically eats some instances of OBJTYPE for food.  Note
            that OBJTYPE refers to a type of food source, not a
            particular object that ORG eats.  For example,
            (#$foodSourceFor #$BillJ #$Popcorn) means that #$Popcorn is
            a #$foodSourceFor Bill, i.e., Bill often eats (instances of) popcorn.</rdfs:comment>
        <guid>bd58868b-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Organism-Whole"/>
        <daml:range rdf:resource="#TemporalStuffType"/>
    </daml:Property>
    <Quantifier rdf:ID="forAll">
        <rdfs:label>for all</rdfs:label>
        <rdfs:comment>The predicate #$forAll is Cyc&apos;s version of
            the universal quantifier of predicate calculus (i.e., the
            operator symbolized in one common notation by an upside-down
            `A&apos;).  As its two arguments, #$forAll takes a variable
            (which is an element of #$ELVariable) and an element of
            #$ELSentence-Assertible, respectively.  (#$forAll VAR FORM)
            means that FORM is true whenever all the occurrences of the
            variable VAR in the formula FORM are replaced by any object
            in the Cyc universe.  For example, to say that every person
            is a mammal, we could assert: (#$forAll ?X (#$implies (#$isa
            ?X #$Person) (#$isa ?X #$Mammal))).  In addition, CycL
            follows a convention that allows #$forAll to be omitted;
            that is, when no explicit quantifier is used, seemingly
            unbound variables inside formulas are assumed to be
            universally quantified.  With that convention, the sample
            assertion could be written more compactly as: (#$implies
            (#$isa ?X #$Person) (#$isa ?X #$Mammal)).
            [Developer-level footnote:  There are many `flavors&apos; of
            quantification `on the market&apos; these days; here is how
            the Cyc system currently handles axioms that involve
            #$forAll:    When processing an FI-ASK about whether an
            assertion of the form (#$forAll VAR FORM) is true or not,
            Cyc determines extensionally whether or not any known VAR
            (anything in the knowledge base) could make FORM false.
            When processing an FI-PROVE about whether an assertion of
            the form (#$forAll VAR FORM) is true or not, Cyc tries to
            construct an intensional proof (at least at a default-true
            level) that FORM must be true regardless of what VAR is ever
            inserted therein.    When processing an FI-ASSERT in which a
            user or program tells Cyc that an assertion of the form
            (#$forAll VAR FORM) is true, Cyc records it intensionally so
            that it can later serve as part of an intensional proof,
            when some future FI-PROVE request is processed.]</rdfs:comment>
        <guid>bd5880f7-9c29-11b1-9dad-c379636f7270</guid>
    </Quantifier>
    <daml:Property rdf:ID="forceActingOnObject">
        <rdfs:label>force acting on object</rdfs:label>
        <rdfs:comment>#$forceActingOnObject is a predicate relating an
            instance of #$PartiallyTangible to any force which changes
            its direction of travel or the speed at which it is traveling.</rdfs:comment>
        <guid>bd58b8b2-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#PartiallyTangible"/>
    </daml:Property>
    <daml:Property rdf:ID="forceCapacity">
        <rdfs:label>force capacity</rdfs:label>
        <rdfs:comment>The slot describing the capability of an animal to
            exert force.</rdfs:comment>
        <guid>bd58bf41-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasAttributes"/>
        <daml:domain rdf:resource="#BiologicalLivingObject"/>
        <daml:range rdf:resource="#Strength"/>
    </daml:Property>
    <daml:Property rdf:ID="formedByConfluenceOf">
        <rdfs:label>formed by confluence of</rdfs:label>
        <rdfs:comment>(formedByConfluenceOf WATER1 WATER2) means that
            WATER1 is formed, or increased in volume, by the confuence
            of the rivers including RIVER2 which merge to form RIVER1.</rdfs:comment>
        <guid>bd588c27-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasAsTributary"/>
        <daml:domain rdf:resource="#River"/>
        <daml:range rdf:resource="#River"/>
    </daml:Property>
    <daml:Property rdf:ID="formulaRelation">
        <rdfs:label>formula relation</rdfs:label>
        <rdfs:comment>(#$formulaRelation FORMULA RELATION) means that
            RELATION is the term in the arg0 position of the formula,
            FORMULA.  If FORMULA is a nat, then RELATION is an instance
            of #$Function-Denotational; while if FORMULA is a gaf,
            RELATION is an instance of #$Predicate.</rdfs:comment>
        <guid>bf68e241-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#CycLFormula"/>
        <daml:range rdf:resource="#Relation"/>
    </daml:Property>
    <daml:Property rdf:ID="fourWayJunctionInSystem">
        <rdfs:label>four way junction in system</rdfs:label>
        <rdfs:comment>(#$fourWayJunctionInSystem JUNCT SYS) means that
            JUNCT is a 4-way junction in the specified #$PathSystem SYS.
            (See also #$FourWayJunctionOfPaths for the general case.)
            Formally, a 4-way junction in SYS is any point (actually, a
            node) X in SYS such that either there are exactly 4 links
            and no loops in SYS that X is on, or there are exactly 2
            loops and no links in SYS that X is on, or there are exactly
            2 links and 1 loop in SYS that X is on.  See #$junctionInSystem.</rdfs:comment>
        <guid>be3e5a74-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#junctionInSystem"/>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
        <daml:range rdf:resource="#PathSystem"/>
    </daml:Property>
    <daml:Property rdf:ID="fragilityOfObject">
        <rdfs:label>fragility of object</rdfs:label>
        <rdfs:comment>(#$fragilityOfObject OBJ DEGREE) means that the
            tangible object OBJ has this DEGREE of #$Fragility.  The
            higher the fragility, the more easily the object can be broken.</rdfs:comment>
        <guid>bd58f1cb-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasAttributes"/>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#Fragility"/>
    </daml:Property>
    <daml:Property rdf:ID="freezingPoint">
        <rdfs:label>freezing point</rdfs:label>
        <rdfs:comment>(#$freezingPoint STUFF TEMP) means that TEMP is
            the temperature at which the substance STUFF changes from
            having the attribute #$LiquidStateOfMatter to
            #$SolidStateOfMatter (when sufficient energy is output to
            lower STUFF&apos;s temperature through this point).  Note
            that the freezing point of most substances is
            context-dependent (e.g., based on altitude and other factors.)</rdfs:comment>
        <guid>bd58b201-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#Temperature"/>
    </daml:Property>
    <daml:Property rdf:ID="frequencyOfSignal">
        <rdfs:label>frequency</rdfs:label>
        <rdfs:comment>(#$frequencyOfSignal WAVE FREQ) means that the
            #$WavePropagation event WAVE consists of waves that occur at
            intervals of FREQ.  FREQ is a measure of #$Frequency
            generally expressed as cycles per unit of time; frequency of
            electromagnetic radiation is standardly measured in #$Hertz.</rdfs:comment>
        <guid>c10096a8-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#WavePropagation"/>
        <daml:range rdf:resource="#Frequency"/>
    </daml:Property>
    <daml:Property rdf:ID="friends">
        <rdfs:label>friend</rdfs:label>
        <rdfs:comment>(#$friends X Y) means X and Y are friends;
            typically they have a close relationship of reciprocal care,
            concern, respect, enjoyment, and mutual regard based on
            emotional (and/or ideological and intellectual)
            compatibility, shared interests, etc. Note:  In the cases of
            assertions of two non-human animals being friends, there may
            be some anthropomorphism going on.</rdfs:comment>
        <guid>bd58b64b-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#likesAsFriend"/>
    </daml:Property>
    <daml:Property rdf:ID="fromLocation">
        <rdfs:label>origin</rdfs:label>
        <rdfs:comment>The predicate #$fromLocation is used to indicate
            the starting point of a particular movement.
            (#$fromLocation MOVE LOC) means that LOC is where the
            #$objectMoving in the #$Movement-TranslationEvent MOVE is
            found at the beginning of MOVE and is where it begins this
            motion.  The #$objectMoving may or may not be #$Stationary
            at LOC.  If MOVE is a single-pathway translation (see
            #$Translation-SingleTrajectory), then every #$objectMoving
            is found at LOC when MOVE starts.  If MOVE has multiple
            movers and multiple pathways (see
            #$Translation-MultiTrajectory), then at least some of the
            #$objectMoving(s) can be found at LOC at the start of MOVE.
            If MOVE is a flow (including rivers flowing, winds blowing,
            tornado, typhoon, clouds moving and even air filling your
            lungs when you take breath, see #$Translation-Flow), then at
            least some portion of the fluid #$objectMoving can be found
            at LOC at the start of MOVE.  See also
            #$motionPathway-Complete, #$pathConnects.</rdfs:comment>
        <guid>bd58e223-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#preActors"/>
        <daml:domain rdf:resource="#Translocation"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:Property>
    <daml:Property rdf:ID="fromOrientation">
        <rdfs:label>from orientation</rdfs:label>
        <rdfs:comment>This predicate indicates, for the particular
            rotational motion ROT, the orientation that the
            #$objectMoving in that event has at the beginning of that
            motion.  (#$fromOrientation ROT ORIENT) means that when ROT
            begins, the object that moves in ROT has the position
            ORIENT, with respect to the current frame of reference.  For
            example, the object may have a #$HorizontalOrientation,
            #$VerticalOrientation, #$RightSideUp orientation, etc.  See
            also #$toOrientation, #$OrientationAttribute.</rdfs:comment>
        <guid>bf0f8bfb-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Movement-Rotation"/>
        <daml:range rdf:resource="#OrientationAttribute"/>
    </daml:Property>
    <daml:Property rdf:ID="fromPossessor">
        <rdfs:label>from possessor</rdfs:label>
        <rdfs:comment>This predicate identifies an #$Agent who loses
            some right to use an object.  (#$fromPossessor LOSS AGENT)
            means that AGENT enjoys some #$UserRightsAttribute over the
            #$objectOfPossessionTransfer at the start of the
            #$LosingUserRights event LOSS, but no longer has that
            particular #$UserRightsAttribute after the LOSS ends.</rdfs:comment>
        <guid>bd598482-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#preActors"/>
        <daml:domain rdf:resource="#LosingUserRights"/>
        <daml:range rdf:resource="#Agent"/>
    </daml:Property>
    <daml:Property rdf:ID="fromState">
        <rdfs:label>from state</rdfs:label>
        <rdfs:comment>This predicate is used in connection with
            #$IntrinsicStateChangeEvent, to identify the
            #$AttributeValue that a thing has before the change.
            (#$fromState EVENT VALUE) means that immediately prior to
            EVENT (which is the intrinsic-state-changing action), the
            thing that is changed in EVENT has the value VALUE for the
            relevant attribute (and during the EVENT the thing changes
            from that to another value for that attribute).  For
            example, prior to any X which is a
            #$TurningOnAnElectricalSwitch, the switch involved has
            (#$fromState X #$DeviceOff).</rdfs:comment>
        <guid>bd623b07-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#IntrinsicStateChangeEvent"/>
        <daml:range rdf:resource="#AttributeValue"/>
    </daml:Property>
    <daml:UnambiguousProperty rdf:ID="fruitOfType">
        <rdfs:label>fruit of type</rdfs:label>
        <rdfs:comment>(#$fruitOfType PLANT-TYPE FRUIT-TYPE) means that
            FRUIT-TYPE is the type of #$Fruit that PLANT-TYPE bears.</rdfs:comment>
        <guid>bf6afed2-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
    </daml:UnambiguousProperty>
    <daml:UnambiguousProperty rdf:ID="genKeyword">
        <rdfs:label>gen keyword</rdfs:label>
        <rdfs:comment>(#$genKeyword ?THING :KEYWORD) states that the
            constant ?THING has an NL keyword representation as
            :KEYWORD, though other keywords may exist for that constant.</rdfs:comment>
        <guid>c0f45a9c-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#CycLReifiableDenotationalTerm"/>
        <daml:range rdf:resource="#SubLKeyword"/>
    </daml:UnambiguousProperty>
    <daml:UnambiguousProperty rdf:ID="genPreferredKeyword">
        <rdfs:label>gen preferred keyword</rdfs:label>
        <rdfs:comment>(#$genPreferredKeyword ?THING :KEYWORD) states
            that the constant ?THING has a preferred NL keyword
            representation as :KEYWORD, though other keywords may exist
            for that constant. Other such constants are indicated with
            #$genKeyword assertions. Also, (#$genPreferredKeyword ?THING
            :KEYWORD) should imply (#$genKeyword ?THING :KEYWORD). There
            should only be one (#$genPreferredKeyword ?THING :KEYWORD)
            assertion for a given ?THING.</rdfs:comment>
        <guid>c0d83ef1-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#genKeyword"/>
        <daml:domain rdf:resource="#CycLReifiableDenotationalTerm"/>
        <daml:range rdf:resource="#SubLKeyword"/>
    </daml:UnambiguousProperty>
    <daml:Property rdf:ID="genlAttributes">
        <rdfs:label>genl attributes</rdfs:label>
        <rdfs:comment>(#$genlAttributes S-ATT G-ATT) means that G-ATT is
            a more general attribute than S-ATT.  If we know, for some
            object, THING, (#$hasAttributes THING S-ATT), the system
            will be able to derive (#$hasAttributes THING G-ATT).
            #$genlAttributes is transitive, so (#$genlAttributes A B)
            and (#$genlAttributes B C) lets the system derive
            (#$genlAttributes A C).  For example, if a certain portion
            of the atmosphere has the attribute #$Hazy, Cyc can conclude
            through its #$genlAttributes knowledge that there is only
            moderate #$Visibility there.</rdfs:comment>
        <guid>bd588072-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#quantityIntersects"/>
        <daml:domain rdf:resource="#AttributeValue"/>
        <daml:range rdf:resource="#AttributeValue"/>
    </daml:Property>
    <daml:Property rdf:ID="genlInverse">
        <rdfs:label>genl inverse</rdfs:label>
        <rdfs:comment>(#$genlInverse NARROW BROAD) means that binary
            predicate BROAD is a more general version of binary
            predicate NARROW, but with the arguments reversed. Thus
            (NARROW ARG1 ARG2) implies (BROAD ARG2 ARG1).       Note:
            Notice that if two predicates are true inverses of each
            other, such as the pair parents and children, or the pair
            greater-than and less-than, then each member of the pair
            will be a #$genlInverse of the other.  Creating two
            predicates like that is considered poor KEing style,
            however, because in that case the second predicate in the
            pair adds no new `expressive power&apos; over what the first
            already provides.  One might decide to write an end-user
            interface which acts as though both predicates exist, so
            that the user doesn&apos;t have to remember which is `the
            real one&apos; in the system, but there is no gain at the
            representation language level to having both predicates.</rdfs:comment>
        <guid>bd61ec34-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Property"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Property"/>
    </daml:Property>
    <daml:Property rdf:ID="genlMt">
        <rdfs:label>genl mt</rdfs:label>
        <rdfs:comment>(#$genlMt SPEC-MICROTHEORY GENL-MICROTHEORY) means
            that all the assertions true in the #$Microtheory
            GENL-MICROTHEORY are also true in the #$Microtheory
            SPEC-MICROTHEORY.  Thus a query posed in SPEC-MICROTHEORY
            will have access to all the assertions asserted in
            GENL-MICROTHEORY - and, in fact, all the assertions asserted
            in any #$Microtheory MT such that (#$genlMt GENL-MICROTHEORY
            MT), and so forth.  There is a special #$Microtheory, the
            #$BaseKB, which is such that for every #$Microtheory MT, it
            is the case that (#$genlMt MT #$BaseKB).  (Note that for
            technical reasons, all #$genlMt assertions should be made in
            the #$BaseKB.)</rdfs:comment>
        <guid>bd5880e5-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Microtheory"/>
        <daml:range rdf:resource="#Microtheory"/>
    </daml:Property>
    <daml:Property rdf:ID="genlPreds">
        <rdfs:label>genl preds</rdfs:label>
        <rdfs:comment>(#$genlPreds NARROW BROAD) means that predicate
            BROAD is a more general version of predicate NARROW; e.g.,
            (#$genlPreds #$biologicalMother #$biologicalParents),
            (#$genlPreds #$greaterThan #$greaterThanOrEqualTo).
            (#$genlPreds NARROW BROAD) is shorthand for the axiom schema
            (NARROW ARG1 ... ARGN) =&gt; (BROAD ARG1 ... ARGN).  See
            also #$genlInverse, which can handle cases where NARROW and
            BROAD are both binary but their order of arguments is
            reversed.  If the #$arity of NARROW differs from the #$arity
            of BROAD (or their order of arguments differs and
            they&apos;re not binary), then we just assert the whole
            appropriate axiom into the Cyc knowledge base; of course,
            such axioms are absent from the public release of the Upper
            Cyc Ontology.</rdfs:comment>
        <guid>bd5b4951-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Predicate"/>
        <daml:range rdf:resource="#Predicate"/>
    </daml:Property>
    <daml:Property rdf:ID="genls">
        <rdfs:label>genls</rdfs:label>
        <rdfs:comment>(#$genls COL SUPER) means that SUPER is one of the
            supersets of COL.  Both arguments must be elements of
            #$Collection.  Cyc knows that #$genls is transitive; that
            is, if one asserts (#$genls COL SUPER) and (#$genls SUPER
            BIGGER), Cyc will infer that (#$genls COL BIGGER).
            Therefore, in practice one only manually asserts a small
            fraction of the #$genls assertions --- the vast majority are
            inferred automatically by Cyc.</rdfs:comment>
        <guid>bd58810e-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#subsetOf"/>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
    </daml:Property>
    <daml:Property rdf:ID="geographicalSubRegions">
        <rdfs:label>geographical sub regions</rdfs:label>
        <rdfs:comment>(#$geographicalSubRegions SUPER SUB) means that
            SUPER and SUB are both elements of #$GeographicalRegion, and
            the area SUB lies wholly within the region SUPER (see
            #$inRegion).  SUPER may or may not completely surround SUB
            (i.e., they may share an outer boundary, as do Texas and the
            USA in the #$WorldGeographyDualistMt).  To relate two
            instances of #$GeopoliticalEntity, use the predicate,
            #$geopoliticalSubdivision, if it applies.  If either
            argument of this predicate is to be an instance of
            #$GeopoliticalEntity, the assertion must be made in
            #$WorldGeographyDualistMt or a specMt thereof.  See also
            #$surroundsHorizontally and #$bordersOn.</rdfs:comment>
        <guid>bd58cd89-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#subRegions"/>
        <daml:subPropertyOf rdf:resource="#physicalParts"/>
        <daml:domain rdf:resource="#GeographicalRegion"/>
        <daml:range rdf:resource="#GeographicalRegion"/>
    </daml:Property>
    <daml:Property rdf:ID="gerund">
        <rdfs:label>gerund</rdfs:label>
        <rdfs:comment>(#$gerund WORD STRING) means that STRING is the
            gerund form of WORD. The regular gerund is formed from the
            infinitive verb form with an `ing&apos; suffix. Verbs in the
            Cyc lexicon will have a #$gerund entry only if they are
            irregular. Regular forms are generated by the morphology component.</rdfs:comment>
        <guid>bd67b170-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#LexicalWord"/>
        <daml:range rdf:resource="#CharacterString"/>
    </daml:Property>
    <daml:Property rdf:ID="goals">
        <rdfs:label>purpose</rdfs:label>
        <rdfs:comment>(#$goals AGT G) means that the #$Agent AGT has the
            #$Goal G.  That is, G is one of their goals.  This implies
            (#$desires AGT G), but #$goals is stronger than #$desires,
            in that an agent will take action (or at least intend to
            take action, and plan accordingly) to make their #$goals
            true, while their #$desires may include things s/he merely
            wishes were true, but about which s/he has no intention of
            undertaking action.  Additionally, #$goals are generally
            about the future, whereas #$desires can be about the
            present, future, or even the past.  For further information
            about goals, see #$Goal and #$goalCategoryForAgent.  Also
            see #$intends.</rdfs:comment>
        <guid>bd5880d1-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#desires"/>
        <daml:domain rdf:resource="#IntelligentAgent"/>
        <daml:range rdf:resource="#ELSentence-Assertible"/>
    </daml:Property>
    <daml:Property rdf:ID="governedByAgreement">
        <rdfs:label>governed by agreement</rdfs:label>
        <rdfs:comment>The predicate #$governedByAgreement relates an
            event to an agreement that stipulates something with respect
            to it, such as certain conditions that are to hold during
            the event, or whether the event should or should not occur.
            (#$governedByAgreement EVT AGR) means that some aspects of
            the instance of #$HumanActivity EVT are controlled by, or
            &apos;under the jurisdiction of&apos;, the instance of
            #$Agreement AGR.  For example, a #$BuyingGroup may have
            #$SalesContracts with its #$suppliers that specify what
            prices may be charged for goods bought by members of the
            group during the agreement period.  But note that an
            event&apos;s being governed by an agreement does not entail
            that the event conforms to what the agreement stipulates: an
            act that violates the agreement is still governed by it.</rdfs:comment>
        <guid>c10adbcb-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#preActors"/>
        <daml:domain rdf:resource="#HumanActivity"/>
        <daml:range rdf:resource="#Agreement"/>
    </daml:Property>
    <daml:UnambiguousProperty rdf:ID="government">
        <rdfs:label>government</rdfs:label>
        <rdfs:comment>The predicate #$government identifies the
            political entity which has governing authority over a
            particular geopolitical region.  (#$government GEOPOL GOV)
            means that the #$RegionalGovernment GOV is the government of
            the #$GeopoliticalEntity GEOPOL.  That is, GOV claims to be
            the government of GEOPOL, is recognized as such at least
            informally, and effectively functions as such --
            administering the internal and external affairs of GEOPOL --
            whether or not GOV has formal diplomatic recognition.
            Effectively functioning as a #$government includes having
            the power to settle disputes, collect revenue, and provide
            services.  Examples include the
            #$UnitedStatesFederalGovernment, the #$CityCouncilOfAustin
            (TX), and all of the entities returned by the Cyc function
            #$GovernmentFn (q.v.) -- e.g., (#$GovernmentFn
            #$Taiwan-RepublicOfChina), (#$GovernmentFn #$Russia).</rdfs:comment>
        <guid>c10aef77-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#GeopoliticalEntity"/>
        <daml:range rdf:resource="#RegionalGovernment"/>
    </daml:UnambiguousProperty>
    <daml:Property rdf:ID="governmentType">
        <rdfs:label>government type</rdfs:label>
        <rdfs:comment>The predicate #$governmentType indicates what kind
            of system of government a geopolitical entity has.
            (#$governmentType REGION GOVSYSTEM) means that the
            government of the #$GeopoliticalEntity REGION is an element
            of the #$SystemOfGovernment type denoted by GOVSYSTEM.  For
            example, the #$governmentType of the #$UnitedStatesOfAmerica
            is a #$FederalRepublic and a #$RepresentativeDemocracy.</rdfs:comment>
        <guid>bd5895c8-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasAttributes"/>
        <daml:domain rdf:resource="#GeopoliticalEntity"/>
        <daml:range rdf:resource="#SystemOfGovernment"/>
    </daml:Property>
    <daml:Property rdf:ID="grandchildren">
        <rdfs:label>grandchild</rdfs:label>
        <rdfs:comment>(#$grandchildren OLDER YOUNGER) means YOUNGER is
            the biological grandchild of OLDER.</rdfs:comment>
        <guid>bd5890fa-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#positiveVestedInterest"/>
        <daml:subPropertyOf rdf:resource="#relatives"/>
        <daml:domain rdf:resource="#Animal"/>
        <daml:range rdf:resource="#Animal"/>
    </daml:Property>
    <daml:Property rdf:ID="granuleOfSpatialStuff">
        <rdfs:label>granule of spatial stuff</rdfs:label>
        <rdfs:comment>(#$granuleOfSpatialStuff STUFFTYPE OBJTYPE) means
            that the collection STUFFTYPE has as its spatial granules
            (or granularity level) the collection OBJTYPE. If some
            collection is spatially stuff-like, that means that the
            instances of that collection can be divided spatially, and
            the physical portions remaining will still be instances of
            that collection; e.g., a physical portion of some instance
            of #$SandMob is still sand (cf. #$ExistingStuffType). Such
            division cannot go on indefinitely in this way, however:
            eventually, division of something spatially stuff-like will
            result in the object-like &apos;granules&apos; out of which
            the stuff-like thing is composed. For instances,  division
            of sand would eventually result in individual grains of
            sand, division of water would eventually get down to
            individual molecules of water, etc. At this level of
            division or below, the remaining physical portions do NOT
            count as instances of the stuff-type from which they were
            divided. This may seem counter-intuitive: isn&apos;t an
            individual molecule of water still water? Perhaps in some
            sense, but since the individual granules of a stuff
            typically do NOT have most of the properties that the groups
            made of the granules have (including the property of being
            stuff-like), we do not count the individual granules as
            instances of the collection of which they are granules
            (O&apos;Keefe, 7/18/1997).</rdfs:comment>
        <guid>bd58c3c4-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#disjointWith"/>
        <daml:domain rdf:resource="#ExistingStuffType"/>
        <daml:range rdf:resource="#ExistingObjectType"/>
    </daml:Property>
    <daml:Property rdf:ID="granuleOfTime">
        <rdfs:label>granule of time</rdfs:label>
        <rdfs:comment>(#$granuleOfTime STUFFTYPE OBJTYPE) means   that
            the collection STUFFTYPE has as its temporal granules (or
            granularity level) the   collection OBJTYPE. If some
            collection is temporally stuff-like, that means that   the
            instances of that collection can be divided temporally, and
            the temporal slices   remaining will still be instances of
            that collection; e.g., a time slice of   some instance of
            #$Person is still a person, and a temporal slice of a
            walking process  is still a walking process (cf.
            #$TemporalStuffType). Such division cannot   always go on
            indefinitely, however: eventually, division of something
            temporally   stuff-like will result in the   temporally
            object-like &apos;granules&apos; out of which the stuff-like
            thing is composed.   For instances,   division of a walking
            process would eventually result in individual steps. At this
            level   of division or below, the remaining temporal slices
            do NOT count as instances of   the temporal stuff-type from
            which they were divided. This may seem counter-intuitive,
            but since the   individual temporal granules of a temporal
            stuff typically do NOT have most of the   properties that
            the groups made of the granules have (including the property
            of being   temporally stuff-like),  we do not count the
            individual granules as instances of the   collection of
            which they are granules. See also #$granuleOfSpatialStuff.</rdfs:comment>
        <guid>bd58da24-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#disjointWith"/>
        <daml:domain rdf:resource="#TemporalStuffType"/>
        <daml:range rdf:resource="#TemporalObjectType"/>
    </daml:Property>
    <daml:Property rdf:ID="greaterThan">
        <rdfs:label>greater than</rdfs:label>
        <rdfs:comment>The predicate #$greaterThan is Cyc&apos;s
            representation of the `greater than&apos; ( &gt; ) relation
            in mathematics, adapted to use with Cyc&apos;s scalars,
            which include quantitative intervals as well as point
            values.  Formally, there are two conditions under which
            (#$greaterThan SI-1 SI-2) is true, for two elements of
            #$ScalarInterval: (1) (#$followingValue SI-1 SI-2) is true,
            or (2) the minimum of SI-1 is greater than the maximum of
            SI-2.  Note that `A is less than B&apos; is expressed in
            CycL as (#$greaterThan B A).</rdfs:comment>
        <guid>bd5880b2-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#greaterThanOrEqualTo"/>
        <daml:domain rdf:resource="#ScalarInterval"/>
        <daml:range rdf:resource="#ScalarInterval"/>
    </daml:Property>
    <daml:Property rdf:ID="greaterThanOrEqualTo">
        <rdfs:label>greater than or equal to</rdfs:label>
        <rdfs:comment>The predicate #$greaterThanOrEqualTo is Cyc&apos;s
            representation of the `greater than or equal to&apos; (
            &gt;= ) relation in mathematics, adapted to use with
            Cyc&apos;s scalars, which include quantitative intervals as
            well as point values.  (See #$ScalarInterval.) Formally,
            there are three disjunctive conditions under which
            (#$greaterThanOrEqualTo SI-1 SI-2) is true, for two elements
            of #$ScalarInterval: (1) (#$equals SI-1 SI-2) is true; (2)
            (#$followingValue SI-1 SI-2) is true; or (3) the minimum of
            SI-1 is greater than or equal to the maximum of SI-2.  Note
            that `A is less than or equal to B&apos; is expressed in
            CycL as (#$greaterThanOrEqualTo B A).</rdfs:comment>
        <guid>bd5880af-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#ScalarInterval"/>
        <daml:range rdf:resource="#ScalarInterval"/>
    </daml:Property>
    <daml:Property rdf:ID="groundOf">
        <rdfs:label>ground of</rdfs:label>
        <rdfs:comment>(#$groundOf OBJ GROUND) means that GROUND is the
            stationary surface on which OBJ is located and possibly supported.</rdfs:comment>
        <guid>c0f2aea3-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#Surface-Physical"/>
    </daml:Property>
    <daml:Property rdf:ID="groupCardinality">
        <rdfs:label>group cardinality</rdfs:label>
        <rdfs:comment>The predicate #$groupCardinality is used to
            indicate the total number of members there are in a
            particular group.  (#$groupCardinality GROUP INTEGER) means
            that the number of members in the #$Group GROUP is INTEGER.
            For example, the #$groupCardinality of the
            #$SevenWondersOfTheAncientWorld is 7.  Cyc infers that the
            #$groupCardinality of any group that is a pair is 2, and
            that of a dozen is 12.</rdfs:comment>
        <guid>bd58b9c3-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Group"/>
    </daml:Property>
    <daml:Property rdf:ID="groupMemberType">
        <rdfs:label>group member type</rdfs:label>
        <rdfs:comment>The predicate #$groupMemberType is used in
            characterizing the members of a particular group.
            (#$groupMemberType GROUP TYPE) means that all of
            GROUP&apos;s members are elements of the collection TYPE.
            For example, to state that the #$groupMembers of the Austin
            City Council are humans, one would write (#$groupMemberType
            AustinCityCouncil #$Person).  The members of a particular
            group might be characterized in more than one way; e.g., a
            Hispanic Business Council may have both the
            #$groupMemberType #$EthnicGroupOfHispanics and the
            #$groupMemberType #$BusinessPerson (provided that all of its
            members are Hispanic business people).  For
            &apos;typical&apos; or &apos;expected&apos; characteristics
            of members, see also #$memberTypes and #$typeHasTypicalMemberTypes.</rdfs:comment>
        <guid>bd58ef50-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Group"/>
        <daml:range rdf:resource="#ObjectType"/>
    </daml:Property>
    <daml:Property rdf:ID="groupMembers">
        <rdfs:label>group members</rdfs:label>
        <rdfs:comment>This predicate relates a group (see #$Group) to
            its individual members.  (#$groupMembers GROUP MEMBER) means
            that MEMBER is a member of GROUP.  For example,
            #$PyramidOfCheops is a group-member of the
            #$SevenWondersOfTheAncientWorld, and #$BillClinton is a
            group-member of the #$DemocraticParty.</rdfs:comment>
        <guid>bd58fe04-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <daml:subPropertyOf rdf:resource="#structureMembers"/>
        <daml:domain rdf:resource="#Group"/>
        <daml:range rdf:resource="#TemporalThing"/>
    </daml:Property>
    <daml:Property rdf:ID="hangsAround">
        <rdfs:label>hangs around</rdfs:label>
        <rdfs:comment>(#$hangsAround ?loop ?obj) means that ?loop is a
            semi-flexible loop, looped around a piece of ?obj.  ?loop is
            supported by gripping friction and/or ?loop&apos;s limited
            ability to elongate as it moves down on ?obj.  See also #$hangsFrom.</rdfs:comment>
        <guid>c0fbb11f-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hangsFrom"/>
        <daml:subPropertyOf rdf:resource="#on-Physical"/>
        <daml:subPropertyOf rdf:resource="#touches"/>
        <daml:domain rdf:resource="#SolidTangibleThing"/>
        <daml:range rdf:resource="#SolidTangibleThing"/>
    </daml:Property>
    <daml:Property rdf:ID="hangsFrom">
        <rdfs:label>hang</rdfs:label>
        <rdfs:comment>(#$hangsFrom OBJ1 OBJ2) means that OBJ1 is
            suspended from OBJ2, either directly touching it (like a
            weight attached to a line) or through some intermediary
            object (like a weight suspended from the ceiling via a
            hook).  All of the OBJ1&apos;s weight of is #$supportedBy
            OBJ2.  Most if not all of OBJ1 is below OBJ2; certainly, the
            center of OBJ1 is below the connection point. If pushed,
            OBJ1 will undergo a #$Swinging.</rdfs:comment>
        <guid>c0fbb177-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#supportedBy"/>
        <daml:subPropertyOf rdf:resource="#above-Directly"/>
        <daml:domain rdf:resource="#SolidTangibleThing"/>
        <daml:range rdf:resource="#SolidTangibleThing"/>
    </daml:Property>
    <daml:Property rdf:ID="hardnessOfObject">
        <rdfs:label>hardness of object</rdfs:label>
        <rdfs:comment>(#$hardnessOfObject OBJ DEGREE) means that the
            instance of #$SolidTangibleThing OBJ has this DEGREE of #$Hardness.</rdfs:comment>
        <guid>bd58ae1c-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasAttributes"/>
        <daml:range rdf:resource="#Hardness"/>
    </daml:Property>
    <daml:Property rdf:ID="hasAsTributary">
        <rdfs:label>has as tributary</rdfs:label>
        <rdfs:comment>The predicate #$hasAsTributary is used to indicate
            the tributaries of a particular river.  (#$hasAsTributary
            BIGRIV SMALLRIV) means that BIGRIV has SMALLRIV as one of
            its tributaries.  SMALLRIV flows into BIGRIV.  Examples: the
            #$MississippiRiver has the #$WisconsinRiver, #$OhioRiver,
            #$ArkansasRiver, #$RedRiverOfTexas, and others as its
            tributaries.  Cf. #$formedByConfluenceOf.</rdfs:comment>
        <guid>bd588db4-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#River"/>
        <daml:range rdf:resource="#Stream"/>
    </daml:Property>
    <daml:Property rdf:ID="hasAttributes">
        <rdfs:label>feature</rdfs:label>
        <rdfs:comment>A very general predicate that relates a thing to
            an attribute or property (see #$AttributeValue) that it has.
            (#$hasAttributes THING ATT) means that ATT characterizes
            THING. There are a large number of more specialized
            predicates in CycL that represent more specific ways in
            which an attribute might characterize a thing; such
            predicates should be used instead  of #$hasAttributes when
            possible. Thus #$mainColorOfObject is preferrable to
            #$hasAttributes for stating that a physical object has a
            particular main color. See also #$AttributeType.</rdfs:comment>
        <guid>bd58d1f6-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
        <daml:range rdf:resource="#AttributeValue"/>
    </daml:Property>
    <daml:Property rdf:ID="hasBeliefSystems">
        <rdfs:label>has belief systems</rdfs:label>
        <rdfs:comment>(#$hasBeliefSystems AGT BSYS) means that the
            #$Agent AGT has the belief system BSYS.   E.g.,
            (#$hasBeliefSystems BorisYeltsin #$RussianOrthodoxReligion).</rdfs:comment>
        <guid>bd58ac5a-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#IntelligentAgent"/>
        <daml:range rdf:resource="#BeliefSystem"/>
    </daml:Property>
    <daml:Property rdf:ID="hasClimateType">
        <rdfs:label>has climate type</rdfs:label>
        <rdfs:comment>The predicate #$hasClimateType is used to specify
            the type of climate that occurs in a particular region.
            (#$hasClimateType AREA CLIME) means that the climate in the
            #$GeographicalRegion AREA is of the #$ClimateCycleType
            CLIME; i.e., any individual annual cycle falls under the
            type CLIME.  For example, to describe the climate of
            Houston, we would say: (#$hasClimateType #$CityOfHoustonTX
            #$HumidSubtropicalClimateCycle).  See also
            #$ClimateCycleType, #$AnnualClimateCycle.</rdfs:comment>
        <guid>bd58f3af-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#GeographicalRegion"/>
        <daml:range rdf:resource="#ClimateCycleType"/>
    </daml:Property>
    <daml:Property rdf:ID="hasCommConvention">
        <rdfs:label>has comm convention</rdfs:label>
        <rdfs:comment>(#$hasCommConvention AGENT CONV) means that the
            agent AGENT knows the #$CommunicationConvention CONV and can
            use it to encode or decode information.</rdfs:comment>
        <guid>bd58f9a9-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Agent"/>
        <daml:range rdf:resource="#CommunicationConvention"/>
    </daml:Property>
    <daml:UniqueProperty rdf:ID="hasGender">
        <rdfs:label>gender</rdfs:label>
        <rdfs:comment>(#$hasGender BLO SEX) means that the
            #$BiologicalLivingObject BLO is of the gender SEX.</rdfs:comment>
        <guid>bd58930b-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasAttributes"/>
        <daml:domain rdf:resource="#BiologicalLivingObject"/>
        <daml:range rdf:resource="#GenderOfLivingThing"/>
    </daml:UniqueProperty>
    <daml:UniqueProperty rdf:ID="hasHabitat">
        <rdfs:label>has habitat</rdfs:label>
        <rdfs:comment>The predicate #$hasHabitat is used to relate an
            organism to the region where it lives.  (#$hasHabitat ORG
            REGION) means that the organism ORG lives in the
            #$EcologicalRegion REGION. Typically, REGION will belong to
            one of the subsets of #$EcologicalRegion which represent
            specific biomes (e.g., #$Desert, #$CoralReef).  See also #$residesInRegion.</rdfs:comment>
        <guid>bd58fce4-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Organism-Whole"/>
        <daml:range rdf:resource="#EcologicalRegion"/>
    </daml:UniqueProperty>
    <daml:Property rdf:ID="hasHeadquartersInCountry">
        <rdfs:label>has headquarters in country</rdfs:label>
        <rdfs:comment>The predicate #$hasHeadquartersInCountry
            identifies the country in which a particular organization
            has its headquarters.  (#$hasHeadquartersInCountry ORG
            COUNTRY) means that the #$Organization ORG has its
            world-wide headquarters and place of primary central control
            in the #$Country COUNTRY.</rdfs:comment>
        <guid>bd58c9c3-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Organization"/>
        <daml:range rdf:resource="#Country"/>
    </daml:Property>
    <daml:UnambiguousProperty rdf:ID="hasLevels">
        <rdfs:label>has levels</rdfs:label>
        <rdfs:comment>Levels which are part of this building</rdfs:comment>
        <guid>bd588bf5-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#physicalParts"/>
        <daml:domain rdf:resource="#ConstructionArtifact"/>
        <daml:range rdf:resource="#LevelOfAConstruction"/>
    </daml:UnambiguousProperty>
    <daml:Property rdf:ID="hasMembers">
        <rdfs:label>member</rdfs:label>
        <rdfs:comment>The predicate #$hasMembers relates a particular
            organization to the agents which are members of that
            organization.  This predicate indicates `generic&apos;
            membership, although there may be specialized kinds of
            membership in the same organization.  (#$hasMembers ORG
            AGENT) means that AGENT is a member of the #$Organization
            ORG; typically, membership eligibility is determined by ORG
            and accepted with AGENT&apos;s voluntary affiliation.  For
            example, (#$hasMembers &apos;PeanutsBaseballTeam&apos;
            #$CharlieBrown).  A member may be any #$Agent, including
            other #$Organizations (such as member countries in the
            United Nations).  The truth of an assertion made with
            #$hasMembers may be time-dependent and, if so, should be
            qualified appropriately.  E.g., (#$holdsIn (#$YearFn 1975)
            (#$hasMembers #$UnitedNationsOrganization
            #$Taiwan-RepublicOfChina)) is true, but (#$holdsIn (#$YearFn
            1995) (#$hasMembers #$UnitedNationsOrganization
            #$Taiwan-RepublicOfChina)) is not.--BillJ, June 23, 1997</rdfs:comment>
        <guid>bd58b3fb-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#groupMembers"/>
        <daml:domain rdf:resource="#Organization"/>
        <daml:range rdf:resource="#Agent"/>
    </daml:Property>
    <daml:Property rdf:ID="hasOwnershipIn">
        <rdfs:label>has ownership in</rdfs:label>
        <rdfs:comment>The predicate #$hasOwnershipIn relates a
            particular agent to some thing of which it has part or whole
            ownership.  (#$hasOwnershipIn AGENT SOMETHING) means that
            the #$Agent AGENT owns a part (or possibly the whole) of the
            thing SOMETHING.  For example, Ted Turner #$hasOwnershipIn
            Atlanta&apos;s Olympic Stadium. There may be other owners.
            See also #$legalOwnerOf and #$ownsShare.</rdfs:comment>
        <guid>c10af144-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#positiveVestedInterest"/>
        <daml:domain rdf:resource="#Agent"/>
        <daml:range rdf:resource="#SomethingExisting"/>
    </daml:Property>
    <daml:Property rdf:ID="hasPatients">
        <rdfs:label>has patients</rdfs:label>
        <rdfs:comment>The predicate #$hasPatients represents a
            relationship between a medical professional and a patient
            (including nonhuman animals).  (#$hasPatients MEDIC PATIENT)
            means that the #$MedicalCareProvider MEDIC is treating the
            recipient-of-care PATIENT.  PATIENT may be a human or a
            nonhuman animal.  An assertion using #$hasPatients holds
            only during the time that PATIENT has a condition that is
            being treated by MEDIC; it does not represent or imply a
            long term doctor-patient relationship.</rdfs:comment>
        <guid>bd588f25-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#clients"/>
        <daml:domain rdf:resource="#MedicalCareProvider"/>
        <daml:range rdf:resource="#Animal"/>
    </daml:Property>
    <daml:Property rdf:ID="hasPhysiologicalAttributes">
        <rdfs:label>has physiological attributes</rdfs:label>
        <rdfs:comment>(#$hasPhysiologicalAttributes ?BLO  ?ATT) means
            that the #$BiologicalLivingObject ?BLO has the
            #$PhysiologicalAttribute ?ATT.  #$PhysiologicalAttributes
            are concerned with the physiological functions of a living
            animal, especially with the physical and/or (bio)chemical
            basis of those functions.  However,
            #$PhysiologicalAttributes need not be specified in
            scientific detail.  Many common #$PhysiologicalAttributes
            permit commonsense inference about further features of an
            individual having a certain physiological state or
            condition.  Note that many, perhaps most, assertions made
            with #$hasPhysiologicalAttributes will be time-dependent;
            e.g., an individual person is not #$SexuallyMature
            throughout his or her life, but only during a portion of it.
            Thus, it is necessary to make these assertions only about
            the appropriate temporal #$subAbstrac; one way to do that is
            by using #$holdsIn; e.g., (#$holdsIn (#$YearFn 1820)
            (#$hasPhysiologicalAttributes #$LudwigVanBeethoven #$Deaf)).</rdfs:comment>
        <guid>bd58892e-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasAttributes"/>
        <daml:domain rdf:resource="#BiologicalLivingObject"/>
        <daml:range rdf:resource="#PhysiologicalAttribute"/>
    </daml:Property>
    <daml:Property rdf:ID="hasPortalToRegion">
        <rdfs:label>has portal to region</rdfs:label>
        <rdfs:comment>ARG1 is connected to ARG2 through some type of
            portal (e.g. #$hasPortalToRegion(MyMasterBedroom MyMasterBathroom))</rdfs:comment>
        <guid>bd58b12b-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:Property>
    <daml:Property rdf:ID="hasPreparationAttributes">
        <rdfs:label>has preparation attributes</rdfs:label>
        <rdfs:comment>The predicate #$hasPreparationAttributes is used
            to indicate the way in which a particular food item was
            prepared.  (#$hasPreparationAttributes EDIBLE PREP) means
            the #$EdibleStuff EDIBLE has been processed so that it has
            the food #$PreparationAttribute PREP (e.g., #$Cooked,
            #$Roasted, #$Chilled -- or #$Raw).  For example, a piece of
            #$Toast #$hasPreparationAttributes #$Toasted; any quantity
            of #$Beer that is ready to drink #$hasPreparationAttributes #$Fermented.</rdfs:comment>
        <guid>bd590c73-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasAttributes"/>
        <daml:domain rdf:resource="#EdibleStuff"/>
        <daml:range rdf:resource="#PreparationAttribute"/>
    </daml:Property>
    <daml:Property rdf:ID="hasRooms">
        <rdfs:label>room</rdfs:label>
        <rdfs:comment>The predicate #$hasRooms allows us to say that a
            particular space is within a particular building.
            (#$hasRooms BUILD ROOM) means that ROOM is a room or
            demarcated space which is physically contained within BUILD,
            a #$ConstructionArtifact.  ROOM is not removable from BUILD.
            Spaces that can be identified in this way include lobbies,
            hallways, kitchens, closets, dining rooms, gymnasia,
            studios, stairwells, bedrooms, etc.</rdfs:comment>
        <guid>bd58a23e-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#containsCavity"/>
        <daml:subPropertyOf rdf:resource="#physicalParts"/>
        <daml:subPropertyOf rdf:resource="#internalParts"/>
        <daml:domain rdf:resource="#ConstructionArtifact"/>
        <daml:range rdf:resource="#SpaceInAHOC"/>
    </daml:Property>
    <daml:Property rdf:ID="hasSameEntityAs">
        <rdfs:label>has same entity as</rdfs:label>
        <rdfs:comment>(#$hasSameEntityAs X Y) indicates that X and Y are
            both subabstractions of the same #$Entity.  The unique
            #$myEntity of X is the same as the unique #$myEntity of Y.
            For instance, AlbertEinsteinAsAnAdult and
            AlbertEinsteinWhileAtPrinceton are in this relationship.</rdfs:comment>
        <guid>bd58efb2-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#SomethingExisting"/>
        <daml:range rdf:resource="#SomethingExisting"/>
    </daml:Property>
    <daml:Property rdf:ID="hasWorkers">
        <rdfs:label>employ</rdfs:label>
        <rdfs:comment>The predicate #$hasWorkers relates an
            organization or individual agent to those who work for it in
            any capacity.  (#$hasWorkers  AGENT1 AGENT2) says that the
            second agent regularly   works for the first agent.  This
            includes employees,  managers, soldiers, sailors, certain
            prison inmates, volunteers,  apprentices, slaves, servants,
            sharecroppers, and indentured workers  (as well as other
            organizations, e.g. subcontractors).  The truth of  an
            assertion made with #$hasWorkers is time-relative; e.g.,
            (#$hasWorkers #$Cycorp #$Dexter) is true when asserted for
            the period  (or any sub-period) from May 1989 to July 1994.
            Note that `workers&apos;  in the sense of #$hasWorkers need
            not be #$employees (e.g., they could  be volunteers); cf. #$employees.</rdfs:comment>
        <guid>bd58c1ce-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#worksWith"/>
        <daml:domain rdf:resource="#Agent"/>
        <daml:range rdf:resource="#Agent"/>
    </daml:Property>
    <daml:Property rdf:ID="headquarters">
        <rdfs:label>headquarters</rdfs:label>
        <rdfs:comment>The predicate #$headquarters indicates the
            building(s) where a particular organization has its
            headquarters.  (#$headquarters ORG BUILDING) means that
            BUILDING is the buildings, rooms, offices, etc., which house
            the main administrative and decision-making functions of the
            #$Organization ORG.</rdfs:comment>
        <guid>c0fd57eb-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#physicalQuarters"/>
        <daml:domain rdf:resource="#Organization"/>
        <daml:range rdf:resource="#ConstructionArtifact"/>
    </daml:Property>
    <daml:Property rdf:ID="hears">
        <rdfs:label>overhear</rdfs:label>
        <rdfs:comment>(#$hears AGT OBJ) means that the #$PerceptualAgent
            AGT perceives sounds emananating from or as the result of
            OBJ.  Events such as the shooting of a gun and tangible
            objects such as telephones are things which can emit audible
            sound and thus be perceived auditorily. </rdfs:comment>
        <guid>bd58da29-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#perceives"/>
        <daml:domain rdf:resource="#PerceptualAgent"/>
    </daml:Property>
    <daml:Property rdf:ID="heightOfObject">
        <rdfs:label>height</rdfs:label>
        <rdfs:comment>(#$heightOfObject OBJECT HEIGHT) means that the
            #$Distance from OBJECT&apos;s top boundary to its bottom
            boundary is HEIGHT.  Top and bottom are often determined by
            an object&apos;s intrinsic default orientation, if it has
            one (see #$TopAndBottomSidedObject).  But some objects have
            tops and bottoms -- and thus heights -- only by virtue of
            their spatial relations to certain other objects in their
            environments.  In any case, having a height requires being
            at least two-dimensional (see
            #$TwoOrHigherDimensionalShape).  See also #$lengthOfObject,
            #$widthOfObject, and #$depthOfObject.</rdfs:comment>
        <guid>bd58e044-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#SpatialThing"/>
        <daml:range rdf:resource="#Distance"/>
    </daml:Property>
    <daml:Property rdf:ID="highlyRelevantPredAssertion">
        <rdfs:label>highly relevant pred assertion</rdfs:label>
        <rdfs:comment>(#$highlyRelevantPredAssertion PREDICATE
            ASSERTION) states that the given ASSERTION should be
            heuristically considered highly relevant to inferences
            concluding uses of the given PREDICATE in the current mt.
            See also #$highlyRelevantAssertion and #$highlyRelevantMt.</rdfs:comment>
        <guid>be81b28d-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Predicate"/>
        <daml:range rdf:resource="#CycLAssertion"/>
    </daml:Property>
    <daml:Property rdf:ID="hingedTo">
        <rdfs:label>hinged to</rdfs:label>
        <rdfs:comment>(#$hingedTo OBJ1 OBJ2) means that there is some
            hinge connecting OBJ1 and OBJ2 which allows limited
            rotational motion between them.  That is the only relative
            motion that can occur between them.  The hinged pivoting
            motion may be repeated.  #$hingedTo is noncommittal about
            whether the hinge is a distinct object or is part of OBJ1 or
            OBJ2.  Some edge of OBJ1 adjoins an edge of OBJ2.</rdfs:comment>
        <guid>bd58c7a2-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#rotationallyConnectedTo"/>
        <daml:domain rdf:resource="#SolidTangibleThing"/>
        <daml:range rdf:resource="#SolidTangibleThing"/>
    </daml:Property>
    <daml:Property rdf:ID="holdsIn">
        <rdfs:label>holds in</rdfs:label>
        <rdfs:comment>A formula, without free variables, of the form
            (#$holdsIn TEMP-THING FORMULA) means that the formula
            FORMULA is true at every moment in the temporal extent of
            the #$TemporalThing TEMP-THING (i.e., every moment
            temporally subsumed by TEMP-THING).  For example, the
            assertion (#$holdsIn (#$YearFn 1992) (#$owns Nick Spot))
            expresses that throughout all of the year 1992 Nick owned
            Spot.  Thus it follows, for example, that Nick owned Spot on
            July 5th, 1992 - that is, (#$holdsIn (#$DayFn 5 (#$MonthFn
            #$July (#$YearFn 1992))) (#$owns Nick Spot)).  An assertion
            of the form (#$holdsIn TEMP-THING (PRED ... ARG ...)), with
            ARG a #$TemporalThing, doesn&apos;t in general imply that
            ARG temporally subsumes or even temporally intersects
            TEMP-THING.  For example, (#$holdsIn (#$YearFn 1992)
            (#$awareOf Fred #$GeorgeWashington)) doesn&apos;t imply
            (#$temporallyIntersects #$GeorgeWashington (#$YearFn 1992)).
            However, in the case of certain predicates PRED, temporal
            subsumption of TEMP-THING by ARG will follow (in almost all
            microtheories); see #$CotemporalObjectsSlot,
            #$CotemporalPredicate, and #$contemporaryInArg.  Although
            what constitutes a moment can vary with context, for most
            microtheories explicit considerations of temporal
            granularity (in this sense) don&apos;t come into play.  That
            is, in the case of most microtheories, one almost never has
            to worry about assertions running into problems because of
            time intervals that are too small, and one doesn&apos;t have
            to worry about the possibility of gaps in the fabric of time
            between moments.  Note that the characterization above of
            the meaning of a closed formula (#$holdsIn TEMP-THING
            FORMULA) isn&apos;t meant to imply that one can&apos;t
            quantify into the argument-places of #$holdsIn.
            (Alternatively to using #$holdsIn, we could create a
            microtheory MT one of whose assumptions was a temporal one,
            limiting all axioms to holding throughout 1992 [i.e.,
            (#$holdsInTime-Always MT (#$YearFn 1992))].  Then in that
            microtheory we could simply assert (#$owns Nick Spot).  But
            it would be incorrect to assert (#$owns Nick Spot) in the
            #$BaseKB, since, for example, in 3500 BCE Nick didn&apos;t
            own Spot, nor when Nick was a baby did he own Spot, etc.)
            See also #$holdsSometimeDuring.</rdfs:comment>
        <guid>bd588113-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#TemporalThing"/>
        <daml:range rdf:resource="#ELSentence-Assertible"/>
    </daml:Property>
    <daml:Property rdf:ID="hostOfEvent">
        <rdfs:label>host</rdfs:label>
        <rdfs:comment>(#$hostOfEvent GATHERING AGENT) means that AGENT
            is a host of the #$SocialGathering GATHERING.</rdfs:comment>
        <guid>c0fd682a-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#socialParticipants"/>
        <daml:subPropertyOf rdf:resource="#preActors"/>
        <daml:domain rdf:resource="#SocialGathering"/>
        <daml:range rdf:resource="#Agent"/>
    </daml:Property>
    <daml:Property rdf:ID="hungerLevelOf">
        <rdfs:label>hunger level of</rdfs:label>
        <rdfs:comment>The predicate #$hungerLevelOf is used to express
            how hungry an #$Animal is.  The first argument is a
            #$LevelOfHunger (q.v.):  for instance, #$Hungry, #$Starving,
            #$Stuffed.  The second argument is the #$Animal who feels
            hunger at this level.</rdfs:comment>
        <guid>bd58d448-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#LevelOfHunger"/>
        <daml:range rdf:resource="#Animal"/>
    </daml:Property>
    <daml:Property rdf:ID="iboCreated">
        <rdfs:label>ibo created</rdfs:label>
        <rdfs:comment>The predicate #$iboCreated is used to link a
            particular information bearing object (IBO) to the event in
            which it is created.  (#$iboCreated CREATION IBO) means that
            the #$InformationBearingObject IBO is created in the event
            CREATION.  For example, my copy of today&apos;s `Austin
            American-Statesman&apos; morning paper was created during
            the previous night&apos;s paper-publishing event.</rdfs:comment>
        <guid>bd62daa1-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#outputsCreated"/>
        <daml:subPropertyOf rdf:resource="#ibtGenerated"/>
        <daml:domain rdf:resource="#IBOCreation"/>
        <daml:range rdf:resource="#InformationBearingObject"/>
    </daml:Property>
    <daml:Property rdf:ID="ibtGenerated">
        <rdfs:label>ibt generated</rdfs:label>
        <rdfs:comment>The predicate #$ibtGenerated is used to link a
            particular information bearing thing (IBT) to the event in
            which it is created.  (#$ibtGenerated GEN IBT) means that
            the #$InformationBearingThing IBT comes about, happens, or
            comes into existence in or as an immediate consequence of
            the event GEN.  See also #$IBTGeneratedFn.</rdfs:comment>
        <guid>beacbd12-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#informationDestination"/>
        <daml:domain rdf:resource="#IBTGeneration"/>
        <daml:range rdf:resource="#InformationBearingThing"/>
    </daml:Property>
    <daml:Property rdf:ID="illuminationLevel">
        <rdfs:label>illumination</rdfs:label>
        <rdfs:comment>(#$illuminationLevel LOC DEGREE) indicates how
            brightly illuminated the location LOC is.  Higher values of
            DEGREE mean greater light intensity.</rdfs:comment>
        <guid>bd58e26a-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasAttributes"/>
        <daml:domain rdf:resource="#HumanlyOccupiedSpatialObject"/>
        <daml:range rdf:resource="#LightIntensity"/>
    </daml:Property>
    <LogicalConnective rdf:ID="implies">
        <rdfs:label>implies</rdfs:label>
        <rdfs:comment>The predicate #$implies represents the material
            implication relation in Cyc.  #$implies is a logical
            connective taking two arguments, each of which must be an
            element of #$ELSentence-Assertible.   (#$implies ANTE
            CONSEQ) means that either the formula ANTE is false, or the
            formula CONSEQ is true (possibly both); equivalently, it is
            not the case that ANTE is true and CONSEQ is false.  Cyc
            assertions that begin with #$implies are used during
            inference, both in modus ponens and modus tollens.</rdfs:comment>
        <guid>bd5880f8-9c29-11b1-9dad-c379636f7270</guid>
    </LogicalConnective>
    <daml:Property rdf:ID="in-Among">
        <rdfs:label>in - among</rdfs:label>
        <rdfs:comment>(#$in-Among OBJ GROUP) means that the tangible
            thing OBJ is physically located within the spatial cluster
            GROUP, which is composed of individuals.  OBJ may (but need
            not) be a member of GROUP.  OBJ is spatially distinct from
            any (other) member of GROUP; cf. #$spatiallyIntersects.
            Examples: a bird in the branches of a tree; a zebra in its
            herd; a flea in a dog&apos;s pelt; a bee in a swarm of bees;
            a snake in the grass.</rdfs:comment>
        <guid>c0fbb064-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#objectFoundInLocation"/>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#Group"/>
    </daml:Property>
    <daml:Property rdf:ID="in-ContClosed">
        <rdfs:label>in - cont closed</rdfs:label>
        <rdfs:comment>(#$in-ContClosed CONTAINEE CONTAINER) entails
            (#$in-ContGeneric CONTAINEE CONTAINER) except that CONTAINEE
            may not  leave CONTAINER as an object without the opening of
            a portal in CONTAINER or a non-standard significant
            deformation of CONTAINEE or CONTAINER.  CONTAINER need not
            have a portal.  Parts of CONTAINEE may extend out through
            portals in CONTAINER.  If CONTAINEE can temporarily undergo
            (a not-too forceful) shape deformation in order to fit
            through a portal in CONTAINER, then CONTAINEE is not
            #$in-ContClosed with respect to CONTAINER.  Positive
            Examples: water in a bottle with a closed cap; a person in a
            closed but unlocked jail cell sticking his arms through the
            bars; King Kong in a flimsy cage; a Nerf (TM) ball in a
            bottle (The ball must be compressed in order to force it
            out); egg yolk in an egg shell.  Negative Examples: a morsel
            of bread in a prison cell (morsels are small enough to leave
            the cell by passing in between the bars of the cell -- use
            #$in-ContOpen);  an egg yolk in an egg -- use
            #$internalParts; water in an open bottle (the necessary
            deformation is not forceful).   Positive borderline
            examples: a roll of dental floss in a dispenser -- although
            the strand may flow out with an expected deformation, it is
            a long process that continually deforms the object such that
            the object leaves the container part by part instead of as
            an object; a skinny person in a jail cell who could just
            barely manage to squeeze through the bars (the necessary
            deformations, although self-imposed, would be abnormal and
            unexpected).  Negative borderline example: a spelunker who
            has crawled through a narrow passage into a cave (the
            deformations needed to get in (and therefore out) were
            self-imposed and not abnormal).</rdfs:comment>
        <guid>bd589fe3-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#SolidTangibleThing"/>
    </daml:Property>
    <daml:Property rdf:ID="in-ContFullOf">
        <rdfs:label>in - cont full of</rdfs:label>
        <rdfs:comment>(#$in-ContFullOf STUFF CONT) means that STUFF is
            the substance that fills CONT.  STUFF is unique in that it
            is the only substance that `fills&apos; CONT, even though
            other things may be with it in CONT (e.g., as
            #$in-ContGeneric).  Filling the container means that the
            inside surface of CONT touches the filling STUFF at
            virtually all points of CONT&apos;s inner surface, rather
            than touching whatever stuff CONT itself is immersed in and
            which CONT&apos;s outside surface touches (e.g., air).  The
            only thing which can override this #$touches (i.e., get
            alongside CONT&apos;s inside wall without being STUFF) would
            be some other object which is also in CONT (e.g., with
            #$in-ContGeneric).  In order to fill the container, STUFF
            must be #$Pourable or have a shape which conforms to the
            shape of CONT&apos;s cavity.  Cf. #$in-ContGeneric to cover
            cases of stuff which is in a container without filling it. </rdfs:comment>
        <guid>c0fbb0f9-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#touchesDirectly"/>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#SolidTangibleThing"/>
    </daml:Property>
    <daml:Property rdf:ID="in-ContGeneric">
        <rdfs:label>in - cont generic</rdfs:label>
        <rdfs:comment>(#$in-ContGeneric OBJ CONT) means that OBJ is
            contained, confined, or held in CONT. OBJ is not a part of
            CONT (but  see #$physicallyContains).  CONT has a cavity
            (see #$CavityWithWalls)  and OBJ is at least partly within
            (see #$spatiallyIntersects) the  interior of this cavity. If
            CONT moves, OBJ is, by default, caused to move  so as to
            remain within that cavity (see #$movesWith). If OBJ leaves
            the confines of CONT then either OBJ passes through some
            appropriately sized portal of CONT or OBJ breaks into
            smaller pieces that themselves pass through appropriately
            sized portals of CONT or OBJ breaks through a wall of CONT.
            CONT may function as an open or closed container with
            respect to objects of the size of OBJ. If CONT is closed
            with respect to OBJ, then #$in-ContClosed is the preferred
            more specific predicate. If CONT is open with respect to
            OBJ, #$in-ContOpen is preferred. If OBJ is a fluid which
            completely fills CONT (e.g. a cup of coffee brimming over)
            then #$in-ContFullOf is more precise.</rdfs:comment>
        <guid>bd589405-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#objectFoundInLocation"/>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#SolidTangibleThing"/>
    </daml:Property>
    <daml:Property rdf:ID="in-ContOpen">
        <rdfs:label>in - cont open</rdfs:label>
        <rdfs:comment>(#$in-ContOpen OBJ CONT) means that OBJ is
            contained in CONT -- CONT confines or holds OBJ in -- but
            OBJ can be  removed from CONT without having to either A)
            open any portals in CONT  B) break some part of CONT or C)
            break OBJ into smaller pieces such  that it can fit through
            some portal of CONT&apos;s.  Note that  (#$in-ContOpen OBJ
            CONT) is a relationship based on the size of OBJ  and the
            largest portal of CONT that OBJ might be able to traverse
            through.  For example, a paperclip might be #$in-ContOpen a
            jail cell even  though the person locked inside would be
            #$in-ContClosed the jail  cell.  This is because the paper
            clip is small enough to fit in  between the bars of the cell
            whereas the person is not.  See  #$portalState for
            vocabulary relating containers to whether its  portals are
            open or closed.</rdfs:comment>
        <guid>bd58bc57-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#in-ContGeneric"/>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#SolidTangibleThing"/>
    </daml:Property>
    <daml:Property rdf:ID="in-Embedded">
        <rdfs:label>in - embedded</rdfs:label>
        <rdfs:comment>(#$in-Embedded OBJ1 OBJ2) means that some portion
            of OBJ1 is embedded in OBJ2 at least semi-permanently.  OBJ1
            is thus #$connectedTo OBJ2.  The remaining portion of OBJ1
            is not embedded in OBJ2. The #$in-Embedded relationship
            comes about during the formation of OBJ1 or OBJ2.  Examples:
            grass in the ground, hair in the scalp, or eyes in sockets.
            Also, OBJ1 is not beneath the surface of OBJ2.</rdfs:comment>
        <guid>bd590b63-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#touchesDirectly"/>
        <daml:domain rdf:resource="#SolidTangibleThing"/>
        <daml:range rdf:resource="#SolidTangibleThing"/>
    </daml:Property>
    <daml:Property rdf:ID="in-Floating">
        <rdfs:label>in - floating</rdfs:label>
        <rdfs:comment>(#$in-Floating OBJ LIQUID) means that OBJ is
            floating at the surface of LIQUID.  Thus, OBJ is buoyant and
            is #$in-ImmersedPartly in LIQUID.  #$in-Floating does not
            describe the relationship between an object that has neutral
            buoyancy, such as a stationary submerged (see #$Underwater)
            submarine and the water in which it is immersed.  However,
            see #$suspendedIn.</rdfs:comment>
        <guid>c0fba290-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#above-Touching"/>
        <daml:subPropertyOf rdf:resource="#in-ImmersedPartly"/>
        <daml:domain rdf:resource="#SolidTangibleThing"/>
        <daml:range rdf:resource="#LiquidTangibleThing"/>
    </daml:Property>
    <daml:Property rdf:ID="in-Held">
        <rdfs:label>in - held</rdfs:label>
        <rdfs:comment>(#$in-Held OBJ HOLDER) means that OBJ is being
            held or restrained by HOLDER, which is applying pressure to
            OBJ.  HOLDER #$touches OBJ.  HOLDER may be either a
            #$deviceUsed or an #$anatomicalPartTypeAffected in an
            instance of #$HoldingAnObject; OBJ would be the
            #$objectActedOn by that holding.  Examples include ``salad
            in tongs&apos;&apos;, ``a bread crumb in ant&apos;s
            pincers&apos;&apos;, ``a bird in your hand&apos;&apos;, ``a
            long two-by-four in a vice&apos;&apos;.</rdfs:comment>
        <guid>c0fbab6c-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#touches"/>
        <daml:domain rdf:resource="#SolidTangibleThing"/>
    </daml:Property>
    <daml:Property rdf:ID="in-ImmersedFully">
        <rdfs:label>in - immersed fully</rdfs:label>
        <rdfs:comment>(#$in-ImmersedFully OBJ FLUID) means that FLUID is
            the unique fluid in which OBJ is completely immersed.  Thus,
            as a default inference, every outside surface region of OBJ
            #$touches FLUID.  E.g., (live) fish are fully immersed in
            water, and people are usually immersed in air (even though
            the bottoms of their feet touch the ground and not the air).
            Examples like air bubbles in water or mercury globules
            immersed in air suggest that the #$arg1Isa should be kept
            general, i.e., #$PartiallyTangible rather than #$SolidTangibleThing.</rdfs:comment>
        <guid>bd58bf2d-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#in-ImmersedGeneric"/>
        <daml:subPropertyOf rdf:resource="#objectFoundInLocation"/>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#FluidTangibleThing"/>
    </daml:Property>
    <daml:Property rdf:ID="in-ImmersedGeneric">
        <rdfs:label>immerse</rdfs:label>
        <rdfs:comment>(#$in-ImmersedGeneric OBJ FLUID) means that OBJ is
            immersed in FLUID.  #$in-ImmersedGeneric is noncomittal as
            to whether OBJ is completely or partially immersed.  But
            FLUID #$touches OBJ and conforms to a significant portion of
            the surface of OBJ.   See also #$in-ImmersedFully, #$in-ImmersedPartly.</rdfs:comment>
        <guid>c0fbad6e-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#touches"/>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#FluidTangibleThing"/>
    </daml:Property>
    <daml:Property rdf:ID="in-ImmersedPartly">
        <rdfs:label>in - immersed partly</rdfs:label>
        <rdfs:comment>(#$in-ImmersedPartly OBJ FLUID) means that a
            portion of OBJ is immersed in FLUID, but OBJ is not
            completely surrounded by FLUID.  In gravitational fields,
            #$in-ImmersedPartly entails #$surroundsHorizontally, because
            in that context fluid surfaces are of generally #$HorizontalOrientation.</rdfs:comment>
        <guid>bd58993f-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#in-ImmersedGeneric"/>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#FluidTangibleThing"/>
    </daml:Property>
    <daml:Property rdf:ID="in-Permeates">
        <rdfs:label>in - permeates</rdfs:label>
        <rdfs:comment>(#$in-Permeates LIQUID SOLID)  means that LIQUID
            permeates SOLID.  LIQUID must be separable from SOLID  by
            physical, not chemical means.  LIQUID must be a
            #$LiquidTangibleThing, and SOLID a #$SolidTangibleThing.  If
            LIQUID is not a constituent (#$constituents) of SOLID, then
            SOLID is #$Porous.  Exemplars include water permeating a wet
            sponge (Sponge-CleaningImplement), #$Oil soaking a sponge,
            or water in #$Soil-Generic.  Negative exemplars include
            vapor suspended in #$Air  (see, e.g. #$suspendingFluid or
            #$solute) .  Other negative exemplars  include liquids which
            undergo a chemical change and combine with some  other
            substance, e.g. water which becomes a chemical part of plant
            material in photosynthesis.</rdfs:comment>
        <guid>c08a9a06-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#objectFoundInLocation"/>
        <daml:subPropertyOf rdf:resource="#touchesDirectly"/>
        <daml:domain rdf:resource="#LiquidTangibleThing"/>
        <daml:range rdf:resource="#SolidTangibleThing"/>
    </daml:Property>
    <daml:Property rdf:ID="in-Snugly">
        <rdfs:label>in - snugly</rdfs:label>
        <rdfs:comment>The #$BinaryPredicate (#$in-Snugly ?INNER ?OUTER)
            means that ?INNER is #$in-ContGeneric ?OUTER, that ?INNER
            #$touches ?OUTER, and that a #$FrictionProcess would be
            necessary for a #$RemovingSomething in which ?INNER is the
            #$objectMoving and ?OUTER is the #$fromLocation.</rdfs:comment>
        <guid>bde589f6-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#in-ContGeneric"/>
        <daml:subPropertyOf rdf:resource="#touches"/>
        <daml:domain rdf:resource="#SolidTangibleThing"/>
        <daml:range rdf:resource="#SolidTangibleThing"/>
    </daml:Property>
    <daml:Property rdf:ID="in-Spiked">
        <rdfs:label>in - spiked</rdfs:label>
        <rdfs:comment>(#$in-Spiked OBJ REG) means that an object, OBJ,
            is spiked into another object, REG, in the way that nails,
            push pins, needles, and other pointed objects stick into
            other objects.  Thus, OBJ must be #$LongAndThin and must be
            harder than REG.  Typically, the rigid connection between
            REG and OBJ can support forces substantially greater than
            the weight of OBJ.</rdfs:comment>
        <guid>bd58f450-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#SolidTangibleThing"/>
        <daml:range rdf:resource="#SolidTangibleThing"/>
    </daml:Property>
    <daml:Property rdf:ID="inFrontOf-Directly">
        <rdfs:label>in front of - directly</rdfs:label>
        <rdfs:comment>(#$inFrontOf-Directly FORE AFT) means that FORE is
            directly in front of tangible object AFT.  More precisely,
            it implies both (#$inFrontOf-Generally FORE AFT) and that
            there is at least one line parallel to the forward pointing
            axis of AFT that intersects both FORE and AFT.  FORE may be
            an intangible, such as an image projected onto a screen.</rdfs:comment>
        <guid>bd59091d-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#inFrontOf-Generally"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:Property>
    <daml:Property rdf:ID="inFrontOf-Generally">
        <rdfs:label>in front of - generally</rdfs:label>
        <rdfs:comment>(#$inFrontOf-Generally FORE AFT) means that FORE
            is in front of the tangible object AFT.  More precisely, the
            intrinsic back-to-front axis of AFT is within 45 degrees of
            some line intersecting both FORE and AFT.  FORE may be
            intangible, such as an image projected onto a screen.</rdfs:comment>
        <guid>bd5909a2-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#near"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:Property>
    <daml:Property rdf:ID="inPlane">
        <rdfs:label>in plane</rdfs:label>
        <rdfs:comment>(#$inPlane OBJ SURFACE) means that OBJ spatially
            intersects with the #$FlatSurface SURFACE.</rdfs:comment>
        <guid>bd588683-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#spatiallyIntersects"/>
        <daml:domain rdf:resource="#SpatialThing"/>
    </daml:Property>
    <daml:Property rdf:ID="inRegion">
        <rdfs:label>in region</rdfs:label>
        <rdfs:comment>(#$inRegion OBJ1 OBJ2) means, roughly, that OBJ1
            is  at  OBJ2.  #$inRegion is a general locative predicate
            that has a large,  diverse group of specializations; for
            this reason it is hard to  characterize its meaning
            succinctly.  The primary use of #$inRegion is  to generalize
            over all these specializations.  The most salient sufficient
            condition for #$inRegion&apos;s holding between two spatial
            things is simply the disjunction of the sufficient
            conditions for its nearest reified specializations holding
            (but see EXCEPTION below).  Every assertion in the extent of
            #$inRegion is, in theory, in the extent of at least one of
            these specializations (again, see EXCEPTION).  When
            considering using #$inRegion, always consider whether  one
            of its specializations might be preferrable.  (Maximum
            specificity is desirable in a GAF or the consequent of a
            rule, while generality is often  appropriate in the
            antecedent of a rule.)  Two important nearest reified
            specializations of #$inRegion are #$objectFoundInLocation,
            whose arg2 is necessarily not a part of arg1, and
            #$physicalDecompositions, whose arg1 necessarily _is_ a part
            of arg2. (Note the switch of argument order: #$inRegion  is
            a genl-preds of #$objectFoundInLocation, but a genl-inverse
            of  #$physicalDecompositions.)  #$spatiallySubsumes is
            another important nearest  reified specialization of
            #$inRegion.  Some examples: Given that  Cup1 is on Stool5,
            we may write (#$inRegion Cup1 Stool5); but note that
            #$on-Physical is probably more appropriate to use here.  If
            Cup1 were under, or suspended one inch above, the stool,
            (#$inRegion Cup1 Stool5) would probably be false.  On the
            other hand, if Cup1 were on an inch-high stack of papers
            resting atop stool, (#$inRegion Cup1 Stool5) would be true
            since  (#$objectFoundInLocation Cup1 Stool5) would be true.
            Given that Fish1 is in  Ocean2, we may write (#$inRegion
            Fish1 Ocean2); but #$in-ImmersedFully is probably more
            appropriate.  Given that Car03 is on Highway2, we may write
            (#$inRegion Car03 Highway2); but #$on-Physical is more
            appropriate.    Given that Joe is in Texas, we may write
            (#$inRegion Joe Texas); but #$objectFoundInLocation is more
            appropriate.  Given the Gorge01 has a Cliff01 as a part, one
            may write (#$inRegion Cliff01 Gorge01); but (#$surfaceParts
            Gorge1 Cliff01) would be a more precise.  EXCEPTION: The
            cavity interior denoted by  (#$CavityInteriorRegionFn OBJ)
            might or might not be considered a part of OBJ, depending on
            one&apos;s viewpoint.  To accommodate both viewpoints we
            shall assert nothing more specific than (#$inRegion
            (#$CavityInteriorRegionFn OBJ) OBJ), which is agnostic
            between them.  (There are currently (Jan. &apos;98) no other
            exceptions.  But as they might accrete, it will be important
            to re-examine the rules on #$inRegion periodically to see if
            reifying a new specialization of it has become warranted.)</rdfs:comment>
        <guid>bd58d70c-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#SpatialThing"/>
        <daml:range rdf:resource="#SpatialThing"/>
    </daml:Property>
    <daml:Property rdf:ID="includedInIntervalType">
        <rdfs:label>included in interval type</rdfs:label>
        <rdfs:comment>(#$includedInIntervalType SHORTER LONGER) means
            that for every X which is an instance of SHORTER, there is a
            Y which is an instance of LONGER such that
            (#$temporallySubsumes Y X) holds. Note that
            (#$includedInIntervalType SHORTER LONGER) does not
            necessarily entail (#$subsumesIntervalType LONGER SHORTER).
            See also #$subsumesIntervalType.</rdfs:comment>
        <guid>be373fc0-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#intersectsIntervalType"/>
        <daml:domain rdf:resource="#TemporalObjectType"/>
        <daml:range rdf:resource="#TemporalObjectType"/>
    </daml:Property>
    <daml:UnambiguousProperty rdf:ID="includedItems">
        <rdfs:label>included items</rdfs:label>
        <rdfs:comment>The predicate #$includedItems is used to identify
            the peripheral items that come with a particular packaged
            product.  (#$includedItems FORM ITEM) means that the
            #$Individual ITEM is one of the things that are included in
            the #$FormalProduct FORM, along with its #$mainProduct; but
            ITEM is not the main product itself.  ITEM can be an
            accessory, owner&apos;s manual, warranty agreement, or
            included service.  ITEM is something that is a regular part
            of the package.  ITEM does NOT refer to free samples or
            extras thrown in--for that, see #$includesWithProductType.</rdfs:comment>
        <guid>bd58f3e6-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#parts"/>
        <daml:domain rdf:resource="#FormalProduct"/>
        <daml:range rdf:resource="#TemporalThing"/>
    </daml:UnambiguousProperty>
    <daml:Property rdf:ID="income">
        <rdfs:label>income</rdfs:label>
        <rdfs:comment>The predicate #$income is used to state the income
            of a person or other agent.  (#$income AGT RATE) means that
            the #$Agent AGT has the income RATE, where RATE is a
            #$MonetaryFlowRate, e.g., a number of #$DollarsPerHour or
            #$DollarsPerYear.  See #$MonetaryFlowRate.</rdfs:comment>
        <guid>bd58af51-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Agent"/>
        <daml:range rdf:resource="#MonetaryFlowRate"/>
    </daml:Property>
    <daml:Property rdf:ID="independentArg">
        <rdfs:label>independent arg</rdfs:label>
        <rdfs:comment>the position of the   independent argument
            referenced by this #$InterArgConstraintPredicate</rdfs:comment>
        <guid>bfce95e7-9c29-11b1-9dad-c379636f7270</guid>
        <daml:range rdf:resource="#NonNegativeInteger"/>
    </daml:Property>
    <daml:Property rdf:ID="indexicalReferent">
        <rdfs:label>indexical referent</rdfs:label>
        <rdfs:comment>(#$indexicalReferent INDCONCEPT THING) means that
            in the context of the assertion, the #$IndexicalConcept
            INDCONCEPT has the referent THING.  This is a
            #$FunctionalSlot, in keeping with the idea that the
            predicate will return one and only one &apos;value&apos; for
            the second argument place at any given point in context
            space.  However, be advised that the arg2 will change from
            context to context.</rdfs:comment>
        <guid>bff476e8-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#equals"/>
        <daml:domain rdf:resource="#IndexicalConcept"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
    </daml:Property>
    <daml:Property rdf:ID="infectingOrganism">
        <rdfs:label>infecting organism</rdfs:label>
        <rdfs:comment>This predicate relates a particular instance of
            #$Infection to an organism which causes that infection.
            (#$infectingOrganism INFECT ORG) means that the organism ORG
            is one of the causes of the infection INFECT.  For example,
            if INFECT is a case of  #$StrepThroat, then ORG is an
            instance of #$Streptococcus.  I.e.,  (#$forAll ?x
            (#$forAll ?y      (#$implies           (#$and
            (#$isa ?x #$StrepThroat)               (#$infectingOrganism
            ?x ?y))          (#$isa ?y #$Streptococcus)))) </rdfs:comment>
        <guid>c10c146d-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#preActors"/>
        <daml:domain rdf:resource="#Infection"/>
        <daml:range rdf:resource="#Organism-Whole"/>
    </daml:Property>
    <daml:UniqueProperty rdf:ID="infectionHost">
        <rdfs:label>host</rdfs:label>
        <rdfs:comment>This predicate relates a particular case of
            #$Infection to the organism it is infecting.
            (#$infectionHost INF ORG) means that INF is an #$Infection
            in which the host organism is ORG.</rdfs:comment>
        <guid>c10c1543-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#bodilyDoer"/>
        <daml:domain rdf:resource="#Infection"/>
        <daml:range rdf:resource="#Organism-Whole"/>
    </daml:UniqueProperty>
    <daml:Property rdf:ID="infinitive">
        <rdfs:label>infinitive</rdfs:label>
        <rdfs:comment>(#$infinitive WORD STRING) means that STRING is
            the infinitive verb form of WORD.  For example, `to
            hit&apos; is the infinitive form of #$Hit-TheWord.</rdfs:comment>
        <guid>bd5d6824-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#LexicalWord"/>
        <daml:range rdf:resource="#CharacterString"/>
    </daml:Property>
    <daml:Property rdf:ID="infoAdded">
        <rdfs:label>info added</rdfs:label>
        <rdfs:comment>(#$infoAdded CHANGE INFO) means that in the
            #$InformationUpdating action, CHANGE, INFO was added to the
            IBO (#$InformationBearingObject) acted on.</rdfs:comment>
        <guid>bd5b03bc-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#infoTransferred"/>
        <daml:domain rdf:resource="#InformationUpdating"/>
        <daml:range rdf:resource="#AbstractInformationalThing"/>
    </daml:Property>
    <daml:Property rdf:ID="infoRemoved">
        <rdfs:label>info removed</rdfs:label>
        <rdfs:comment>(#$infoRemoved CHANGE INFO) means that in the
            #$InformationUpdating action, CHANGE, INFO was removed from
            the IBO (#$InformationBearingObject) acted on.</rdfs:comment>
        <guid>bd62ead9-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#infoTransferred"/>
        <daml:domain rdf:resource="#InformationUpdating"/>
        <daml:range rdf:resource="#AbstractInformationalThing"/>
    </daml:Property>
    <daml:Property rdf:ID="infoTransferred">
        <rdfs:label>info transferred</rdfs:label>
        <rdfs:comment>The predicate #$infoTransferred is used to
            indicate the meaningful content of a particular transferral
            of information.  (#$infoTransferred TRANSFER INFO) means
            that INFO is information that is transferred due to the
            #$InformationTransferEvent TRANSFER.  INFO originates from
            some agent or IBT (i.e., element of
            #$InformationBearingThing).  After TRANSFER, INFO is
            contained in another IBT or agent; INFO may persist in the
            source as well.  For example, when I read the front page of
            the newspaper, some information about current world events
            is transferred from the newspaper to me.   See also
            #$informationOrigin, #$informationDestination.</rdfs:comment>
        <guid>bd652aec-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#topicOfInfoTransfer"/>
        <daml:domain rdf:resource="#InformationTransferEvent"/>
        <daml:range rdf:resource="#AbstractInformationalThing"/>
    </daml:Property>
    <daml:Property rdf:ID="informStatement">
        <rdfs:label>inform statement</rdfs:label>
        <rdfs:comment>(#$informStatement ?MT ?PROP) means that the
            #$ELSentence-Assertible ?PROP is true in the information
            context ?MT.  (An information context here usually means a
            particular database application of #$Cyc.  In these
            applications, ?PROP is communicated to #$Cyc directly as an
            explicit #$informStatement, and is not inferred to be true.)
            Note that (#$informStatement ?mt ?clpe) implies that (#$ist
            ?mt ?clpe).</rdfs:comment>
        <guid>bd5c2cd8-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#ist-Information"/>
        <daml:domain rdf:resource="#PropositionalInformationThing"/>
        <daml:range rdf:resource="#ELSentence-Assertible"/>
    </daml:Property>
    <daml:Property rdf:ID="informationDestination">
        <rdfs:label>information destination</rdfs:label>
        <rdfs:comment>The predicate #$informationDestination is used to
            indicate where information is transferred in a particular
            information transfer event.  (#$informationDestination
            TRANSFER DEST) means that in the #$InformationTransferEvent
            TRANSFER, the information being transferred is sent, given
            to, or impressed upon DEST.  DEST is an IBT (i.e., an
            element of #$InformationBearingThing) or an agent.  Note
            that if DEST is an agent, you should probably use the more
            specific actor slot, #$recipientOfInfo.  Note also that if
            DEST existed before the transfer, it may have already
            contained the information.</rdfs:comment>
        <guid>bd58a9c5-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#InformationTransferEvent"/>
        <daml:range rdf:resource="#TemporalThing"/>
    </daml:Property>
    <daml:Property rdf:ID="informationOrigin">
        <rdfs:label>information origin</rdfs:label>
        <rdfs:comment>The predicate #$informationOrigin is used to
            indicate the source of information for a particular
            #$InformationTransferEvent.  (#$informationOrigin TRANSFER
            ORIGIN) means that in the #$InformationTransferEvent
            TRANSFER, the information being transferred is coming from
            ORIGIN.  ORIGIN is either an IBT (i.e., element of
            #$InformationBearingThing) or an agent.  Note that if ORIGIN
            still exists past the transfer, it presumably still contains
            the information.</rdfs:comment>
        <guid>bd5e4f03-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#InformationTransferEvent"/>
        <daml:range rdf:resource="#TemporalThing"/>
    </daml:Property>
    <daml:Property rdf:ID="ingredients">
        <rdfs:label>ingredient</rdfs:label>
        <rdfs:comment>The predicate #$ingredients is used to indicate a
            particular input used to make a particular artifact.
            (#$ingredients ART INGR) means that the #$PartiallyTangible
            thing INGR was one of the #$inputs to the creation of the
            #$Artifact ART, and INGR is one of ART&apos;s
            #$physicalDecompositions.  Note that #$ingredients applies
            only to those inputs which retain their identity in the
            creation process and which are incorporated into the
            resulting #$Artifact.  For example, a meatball can be
            considered an ingredient of a plate of spaghetti, and a
            portion of ground beef can be considered an ingredient of
            the meatball.  On the other hand, we would not say that an
            egg is an ingredient of the meatball, even though it was an
            input to the creation process, because its identity was not preserved.</rdfs:comment>
        <guid>bd58cea4-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#physicalDecompositions"/>
        <daml:domain rdf:resource="#Artifact"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:Property>
    <daml:Property rdf:ID="inhabitantTypes">
        <rdfs:label>inhabitant types</rdfs:label>
        <rdfs:comment>The predicate #$inhabitantTypes is used to
            indicate the type(s) of people who live in a region.
            (#$inhabitantTypes REGION TYPE) means that TYPE is (one of)
            the (primary) type(s) of people who live in the
            #$GeographicalRegion REGION.  For example, to say that
            Chileans are among the primary groups of inhabitants of
            Chile, we assert (#$inhabitantTypes #$Chile
            #$ChileanPerson).  TYPE may be based on ethnicity,
            nationality, age, economics--in short, any demographic
            class.  E.g., (#$inhabitantTypes #$UnitedStatesOfAmerica
            #$AdultMiddleClassAmerican), (#$inhabitantTypes
            #$UnitedStatesOfAmerica #$WorkingAdultAmericanWoman),
            (#$inhabitantTypes #$UnitedStatesOfAmerica #$MexicanImmigrantToUSA).</rdfs:comment>
        <guid>bd58ba13-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#GeographicalRegion"/>
        <daml:range rdf:resource="#ExistingObjectType"/>
    </daml:Property>
    <daml:Property rdf:ID="inputs">
        <rdfs:label>inputs</rdfs:label>
        <rdfs:comment>The predicate #$inputs relates a particular event
            to things which are `inputs&apos;, i.e., materials used in
            that event and somehow altered by it.  (#$inputs EVENT
            OBJECT) means that OBJECT is an input to the
            #$CreationOrDestructionEvent EVENT.  During and due to the
            event, OBJECT is either destroyed or incorporated into a new
            entity.  For example, the pigments used to paint the Mona
            Lisa were #$inputs to Leonardo&apos;s painting process;
            however, his brushes were not #$inputs, even though they
            were changed a little by it.  In general, in instances of
            #$Manufacturing, materials or objects are inputs if they
            find their way into the product manufactured, or if they are
            destroyed -- such as the coke used in manufacturing steel --
            as part of that manufacturing process.   Note: One should
            use the specialized predicates #$inputsDestroyed or
            #$inputsCommitted whenever they are appropriate, rather than
            the more general predicate #$inputs.</rdfs:comment>
        <guid>bd58b70d-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#objectActedOn"/>
        <daml:domain rdf:resource="#CreationOrDestructionEvent"/>
        <daml:range rdf:resource="#SomethingExisting"/>
    </daml:Property>
    <daml:Property rdf:ID="inputsCommitted">
        <rdfs:label>input</rdfs:label>
        <rdfs:comment>The predicate #$inputsCommitted is used when some
            #$inputs to a particular event is incorporated into some
            #$outputs of that event, but remains recognizable rather
            than being destroyed.  (#$inputsCommitted EVENT OBJECT)
            means that OBJECT exists before EVENT and continues to exist
            afterwards, and as a result of EVENT, OBJECT becomes
            incorporated into something created during EVENT.  Once
            incorporated into the output of EVENT, OBJECT can&apos;t be
            independently incorporated in any other creation event.  For
            example, bricks that are used to build a wall continue to
            exist as bricks once the wall has been built.  While a part
            of the wall, a brick cannot be used as an independent input
            in another creation event. (See also #$outputsCreated.)
            Note: there is a grey area between #$inputsCommitted and
            #$inputsDestroyed; the less possible it is to take apart the
            relevant #$outputs of EVENT and get OBJECT back as an
            independent thing, the more likely it is that the
            relationship between EVENT and OBJECT should be
            #$inputsDestroyed, rather than #$inputsCommitted.</rdfs:comment>
        <guid>bd63edac-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#postActors"/>
        <daml:subPropertyOf rdf:resource="#inputs"/>
        <daml:subPropertyOf rdf:resource="#commitsForFutureUses"/>
        <daml:domain rdf:resource="#CreationEvent"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:Property>
    <daml:Property rdf:ID="inputsDestroyed">
        <rdfs:label>inputs destroyed</rdfs:label>
        <rdfs:comment>The predicate #$inputsDestroyed is used to relate
            a particular event to the items which are destroyed by it.
            (#$inputsDestroyed EVENT OBJECT) means that OBJECT exists
            before EVENT, is affected by EVENT, and due to that
            involvement, the entity ENTITY such that (#$myEntity OBJECT
            ENTITY) ends its existence as an #$Entity sometime during
            EVENT. (As does the OBJECT as its present instantiation of
            #$SomethingExisting.)  For instance, suppose
            (#$inputsDestroyed AppleEatingEvent001 RedApple001), then
            the SomethingExisting, RedApple001 is destroyed in the event
            and, as importantly, so is the apple entity of which the red
            apple is a subabstraction. OBJECT may or may not be a
            #$deliberateActors in EVENT.</rdfs:comment>
        <guid>bd658d50-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#inputs"/>
        <daml:subPropertyOf rdf:resource="#damages"/>
        <daml:domain rdf:resource="#DestructionEvent"/>
        <daml:range rdf:resource="#SomethingExisting"/>
    </daml:Property>
    <daml:Property rdf:ID="insIsJobOf">
        <rdfs:label>occupation</rdfs:label>
        <rdfs:comment>The predicate #$insIsJobOf indicates a type of
            work done by a particular individual.  (#$insIsJobOf
            EVENT-TYPE PER) means that the person PER performs instances
            of EVENT-TYPE as part of his or her job.  E.g.,
            #$KeithRichards performs instances of #$WritingMusic as part
            of his work; #$Goolsbey performs instances of
            #$ProgrammingAComputer in his job at Cycorp; a
            #$SecurityGuard performs instances of #$ProtectingSomething.
            Note that assertions using #$insIsJobOf are true for some
            specific period of time, which may be indicated with #$holdsIn.</rdfs:comment>
        <guid>bd58fe7d-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <daml:range rdf:resource="#Professional"/>
    </daml:Property>
    <daml:Property rdf:ID="instanceElementType">
        <rdfs:label>instance element type</rdfs:label>
        <rdfs:comment>(#$instanceElementType SET-TYPE COLLECTION) states
            that every element of every instance of SET-TYPE is an
            instance of COLLECTION. For example, (#$instanceElementType
            #$Set-Mathematical #$Thing).  See #$typeGenls for a
            predicate which states a similar relationship for a
            collection of collections rather than a collection of sets.</rdfs:comment>
        <guid>bda0e43c-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
    </daml:Property>
    <daml:Property rdf:ID="instrument-Container">
        <rdfs:label>instrument - container</rdfs:label>
        <rdfs:comment>&apos;(#$instrument-Container EVENT CONT)&apos;
            means that the #$objectActedOn in EVENT is contained in
            (#$in-ContGeneric) CONT during EVENT, and that CONT
            facilitates EVENT being accomplished. (#$Davis, 8/8/96)</rdfs:comment>
        <guid>bd588677-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#instrument-Generic"/>
        <daml:domain rdf:resource="#Event"/>
    </daml:Property>
    <daml:Property rdf:ID="instrument-Generic">
        <rdfs:label>instrumental</rdfs:label>
        <rdfs:comment>The predicate #$instrument-Generic is used to link
            a particular event to any of the objects which play an
            instrumental role in it.  (#$instrument-Generic EVENT
            OBJECT) means that OBJECT plays an intermediate causal role
            in EVENT, facilitating its occurrence and serving some
            purpose of some #$Agent.  This can happen in at least two
            ways: a. the `doer&apos; of EVENT acts on OBJECT, which in
            turn acts on something else (as when someone uses a hammer
            to pound in a nail) or b. the `doer&apos; of EVENT acts on
            something, making it possible for OBJECT to act on that
            thing (as when someone puts wet clothes out in the sun to
            dry).  Typically, an #$instrument-Generic is not
            significantly altered by playing that role in an event.
            #$deviceUsed is an important specialization predicate of #$instrument-Generic.</rdfs:comment>
        <guid>bd5d4eb3-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#actors"/>
        <daml:domain rdf:resource="#Event"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:Property>
    <daml:UnambiguousProperty rdf:ID="intangibleComponent">
        <rdfs:label>intangible component</rdfs:label>
        <rdfs:comment>(#$intangibleComponent WHOLE PART) means that PART
            is the entire intangible part of the
            #$CompositeTangibleAndIntangibleObject WHOLE.</rdfs:comment>
        <guid>bd58d445-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#intangibleParts"/>
        <daml:domain rdf:resource="#CompositeTangibleAndIntangibleObject"/>
        <daml:range rdf:resource="#IntangibleIndividual"/>
    </daml:UnambiguousProperty>
    <daml:Property rdf:ID="intangibleParts">
        <rdfs:label>intangible parts</rdfs:label>
        <rdfs:comment>(#$intangibleParts WHOLE PART) means that PART is
            one of the intangible parts of WHOLE.  For the predicate
            which relates a thing to its entire intangible extent,
            please see #$intangibleComponent.</rdfs:comment>
        <guid>bd58b604-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#parts"/>
        <daml:domain rdf:resource="#PartiallyIntangibleIndividual"/>
        <daml:range rdf:resource="#IntangibleIndividual"/>
    </daml:Property>
    <daml:Property rdf:ID="intendedAudience">
        <rdfs:label>audience</rdfs:label>
        <rdfs:comment>The predicate #$intendedAudience indicates an
            individual who is the intended recipient of the information
            in a particular IBT (i.e., element of
            #$InformationBearingThing).  (intendedAudience IBT AGT)
            means that the #$InformationBearingThing IBT has the
            individual #$Agent AGT as its intended audience--viewer,
            reader, listener, etc.  AGT (possibly along with other
            agents) is an individual who is supposed to access the
            information represented in IBT.  For example, the
            #$intendedAudience of a personal letter is usually its addressee.</rdfs:comment>
        <guid>bd58e082-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#InformationBearingThing"/>
        <daml:range rdf:resource="#Agent"/>
    </daml:Property>
    <daml:Property rdf:ID="intendedAudienceType">
        <rdfs:label>intended audience type</rdfs:label>
        <rdfs:comment>The predicate #$intendedAudienceType indicates the
            type of agents who are the intended recipients of the
            information in a particular IBT (i.e., element of
            #$InformationBearingThing).  (#$intendedAudienceType PIT
            TYPE) means that agents who are elements of TYPE are in the
            intended audience of the particular
            #$PropositionalInformationThing PIT.  Examples: the
            #$intendedAudienceType for the information in a copy of `AMA
            Journal&apos; is the collection of American physicians; the
            #$intendedAudienceType of TV commercials for sugary packaged
            cereals are those members of #$HumanChild living in the
            broadcast area.</rdfs:comment>
        <guid>bd58b3b8-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#AbstractInformationalThing"/>
        <daml:range rdf:resource="#ExistingObjectType"/>
    </daml:Property>
    <daml:Property rdf:ID="intendedForUseBy">
        <rdfs:label>intended for use by</rdfs:label>
        <rdfs:comment>(#$intendedForUseBy PROD TYPE) means that the
            #$Product PROD is intended to be used by individuals of the
            #$ExistingObjectType TYPE, where TYPE must be a subset of
            #$Organism-Whole.  E.g., many types of products are only for
            use by adults, by women, by dogs, etc. Note:  This is a good
            example of a predicate which is redundant but useful.
            `Redundant&apos; means that any assertion one states using
            #$intendedForUseBy could be stated, albeit less tersely,
            using other, more basic predicates in the KB, in this case
            #$intends and #$usesObject.  Often, a huge number of axioms
            can be drastically shortened by introducing such a redundant
            predicate, and writing axioms that define it in terms of the
            more-basic predicates.</rdfs:comment>
        <guid>c0fde228-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Product"/>
        <daml:range rdf:resource="#ExistingObjectType"/>
    </daml:Property>
    <daml:Property rdf:ID="intends">
        <rdfs:label>intend</rdfs:label>
        <rdfs:comment>This predicate can be used to state some
            particular thing that a given intelligent agent intends or
            has in mind as a purpose, represented as a propositional
            attitude. (#$intends AGENT SENT) means that AGENT intends
            the proposition PROP expressed by SENT to become (or remain)
            true. This implies that AGENT believes s/he has at least
            some degree of influence or control over bringing about (or
            maintaining) the truth of PROP.  While this predicate is
            obviously similar to #$goals (q.v.), AGENT&apos;s intending
            PROP is likely to be more short-term and event-centered ( I
            did it because I intended that... ) and more mechanically
            satisfied ( I intend to turn off the lamp ) than any of
            AGENT&apos;s goals. You may intend to turn off the lamp, but
            it would be odd to call that one of your goals.  For a
            similar predicate that represents intending in relation to
            types of temporal situations, see #$intends-SitType.</rdfs:comment>
        <guid>bd58e34d-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#desires"/>
        <daml:domain rdf:resource="#IntelligentAgent"/>
        <daml:range rdf:resource="#ELSentence-Assertible"/>
    </daml:Property>
    <daml:Property rdf:ID="internalParts">
        <rdfs:label>interior</rdfs:label>
        <rdfs:comment>(#$internalParts OBJ PART) means that OBJ has PART
            as one of its internal #$physicalParts.  I.e. PART is
            totally inside OBJ and is part of it.</rdfs:comment>
        <guid>bd58cf63-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#physicalParts"/>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:Property>
    <daml:Property rdf:ID="internalSubRegions">
        <rdfs:label>internal sub regions</rdfs:label>
        <rdfs:comment>(#$internalSubRegions REGION INTERNALREGION) means
            that INTERNALREGION is a subregion of REGION which does not
            border on anything outside of REGION.</rdfs:comment>
        <guid>bdb0f8ac-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#subRegions"/>
        <daml:domain rdf:resource="#Surface-Generic"/>
        <daml:range rdf:resource="#Surface-Generic"/>
    </daml:Property>
    <daml:Property rdf:ID="internationalOrg-MemberCountry">
        <rdfs:label>international org - member country</rdfs:label>
        <rdfs:comment>The predicate #$internationalOrg-MemberCountry is
            used to indicate that a particular country belongs to a
            particular international organization.
            (#$internationalOrg-MemberCountry INTORG NATION) means that
            the #$Country NATION (as represented by its national
            government or other legally designated body) is a member of
            the #$InternationalOrganization INTORG.  For example,
            #$Bahrain is an #$internationalOrg-MemberCountry of the
            #$LeagueOfArabStates and of the #$UnitedNationsOrganization
            and #$China-PeoplesRepublic is a
            #$internationalOrg-MemberCountry of the
            #$UnitedNationsOrganization -- but #$Taiwan-RepublicOfChina
            is not.</rdfs:comment>
        <guid>bd588143-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasMembers"/>
        <daml:domain rdf:resource="#InternationalOrganizationOfCountries"/>
        <daml:range rdf:resource="#Country"/>
    </daml:Property>
    <daml:Property rdf:ID="intersectsIntervalType">
        <rdfs:label>intersects interval type</rdfs:label>
        <rdfs:comment>(#$intersectsIntervalType X Y) indicates that
            every instance of X #$temporallyIntersects some instance Y.
            For example, in the nontropics, (#$intersectsIntervalType
            #$SummerSeason #$CalendarSummer).  The `summer season&apos;
            may not coincide exactly with the time between the summer
            solstice and autumnal equinox, but there is an (enormous)
            overlap between those two time periods.  This relation,
            #$intersectsIntervalType, is neither commutative --
            (#$intersectsIntervalType #$January #$Wednesday) but not
            (#$intersectsIntervalType #$Wednesday #$January) -- nor
            transitive  -- (#$intersectsIntervalType #$CalendarSummer
            #$June) &amp; (#$intersectsIntervalType #$June #$CalendarSpring).</rdfs:comment>
        <guid>be010f3c-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
    </daml:Property>
    <daml:UnambiguousProperty rdf:ID="intervalEndedBy">
        <rdfs:label>interval ended by</rdfs:label>
        <rdfs:comment>(intervalEndedBy INT TEMP-OBJ) means that INT is
            the instance of #$TimeInterval immediately preceding
            TEMP-OBJ . The beginning of INT coincides with the beginning
            of all time (#$Always-TimeInterval), if it has a beginning.
            See #$IntervalEndedByFn </rdfs:comment>
        <guid>c13e6423-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#TimeInterval"/>
        <daml:range rdf:resource="#TemporalThing"/>
    </daml:UnambiguousProperty>
    <daml:UnambiguousProperty rdf:ID="intervalStartedBy">
        <rdfs:label>interval started by</rdfs:label>
        <rdfs:comment>(#$intervalStartedBy INT TEMP-OBJ) means that INT
            is the instance of #$TimeInterval immediately following
            TEMP-OBJ. The end of INT coincides with the end of all time
            (#$Always-TimeInterval), if it has an end. See #$IntervalStartedByFn.</rdfs:comment>
        <guid>bff5b279-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#TimeInterval"/>
        <daml:range rdf:resource="#TemporalThing"/>
    </daml:UnambiguousProperty>
    <daml:Property rdf:ID="interviewee">
        <rdfs:label>interviewee</rdfs:label>
        <rdfs:comment>(#$interviewee INTERVIEW AGT) means that the
            #$Agent AGT is an interviewee in the #$Interviewing event INTERVIEW.</rdfs:comment>
        <guid>bd58d162-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#socialParticipants"/>
        <daml:subPropertyOf rdf:resource="#preActors"/>
        <daml:range rdf:resource="#Person"/>
    </daml:Property>
    <daml:Property rdf:ID="interviewer">
        <rdfs:label>interviewers</rdfs:label>
        <rdfs:comment>(#$interviewer INTERVIEW AGT) means that the
            #$Agent AGT is an interviewer in the #$Interviewing event INTERVIEW.</rdfs:comment>
        <guid>bd58d1a1-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#performedBy"/>
        <daml:subPropertyOf rdf:resource="#socialParticipants"/>
        <daml:subPropertyOf rdf:resource="#preActors"/>
        <daml:range rdf:resource="#Person"/>
    </daml:Property>
    <daml:UnambiguousProperty rdf:ID="inverseFunc">
        <rdfs:label>inverse func</rdfs:label>
        <rdfs:comment>The predicate #$inverseFunc relates a mathematical
            function to a unique inverse.  Both arguments to
            #$inverseFunc are elements of
            #$FunctionFromQuantitiesToQuantities.  (#$inverseFunc FN
            INVFN) relates the function FN to its inverse INVFN; e.g.,
            the #$inverseFunc of the logarithm function (#$LogFn) would
            be the exponential function (#$ExpFn).  More precisely, (FN
            (INVFN X)) results in X for all X in the domain of INVFN.
            For a more general predicate that can be used to relate any
            one-to-one function to its inverse, regardless of whether or
            not either is an instance of #$Function-Denotational,  see #$inverseFunctions.</rdfs:comment>
        <guid>bd58f0c1-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#UnaryFunction"/>
        <daml:range rdf:resource="#UnaryFunction"/>
    </daml:UnambiguousProperty>
    <daml:Property rdf:ID="irrelevantPredAssertion">
        <rdfs:label>irrelevant pred assertion</rdfs:label>
        <rdfs:comment>(#$irrelevantPredAssertion PREDICATE ASSERTION)
            states that the given ASSERTION should be heuristically
            considered irrelevant to inferences concluding uses of the
            given PREDICATE in the current mt.  See also
            #$irrelevantAssertion and #$irrelevantMt.</rdfs:comment>
        <guid>c0739142-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Predicate"/>
        <daml:range rdf:resource="#CycLAssertion"/>
    </daml:Property>
    <daml:Property rdf:ID="isa">
        <rdfs:label>isa</rdfs:label>
        <rdfs:comment>(#$isa EL COL) means that EL is an element of the
            collection COL.   Cyc knows that #$isa distributes over
            #$genls; that is, if one asserts (#$isa EL COL) and (#$genls
            COL SUPER), Cyc will infer that (#$isa EL SUPER). Therefore,
            in practice one only manually asserts a small fraction of
            the #$isa assertions --- the vast majority are inferred
            automatically by Cyc.</rdfs:comment>
        <guid>bd588104-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#elementOf"/>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
    </daml:Property>
    <daml:Property rdf:ID="isolatedNodeInSystem">
        <rdfs:label>isolated node in system</rdfs:label>
        <rdfs:comment>(#$isolatedNodeInSystem X SYS) means that the node
            X in the #$PathSystem SYS is an isolated point in SYS, i.e.,
            X is not on any link or loop in the #$PathSystem SYS.  Note
            that an isolated point must be a node in SYS.</rdfs:comment>
        <guid>c0f07b4a-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#nodeInSystem"/>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
        <daml:range rdf:resource="#PathSystem"/>
    </daml:Property>
    <daml:Property rdf:ID="ist">
        <rdfs:label>ist</rdfs:label>
        <rdfs:comment>(#$ist MICRO PROP) means that the Cyc assertion
            PROP is true in the Cyc #$Microtheory MICRO.  E.g., one
            might assert (#$ist Image8093Mt (#$age #$Lenat
            (#$YearsDuration 5)) to state that in the context of a
            certain photograph, Doug was 5 years old.  In other
            microtheories, Doug would have different ages, or not be
            `known about&apos; at all.</rdfs:comment>
        <guid>bd5880d3-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Microtheory"/>
        <daml:range rdf:resource="#ELSentence-Assertible"/>
    </daml:Property>
    <daml:Property rdf:ID="ist-Agreement">
        <rdfs:label>ist - agreement</rdfs:label>
        <rdfs:comment>The predicate #$ist-Agreement is used to indicate
            the propositions which have been agreed upon in a particular
            agreement.  (#$ist-Agreement AGR PROP) means that the
            proposition PROP is and should be true, according to the
            #$Agreement AGR.  PROP is expressed as a
            #$ELSentence-Assertible and is considered true within the
            microtheory which represents AGR.  PROP may or may not be
            true in reality. Note the distinction between #$ist and
            #$ist-Agreement:  #$ist relates any particular microtheory
            to all assertions that happen to be true in that
            microtheory; but #$ist-Agreement specially indicates those
            assertions in an #$Agreement microtheory which belong to the
            agreement itself and are not just something that happens to
            be true in it (e.g., that one of the #$agreeingAgents is
            named Joe).</rdfs:comment>
        <guid>bd58b89d-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#propositionalInfoAbout"/>
        <daml:subPropertyOf rdf:resource="#ist"/>
        <daml:domain rdf:resource="#Agreement"/>
        <daml:range rdf:resource="#ELSentence-Assertible"/>
    </daml:Property>
    <daml:Property rdf:ID="ist-Asserted">
        <rdfs:label>ist - asserted</rdfs:label>
        <rdfs:comment>(#$ist-Asserted MT FORMULA) states that there is a
            Cyc #$CycLAssertion for FORMULA in the microtheory MT.  This
            predicate is therefore a more specialized form of #$ist with
            the additional requirement that there be an actual assertion
            for FORMULA in MT.  Note that this is also more precise than
            (#$ist MT (#$assertedSentence FORMULA)) which states that
            there is an assertion for FORMULA in some microtheory
            visible from MT.</rdfs:comment>
        <guid>c0cd0537-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#ist"/>
        <daml:domain rdf:resource="#Microtheory"/>
        <daml:range rdf:resource="#ELSentence-Assertible"/>
    </daml:Property>
    <daml:Property rdf:ID="ist-Information">
        <rdfs:label>ist - information</rdfs:label>
        <rdfs:comment>This is a form of #$ist that applies to the
            explicit content of a chunk of information.  It is needed so
            we can distinguish between things that are true in an
            information context because they were explicitly stated, and
            things that are true because they can be inferred.</rdfs:comment>
        <guid>bd58d1ce-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#ist"/>
        <daml:domain rdf:resource="#PropositionalInformationThing"/>
        <daml:range rdf:resource="#ELSentence-Assertible"/>
    </daml:Property>
    <daml:Property rdf:ID="itemWorn">
        <rdfs:label>item worn</rdfs:label>
        <rdfs:comment>The predicate #$itemWorn is used to indicate a
            particular article of clothing (or other wearable item) that
            is worn in a particular situation.  (#$itemWorn WEARING
            ITEM) means that ITEM is the #$ClothingItem worn during the
            situation WEARING, an element of #$WearingSomething (q.v.).</rdfs:comment>
        <guid>bd5fa7ef-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#WearingSomething"/>
        <daml:range rdf:resource="#SomethingToWear"/>
    </daml:Property>
    <daml:Property rdf:ID="jobAttributes">
        <rdfs:label>job attributes</rdfs:label>
        <rdfs:comment>The predicate #$jobAttributes describes a type of
            job as #$BlueCollar, #$WhiteCollar, #$Unionized, etc.
            (#$jobAttributes JOBTYPE ATTRIBUTE) means that ATTRIBUTE
            describes a general property of the #$OccupationType
            JOBTYPE.  Note that this predicate talks about elements of
            #$OccupationType (kinds of occupations), not about a
            particular job held by some individual.</rdfs:comment>
        <guid>bd58b11d-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#OccupationType"/>
        <daml:range rdf:resource="#JobAttribute"/>
    </daml:Property>
    <daml:Property rdf:ID="judicialAgents">
        <rdfs:label>judicial agents</rdfs:label>
        <rdfs:comment>(#$judicialAgents EV JUDGE) means that the #$Agent
            JUDGE is acting as a judge in the event EV.</rdfs:comment>
        <guid>bd58be78-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#mediators"/>
        <daml:domain rdf:resource="#SocialOccurrence"/>
        <daml:range rdf:resource="#Agent"/>
    </daml:Property>
    <daml:Property rdf:ID="junctionInSystem">
        <rdfs:label>junction in system</rdfs:label>
        <rdfs:comment>(#$junctionInSystem JUNCTION SYS) means that
            JUNCTION is a junction in the #$PathSystem SYS, i.e., a node
            in SYS that is an &apos;intersection&apos; or
            &apos;branching point&apos; of links or loops in SYS.  (For
            the case when no SYS is specified, see #$JunctionOfPaths.)
            Formally, a node X in SYS is a junction in SYS iff either
            there are three (different) links in SYS such that X is on
            all of them, or there are two (different) loops in SYS such
            that X is on both of them, or there is a link in SYS and
            there is a loop in SYS such that X is on both of them.  For
            different kinds of junctions in a path system, see
            #$threeWayJunctionInSystem, #$fourWayJunctionInSystem.</rdfs:comment>
        <guid>bd9e3c53-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#nodeInSystem"/>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
        <daml:range rdf:resource="#PathSystem"/>
    </daml:Property>
    <daml:Property rdf:ID="keConsiderationInverse">
        <rdfs:label>ke consideration inverse</rdfs:label>
        <rdfs:comment>(#$keConsiderationInverse COL BIN-PRED) means that
            for  every instance INS of COL,  it should be
            determined whether there exist some VALUE such that
            (BIN-PRED INS VALUE) could be asserted.</rdfs:comment>
        <guid>bd6b1cda-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Property"/>
    </daml:Property>
    <daml:Property rdf:ID="keFarthestGenlsStrongSuggestionInverse">
        <rdfs:label>ke farthest genls strong suggestion inverse</rdfs:label>
        <rdfs:comment>(#$keFarthestGenlsStrongSuggestionPreds COL
            BIN-PRED) means that for every specialization SPEC-COL of
            COL such that SPEC-COL is not known to have dependent
            specializations, it is strongly suggested that there exist
            some VALUE such that (BIN-PRED VALUE SPEC-COL) is known in
            the KB.</rdfs:comment>
        <guid>bef3c976-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Property"/>
    </daml:Property>
    <daml:Property rdf:ID="keFarthestGenlsStrongSuggestionPreds">
        <rdfs:label>ke farthest genls strong suggestion preds</rdfs:label>
        <rdfs:comment>(#$keFarthestGenlsStrongSuggestionPreds COL
            BIN-PRED) means that for every specialization SPEC-COL of
            COL such that SPEC-COL is not known to have dependent
            specializations, it is strongly suggested that there exist
            some VALUE such that (BIN-PRED SPEC-COL VALUE) is known in
            the KB.</rdfs:comment>
        <guid>bd970b91-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Property"/>
    </daml:Property>
    <daml:Property rdf:ID="keFarthestGenlsWeakSuggestionInverse">
        <rdfs:label>ke farthest genls weak suggestion inverse</rdfs:label>
        <rdfs:comment>(#$keFarthestGenlsWeakSuggestionPreds COL
            BIN-PRED) means that for every specialization SPEC-COL of
            COL such that SPEC-COL is not known to have dependent
            specializations, it is weakly suggested that there exist
            some VALUE such that (BIN-PRED VALUE SPEC-COL) is known in
            the KB.</rdfs:comment>
        <guid>bf4585b1-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Property"/>
    </daml:Property>
    <daml:Property rdf:ID="keFarthestGenlsWeakSuggestionPreds">
        <rdfs:label>ke farthest genls weak suggestion preds</rdfs:label>
        <rdfs:comment>(#$keFarthestGenlsWeakSuggestionPreds COL
            BIN-PRED) means that for every specialization SPEC-COL of
            COL such that SPEC-COL is not known to have dependent
            specializations, it is weakly suggested that there exist
            some VALUE such that (BIN-PRED SPEC-COL VALUE) is known in
            the KB.</rdfs:comment>
        <guid>bfd95abb-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Property"/>
    </daml:Property>
    <daml:Property rdf:ID="keGenlsConsiderationInverse">
        <rdfs:label>ke genls consideration inverse</rdfs:label>
        <rdfs:comment>(#$keGenlsConsiderationInverse COL BIN-PRED) means
            that for every specialization SPEC-COL of COL, it should be
            considered whether there there exist some VALUE such that
            (BIN-PRED VALUE  SPEC-COL) should be asserted in the KB.</rdfs:comment>
        <guid>bd624659-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Property"/>
    </daml:Property>
    <daml:Property rdf:ID="keGenlsConsiderationPreds">
        <rdfs:label>ke genls consideration preds</rdfs:label>
        <rdfs:comment>(#$keGenlsConsiderationPreds COL BIN-PRED) means
            that for  every specialization SPEC-COL of COL, it should be
            considered whether there is some VALUE such that (BIN-PRED
            SPEC-COL VALUE) is known in  the KB.</rdfs:comment>
        <guid>bef45ae6-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Property"/>
    </daml:Property>
    <daml:Property rdf:ID="keGenlsStrongConsiderationPreds">
        <rdfs:label>ke genls strong consideration preds</rdfs:label>
        <rdfs:comment>(#$keGenlsConsiderationPreds COL BIN-PRED) means
            that for  every specialization SPEC-COL of COL, it should be
            considered whether there is some VALUE such that (BIN-PRED
            SPEC-COL VALUE) and if there is, it is strongly suggested
            that this relationship be made known in  the KB.</rdfs:comment>
        <guid>bdc78940-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#keGenlsConsiderationPreds"/>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Property"/>
    </daml:Property>
    <daml:Property rdf:ID="keGenlsStrongSuggestionInverse">
        <rdfs:label>ke genls strong suggestion inverse</rdfs:label>
        <rdfs:comment>(#$keGenlsStrongSuggestionInverse COL BIN-PRED)
            means that for every specialization SPEC-COL of COL, it is
            strongly suggested that there exist some VALUE such that
            (BIN-PRED VALUE SPEC-COL) is known in the KB.</rdfs:comment>
        <guid>c13c86c8-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Property"/>
    </daml:Property>
    <daml:Property rdf:ID="keGenlsStrongSuggestionPreds">
        <rdfs:label>ke genls strong suggestion preds</rdfs:label>
        <rdfs:comment>(#$keGenlsStrongSuggestionPreds COL BIN-PRED)
            means that for every specialization SPEC-COL of COL, it is
            strongly suggested that there exist some VALUE such that
            (BIN-PRED SPEC-COL VALUE) is known in the KB.</rdfs:comment>
        <guid>be6842dd-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Property"/>
    </daml:Property>
    <daml:Property rdf:ID="keGenlsWeakSuggestionInverse">
        <rdfs:label>ke genls weak suggestion inverse</rdfs:label>
        <rdfs:comment>(#$keGenlsWeakSuggestionInverse COL BIN-PRED)
            means that for every specialization SPEC-COL of COL, it is
            weakly suggested that there exist some VALUE such that
            (BIN-PRED VALUE SPEC-COL) is known in the KB.</rdfs:comment>
        <guid>be47b707-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Property"/>
    </daml:Property>
    <daml:Property rdf:ID="keGenlsWeakSuggestionPreds">
        <rdfs:label>ke genls weak suggestion preds</rdfs:label>
        <rdfs:comment>(#$keGenlsWeakSuggestionPreds COL BIN-PRED) means
            that for every specialization SPEC-COL of COL, it is weakly
            suggested that there exist some VALUE such that (BIN-PRED
            SPEC-COL VALUE) is known in the KB.</rdfs:comment>
        <guid>bdbf7e9f-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Property"/>
    </daml:Property>
    <daml:Property rdf:ID="keStrongConsiderationInverse">
        <rdfs:label>ke strong consideration inverse</rdfs:label>
        <rdfs:comment>(#$keConsiderationInverse COL BIN-PRED) means that
            for  every instance INS of COL,  it should be
            determined whether there exist some VALUE such that
            (BIN-PRED INS VALUE) could be asserted and if so it is
            strongly suggested that it be asserted.</rdfs:comment>
        <guid>c0ea4476-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#keConsiderationInverse"/>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Property"/>
    </daml:Property>
    <daml:Property rdf:ID="keStrongSuggestionInverse">
        <rdfs:label>ke strong suggestion inverse</rdfs:label>
        <rdfs:comment>(#$keStrongSuggestionInverse COL BIN-PRED) means
            that for every instance INS of COL, it is strongly suggested
            that there exist some VALUE such that (BIN-PRED VALUE INS)
            is known in the KB.</rdfs:comment>
        <guid>bdc5924d-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Property"/>
    </daml:Property>
    <daml:Property rdf:ID="keWeakSuggestionInverse">
        <rdfs:label>ke weak suggestion inverse</rdfs:label>
        <rdfs:comment>(#$keWeakSuggestionInverse COL BIN-PRED) means
            that for every instance INST of COL, it is weakly suggested
            that there exist some VALUE such that (BIN-PRED VALUE INST)
            is known in the KB.</rdfs:comment>
        <guid>bf89be7f-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Property"/>
    </daml:Property>
    <daml:Property rdf:ID="keWeakSuggestionPreds">
        <rdfs:label>ke weak suggestion preds</rdfs:label>
        <rdfs:comment>(#$keWeakSuggestionPreds COL BIN-PRED) means that
            for every instance INST of COL, it is weakly suggested that
            there exist some VALUE such that (BIN-PRED INST VALUE) is
            known in the KB.</rdfs:comment>
        <guid>bef548ea-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Property"/>
    </daml:Property>
    <daml:Property rdf:ID="knows">
        <rdfs:label>knows</rdfs:label>
        <rdfs:comment>(#$knows AGT PROP) means that the #$Agent AGT
            believes the proposition PROP (represented by a
            #$ELSentence-Assertible), is sure about the truth of PROP
            (may or may not have a rational argument for PROP), and
            furthermore PROP is in fact true at least in the current
            context (#$Microtheory).  Note: Knowledge is stronger than
            belief; it implies belief.  So if (#$knows AGT PROP), then
            (#$beliefs AGT PROP) is true.  Note: Knowledge is stronger
            than truth; it implies truth (in the current #$Microtheory):
            if (#$knows AGT PROP), then PROP is true.  Note:  Opinion
            and knowledge are mutually exclusive: if (#$knows AGT PROP),
            then it is NOT true that (#$opinions AGT PROP).  Note:
            Knowledge implies awareness.  Since Abraham Lincoln died a
            century before we were born, it is impossible for (#$knows
            #$AbrahamLincoln (#$likesAsFriend #$Lenat #$MaryShepherd))
            to hold, except in some fictional context.  </rdfs:comment>
        <guid>bd590bb6-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#beliefs"/>
        <daml:domain rdf:resource="#IntelligentAgent"/>
        <daml:range rdf:resource="#ELSentence-Assertible"/>
    </daml:Property>
    <daml:Property rdf:ID="knowsAbout">
        <rdfs:label>know</rdfs:label>
        <rdfs:comment>(#$knowsAbout AGT X) means that the
            #$IntelligentAgent AGT knows something about X.  This
            predicate represents more than simple awareness, but exactly
            what is known -- the content of AGT&apos;s knowledge about X
            -- is not specified.  Examples: (#$knowsAbout #$Lenat
            #$Cyc),  (#$knowsAbout #$MichaelJordan
            #$Basketball-TheGame).   Note: many commonsense rules can
            conclude (#$knowsAbout AGT X) -- e.g., those having to do
            with AGT&apos;s occupation, college degrees, city of
            residence,... in fact, almost any assertion about AGT can
            lead to presumptions that he/she probably #$knowsAbout
            something.  #$knowsAbout in turn can serve (weakly) in
            arguments about whether or not AGT #$knows (qv) specific
            common assertions involving X, and in arguments about
            whether or not AGT #$knowsValue of some particular predicate
            applied to X, etc.  See also #$expertRegarding.</rdfs:comment>
        <guid>bd59038b-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#IntelligentAgent"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
    </daml:Property>
    <daml:Property rdf:ID="languageOfCommunication">
        <rdfs:label>language of communication</rdfs:label>
        <rdfs:comment>The predicate #$languageOfCommunication is used to
            indicate a language used by agents in a particular
            communication event.  (#$languageOfCommunication COM LANG)
            means that in the #$Communicating COM, the information
            transferred is expressed in the language LANG.  LANG may be
            a natural language, a computer language, a musical system,
            or other symbolic system such as #$AmericanSignLanguage.</rdfs:comment>
        <guid>bd5893ad-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Communicating"/>
        <daml:range rdf:resource="#Language"/>
    </daml:Property>
    <daml:Property rdf:ID="languageSpoken">
        <rdfs:label>language spoken</rdfs:label>
        <rdfs:comment>(#$languageSpoken INTAGENT NATLANG) means the
            #$IntelligentAgent INTAGENT speaks the natural human
            language NATLANG at least somewhat fluently.  The language
            must be speakable by humans, as are English, Latin, or
            Japanese, but not LISP, C or LINCOS.  So, for example,
            (#$languageSpoken #$Lenat #$EnglishLanguage).   See #$NaturalLanguage.</rdfs:comment>
        <guid>bd58b67e-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasCommConvention"/>
        <daml:subPropertyOf rdf:resource="#knowsAbout"/>
        <daml:domain rdf:resource="#IntelligentAgent"/>
        <daml:range rdf:resource="#NaturalLanguage"/>
    </daml:Property>
    <daml:Property rdf:ID="languagesSpokenHere">
        <rdfs:label>languages spoken here</rdfs:label>
        <rdfs:comment>(#$languagesSpokenHere REG LANG) means that LANG
            is a language spoken in geographical region REG.</rdfs:comment>
        <guid>bd58a992-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#GeographicalRegion"/>
        <daml:range rdf:resource="#NaturalLanguage"/>
    </daml:Property>
    <daml:UniqueProperty rdf:ID="lastName">
        <rdfs:label>last name</rdfs:label>
        <rdfs:comment>(#$lastName X STRNG) means that #$Person X is
            known by the #$HumanFamilyNameString STRNG as his or her
            last name.  E.g., (#$lastName #$Lenat ``Lenat&apos;&apos;).
            A person rarely has more than one last name at any one time.
            Last names may change as a result of certain actions, such
            as marriages, deaths, etc., in various cultures.  In Western
            cultures a #$lastName is generally a surname (see
            #$familyName), while in Eastern cultures a #$lastName is
            generally a given name (see #$givenNames).</rdfs:comment>
        <guid>bd58c6b9-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#nameOfAgent"/>
        <daml:domain rdf:resource="#CycLReifiableDenotationalTerm"/>
        <daml:range rdf:resource="#HumanFamilyNameString"/>
    </daml:UniqueProperty>
    <daml:Property rdf:ID="lastSubEvents">
        <rdfs:label>completion</rdfs:label>
        <rdfs:comment>(#$lastSubEvents EVENT END) implies (#$subEvents
            EVENT END) and (#$temporallyFinishedBy EVENT END).  For
            example, one Cyc axiom says that if EVENT is an instance of
            #$WagingWar, and (#$lastSubEvents EVENT END) is true, and
            END is an instance of #$Surrendering, then the identity of
            those for whom the war was #$successfulForAgents can be
            inferred from the particular roles that are played by the
            various parties during the surrender.  This is how one might
            infer, from Lee surrendering to Grant, that the South lost
            the American Civil War.</rdfs:comment>
        <guid>bd58d7a6-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#subEvents"/>
        <daml:subPropertyOf rdf:resource="#temporallyFinishedBy"/>
        <daml:domain rdf:resource="#Event"/>
        <daml:range rdf:resource="#Event"/>
    </daml:Property>
    <daml:Property rdf:ID="laterSubAbstractions">
        <rdfs:label>later sub abstractions</rdfs:label>
        <rdfs:comment>(#$laterSubAbstractions SUB1 SUB2) means that SUB1
            and SUB2 are both a #$subAbstrac of the same entity (i.e.,
            (#$hasSameEntityAs SUB1 SUB2)) and the sub-abstraction SUB2
            starts sometime after the beginning of SUB1 (i.e.,
            (#$startsAfterStartingOf SUB2 SUB1)).  For example,
            #$RichardFeynman while working on the Manhattan Project was
            a #$laterSubAbstractions than #$RichardFeynman in his first
            year of graduate school at Princeton.</rdfs:comment>
        <guid>bd58d765-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#SomethingExisting"/>
        <daml:range rdf:resource="#SomethingExisting"/>
    </daml:Property>
    <daml:Property rdf:ID="laws">
        <rdfs:label>laws</rdfs:label>
        <rdfs:comment>The predicate #$laws is used to relate a
            geopolitical region (country, state, city, etc.) to a law or
            entire legal code which applies there.  (#$laws GEOPOL CODE)
            means that the #$GeopoliticalEntity GEOPOL officially has
            the law (or set of laws) CODE.  See also #$GovernmentCOC for
            the representation of a #$Law or a #$LegalCode as a #$Microtheory.</rdfs:comment>
        <guid>bd64796e-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#GeopoliticalEntity"/>
        <daml:range rdf:resource="#GovernmentCOC"/>
    </daml:Property>
    <daml:Property rdf:ID="lengthOfObject">
        <rdfs:label>length</rdfs:label>
        <rdfs:comment>(#$lengthOfObject OBJECT LENGTH) means that the
            length of OBJECT is LENGTH.  Which dimension of a given
            object counts as its length partly depends on such things as
            the type of object it is, its shape, and its spatial
            relations to other objects in its environment.  Length is
            normally  measured as the #$Distance from (what one
            intuitively thinks of as) one  end  of the object to its
            other  end , and often corresponds to the dimension of the
            object that has the greatest magnitude.  Some types of
            objects (e.g. trains and yachts) have front and back ends --
            and thus lengths -- by virtue of having an intrinsic default
            orientation (see #$FrontAndBackSidedObject and the other
            specializations of #$BilateralObject).  For some other types
            of objects (e.g. shoelaces and hair strands), length is
            determined by that dimension that is of much greater
            magnitude, relatively speaking, than any of the
            object&apos;s other dimensions.  Still other objects have
            lengths by virtue of having orientations determined only in
            relation to their environments (e.g. the  length  of a row
            of adjacent buldings might be the distance across the side
            of the row that faces the street, whether or not that
            happens to be the row&apos;s dimension of greatest
            magnitude).  See also #$widthOfObject, #$heightOfObject, and #$depthOfObject.</rdfs:comment>
        <guid>bd58db66-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#SpatialThing"/>
        <daml:range rdf:resource="#Distance"/>
    </daml:Property>
    <daml:Property rdf:ID="levelWith">
        <rdfs:label>level with</rdfs:label>
        <rdfs:comment>(#$levelWith OBJ1 OBJ2) means that OBJ1 and OBJ2
            are roughly the same vertical distance from some horizontal
            surface in the frame of reference.</rdfs:comment>
        <guid>bd58b2c1-9c29-11b1-9dad-c379636f7270</guid>
    </daml:Property>
    <daml:Property rdf:ID="likesAsFriend">
        <rdfs:label>likes as friend</rdfs:label>
        <rdfs:comment>(#$likesAsFriend AGT1 AGT2) means that AGT1 enjoys
            interacting socially with AGT2.  See also the
            #$FeelingAttributeTypes #$Friendliness.  Note: this
            predicate does not imply that AGT1 likes AGT2 only as a
            friend -- there may be romantic feelings, and other
            feelings, as well.</rdfs:comment>
        <guid>bd58ba6c-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#knowsAbout"/>
        <daml:subPropertyOf rdf:resource="#likesObject"/>
        <daml:subPropertyOf rdf:resource="#acquaintedWith"/>
    </daml:Property>
    <daml:Property rdf:ID="likesObject">
        <rdfs:label>like</rdfs:label>
        <rdfs:comment>(#$likesObject AGT OBJ) means that when the
            sentient agent AGT is interacting in some way with OBJ, that
            agent feels some measure of #$Enjoyment  --- that is,
            (#$feelsEmotion AGT #$Enjoyment).  The kinds of interactions
            that produce #$Enjoyment depend largely on what kind of
            thing OBJ is.  Thus, `Joe likes the Mona Lisa&apos; implies
            that Joe feels #$Enjoyment when viewing the Mona Lisa.  But
            `Joe likes pizza&apos; implies that Joe feels #$Enjoyment
            when eating that kind of food.  There are some specialized
            predicates of #$likesObject that give more information about
            the kind of interaction between AGT and OBJ that results in
            #$Enjoyment; see, e.g., #$likesSensorially and #$likesAsFriend.</rdfs:comment>
        <guid>bd58e7af-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#positiveVestedInterest"/>
        <daml:range rdf:resource="#SomethingExisting"/>
    </daml:Property>
    <daml:Property rdf:ID="likesSensorially">
        <rdfs:label>likes sensorially</rdfs:label>
        <rdfs:comment>(#$likesSensorially AGT SENSUM) means that the
            #$PerceptualAgent AGT derives some physical pleasure from
            the sensory experience of SENSUM (a taste, odor, or other #$SensoryAttribute).</rdfs:comment>
        <guid>bd58b921-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#PerceptualAgent"/>
        <daml:range rdf:resource="#SensoryAttribute"/>
    </daml:Property>
    <daml:Property rdf:ID="linkClosedSubSystems">
        <rdfs:label>link closed sub systems</rdfs:label>
        <rdfs:comment>(#$linkClosedSubSystems SYS SUBSYS) means that the
            path system SUBSYS is a subsystem of the path system SYS
            (i.e., (#$subPathSystems SYS SUBSYS) holds) and SUBSYS
            &apos;preserves&apos; all links in SYS between nodes in
            SUBSYS, i.e., if (#$linkBetweenInSystem LINK X Y SYS) holds
            and X and Y are in SUBSYS, LINK is a link in SUBSYS.</rdfs:comment>
        <guid>bf4c45ab-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#subPathSystems"/>
        <daml:domain rdf:resource="#PathSystem"/>
        <daml:range rdf:resource="#PathSystem"/>
    </daml:Property>
    <daml:Property rdf:ID="linkInSystem">
        <rdfs:label>link in system</rdfs:label>
        <rdfs:comment>(#$linkInSystem LINK SYS) means that LINK is an
            instance of #$Path-Simple taken as a primitive path (called
            a link) in the #$PathSystem SYS.  For each link LINK in a
            path system SYS, there is a unique pair {X, Y} of different
            nodes in SYS (see #$nodeInSystem) such that X and Y are the
            two end-points of LINK in SYS.  Other &apos;points&apos; can
            also be on LINK, but they cannot be nodes in SYS.  There can
            be no point on a link that is different from its end points
            but nevertheless on another link, i.e., no matter how many
            points there are on a particular link in a path system, none
            of them can be an &apos;intersection&apos; (see
            #$junctionInSystem) except the end points of the link, which
            are nodes in the system.  See #$linkBetweenInSystem.  Each
            link in SYS is also a path in SYS, i.e., (#$linkInSystem
            LINK SYS) implies (#$pathInSystem LINK SYS).  Note that
            there is no general collection of all links.  Any path can
            be a link if you can somehow ignore the intersection points
            on it--it all depends on the #$PathSystem.  Note also that
            in some cases (such as talking about relations between
            different #$PathSystems), using (#$LinksFn SYS) to denote
            the set of all links in SYS is more convenient than using
            the predicate #$linkInSystem.</rdfs:comment>
        <guid>bfe946ac-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#pathInSystem"/>
        <daml:domain rdf:resource="#Path-Simple"/>
        <daml:range rdf:resource="#PathSystem"/>
    </daml:Property>
    <daml:Property rdf:ID="linksOfCustomarySystem">
        <rdfs:label>links of customary system</rdfs:label>
        <rdfs:comment>(#$linksOfCustomarySystem ASSUMEDSYSTEM LINK)
            means that the #$CustomarySystemOfLinks ASSUMEDSYSTEM has
            the individual #$SimpleSegmentOfPath LINK as one of its
            links (where &apos;link&apos; means a path with no junctions
            along it).  Each such link is of the path type that
            ASSUMEDSYSTEM is made of: a highway system is assumed to be
            comprised of roadways linking junctions or towns (and some
            dead-ends); each roadway without junctions is one of the
            links.  The parts of a road (pavement, streetlight, stripe
            in middle, culverts, etc.) are not #$linksOfCustomarySystem.
            Similarly the #$linksOfCustomarySystem of a plumbing system
            are the pipes, but not the straps holding the pipes.  Thus a
            #$CustomarySystemOfLinks may have various kinds of #$parts
            that are not #$linksOfCustomarySystem.  Contrast this with
            the formal case where a specified #$PathSystem is given; in
            this case the predicates #$linkInSystem and #$pathInSystem
            are used.</rdfs:comment>
        <guid>be9b44d9-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#parts"/>
        <daml:domain rdf:resource="#CustomarySystemOfLinks"/>
        <daml:range rdf:resource="#Path-Customary"/>
    </daml:Property>
    <daml:Property rdf:ID="listSetMembers">
        <rdfs:label>list set members</rdfs:label>
        <rdfs:comment>(#$listSetMembers LIST MEMBER) means that MEMBER
            is a member of the #$List LIST.  For example, if LIST =
            (#$TheList A B C B), then A, B and C are all members of
            LIST.  See #$SetOfListMembersFn.</rdfs:comment>
        <guid>be6f9d0b-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#structureMembers"/>
        <daml:domain rdf:resource="#List"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
    </daml:Property>
    <daml:Property rdf:ID="litigants">
        <rdfs:label>litigant</rdfs:label>
        <rdfs:comment>(litigants ARG1 ARG2) means that the agent ARG2 is
            one of the contending parties in the lawsuit ARG1.</rdfs:comment>
        <guid>bd58d0e0-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#competingAgents"/>
        <daml:subPropertyOf rdf:resource="#preActors"/>
        <daml:domain rdf:resource="#Trial"/>
        <daml:range rdf:resource="#Agent"/>
    </daml:Property>
    <daml:Property rdf:ID="logicalCondition-RST">
        <rdfs:label>logical condition - r s t</rdfs:label>
        <rdfs:comment>The relation known as logical condition in
            Rhetorical Structure Theory.</rdfs:comment>
        <guid>bfe8cc79-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#LinguisticObject"/>
        <daml:range rdf:resource="#LinguisticObject"/>
    </daml:Property>
    <daml:Property rdf:ID="loopInSystem">
        <rdfs:label>loop in system</rdfs:label>
        <rdfs:comment>(#$loopInSystem LOOP SYS) means that LOOP is a
            &apos;loop&apos; in SYS, which is like a link in SYS except
            that it has exactly one node on it as if it is a link whose
            two end nodes are the same.  Each loop in SYS is also a
            cycle in SYS, see #$cycleInSystem.  The differences between
            a loop and a (non-loop) cycle in SYS include that (i) there
            is exactly one point in SYS on a loop (which must be a node
            in SYS), but there may in general be any finite number of
            nodes (and even as many points as there are real numbers) on
            some (non-loop) cycle in SYS, and that (ii) The unique node
            in SYS on a loop may or may not be an end point of a link in
            SYS, but each node on a (non-loop) cycle in SYS must be an
            end point of at least two links in SYS.  These imply that
            there can be at most one &apos;intersection point&apos; on a
            loop in SYS but there can be any finite number of
            &apos;intersection points&apos; on a (non-loop) cycle in
            SYS.  See #$pointOnCycle and #$junctionInSystem. Note that
            under current treatment of loops in a path system, if one
            would like to talk about a &apos;loop&apos; in a path system
            a &apos;part&apos; of which is a path in the system, then
            he/she should make it a cycle rather than a loop in the
            system because according to what we said above, no
            &apos;part&apos; of a loop in the system can be presented as
            a path in the system.  Note also that in some cases (such as
            talking about relations between different #$PathSystems),
            using (#$LoopsFn SYS) to denote the set of all loops in SYS
            is more convenient than using the predicate #$loopInSystem.</rdfs:comment>
        <guid>bf2899fb-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#cycleInSystem"/>
        <daml:domain rdf:resource="#Path-Cyclic"/>
        <daml:range rdf:resource="#PathSystem"/>
    </daml:Property>
    <daml:Property rdf:ID="loves">
        <rdfs:label>love</rdfs:label>
        <rdfs:comment>(#$loves AGENT1 AGENT2) means AGENT1 loves AGENT2;
            AGENT2 has a strong emotional affect on AGENT1 whereby
            AGENT1 is usually loyal and devoted to and wishes well
            AGENT2, seeks AGENT2&apos;s companionship, and will incur
            substantial personal cost to help AGENT2.  Any #$Agent can
            love any other #$Agent, though there are specialized types
            of love which are restricted to two animals, two adult
            people, a person and a corporation, etc.</rdfs:comment>
        <guid>bd58b6d3-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#positiveVestedInterest"/>
        <daml:subPropertyOf rdf:resource="#likesObject"/>
        <daml:range rdf:resource="#Agent"/>
    </daml:Property>
    <daml:UniqueProperty rdf:ID="madeBy">
        <rdfs:label>made by</rdfs:label>
        <rdfs:comment>The predicate #$madeBy was used to indicate that a
            particular product was made by a particular company.
            (#$madeBy PROD COMORG) means that PROD, an individual
            instance of #$Product, was manufactured by the
            #$CommercialOrganization COMORG.  Cf. #$makesProductType.</rdfs:comment>
        <guid>bd58c493-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#startsAfterStartingOf"/>
        <daml:domain rdf:resource="#Product"/>
        <daml:range rdf:resource="#CommercialOrganization"/>
    </daml:UniqueProperty>
    <daml:UniqueProperty rdf:ID="mainConstituent">
        <rdfs:label>main constituent</rdfs:label>
        <rdfs:comment>The predicate #$mainConstituent is used to
            indicate the most significant portion of an element of
            #$ExistingStuffType that makes up a particular
            #$PartiallyTangible thing.  (#$mainConstituent X Y) means
            that X&apos;s #$constituents include Y, and (as a default)
            the physical properties of the thing X are those of its main
            constituent, Y.  For example, for a particular instance of
            #$Lemonade, there is an instance of #$Water which is the
            #$mainConstituent, and most of the physical properties of
            the #$Lemonade derive from #$Water.  On the other hand, a
            person is NOT considered to have some portion of #$Water as
            #$mainConstituent, even though much of a person&apos;s mass
            is #$Water, because the physical properties of a person are
            not the same as those of water.</rdfs:comment>
        <guid>bd58d301-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#constituents"/>
        <daml:subPropertyOf rdf:resource="#conceptuallyRelated"/>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:UniqueProperty>
    <daml:UnambiguousProperty rdf:ID="mainProduct">
        <rdfs:label>main product</rdfs:label>
        <rdfs:comment>The predicate #$mainProduct is used to identify
            the main item in a particular set of stuff that a customer
            gets when buying a packaged product.  (#$mainProduct FORM
            PROD) means that the particular #$Product PROD is the main
            item of the #$FormalProduct FORM--as distinct from the
            accessories, agreements, packaging, literature, etc., that
            come along with it.</rdfs:comment>
        <guid>bd58bea8-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#physicalParts"/>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:UnambiguousProperty>
    <daml:UniqueProperty rdf:ID="majorCityInState">
        <rdfs:label>major city in state</rdfs:label>
        <rdfs:comment>(#$cityInState CITY STATE) means that CITY   is
            generally considered to be a major (i.e.,    highly
            populated or important) #$City    in STATE.</rdfs:comment>
        <guid>bf89f9b1-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#cityInState"/>
        <daml:subPropertyOf rdf:resource="#conceptuallyRelated"/>
        <daml:domain rdf:resource="#City"/>
        <daml:range rdf:resource="#CountrySubsidiary"/>
    </daml:UniqueProperty>
    <daml:Property rdf:ID="majorUndertakingsOf">
        <rdfs:label>major undertakings of</rdfs:label>
        <rdfs:comment>(#$majorUndertakingsOf ACTION AGENT) means that
            AGENT consciously performed ACTION.  The success and
            consequence(s) of ACTION are important to AGENT.  As a
            result, for a sentient AGENT, failure usually results in
            AGENT feeling negative emotions, and success positive emotions.</rdfs:comment>
        <guid>bd58e52c-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#performedBy"/>
        <daml:domain rdf:resource="#Action"/>
        <daml:range rdf:resource="#Agent"/>
    </daml:Property>
    <daml:Property rdf:ID="makesProductType">
        <rdfs:label>makes product type</rdfs:label>
        <rdfs:comment>The predicate #$makesProductType is used to
            indicate that a particular company makes a specific (i.e.,
            type of) product.  (#$makesProductType ORG PRODTYP) means
            that the #$CommercialOrganization ORG manufactures the
            #$ProductType PRODTYP.  Cf. #$madeBy, #$mainProductType and #$soleProductType.</rdfs:comment>
        <guid>bd5900cf-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#conceptuallyRelated"/>
        <daml:domain rdf:resource="#Organization"/>
        <daml:range rdf:resource="#ProductType"/>
    </daml:Property>
    <daml:UniqueProperty rdf:ID="maleParentActor">
        <rdfs:label>father</rdfs:label>
        <rdfs:comment>(#$maleParentActor ?EVENT ?ORGANISM) means that
            ?ORGANISM is the male parent in the
            #$SexualReproductionEvent ?EVENT.</rdfs:comment>
        <guid>bd58c71f-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#parentActors"/>
        <daml:range rdf:resource="#Organism-Whole"/>
    </daml:UniqueProperty>
    <daml:Property rdf:ID="maleficiary">
        <rdfs:label>maleficiaries</rdfs:label>
        <rdfs:comment>(#$maleficiary ACT AGT) means that the #$Agent AGT
            is harmed by the occurrence of the action ACT.  That is, the
            interest or welfare of AGT is thwarted, blocked, or harmed
            in ACT.</rdfs:comment>
        <guid>bd66d33a-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Event"/>
        <daml:range rdf:resource="#Agent"/>
    </daml:Property>
    <daml:Property rdf:ID="malleabilityOfObject">
        <rdfs:label>malleability of object</rdfs:label>
        <rdfs:comment>(#$malleabilityOfObject OBJ DEGREE) indicates that
            the instance of #$SolidTangibleThing OBJ has the degree of
            #$Malleability DEGREE.</rdfs:comment>
        <guid>bd58d339-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasAttributes"/>
        <daml:domain rdf:resource="#SolidTangibleThing"/>
        <daml:range rdf:resource="#Malleability"/>
    </daml:Property>
    <daml:UniqueProperty rdf:ID="maritalStatus">
        <rdfs:label>marital status</rdfs:label>
        <rdfs:comment>(#$maritalStatus PRSN MSTAT) means #$Person PRSN
            has the #$MaritalStatusOfPeople MSTAT.  The latter may be:
            #$Married, #$Widowed, #$Single, etc.  E.g., (#$maritalStatus
            #$KeithRichards #$Married).  The marital status of a person
            depends on whether, and when, that person was married to
            another person, and how the marriage ended.</rdfs:comment>
        <guid>bd58e988-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasAttributes"/>
        <daml:domain rdf:resource="#Person"/>
        <daml:range rdf:resource="#MaritalStatusOfPeople"/>
    </daml:UniqueProperty>
    <daml:Property rdf:ID="massNumber">
        <rdfs:label>mass number</rdfs:label>
        <rdfs:comment>(#$massNumber WORD STRING) means that STRING is
            the mass noun form of WORD.  For example, `paper&apos; is
            the mass noun form of #$Paper-TheWord.</rdfs:comment>
        <guid>bd60ad01-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#LexicalWord"/>
        <daml:range rdf:resource="#CharacterString"/>
    </daml:Property>
    <daml:Property rdf:ID="massOfObject">
        <rdfs:label>mass</rdfs:label>
        <rdfs:comment>(#$massOfObject OBJ MASS) means that the tangible
            object OBJ has #$Mass MASS.</rdfs:comment>
        <guid>bd590b21-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasAttributes"/>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#Mass"/>
    </daml:Property>
    <daml:UniqueProperty rdf:ID="mate">
        <rdfs:label>mate</rdfs:label>
        <rdfs:comment>(#$mate ANIM1 ANIM2) means ANIM1 and ANIM2 mate
            (at least once) from time to time.</rdfs:comment>
        <guid>bd5892cb-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#positiveVestedInterest"/>
        <daml:subPropertyOf rdf:resource="#friends"/>
        <daml:subPropertyOf rdf:resource="#acquaintedWith"/>
        <daml:domain rdf:resource="#Animal"/>
        <daml:range rdf:resource="#Animal"/>
    </daml:UniqueProperty>
    <daml:UniqueProperty rdf:ID="maxQuantValue">
        <rdfs:label>max quant value</rdfs:label>
        <rdfs:comment>(#$maxQuantValue SCALAR POINT) means that the
            upper limit of the quantity SCALAR is POINT, an element of
            #$ScalarPointValue.  SCALAR is an element of
            #$ScalarInterval.  For example, the #$maxQuantValue for the
            pay of mail room employees might be (#$DollarsPerHour 6.5);
            e.g., (#$maxQuantValue `MailPay&apos; (#$DollarsPerHour
            6.5)).  Another example: (#$maxQuantValue (#$Unity 5 10) 10).</rdfs:comment>
        <guid>bd5880b9-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#ScalarInterval"/>
        <daml:range rdf:resource="#ScalarPointValue"/>
    </daml:UniqueProperty>
    <daml:Property rdf:ID="maximalConnectedSubSystems">
        <rdfs:label>maximal connected sub systems</rdfs:label>
        <rdfs:comment>(#$maximalConnectedSubSystems SYS SUB) means that
            SUB is a &apos;maximal&apos; connected subsystem of SYS,
            i.e., that SUB is an entire connected piece of SYS without
            other disconnected pieces of SYS.  That is to say, (i) SUB
            is a connected path system, and consequently must have at
            least one node, say NODE, in it, and (ii) SUB is a subsystem
            of SYS, and (iii) for every connected subsystem SUB1 of SYS
            containing NODE, SUB1 is a subsystem of SUB.  Thus a maximal
            connected subsystem SUB of a path system SYS must satisfy
            the conditions that (a) for each point X in SUB and each
            point Y in SYS that is not in SUB, X and Y are not connected
            in SYS, and that (b) for any nodes X and Y in SUB, for any
            link LINK in SYS between X and Y, LINK must also be in SUB,
            and that (c) for each point X in SYS, if X is on a link in
            SYS which is also a link in SUB, then X must also be in SUB.
            It follows that if SUB is a maximal connected subsystem of
            SYS, SUB must be a link-closed subsystem as well as a
            point-closed subsystem of SYS.  Another consequence is that
            if SUB is a maximal connected subsystem of SYS, and if X is
            a point in SUB and is on a loop in SYS, then the loop must
            also be in SUB.</rdfs:comment>
        <guid>be9e807b-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#linkClosedSubSystems"/>
        <daml:subPropertyOf rdf:resource="#pointClosedSubSystems"/>
        <daml:domain rdf:resource="#PathSystem"/>
        <daml:range rdf:resource="#ConnectedPathSystem"/>
    </daml:Property>
    <daml:Property rdf:ID="means-RST">
        <rdfs:label>means - r s t</rdfs:label>
        <rdfs:comment>The discourse relation that holds between two
            segments of text when ARG2 specifies a means of carrying out ARG1.</rdfs:comment>
        <guid>bd63bbe6-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#LinguisticObject"/>
        <daml:range rdf:resource="#LinguisticObject"/>
    </daml:Property>
    <daml:Property rdf:ID="measure">
        <rdfs:label>measure</rdfs:label>
        <rdfs:comment>This predicate relates a temporal thing to the
            total elapsed from its start to its end. (#$measure
            TEMPTHING MEASURE) means that MEASURE is the total elapsed
            time from when TEMPTHING started to happen (if an event) or
            started to exist (if a physical object or static situation)
            to when TEMPTHING ended or ceased to exist.  If TEMPTHING is
            #$temporallyContinuous,  its #$measure is the same as its
            #$duration (the length of time during which it actually
            happened or existed); but if TEMPTHING is discontinuous, its
            #$measure is strictly greater than its #$duration.  For
            example, the discontinuous event  GeorgeWashingtonSleeping
            has a #$measure that is about three times as long as its
            #$duration (assuming he slept about 8 hours a night).</rdfs:comment>
        <guid>bd590049-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#TemporalThing"/>
        <daml:range rdf:resource="#Time-Quantity"/>
    </daml:Property>
    <daml:Property rdf:ID="mediators">
        <rdfs:label>mediators</rdfs:label>
        <rdfs:comment>The facilitators of a process including the
            agents, brokers, or mediators that assist in arranging a
            contract, transaction, or agreement among several parties.</rdfs:comment>
        <guid>bd589c4a-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#deliberateActors"/>
        <daml:subPropertyOf rdf:resource="#socialParticipants"/>
        <daml:subPropertyOf rdf:resource="#preActors"/>
        <daml:domain rdf:resource="#SocialOccurrence"/>
        <daml:range rdf:resource="#Agent"/>
    </daml:Property>
    <daml:UniqueProperty rdf:ID="memberOfSpecies">
        <rdfs:label>member of species</rdfs:label>
        <rdfs:comment>(#$memberOfSpecies ORG SPECIES) means that the
            organism ORG is a member of the #$BiologicalSpecies SPECIES.</rdfs:comment>
        <guid>bd588e0c-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#isa"/>
        <daml:domain rdf:resource="#CycLReifiableDenotationalTerm"/>
        <daml:range rdf:resource="#BiologicalSpecies"/>
    </daml:UniqueProperty>
    <daml:UnambiguousProperty rdf:ID="memberOfThisPoliticalParty">
        <rdfs:label>member of this political party</rdfs:label>
        <rdfs:comment>(#$memberOfThisPoliticalParty PARTY PERS) means
            that #$Person PERS is a (registered) member of
            #$PoliticalParty PARTY.  For example,
            (#$memberOfThisPoliticalParty #$DemocraticParty #$BillClinton).</rdfs:comment>
        <guid>bd58d50c-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasMembers"/>
        <daml:domain rdf:resource="#PoliticalParty"/>
        <daml:range rdf:resource="#HumanAdult"/>
    </daml:UnambiguousProperty>
    <daml:Property rdf:ID="microtheoryDesignationArgnum">
        <rdfs:label>microtheory designation argnum</rdfs:label>
        <rdfs:comment>Used to specify which argument of a given
            #$MicrotheoryDesignatingRelation designates the microtheory
            in which to interpret some formula.</rdfs:comment>
        <guid>bebece64-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#MicrotheoryDesignatingRelation"/>
        <daml:range rdf:resource="#PositiveInteger"/>
    </daml:Property>
    <daml:UniqueProperty rdf:ID="middleName">
        <rdfs:label>middle name</rdfs:label>
        <rdfs:comment>(#$middleName X STRNG) means that #$Person X is
            known by the #$HumanGivenNameString STRNG as his or her
            middle name.  E.g., (#$middleName #$Lenat
            ``Bruce&apos;&apos;).  A person rarely has more than one
            middle name.  In some cultures, when a wedding occurs, one
            party changes their middle name to whatever their #$lastName
            used to be, thus leading to cases where the person&apos;s
            new middle name is actually a #$HumanFamilyNameString rather
            than a #$HumanGivenNameString --- the same is true in some
            cultures when an infant is born and given, as a middle name,
            the last name of a grandparent (other than the infant&apos;s
            last name).  See also #$middleNameInitial.</rdfs:comment>
        <guid>bd589d41-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#nameOfAgent"/>
        <daml:domain rdf:resource="#CycLReifiableDenotationalTerm"/>
        <daml:range rdf:resource="#HumanGivenNameString"/>
    </daml:UniqueProperty>
    <daml:UniqueProperty rdf:ID="minQuantValue">
        <rdfs:label>min quant value</rdfs:label>
        <rdfs:comment>(#$minQuantValue SCALAR POINT) means that the
            lower limit of SCALAR is POINT, an element of
            #$ScalarPointValue.  SCALAR is an element of
            #$ScalarInterval.  For example, the #$minQuantValue for the
            pay of mail room employees might be (#$DollarsPerHour 4.5);
            e.g., (#$minQuantValue `MailPay&apos; (#$DollarsPerHour
            4.5)).  Another example: (#$minQuantValue (#$Unity 5 10) 5).</rdfs:comment>
        <guid>bd5880ba-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#ScalarInterval"/>
        <daml:range rdf:resource="#ScalarPointValue"/>
    </daml:UniqueProperty>
    <daml:Property rdf:ID="monetaryValue">
        <rdfs:label>monetary value</rdfs:label>
        <rdfs:comment>The value of an element of #$SomethingExisting,
            expressed in a monetary currency.--OKeefe, Jul 22, 1997</rdfs:comment>
        <guid>bd58d4b2-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#SomethingExisting"/>
        <daml:range rdf:resource="#Money"/>
    </daml:Property>
    <daml:Property rdf:ID="moneyTransferMode">
        <rdfs:label>money transfer mode</rdfs:label>
        <rdfs:comment>(#$moneyTransferMode TRANSACTION  TYPE) means that
            in some particular money transfer TRANSACTION,  the
            #$MoneyTenderType used in that transaction was TYPE, e.g.,
            #$CreditCard, #$Check-TenderObject, etc.</rdfs:comment>
        <guid>bd5891b4-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#MoneyTransfer"/>
        <daml:range rdf:resource="#MoneyTenderType"/>
    </daml:Property>
    <daml:Property rdf:ID="moneyTransferred">
        <rdfs:label>money transferred</rdfs:label>
        <rdfs:comment>This predicate indicates the amount of money
            involved in a particular transfer of funds.
            (#$moneyTransferred TRANS MONEY) means that MONEY is the
            quantity of #$Money transferred in the money transfer event
            TRANS.   Note: MONEY is distinct from the physical
            #$TenderObjects (q.v.) used to accomplish that transfer (cf.
            #$objectTendered).  For example, the #$moneyTransferred to
            pay a car payment might be the amount US$400, while the
            #$objectTendered in the paying is an instance of #$Check-TenderObject.</rdfs:comment>
        <guid>bd5896a0-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Buying"/>
        <daml:range rdf:resource="#Money"/>
    </daml:Property>
    <daml:Property rdf:ID="monumentHonors">
        <rdfs:label>honoree</rdfs:label>
        <rdfs:comment>(#$monumentHonors MONUMENT HONOREE) means that
            MONUMENT is a fixed, solid, lasting #$MemorialMarker (often,
            specifically a #$Monument) constructed to honor or
            commemmorate HONOREE, and to cause people who perceive
            MONUMENT to remember and respect HONOREE.  HONOREE must be a
            #$Person (often a dead person) rather than a group of
            people, a pet, an event, other physical object (for honoring
            these, see #$artifactHonors).  Usually, but not always, the
            MONUMENT is built by someone other than HONOREE (but some
            people build monuments to themselves).  If HONOREE is a
            living #$Person when MONUMENT is built, HONOREE may be
            present at an #$Event of announcing, inaugurating or
            unveiling the MONUMENT; see #$eventHonors.</rdfs:comment>
        <guid>c154cf87-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#artifactHonors"/>
        <daml:range rdf:resource="#Person"/>
    </daml:Property>
    <daml:Property rdf:ID="mother">
        <rdfs:label>mother</rdfs:label>
        <rdfs:comment>(#$mother OFFSPRING FEMALE) means that the
            #$FemaleAnimal FEMALE is the female biological parent of the
            #$Animal OFFSPRING    .</rdfs:comment>
        <guid>bd58d343-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#biologicalMother"/>
        <daml:domain rdf:resource="#Animal"/>
        <daml:range rdf:resource="#FemaleAnimal"/>
    </daml:Property>
    <daml:Property rdf:ID="motionPathway-Complete">
        <rdfs:label>pathway</rdfs:label>
        <rdfs:comment>This predicate can be used to indicate that the
            trajectory or trajectories travelled by one or more objects
            during a movement event follow some spatial path throughout
            the entire movement. More formally, if MOVE is an instance
            of #$Translation-SingleTrajectory, (#$motionPathway-Complete
            MOVE PATH) means that the instance  PATH of #$Path-Spatial
            contains the entire instance of #$Trajectory along which the
            objects moving (see #$objectMoving) travel in MOVE.  Note
            that there can be at most one #$motionPathway-Complete in
            this case.  If MOVE is an instance of
            #$Translation-MultiTrajectory, (#$motionPathway-Complete
            MOVE PATH) means that the instance PATH of #$Path-Spatial
            contains the entire instance of #$Trajectory along which at
            least one of the objects moving in MOVE travels.  In this
            case, more than one #$motionPathway-Complete may exist.
            (Note that the instance of #$Traversal determined by the
            #$trajectory-Complete need not occupy the whole length of
            PATH.) To explain this predicate somewhat differently, any
            #$motionPathway-Complete of an instance of
            #$Movement-TranslationEvent connects the starting and
            stopping points (the #$fromLocation and #$toLocation) of the
            whole trajectory of at least one object in the movement
            event (See also #$pathConnects).   Note that PATH may be a
            marked or unmarked instance of #$Path-Spatial.  See also
            #$trajectoryPassesThrough and #$motionPathway-Partial. You
            can use #$trajectoryPassesThrough to state that an object
            passes through a particular location on the object&apos;s trajectory.</rdfs:comment>
        <guid>bd58827b-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#motionPathway-Partial"/>
        <daml:domain rdf:resource="#Movement-TranslationEvent"/>
        <daml:range rdf:resource="#Path-Spatial"/>
    </daml:Property>
    <daml:Property rdf:ID="motionPathway-Partial">
        <rdfs:label>motion pathway - partial</rdfs:label>
        <rdfs:comment>This predicate can be used to indicate one of the
            paths followed in some movement event. More formally,
            (#$motionPathway-Partial MOVE PATH) means that the instance
            MOVE of #$Movement-TranslationEvent has a trajectory (see
            #$trajectory-Complete) with a sub-trajectory in common with
            some #$subPaths of the instance PATH of #$Path-Spatial. For
            example, if a certain trip to Dallas from Austin is via
            highway I-35, this does not imply either that the whole
            journey is along I-35 (it also may be along driveways and
            side streets), or that it is along all of I-35 (which would
            take you from the Mexican border all the way to the Canadian
            border).  A part of the journey is along a part of I-35.
            Contrast this predicate with #$motionPathway-Complete, which
            indicates the relation between a movement MOVE and an
            instance of #$Path-Spatial followed throughout all of MOVE.</rdfs:comment>
        <guid>bff40598-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#trajectoryPassesThrough"/>
        <daml:domain rdf:resource="#Movement-TranslationEvent"/>
        <daml:range rdf:resource="#Path-Spatial"/>
    </daml:Property>
    <daml:Property rdf:ID="motivation-RST">
        <rdfs:label>motivation - r s t</rdfs:label>
        <rdfs:comment>The discourse relation that holds between two
            segments of text when ARG2 specifies something which could
            motivate the listener to carry out the actions described in ARG1.</rdfs:comment>
        <guid>be8c8f57-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#LinguisticObject"/>
        <daml:range rdf:resource="#LinguisticObject"/>
    </daml:Property>
    <daml:Property rdf:ID="mtInferenceFunction">
        <rdfs:label>mt inference function</rdfs:label>
        <rdfs:comment>The function which is used to perform inference
            within this microtheory.</rdfs:comment>
        <guid>bd59f3c1-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Microtheory"/>
        <daml:range rdf:resource="#SubLSymbol"/>
    </daml:Property>
    <daml:UniqueProperty rdf:ID="myCreationPurpose">
        <rdfs:label>my creation purpose</rdfs:label>
        <rdfs:comment>Internal bookkeeping predicate used for keeping
            track of the category  of the task that the creator of a Cyc
            constant was performing at the  time that constant was
            created.  The categories that this predicate  takes in the
            second argument exist for the purpose of internal record
            keeping; do not confuse them with the official Cycorp
            billing  categories.</rdfs:comment>
        <guid>c0f93b23-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#CycLReifiableDenotationalTerm"/>
    </daml:UniqueProperty>
    <daml:UniqueProperty rdf:ID="myCreationSecond">
        <rdfs:label>my creation second</rdfs:label>
        <rdfs:comment>(#$myCreationSecond X SECOND) means that the
            #$CycLConstant X was created precisely at SECOND within the
            day it was created.  SECOND is not, however, an instance of
            #$Date.  Rather it is an element of #$CycUniversalSecond.
            This assertion is not intended for inference, only for
            documentation, so the format is a simple one, designed for
            human readability and for use by internal Cyc functions.
            The format of SECOND is HHMMSS, so for example, midnight is
            000000 (or simply 0), noon is 120000, 3:42:59 pm is 154259,
            and 11:59:59 pm is 235959.  See also #$myCreationTime.</rdfs:comment>
        <guid>c0714577-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#CycLConstant"/>
    </daml:UniqueProperty>
    <daml:UniqueProperty rdf:ID="myCreationTime">
        <rdfs:label>my creation time</rdfs:label>
        <rdfs:comment>(#$myCreationTime X TIME) means that the
            #$CycLConstant X was created at time TIME.  TIME is not,
            however, an instance of #$Date.  Rather it is an instance of
            #$CycUniversalDate.  This assertion is not intended for
            inference, only for documentation, so the format is a simple
            one, designed for human readability and for use by internal
            Cyc functions.  The format of TIME is YYYYMMDD, so for
            example, 19870911 is September 11, 1987.</rdfs:comment>
        <guid>bd588107-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#CycLConstant"/>
    </daml:UniqueProperty>
    <daml:UniqueProperty rdf:ID="myCreator">
        <rdfs:label>my creator</rdfs:label>
        <rdfs:comment>(#$myCreator X Y) means that Y is the constant
            representing the person who introduced the constant X into
            the Cyc vocabulary. In general, the editing interfaces to
            the Cyc KB only allow the KB to be modified when an instance
            of #$Cyclist is designated as the author of the changes.
            See also #$sourceOfTerm-Person.</rdfs:comment>
        <guid>bd58810b-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#CycLReifiableDenotationalTerm"/>
        <daml:range rdf:resource="#Cyclist"/>
    </daml:UniqueProperty>
    <daml:UniqueProperty rdf:ID="myEntity">
        <rdfs:label>my entity</rdfs:label>
        <rdfs:comment>(#$myEntity ?X ?Y) indicates that ?Y is an
            #$Entity (qv) and that ?X is some subabstraction of ?Y.
            That is, (#$subAbstrac ?Y ?X).  Note that each
            #$SomethingExisting ?X will generally have one unique
            #$Entity ?Y of which it is a #$subAbstrac.  E.g.,
            (#$myEntity AlbertEinsteinWhileAtPrinceton AlbertEinstein).</rdfs:comment>
        <guid>bd58fb7c-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#SomethingExisting"/>
        <daml:range rdf:resource="#Entity"/>
    </daml:UniqueProperty>
    <daml:Property rdf:ID="nameOfAgent">
        <rdfs:label>name of agent</rdfs:label>
        <rdfs:comment>(#$nameOfAgent AGT STRING) means STRING is the
            name(s) of AGT.  AGT can be a #$Person, #$Animal,
            #$Organization, etc.  In most contexts, this means that AGT
            may normally be called STRING, in that context, and should
            therefore include their #$salutation if the context is a
            formal one, should omit their #$lastName if it is
            unambiguous and the context is an intimate one, etc..</rdfs:comment>
        <guid>bd58da37-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#nameString"/>
        <daml:domain rdf:resource="#Agent-Generic"/>
        <daml:range rdf:resource="#ProperNameString"/>
    </daml:Property>
    <daml:Property rdf:ID="nameString">
        <rdfs:label>name string</rdfs:label>
        <rdfs:comment>(#$nameString THING STRING) means that  the name
            of the thing THING is the string STRING. Use it to connect
            constants or NATS with their names. For agents, use the more
            specific predicate #$nameOfAgent.  If a constant has several
            namestrings, use #$preferredNameString to pick one for use
            in English paraphrase.</rdfs:comment>
        <guid>c0fdf7e8-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#CycLReifiableDenotationalTerm"/>
        <daml:range rdf:resource="#ProperNameString"/>
    </daml:Property>
    <daml:Property rdf:ID="natArgumentsEqual">
        <rdfs:label>nat arguments equal</rdfs:label>
        <rdfs:comment>(#$natArgumentsEqual NAT1 NAT2) means that the
            arguments of NAT1 and NAT2 unify.  For example,
            (#$natArgumentsEqual (#$FemaleFn #$Dog) (#$MaleFn #$Dog).
            More precisely, (#$and (#$termOfUnit NAT1 (FUNCTION1 .
            ARGS)) (#$termOfUnit NAT2 (FUNCTION2 . ARGS))) implies
            (#$natArgumentsEqual NAT1 NAT2).</rdfs:comment>
        <guid>be4425ef-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#CycLReifiableNonAtomicTerm"/>
        <daml:range rdf:resource="#CycLReifiableNonAtomicTerm"/>
    </daml:Property>
    <daml:UniqueProperty rdf:ID="natFunction">
        <rdfs:label>nat function</rdfs:label>
        <rdfs:comment>(#$natFunction NAT FUNCTION) states that FUNCTION
            is the function used in the non-atomic term NAT.  For
            example,  (#$natFunction (#$JuvenileFn #$Dog) #$JuvenileFn).
            More precisely, (#$termOfUnit ?NAT (?FUNCTION ...)) implies
            (#$natFunction ?NAT ?FUNCTION).</rdfs:comment>
        <guid>c00d7a96-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#termDependsOn"/>
        <daml:domain rdf:resource="#CycLReifiableNonAtomicTerm"/>
        <daml:range rdf:resource="#ReifiableFunction"/>
    </daml:UniqueProperty>
    <daml:Property rdf:ID="nationalLanguage">
        <rdfs:label>national language</rdfs:label>
        <rdfs:comment>(#$nationalLanguage NAT LANG) means that LANG is
            officially recognized by the political region NAT as a
            national language. A country may have more than one nationalLanguage.</rdfs:comment>
        <guid>bd58dc3e-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#languagesSpokenHere"/>
        <daml:domain rdf:resource="#GeopoliticalEntity"/>
        <daml:range rdf:resource="#LivingLanguage"/>
    </daml:Property>
    <daml:Property rdf:ID="nativeLanguage">
        <rdfs:label>native language</rdfs:label>
        <rdfs:comment>The first language spoken by a person.
            EntryFormat is #$SetTheFormat, to cover cases of bi-lingual childhoods.</rdfs:comment>
        <guid>bd58d9e2-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#languageSpoken"/>
        <daml:domain rdf:resource="#Person"/>
        <daml:range rdf:resource="#NaturalLanguage"/>
    </daml:Property>
    <daml:Property rdf:ID="near">
        <rdfs:label>nearby object</rdfs:label>
        <rdfs:comment>This intentionally-vague predicate    relates
            spatial things that are relatively near each other.
            (#$near THIS THAT) means that the distance between    THIS
            and THAT is such that -- given the situation at hand and
            the sorts of things that THIS and THAT are -- they would be
            considered near each other by most observers.  When
            appropriate, use a more precisely-defined predicate, such as
            #$nearToDegree, #$nearRelativeTo, #$nearForRolesInEventType,
            or    #$nearnessForRolesInEventType.</rdfs:comment>
        <guid>c0fbad76-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#SpatialThing"/>
        <daml:range rdf:resource="#SpatialThing"/>
    </daml:Property>
    <daml:Property rdf:ID="nearestGenlAttributes">
        <rdfs:label>nearest genl attributes</rdfs:label>
        <rdfs:comment>(#$nearestGenlAttributes ATT NEAR-ATT) relates any
            attribute value ATT to the nearest unsubsumed attribute
            value NEAR-ATT of which it is a spec attribute.  This
            predicate is #$notAssertible, since it must always be
            recomputed from the current state of the #$genlAttributes hierarchy.</rdfs:comment>
        <guid>bde3facb-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#genlAttributes"/>
        <daml:domain rdf:resource="#AttributeValue"/>
        <daml:range rdf:resource="#AttributeValue"/>
    </daml:Property>
    <daml:Property rdf:ID="nearestGenlMt">
        <rdfs:label>nearest genl mt</rdfs:label>
        <rdfs:comment>(#$nearestGenlMt MT NEAR-MT) relates any
            microtheory MT to the nearest unsubsumed microtheory of
            which it is a spec microtheory. This predicate is
            #$notAssertible, since it must always be recomputed from
            the current state of the #$genlMt hierarchy.</rdfs:comment>
        <guid>be9e0a7c-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#genlMt"/>
        <daml:domain rdf:resource="#Microtheory"/>
        <daml:range rdf:resource="#Microtheory"/>
    </daml:Property>
    <daml:Property rdf:ID="nearestGenlPreds">
        <rdfs:label>nearest genl preds</rdfs:label>
        <rdfs:comment>(#$nearestGenlPreds PRED NEAR-PRED) relates any
            predicate PRED to the nearest unsubsumed predicate NEAR-PRED
            of which it is a spec predicate. #$nearestGenlPreds is
            #$notAssertible, since it must always be recomputed from
            the current state of the #$genlPreds hierarchy.</rdfs:comment>
        <guid>bd91b03d-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#genlPreds"/>
        <daml:domain rdf:resource="#Predicate"/>
        <daml:range rdf:resource="#Predicate"/>
    </daml:Property>
    <daml:Property rdf:ID="nearestGenls">
        <rdfs:label>nearest genls</rdfs:label>
        <rdfs:comment>(#$nearestGenls COL NEAR-GENL) relates any
            collection COL to the nearest unsubsumed collections
            NEAR-GENL of  which it is a subset. This predicate is
            #$notAssertible, since it  must always be recomputed from
            the current state of the #$genls  heirarchy.</rdfs:comment>
        <guid>bf05e63f-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#genls"/>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
    </daml:Property>
    <daml:Property rdf:ID="nearestIsa">
        <rdfs:label>nearest isa</rdfs:label>
        <rdfs:comment>(#$nearestIsa OBJ COL) relates any object OBJ to
            the nearest unsubsumed collections COL of which it is an
            element. This predicate is #$notAssertible, since it must
            always be recomputed from the current state of the #$isa and
            #$genls hierarchy.</rdfs:comment>
        <guid>bf411eed-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#isa"/>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
    </daml:Property>
    <daml:Property rdf:ID="nearestSpecAttributes">
        <rdfs:label>nearest spec attributes</rdfs:label>
        <rdfs:comment>(#$nearestSpecAttributes ATT NEAR-ATT) relates any
            attribute value ATT to the nearest unsubsumed attribute
            NEAR-ATT which are spec attributes of ATT.
            #$nearestSpecAttributes is #$notAssertible, since it must
            always be recomputed from the current state of the
            #$genlAttributes hierarchy. Moreover, it is merely the
            #$elInverse of #$nearestGenlAttributes.</rdfs:comment>
        <guid>bfa74cc2-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#AttributeValue"/>
        <daml:range rdf:resource="#AttributeValue"/>
    </daml:Property>
    <daml:Property rdf:ID="nearestSpecMt">
        <rdfs:label>nearest spec mt</rdfs:label>
        <rdfs:comment>(#$nearestSpecMt MT NEAR-MT) relates any
            microtheory MT to the nearest unsubsumed microtheories
            NEAR-MT which are spec microtheories of MT.  This predicate
            is #$notAssertible, since it must always be recomputed from
            the current state of the #$genlMt hierarchy. Moreover, it is
            merely the #$elInverse of #$nearestGenlMt.</rdfs:comment>
        <guid>bdc1dc70-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Microtheory"/>
        <daml:range rdf:resource="#Microtheory"/>
    </daml:Property>
    <daml:Property rdf:ID="nearestSpecPreds">
        <rdfs:label>nearest spec preds</rdfs:label>
        <rdfs:comment>(#$nearestSpecPreds PRED NEAR-PRED) relates any
            predicate PRED to the nearest unsubsumed predicates
            NEAR-PRED which are spec predicates of PRED.
            #$nearestSpecPreds is #$notAssertible, since it must always
            be recomputed from the current state of the #$genlPreds
            hierarchy. Moreover, it is merely the #$elInverse of #$nearestGenlPreds.</rdfs:comment>
        <guid>bf685db5-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Predicate"/>
        <daml:range rdf:resource="#Predicate"/>
    </daml:Property>
    <daml:Property rdf:ID="nearestSpecs">
        <rdfs:label>nearest specs</rdfs:label>
        <rdfs:comment>(#$nearestSpecs COL NEAR-SPEC) relates any
            collection COL to the nearest unsubsumed collections
            NEAR-SPEC which are subsets of COL. This predicate is
            #$notAssertible, since it  must always be recomputed from
            the current state of the #$genls hierarchy.  Moreover, it is
            merely the #$elInverse of #$nearestGenls.</rdfs:comment>
        <guid>bff980b2-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
    </daml:Property>
    <daml:Property rdf:ID="negationAttribute">
        <rdfs:label>negation attribute</rdfs:label>
        <rdfs:comment>(#$negationAttribute ATT1 ATT2) means that a thing
            cannot have both ATT1 and ATT2 as attributes at the same or
            overlapping times.</rdfs:comment>
        <guid>bd58a5b5-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#AttributeValue"/>
        <daml:range rdf:resource="#AttributeValue"/>
    </daml:Property>
    <daml:Property rdf:ID="negationInverse">
        <rdfs:label>negation inverse</rdfs:label>
        <rdfs:comment>The predicate #$negationInverse is used to
            describe a relationship between some elements of
            #$BinaryPredicate.  (#$negationInverse PRED INV) means that
            if PRED holds between a pair of items &lt;X,Y&gt;, then INV
            does NOT hold between the inverted pair &lt;Y,X&gt;.  In
            other words, #$negationInverse is syntactic shorthand for
            (#$implies (PRED X Y) (#$not (INV Y X))).  Note that PRED
            and INV may take the same value; e.g., (#$negationInverse
            #$father #$father) is true and means that if X&apos;s
            #$father is Y, then X is NOT Y&apos;s #$father.  Thus,
            #$negationInverse is true for all elements of #$AsymmetricBinaryPredicate.</rdfs:comment>
        <guid>bd5c44e1-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Property"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Property"/>
    </daml:Property>
    <daml:Property rdf:ID="negationPreds">
        <rdfs:label>negation preds</rdfs:label>
        <rdfs:comment>The predicate #$negationPreds is used to represent
            a relation between some elements of #$Predicate.
            (#$negationPreds PRED1 PRED2) means that PRED1 is a negation
            of PRED2 in the sense that any tuple in the extension of
            PRED1 is NOT also a tuple in the extension of PRED2.  In
            other words, (#$negationPreds PRED1 PRED2) is shorthand for
            (#$implies (PRED1 {arg-list}) (#$not (PRED2 {arg-list}))).
            For example, (#$negationPreds #$transportees #$transporter).</rdfs:comment>
        <guid>bd610a5c-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Predicate"/>
        <daml:range rdf:resource="#Predicate"/>
    </daml:Property>
    <daml:Property rdf:ID="negativeVestedInterest">
        <rdfs:label>negative vested interest</rdfs:label>
        <rdfs:comment>(#$negativeVestedInterest  AGT OBJ) means #$Agent
            AGT has a negative interest in the object OBJ or in the good
            fortune of OBJ, and a positive interest in its misfortune.
            Generally, AGT will be helped or pleased by the destruction,
            diminution, weakening, or retarding of OBJ, and will be hurt
            or displeased if OBJ is preserved or enhanced.  See #$positiveVestedInterest.</rdfs:comment>
        <guid>bd58ff82-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Agent"/>
        <daml:range rdf:resource="#TemporalThing"/>
    </daml:Property>
    <daml:Property rdf:ID="nodeInSystem">
        <rdfs:label>node in system</rdfs:label>
        <rdfs:comment>(#$nodeInSystem NODE SYS) holds just in case NODE
            is a &apos;node&apos; in SYS.  Every node in SYS is a point
            in SYS, but (i) only nodes can be end points of links (see
            #$linkBetweenInSystem), &apos;deadends&apos; (see
            #$deadEndInSystem) or &apos;isolated points&apos; (i.e.,
            points that are not on any link or loop, see
            #$isolatedNodeInSystem).  (ii) Each point that is not a node
            must be somewhere on a single link.  That is to say, for
            each point X in SYS, either (#$pointOnPath X LINK) holds for
            unique link LINK in SYS, or X is a node.  This implies that
            every &apos;intersection&apos; point (see
            #$junctionInSystem) must be a node.  Note that in some cases
            (such as talking about relations between different
            #$PathSystems), using (#$NodesFn SYS) to denote the set of
            all nodes in SYS is more convenient than using the predicate #$nodeInSystem.</rdfs:comment>
        <guid>bfbd5122-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#pointInSystem"/>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
        <daml:range rdf:resource="#PathSystem"/>
    </daml:Property>
    <daml:Property rdf:ID="nonDeliberateActors">
        <rdfs:label>non deliberate actors</rdfs:label>
        <rdfs:comment>(#$nonDeliberateActors ACT ACTR) means that ACTR
            has a #$Role in the #$Event ACT but is not acting
            deliberately.  Examples: (1) President #$JohnKennedy was a
            #$nonDeliberateActors in his assassination; (2) a person is
            a #$nonDeliberateActors in his/her own autonomic bodily
            functioning (e.g., heart beating, digesting); (3) Mount
            #$Vesuvius-Volcano was a #$nonDeliberateActors in the event
            of its eruption that destroyed Pompeii.
            #$nonDeliberateActors is a negative specification of the
            role an actor has in an event; the role of particular
            #$nonDeliberateActors might be further specified positively,
            e.g., with #$bodilyActedOn or #$bodilyDoer.</rdfs:comment>
        <guid>bd5e44f3-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#actors"/>
        <daml:domain rdf:resource="#Event"/>
        <daml:range rdf:resource="#SomethingExisting"/>
    </daml:Property>
    <daml:Property rdf:ID="nonVolitionalCause-RST">
        <rdfs:label>non volitional cause - r s t</rdfs:label>
        <rdfs:comment>The discourse relation that holds between two
            segments of text when ARG2 specifies something which could
            be a cause of the nonvolitional action described in ARG1.</rdfs:comment>
        <guid>c08d2a4f-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#LinguisticObject"/>
        <daml:range rdf:resource="#LinguisticObject"/>
    </daml:Property>
    <daml:Property rdf:ID="nonVolitionalResult-RST">
        <rdfs:label>non volitional result - r s t</rdfs:label>
        <rdfs:comment>The discourse relation that holds between two
            segments of text when ARG1 specifies something which could
            be a nonvolitional cause of ARG2.</rdfs:comment>
        <guid>c1029a4e-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#LinguisticObject"/>
        <daml:range rdf:resource="#LinguisticObject"/>
    </daml:Property>
    <daml:Property rdf:ID="northOf">
        <rdfs:label>north of</rdfs:label>
        <rdfs:comment>(#$northOf REGION-1 REGION-2) means that the
            #$GeographicalRegion REGION-1 is to the north of the
            #$GeographicalRegion REGION-2, when viewed in the
            terrestrial frame of reference.  Note that REGION-2 is
            therefore south of REGION-1; thus, no distinct predicate is
            needed to represent `south of&apos;.  Example: (#$northOf
            #$CityOfPhiladelphiaPA #$CityOfWashingtonDC).  See also
            #$eastOf and #$directionBetweenObjects.  To say
            &apos;(southOf x y)&apos; all we need is to say (#$northOf y
            x).  See also #$fartherNorthThan.</rdfs:comment>
        <guid>bd58e4ce-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#fartherNorthThan"/>
    </daml:Property>
    <daml:Property rdf:ID="northeastOf">
        <rdfs:label>northeast of</rdfs:label>
        <rdfs:comment>(#$northeastOf REGION-1 REGION-2) means that the
            #$GeographicalRegion REGION-1 is to the north-east of the
            #$GeographicalRegion REGION-2, when viewed in the
            terrestrial frame of reference.  Note that REGION-2 is
            therefore southwest of REGION-1; thus, no distinct predicate
            is needed to represent `southwest of&apos;.  Example:
            (#$northeastOf #$Philippines #$Taiwan-RepublicOfChina).</rdfs:comment>
        <guid>bd58e136-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#fartherNorthThan"/>
    </daml:Property>
    <daml:Property rdf:ID="northwestOf">
        <rdfs:label>northwest of</rdfs:label>
        <rdfs:comment>(#$northwestOf REGION-1 REGION-2) means that the
            #$GeographicalRegion REGION-1 is to the northwest of the
            #$GeographicalRegion REGION-2, when viewed in the
            terrestrial frame of reference.  Note that REGION-2 is
            therefore southeast of REGION-1; thus, no distinct predicate
            is needed to represent `southeast of&apos;.  Example:
            (#$northwestOf
            #$UnitedKingdomOfGreatBritainAndNorthernIreland #$France).</rdfs:comment>
        <guid>bd58e0b6-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#fartherNorthThan"/>
    </daml:Property>
    <LogicalConnective rdf:ID="not">
        <rdfs:label>not</rdfs:label>
        <rdfs:comment>The logical connective #$not is the negation
            operator in Cyc.  #$not takes a single element of
            #$ELSentence-Assertible as its argument.  (#$not FORM) is
            true if and only if the formula FORM is false in Cyc.</rdfs:comment>
        <guid>bd5880fb-9c29-11b1-9dad-c379636f7270</guid>
    </LogicalConnective>
    <daml:Property rdf:ID="notices">
        <rdfs:label>notice</rdfs:label>
        <rdfs:comment>(#$notices AGT PROP) means that  AGT believes the
            proposition PROP because AGT has seen, heard,  smelled, etc.
            PROP via some element of #$Perceiving.  Although  (#$notices
            AGT PROP) implies (#$beliefs AGT PROP) {via the assertion
            (#$genlPreds #$notices #$beliefs)}, exceptions occur if AGT
            believes  they have been hallucinating or drugged, for
            example.  The predicate  #$beliefs, unlike #$notices, can
            include propositions gathered through  inferring, dreaming,
            intuiting.  The temporal extent of (#$notices AGT  PROP) is
            at least a &apos;short time&apos; following the perceiving
            of PROP.  The extent of this time is a function of the type
            of fact perceived  noticed, when forgetting or other
            overriding information comes into  play.</rdfs:comment>
        <guid>bd58f1f4-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#beliefs"/>
        <daml:domain rdf:resource="#IntelligentAgent"/>
        <daml:range rdf:resource="#ELSentence-Assertible"/>
    </daml:Property>
    <daml:Property rdf:ID="numInhabitants">
        <rdfs:label>population</rdfs:label>
        <rdfs:comment>The predicate #$numInhabitants is used to indicate
            the number of people living in a region.  (#$numInhabitants
            REGION NUMBER) means that the #$GeographicalRegion REGION
            has this #$Integer NUMBER of inhabitants.  Note that, for
            any particular country, NUMBER is not necessarily the same
            as the number of its citizens, since citizens may be living
            abroad, and aliens may be residing in the country.
            Examples: (#$numInhabitants #$CityOfRomeItaly 2800000);
            (#$numInhabitants #$CityOfTokyoJapan 8300000).  See also #$populationDuring.</rdfs:comment>
        <guid>bd58f2d6-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#GeographicalRegion"/>
        <daml:range rdf:resource="#Integer"/>
    </daml:Property>
    <daml:Property rdf:ID="numericallyEqual">
        <rdfs:label>numerically equal</rdfs:label>
        <rdfs:comment>The predicate #$numericallyEqual is Cyc&apos;s
            representation of the equals ( = ) of arithmetic, adapted to
            use with Cyc&apos;s scalars, which include quantitative
            intervals as well as point values.  For any two instances of
            #$ScalarInterval, (#$numericallyEqual SI-1 SI-2) means that
            the minimum of SI-1 is equal to the mininum of SI-2 and that
            the maximum of SI-1 is equal to the maximum of SI-2.  See
            also #$ScalarInterval.</rdfs:comment>
        <guid>bd589d90-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#greaterThanOrEqualTo"/>
        <daml:domain rdf:resource="#ScalarInterval"/>
        <daml:range rdf:resource="#ScalarInterval"/>
    </daml:Property>
    <daml:Property rdf:ID="objectActedOn">
        <rdfs:label>affected object</rdfs:label>
        <rdfs:comment>The predicate #$objectActedOn is used to relate an
            event to an entity (or entities) significantly affected in
            that event.  That entity must exist before the event, but
            may be either destroyed in the event (see
            #$inputsDestroyed), or merely affected by it (e.g., see
            #$damages, #$objectOfStateChange). (#$objectActedOn EVENT
            OBJECT) means that OBJECT is altered or affected in EVENT,
            and the change that OBJECT undergoes is central or focal to
            understanding EVENT.  Thus, scissors are NOT an
            #$objectActedOn in a #$HairCuttingEvent.  The focal change
            in a haircut is hair getting shorter; thus, hair is a
            legitimate #$objectActedOn in a #$HairCuttingEvent.  The
            almost microscopic dulling that scissors undergo in a single
            haircut is a comparatively insignificant change with respect
            to a single haircut, considered as a #$HairCuttingEvent.
            Note: long-term effects of usage on devices should be
            axiomatized in connection with #$UsingAFn constants.</rdfs:comment>
        <guid>bd58bae6-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#preActors"/>
        <daml:domain rdf:resource="#Event"/>
        <daml:range rdf:resource="#SomethingExisting"/>
    </daml:Property>
    <daml:Property rdf:ID="objectControlled">
        <rdfs:label>object controlled</rdfs:label>
        <rdfs:comment>This predicate is used to indicate that a
            particular object is being controlled in a particular event.
            (#$objectControlled EVENT OBJ) means that the object OBJ is
            being controlled in the #$Event EVENT. Note:
            #$objectControlled does not assume or require physical
            contact between controller and object controlled.</rdfs:comment>
        <guid>bd58bdb0-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#objectActedOn"/>
        <daml:domain rdf:resource="#ControllingSomething"/>
        <daml:range rdf:resource="#SomethingExisting"/>
    </daml:Property>
    <daml:Property rdf:ID="objectEmitted">
        <rdfs:label>emission</rdfs:label>
        <rdfs:comment>This predicate is used in connection with
            particular instances of #$EmittingAnObject, to identify the
            object which `comes out&apos; during the event.
            (#$objectEmitted EMIT OBJ) means that OBJ is emitted from
            the #$emitter during the emission event EMIT.  The
            #$objectEmitted is also an #$objectMoving in EMIT.  For
            example, in a particular human #$BirthEvent, some particular
            #$HumanInfant is an #$objectEmitted.</rdfs:comment>
        <guid>bd58bec1-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#EmittingAnObject"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:Property>
    <daml:Property rdf:ID="objectFoundInLocation">
        <rdfs:label>whereabouts</rdfs:label>
        <rdfs:comment>(#$objectFoundInLocation OBJ LOC) means that OBJ
            has the location LOC. OBJ is not a part of LOC.  Examples:
            the #$ArcDeTriomphe is located in the #$CityOfParisFrance;
            the #$AlaskanPipeline is found in #$Alaska-State; the
            #$TownOfGettysburgPA is located in the Eastern region of
            Pennsylvania (note that the town&apos;s territory is part of
            Pennsylvania, but the town as a social organization is
            distinct).  See also the #$comment on #$inRegion.  Cf., for
            cases where OBJ is a spatial part of LOC,
            #$physicalDecompositions, #$geographicalSubRegions.</rdfs:comment>
        <guid>bd58d0e4-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#inRegion"/>
        <daml:subPropertyOf rdf:resource="#temporallyIntersects"/>
    </daml:Property>
    <daml:Property rdf:ID="objectHasColor">
        <rdfs:label>object has color</rdfs:label>
        <rdfs:comment>(#$objectHasColor OBJECT COLOR) means that some
            visible part of OBJECT is colored COLOR.  This is the most
            general of the color predicates; for more specialized
            predicates see e.g. #$mainColorOfObject and
            #$uniformColorOfObject.  Note that, unlike these latter two
            predicates, #$objectHasColor is _not_ a specialization of
            #$hasAttributes.  This is because an object&apos;s having
            some part that&apos;s a certain color does not entail that
            the object itself, as a whole, is characterized by that
            color in the sense of having it as an attribute.</rdfs:comment>
        <guid>bd58a3e0-9c29-11b1-9dad-c379636f7270</guid>
        <daml:range rdf:resource="#Color"/>
    </daml:Property>
    <daml:Property rdf:ID="objectMoving">
        <rdfs:label>object moving</rdfs:label>
        <rdfs:comment>The predicate #$objectMoving is used to refer to
            an object which is moving in a particular #$MovementEvent.
            (#$objectMoving MOVE OBJECT) means that OBJECT is in motion
            at some point during the #$MovementEvent MOVE and is either
            the #$primaryObjectMoving in MOVE or #$subEvents of MOVE.
            OBJECT need not move from the #$fromLocation to the
            #$toLocation.  If it does, and moves along the trajectory of
            MOVE, then it is a #$primaryObjectMoving, part of a
            #$primaryObjectMoving, or contained in a
            #$primaryObjectMoving.  A part of or object contained by a
            #$primaryObjectMoving may or may not also be #$primaryObjectMoving.</rdfs:comment>
        <guid>bd59048e-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <daml:subPropertyOf rdf:resource="#transferredThing"/>
        <daml:domain rdf:resource="#MovementEvent"/>
        <daml:range rdf:resource="#SpatialThing"/>
    </daml:Property>
    <daml:Property rdf:ID="objectOfPossessionTransfer">
        <rdfs:label>object of possession transfer</rdfs:label>
        <rdfs:comment>The predicate #$objectOfPossessionTransfer
            identifies the object which `changes hands&apos; in a
            particular event wherein some user&apos;s rights to it are
            changed.  (#$objectOfPossessionTransfer EVENT OBJECT) means
            that in EVENT, all or some rights to use OBJECT are
            transferred from one agent (the #$fromPossessor) to another
            (the #$toPossessor).  EVENT is an element of
            #$ChangeInUserRights (q.v.), for example, a buying, renting,
            lending, repossessing, etc.</rdfs:comment>
        <guid>bd58f4cf-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#transferredThing"/>
        <daml:domain rdf:resource="#ChangeInUserRights"/>
        <daml:range rdf:resource="#SomethingExisting"/>
    </daml:Property>
    <daml:Property rdf:ID="objectOfStateChange">
        <rdfs:label>object of state change</rdfs:label>
        <rdfs:comment>The predicate #$objectOfStateChange is used to
            identify the object of an instance of
            #$IntrinsicStateChangeEvent.  (#$objectOfStateChange EVENT
            OBJECT) means that OBJECT is an #$Entity that undergoes some
            kind of intrinsic change of state in EVENT.  OBJECT exists
            before EVENT, is directly involved in EVENT, and persists
            after EVENT.  (Accordingly, this predicate inherits the
            #$genlPreds #$preActors and #$postActors through
            #$objectActedOn.)  The change which OBJECT undergoes is
            internal or intrinsic; this predicate is not used for
            extrinsic changes, e.g., in location, orientation,
            ownership, status, etc.      Note: If OBJECT were destroyed
            by EVENT and went out of existence in the course of EVENT,
            then the right predicate to use would be #$inputsDestroyed,
            rather than #$objectOfStateChange.</rdfs:comment>
        <guid>bd590831-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#postActors"/>
        <daml:subPropertyOf rdf:resource="#objectActedOn"/>
        <daml:domain rdf:resource="#IntrinsicStateChangeEvent"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:Property>
    <daml:Property rdf:ID="objectPaidFor">
        <rdfs:label>object paid for</rdfs:label>
        <rdfs:comment>(#$objectPaidFor EVENT OBJECT) means that in the
            #$MonetaryExchangeOfUserRights EVENT, the right to possess
            OBJECT is transferred from one #$Agent to another.  OBJ is
            not the #$objectTendered but the goods that are bought or rented.</rdfs:comment>
        <guid>bde595b2-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#objectOfPossessionTransfer"/>
        <daml:domain rdf:resource="#MonetaryExchangeOfUserRights"/>
        <daml:range rdf:resource="#SomethingExisting"/>
    </daml:Property>
    <daml:Property rdf:ID="objectRemoved">
        <rdfs:label>object removed</rdfs:label>
        <rdfs:comment>(#$objectRemoved REMOVING OBJ) means OBJ is
            removed from its previous location in the removing event
            REMOVING.  OBJ may be destroyed during REMOVING.  REMOVING
            is #$performedBy some entity other than OBJ.</rdfs:comment>
        <guid>c0fd57c8-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#objectActedOn"/>
        <daml:domain rdf:resource="#RemovingSomething"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:Property>
    <daml:UniqueProperty rdf:ID="objectSelected">
        <rdfs:label>object selected</rdfs:label>
        <rdfs:comment>(#$objectSelected SEL OBJ) means that OBJ is the
            object that is chosen in the event SEL, an instance of
            #$SelectingSomething.  If what is selected in SEL is a
            collection, rather than an individual object, then use the
            predicate #$activityObjectType to represent the object of SEL.</rdfs:comment>
        <guid>bd58d675-9c29-11b1-9dad-c379636f7270</guid>
        <daml:range rdf:resource="#SomethingExisting"/>
    </daml:UniqueProperty>
    <daml:Property rdf:ID="objectTakenCareOf">
        <rdfs:label>object taken care of</rdfs:label>
        <rdfs:comment>(#$objectTakenCareOf EV OBJ) means that OBJ is
            acted on in EV by some #$Agent in order to maintain,
            preserve, or promote the health  or good condition of OBJ.</rdfs:comment>
        <guid>bd58a57a-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#objectActedOn"/>
        <daml:subPropertyOf rdf:resource="#postActors"/>
        <daml:range rdf:resource="#SomethingExisting"/>
    </daml:Property>
    <daml:Property rdf:ID="objectTendered">
        <rdfs:label>object tendered</rdfs:label>
        <rdfs:comment>This predicate indicates the financial instrument
            which is used in a particular transfer of money.
            (#$objectTendered TRANS OBJECT) means that the
            #$TenderObject OBJECT is used to transfer funds in the
            #$MoneyTransfer event TRANS.  See also #$TenderObject. Note:
            OBJECT is distinct from the quantity of #$Money transferred
            (see #$moneyTransferred) although of course OBJECT has some
            value --- is `worth&apos; a certain amount, generally
            calculated from the numbers printed or stamped or engraved
            on the #$TenderObject OBJECT --- which in turn is an element
            of #$Money.</rdfs:comment>
        <guid>bd5893d1-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#objectOfPossessionTransfer"/>
        <daml:domain rdf:resource="#MoneyTransfer"/>
        <daml:range rdf:resource="#TenderObject"/>
    </daml:Property>
    <daml:Property rdf:ID="objectTested">
        <rdfs:label>object tested</rdfs:label>
        <rdfs:comment>(#$objectTested EVAL OBJ) mean that OBJ is the
            specific object or portion being tested in EVAL.  For
            example, if someone has a blood test, then the object tested
            is the portion of blood used to run the test fulfulls the
            role of #$objectTested, rather than the person or the
            collection of that person&apos;s blood.</rdfs:comment>
        <guid>c0fd5801-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#objectActedOn"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:Property>
    <daml:Property rdf:ID="officiator">
        <rdfs:label>officiators</rdfs:label>
        <rdfs:comment>The predicate #$officiator points to the agent who
            performs official functions at an event. For example, it is
            used to indicate the person who plays the role of a priest
            or justice of the peace at a wedding; also, a master of
            ceremonies, a judge, a referee.  An #$officiator is one of
            the performers at the social event where s/he officiates,
            usually not the only one.</rdfs:comment>
        <guid>bd58cc7b-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#socialParticipants"/>
        <daml:subPropertyOf rdf:resource="#preActors"/>
        <daml:domain rdf:resource="#SocialOccurrence"/>
        <daml:range rdf:resource="#Agent"/>
    </daml:Property>
    <daml:Property rdf:ID="offspringActors">
        <rdfs:label>offspring</rdfs:label>
        <rdfs:comment>(#$offspringActors EVENT ORGANISM) means that
            ORGANISM is an offspring created in the
            #$BiologicalReproductionEvent EVENT .</rdfs:comment>
        <guid>bd58d98a-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#outputsCreated"/>
        <daml:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <daml:domain rdf:resource="#BiologicalReproductionEvent"/>
        <daml:range rdf:resource="#BiologicalLivingObject"/>
    </daml:Property>
    <daml:Property rdf:ID="oilSolubility">
        <rdfs:label>oil solubility</rdfs:label>
        <rdfs:comment>(#$oilSolubility OBJ DEGREE) means that the
            particular tangible OBJ has this DEGREE of #$Solubility in #$Oil.</rdfs:comment>
        <guid>be00abdd-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#Solubility"/>
    </daml:Property>
    <daml:Property rdf:ID="oldConstantName">
        <rdfs:label>old constant name</rdfs:label>
        <rdfs:comment>If this constant has been renamed after Oct 95,
            and if the system variable cyc::*note-old-constant-name* is
            set to t on the machine on which the name change occurred,
            then this slot automatically records the most recent name
            that this constant had.</rdfs:comment>
        <guid>bd6422c8-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#CycLConstant"/>
        <daml:range rdf:resource="#SubLString"/>
    </daml:Property>
    <daml:Property rdf:ID="on-Physical">
        <rdfs:label>on - physical</rdfs:label>
        <rdfs:comment>(#$on-Physical OVER UNDER) means that the object
            OVER is above, supported by, and touching the object UNDER.
            OVER and UNDER may be at rest or in motion, or one may be in
            motion and the other at rest (relative to it).  Examples: a
            person on a bicycle; groceries on a checkout conveyor belt;
            a statue on a pedestal.  Note that only #$touches (and not
            #$touchesDirectly) is implied.</rdfs:comment>
        <guid>bd58b498-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#supportedBy"/>
        <daml:subPropertyOf rdf:resource="#above-Touching"/>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:Property>
    <daml:Property rdf:ID="onLine">
        <rdfs:label>on line</rdfs:label>
        <rdfs:comment>(#$onLine OBJ LINE) means that OBJ is an object or
            region with one or more dimensions much smaller than the
            length of the #$Line LINE, and OBJ #$spatiallyIntersects or
            touches LINE but does not include all of LINE.  One object
            can be on several different #$Lines.  See also #$onPath.</rdfs:comment>
        <guid>bd58f0b7-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#spatiallyIntersects"/>
        <daml:domain rdf:resource="#SpatialThing"/>
        <daml:range rdf:resource="#Line"/>
    </daml:Property>
    <daml:Property rdf:ID="onPath">
        <rdfs:label>on path</rdfs:label>
        <rdfs:comment>(#$onPath ARG1 PATH) means that ARG1 is located
            along (on or adjacent to) the #$Path-Generic PATH.  ARG1
            could be a moving object or it could be a stationary point
            (see the more specific predicate #$pointOnPath)  For
            example, Saint Louis, Missouri was #$onPath U.S. Route 66,
            as was Missouri, any car driving along it, and any lamp-post
            on it.</rdfs:comment>
        <guid>c10b5746-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
        <daml:range rdf:resource="#Path-Generic"/>
    </daml:Property>
    <daml:Property rdf:ID="opaqueArgument">
        <rdfs:label>opaque argument</rdfs:label>
        <rdfs:comment>(#$opaqueArgument RELATION NUMBER) means that,
            whenever an assertion  is made with the #$Relation RELATION,
            what is being referred to in  the argument place NUMBER is
            being referred to opaquely; i.e., we  cannot substitute in
            other terms that are identical (see #$equals)  with the term
            used in the assertion and expect the truth-value of the
            assertion to be preserved. Usually such substitution can be
            done: for  instance, if we know that Cicero is 6 feet tall
            (#$heightOfObject  #$Cicero (#$Foot-UnitOfMeasure 6)), and
            that (#$equals #$Cicero  #$Tully)--that is, Cicero and Tully
            refer to the same individual--we  can conclude that
            (#$heightOfObject #$Tully (#$Foot-UnitOfMeasure  6)). In
            &apos;opaque contexts,&apos; however, such substitution
            cannot be  done. For instance, Cicero may equal Tully, and I
            may believe that  Cicero is a Roman orator, but it does not
            follow that I believe that  Tully is a Roman orator. Since
            the cyc formula that indicates the  contents of one&apos;s
            beliefs is the second argument of the predicate  #$beliefs,
            we should assert (#$opaqueArgument #$beliefs 2).  Other
            opaque contexts include statements within a modal operator,
            and  statements in which one is actually mentioning a term
            (that is,  referring to the term itself) rather than using
            the term (that is,  referring to what the term denotes)--see
            #$quotedArgument and  #$quotedCollection.</rdfs:comment>
        <guid>bfd54197-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Relation"/>
        <daml:range rdf:resource="#PositiveInteger"/>
    </daml:Property>
    <daml:Property rdf:ID="opinions">
        <rdfs:label>opinion</rdfs:label>
        <rdfs:comment>(#$opinions AGENT PROP) means that AGENT believes
            PROP is true, but isn&apos;t sure about it, is at least
            somewhat open to the idea that her mind might be changed,
            and (in most cases) is aware that her belief in PROP is just
            an opinion.  AGENT might or might not have good evidence (be
            it empirical,  rational-logical, or whatever) to support
            PROP.  Note that while #$opinions and #$knows (q.v.) each
            entail (via #$genlPreds) #$beliefs (q.v.), #$opinions and
            #$knows are by default mutually exclusive (i.e. related by
            #$negationPreds).  This is so, not because they have
            strictly incompatible truth conditions, but because each of
            them -- or rather, its natural language counterpart --
            conversationally implies  (in the Gricean sense) the
            negation of the other.</rdfs:comment>
        <guid>bd590b79-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#beliefs"/>
        <daml:domain rdf:resource="#IntelligentAgent"/>
        <daml:range rdf:resource="#ELSentence-Assertible"/>
    </daml:Property>
    <daml:Property rdf:ID="oppositeAttributeValue">
        <rdfs:label>opposite attribute value</rdfs:label>
        <rdfs:comment>(#$oppositeAttributeValue ATT1 ATT2) means that
            ATT2 is the opposite of ATT1.  E.g., #$DeviceOn and #$DeviceOff.</rdfs:comment>
        <guid>bd58a37b-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#negationAttribute"/>
        <daml:domain rdf:resource="#AttributeValue"/>
        <daml:range rdf:resource="#AttributeValue"/>
    </daml:Property>
    <daml:Property rdf:ID="oppositeDirection-Interval">
        <rdfs:label>opposite direction - interval</rdfs:label>
        <rdfs:comment>(#$oppositeDirection-Interval COMING GOING) means
            that the vector which points in the opposite direction to
            the vector COMING is the vector GOING.  More technically,
            COMING and GOING are both elements of #$UnitVectorInterval
            in Cyc&apos;s spatial representation, and the midpoint of
            the direction interval COMING is 180 degrees from the
            midpoint of the direction interval GOING.  Examples:
            (#$oppositeDirection-Interval #$North-Generally
            #$South-Generally), (#$oppositeDirection-Interval
            #$DorsalDirection #$VentralDirection).  If a precise
            opposite direction is needed, use #$oppositeDirection-Precise.</rdfs:comment>
        <guid>bd58896c-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#oppositeAttributeValue"/>
        <daml:domain rdf:resource="#UnitVectorInterval"/>
        <daml:range rdf:resource="#UnitVectorInterval"/>
    </daml:Property>
    <daml:Property rdf:ID="oppositeDirection-Precise">
        <rdfs:label>opposite direction - precise</rdfs:label>
        <rdfs:comment>Predicate used mainly for reasoning about
            orientations within a given  frame of reference.
            (#$oppositeDirection-Precise DIR OPPDIR) means  that DIR is
            precisely the opposite direction to OPPDIR.  The predicate
            may be taken to imply that the vectors denoting the
            directions are  separated by 180 degrees.</rdfs:comment>
        <guid>bd58c726-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#parallelVectors"/>
        <daml:subPropertyOf rdf:resource="#oppositeDirection-Interval"/>
        <daml:domain rdf:resource="#UnitVector-Precise"/>
        <daml:range rdf:resource="#UnitVector-Precise"/>
    </daml:Property>
    <LogicalConnective rdf:ID="or">
        <rdfs:label>or</rdfs:label>
        <rdfs:comment>The predicate #$or is the disjunction relation in
            Cyc.  #$or is a variable-arity relation and takes any number
            of elements of #$ELSentence-Assertible as its arguments.
            (#$or P Q ... Z) is true if at least one of the formulas P,
            Q, ..., or Z is true in Cyc.</rdfs:comment>
        <guid>bd5880fa-9c29-11b1-9dad-c379636f7270</guid>
    </LogicalConnective>
    <daml:Property rdf:ID="orderingRelations">
        <rdfs:label>ordering relations</rdfs:label>
        <rdfs:comment>(#$orderingRelations ORDER PRED) means that, in a
            #$MathematicalOrdering ORDER, there is an order-predicate
            PRED that forms an ordering relation on the #$baseSet of
            ORDER.  The predicate PRED, when restricted to the #$baseSet
            of the #$MathematicalOrdering ORDER, is transitive on the
            #$baseSet of ORDER.  Note that the predicate
            #$orderingRelations is not a functional predicate because we
            may have both (#$orderingRelations ORDER PRED1) and
            (#$orderingRelations ORDER PRED2).  (This is true even if,
            extensionally, the two predicates PRED1 and PRED2 denote
            only one set-theoretic binary relation associated with
            ORDER.)  Such an ordering relation is not necessarily a full
            order or even a partial order; it depends on the kind of #$MathematicalOrdering.</rdfs:comment>
        <guid>c0416aa0-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#MathematicalOrdering"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Property"/>
    </daml:Property>
    <daml:Property rdf:ID="orientation">
        <rdfs:label>orientation</rdfs:label>
        <rdfs:comment>(#$orientation OBJECT ORTN) means that the
            tangible OBJECT is oriented in the way described by the
            #$OrientationAttribute ORTN.  Examples: (#$orientation OBJ
            #$RightSideUp), (#$orientation OBJ #$VerticalOrientation).
            #$orientation is asserted with respect to the current
            context&apos;s #$FrameOfReference.</rdfs:comment>
        <guid>c0fbab99-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasAttributes"/>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#OrientationAttribute"/>
    </daml:Property>
    <daml:Property rdf:ID="origin-RoundTrip">
        <rdfs:label>origin</rdfs:label>
        <rdfs:comment>(#$origin-RoundTrip TRIP PLACE) means that the
            #$Translation-RoundTrip event TRIP leaves from and returns
            to the location PLACE.  PLACE is both the #$fromLocation and
            #$toLocation of the entire TRIP, considered as a whole.  For
            example, some commuters to Manhattan leave and return each
            day to #$Connecticut-State, which is their
            #$origin-RoundTrip.  See also #$destination-RoundTrip.</rdfs:comment>
        <guid>c10aee2e-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#nonDeliberateActors"/>
        <daml:subPropertyOf rdf:resource="#toLocation"/>
        <daml:subPropertyOf rdf:resource="#fromLocation"/>
        <daml:domain rdf:resource="#Translation-RoundTrip"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:Property>
    <daml:Property rdf:ID="orthography">
        <rdfs:label>orthography</rdfs:label>
        <rdfs:comment>(#$orthography ?LANG ?WRIT) means that the
            #$WritingSystem ?WRIT is the usual mode of writing used to
            encode the #$Language ?LANG; that it is used by most of the
            people who customarily engage in writing ?LANG.</rdfs:comment>
        <guid>bd58f1d5-9c29-11b1-9dad-c379636f7270</guid>
    </daml:Property>
    <daml:Property rdf:ID="outputs">
        <rdfs:label>output</rdfs:label>
        <rdfs:comment>This predicate relates a particular creation or
            destruction event to any of its  outputs .  (#$outputs EVENT
            OBJECT) means that OBJECT is an output from EVENT.  That is,
            OBJECT is either created/produced as a result of EVENT (see
            #$outputsCreated, #$products, #$byProducts) or something
            left after another thing was destroyed in EVENT  (see
            #$outputsRemaining). For example, silicon chips are both
            #$outputsCreated in and  #$products of a chip manufacturing
            process, while a hunk of scrap metal is an
            #$outputsRemaining after a car is put through a crusher.
            When appropriate, instead of using #$outputs, use one of its
            specializations (of which those mentioned above are the nearest).</rdfs:comment>
        <guid>bd589803-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#postActors"/>
        <daml:domain rdf:resource="#CreationOrDestructionEvent"/>
        <daml:range rdf:resource="#SomethingExisting"/>
    </daml:Property>
    <daml:Property rdf:ID="outputsCreated">
        <rdfs:label>output created</rdfs:label>
        <rdfs:comment>The predicate #$outputsCreated is used to identify
            items created by a particular event.  (#$outputsCreated
            EVENT OBJECT) means that OBJECT doesn&apos;t exist before
            EVENT but comes into existence sometime during EVENT, as a
            result of EVENT.  #$outputsCreated is a specialization of
            #$nonDeliberateActors, since it would in general be
            impossible for OBJECT to act deliberately in its own creation.</rdfs:comment>
        <guid>bd64ad6d-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#outputs"/>
        <daml:subPropertyOf rdf:resource="#nonDeliberateActors"/>
        <daml:domain rdf:resource="#CreationEvent"/>
        <daml:range rdf:resource="#SomethingExisting"/>
    </daml:Property>
    <daml:Property rdf:ID="outputsRemaining">
        <rdfs:label>output</rdfs:label>
        <rdfs:comment>The predicate #$outputsRemaining is used to
            identify leftovers which survive from the #$inputs to a
            particular event.  (#$outputsRemaining EVENT OBJECT) means
            that OBJECT persists after EVENT, and that it existed before
            EVENT as an identifiable part of one of the things destroyed
            during EVENT (see #$inputsDestroyed).  Examples: (1) when a
            sheet of plywood is sawn through in a cutting event, the
            original board is destroyed and the #$outputsRemaining are
            the two smaller plywood pieces; (2) after a
            #$FiltrationProcess, the #$suspendedPart and the
            #$suspendingFluid are the #$outputsRemaining from the
            original mixture which has been destroyed.</rdfs:comment>
        <guid>bd64e092-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#preActors"/>
        <daml:subPropertyOf rdf:resource="#outputs"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:Property>
    <daml:Property rdf:ID="overlapsStart">
        <rdfs:label>overlaps start</rdfs:label>
        <rdfs:comment>(#$overlapsStart FIRST SECOND) means that FIRST
            starts before SECOND and ends during SECOND.  That is, the
            #$startingPoint of FIRST is before the #$startingPoint of
            SECOND, and the #$endingPoint of FIRST is before the
            #$endingPoint of SECOND.  So this is actually a STRONGER
            relation than might be suggested just by its name alone,
            since the name alone does not suggest that FIRST must end
            during SECOND.  If all you mean to say, in some situation,
            is that FIRST starts before SECOND, then do NOT use
            #$overlapsStart; just use the #$startsAfterStartingOf
            relation; i.e., say (#$startsAfterStartingOf SECOND FIRST).
            Also note that #$overlapsStart is, in a way, a WEAKER
            relation than might be suggested by its name alone.  Namely,
            the #$startingPoint of SECOND might not even be a point of
            FIRST (if FIRST is discontinuous).        Note:  This Cyc
            temporal relation is equivalent to what James Allen
            independently dubbed the OVERLAPS relation.</rdfs:comment>
        <guid>bd58d974-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#endsDuring"/>
        <daml:domain rdf:resource="#TemporalThing"/>
        <daml:range rdf:resource="#TemporalThing"/>
    </daml:Property>
    <daml:Property rdf:ID="overrides">
        <rdfs:label>overrides</rdfs:label>
        <rdfs:comment>The predicate #$overrides is used to tell Cyc
            which rule to prefer when it encounters two conflicting
            rules while reasoning with default assertions.  (#$overrides
            FIRST SECOND) means that if the assertions FIRST and SECOND
            both appear in conflicting arguments for and against some
            proposition, favor the argument that contains FIRST.</rdfs:comment>
        <guid>bd58a273-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#CycLAssertion"/>
        <daml:range rdf:resource="#CycLAssertion"/>
    </daml:Property>
    <daml:Property rdf:ID="owns">
        <rdfs:label>own</rdfs:label>
        <rdfs:comment>(#$owns AGENT OBJECT) means that AGENT owns OBJECT
            -- that is, AGENT enjoys #$FullUseRights (q.v.) over OBJECT.
            Note:  There are commonsense rules relating #$owns to
            #$controls.  E.g., ownership typically implies control.  But
            they are just default rules, as there are many exceptions
            (e.g., when the owner of a building leases it to a company
            for ten years, the owner gives up almost all `control&apos;
            over it during that decade).</rdfs:comment>
        <guid>bd58d753-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasOwnershipIn"/>
        <daml:domain rdf:resource="#Agent"/>
        <daml:range rdf:resource="#SomethingExisting"/>
    </daml:Property>
    <daml:Property rdf:ID="parallelObjects">
        <rdfs:label>parallel objects</rdfs:label>
        <rdfs:comment>(#$parallelObjects OBJ1 OBJ2) means that the
            lengthwise axes of OBJ1 and OBJ2 are parallel to each other.</rdfs:comment>
        <guid>c0fbb94a-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#SpatialThing"/>
        <daml:range rdf:resource="#SpatialThing"/>
    </daml:Property>
    <daml:Property rdf:ID="parallelVectors">
        <rdfs:label>parallel vectors</rdfs:label>
        <rdfs:comment>(#$parallelVectors VECTOR1 VECTOR2) means that
            VECTOR1 is parallel to VECTOR2.  The vectors may either
            point in the same direction or directly opposite directions.
            See #$parallelObjects and #$sameDirection, and #$oppositeDirection-Precise.</rdfs:comment>
        <guid>c05262b8-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#VectorInterval"/>
        <daml:range rdf:resource="#VectorInterval"/>
    </daml:Property>
    <daml:Property rdf:ID="parentActors">
        <rdfs:label>parent</rdfs:label>
        <rdfs:comment>(#$parentActors EV P) means that organism P is one
            of the parents in the #$BiologicalReproductionEvent EV.</rdfs:comment>
        <guid>bd58d9cc-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#preActors"/>
        <daml:domain rdf:resource="#BiologicalReproductionEvent"/>
        <daml:range rdf:resource="#BiologicalLivingObject"/>
    </daml:Property>
    <daml:UniqueProperty rdf:ID="parentCompany">
        <rdfs:label>parent company</rdfs:label>
        <rdfs:comment>The predicate #$parentCompany relates an
            organization to the business which is its parent company.
            (#$parentCompany ORG1 ORG2) means that ORG1 is a (partly or
            wholly owned) subsidiary of ORG2.  ORG2 is the parent
            company that owns and substantially controls ORG1.  E.g.,
            (#$parentCompany TheLAWeekly TheVillageVoice).</rdfs:comment>
        <guid>bd58c5e6-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Organization"/>
        <daml:range rdf:resource="#Business"/>
    </daml:UniqueProperty>
    <daml:Property rdf:ID="partitionedInto">
        <rdfs:label>partitioned into</rdfs:label>
        <rdfs:comment>(#$partitionedInto SETORCOL PART) means that the
            mathematical set or collection PART is a partition of the
            mathematical set or collection SETORCOL -- that is, the
            elements of PART are themselves mathematical sets or
            collections, and every element of SETORCOL is an element of
            exactly one element of PART, and every element of PART is a
            subset of SETORCOL.  Or to put it another way, PART is a set
            or collection of disjoint sets or collections whose union is
            co-extensional with SETORCOL.  Typically, the
            #$DisjointSetOrCollection that plays the role of PART in an
            assertion about partitioning will be a set specified by
            enumerating its elements, using the function #$ThePartition.
            (This is a special #$ReifiableFunction whose principal
            reason-for-being is to facilitate the inference heuristics
            associated with assertions about partitioning.)</rdfs:comment>
        <guid>bd58f530-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#covering"/>
        <daml:domain rdf:resource="#SetOrCollection"/>
        <daml:range rdf:resource="#DisjointSetOrCollection"/>
    </daml:Property>
    <daml:Property rdf:ID="parts">
        <rdfs:label>constituent</rdfs:label>
        <rdfs:comment>(#$parts WHOLE PART) means that #$Individual PART
            is a part of #$Individual WHOLE.  This predicate is very
            general.  It can be used to refer to concepts including
            #$physicalParts, #$subEvents, #$timeSlices, and #$groupMembers.</rdfs:comment>
        <guid>bd58fb6e-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Individual"/>
        <daml:range rdf:resource="#Individual"/>
    </daml:Property>
    <daml:Property rdf:ID="passengers">
        <rdfs:label>passenger</rdfs:label>
        <rdfs:comment>(#$passengers MOVE PAS) means that PAS is a human
            #$transportees in MOVE who is not a #$driverActor for any
            #$subEvents of Move.  Any PAS is not a #$driverActor for any
            #$subEvents of MOVE.  PAS is likely to be sitting (see
            #$SittingPosture) during the MOVE.</rdfs:comment>
        <guid>bd588ce2-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#transportees"/>
        <daml:domain rdf:resource="#TransportationEvent"/>
        <daml:range rdf:resource="#Person"/>
    </daml:Property>
    <daml:Property rdf:ID="passiveParticiple">
        <rdfs:label>passive participle</rdfs:label>
        <rdfs:comment>(#$passiveParticiple WORD STRING) means that
            STRING is the passive participle form of WORD. The regular
            passive participle in English is generally identical to the
            #$perfect form. Verbs in the Cyc lexicon will have a
            #$passiveParticiple entry only if they are irregular.
            Regular forms are generated by the morphology component.</rdfs:comment>
        <guid>c0d16252-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#LexicalWord"/>
        <daml:range rdf:resource="#CharacterString"/>
    </daml:Property>
    <daml:Property rdf:ID="pastTense">
        <rdfs:label>past tense</rdfs:label>
        <rdfs:comment>(#$pastTense WORD STRING) means that STRING is the
            past tense verb form of WORD. The regular past tense form is
            formed from the infinitive verb form with an `-ed&apos;
            suffix.  Verbs in the Cyc lexicon will have a #$pastTense
            entry only if they are irregular. Regular forms are
            generated by the morphology component. Regular example:
            `helped&apos;. Irregular example: `ate&apos;.</rdfs:comment>
        <guid>bd5d8eb7-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#LexicalWord"/>
        <daml:range rdf:resource="#CharacterString"/>
    </daml:Property>
    <daml:UniqueProperty rdf:ID="pathConcatenationOf-Cycle">
        <rdfs:label>path concatenation of - cycle</rdfs:label>
        <rdfs:comment>(pathConcatenationOf-Simple CHAIN PATH) means that
            PATH is the #$Path-Cyclic obtained by
            &apos;path-concatenating&apos; all of the links in CHAIN.
            See also #$JoinPathsIntoCycleFn .</rdfs:comment>
        <guid>c01fac97-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#PathChain"/>
        <daml:range rdf:resource="#Path-Cyclic"/>
    </daml:UniqueProperty>
    <daml:UniqueProperty rdf:ID="pathConcatenationOf-Simple">
        <rdfs:label>path concatenation of - simple</rdfs:label>
        <rdfs:comment>(pathConcatenationOf-Simple CHAIN PATH) means that
            PATH is the #$Path-Simple obtained by
            &apos;path-concatenating&apos; all of the links in CHAIN.
            See also #$JoinPathsFn .</rdfs:comment>
        <guid>be75b546-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#PathChain"/>
        <daml:range rdf:resource="#Path-Simple"/>
    </daml:UniqueProperty>
    <daml:Property rdf:ID="pathInSystem">
        <rdfs:label>path in system</rdfs:label>
        <rdfs:comment>(#$pathInSystem PATH SYS) means that PATH is a
            path in the path system SYS.  Paths in SYS are defined as
            follows.  (i) Every link in SYS is a path in SYS.  (ii)
            Every subpath between &apos;points&apos; on a link in SYS is
            a path in SYS.  (iii) The concatenation of paths PATH1 and
            PATH2 in SYS is a path in SYS, provided there is only one
            point on both paths.  Every path in the system is
            constructible by applying (i), (ii) and/or (iii) finitely
            many times.  So a path in SYS can &apos;start&apos;
            somewhere along a link, &apos;go through&apos; several other
            links and nodes, and &apos;end&apos; somewhere along a link
            (note that the path may be undirected).  Or it could just go
            from node to node.  This is defined precisely, using
            #$SubPathBetweenFn, #$JoinPathsFn, #$pathBetweenInSystem and #$linkBetweenInSystem.</rdfs:comment>
        <guid>bd5a56eb-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Path-Simple"/>
        <daml:range rdf:resource="#PathSystem"/>
    </daml:Property>
    <daml:Property rdf:ID="pathTerminus">
        <rdfs:label>path terminus</rdfs:label>
        <rdfs:comment>(#$pathTerminus PATH END) means that END is a
            terminating end of a #$Path-Customary PATH, and that there
            are no further paths of the same type issuing from END that
            are spatially disjoint from PATH itself.  The terminal end
            of any #$Path-Customary may be a dead-end, closed off path
            end, or it may be open, or it may be a terminus of motion;
            it is not generally a #$JunctionOfPaths with more paths of
            the same basic type issuing beyond it.  Contrast this with
            the predicate #$deadEndInSystem that indicates a terminus
            with respect to a specified #$PathSystem only.</rdfs:comment>
        <guid>c10b572e-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Path-Simple"/>
    </daml:Property>
    <daml:Property rdf:ID="perceives">
        <rdfs:label>perceive</rdfs:label>
        <rdfs:comment>(#$perceives AGENT OBJECT) means that AGENT is
            perceiving OBJECT.  That is, AGENT is consciously aware of
            the presence of OBJECT via the functioning of at least one
            of her/his/its senses (e.g. sight, hearing, smell, etc).
            Precisely which tangible features of OBJECT AGENT apprehends
            depends in part on the sensory modality used (see the
            specializations of #$perceives).  For example, if (#$sees
            AGENT OBJECT) then AGENT is aware of certain visible
            features of OBJECT (such as color or shape), whereas if
            (#$smells AGENT OBJECT) then AGENT apprehends certain
            aromatic features of OBJECT (such as its wearing L&apos;air
            Du Temps perfume).  Only tangible objects and situations
            involving such objects (see #$constituentInSituation) --
            #$PartiallyTangibles, #$PhysicalEvents, and #$Configurations
            (which are #$StaticSituations involving partially tangibles)
            -- can be perceived.</rdfs:comment>
        <guid>bd588f41-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#PerceptualAgent"/>
    </daml:Property>
    <daml:Property rdf:ID="perfect">
        <rdfs:label>perfect</rdfs:label>
        <rdfs:comment>(#$perfect WORD STRING) means that STRING is the
            perfect verb form of WORD. This form is also known as the
            past participle. The regular perfect verb form is often the
            same as the past tense verb form. Verbs in the Cyc lexicon
            will have a #$perfect entry only if they are irregular.
            Regular forms are generated by the morphology component.
            Regular example: `helped&apos;. Irregular example: `eaten&apos;.</rdfs:comment>
        <guid>bd62ff40-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#LexicalWord"/>
        <daml:range rdf:resource="#CharacterString"/>
    </daml:Property>
    <daml:Property rdf:ID="performedBy">
        <rdfs:label>performers</rdfs:label>
        <rdfs:comment>The predicate #$performedBy relates an event to an
            agent who performs it deliberately, which in Cyc means,
            intentionally and volitionally.  (#$performedBy ACT DOER)
            means that the agent DOER deliberately does the action ACT.
            DOER must be an #$Agent.  For example, (#$performedBy
            #$AssassinationOfPresidentLincoln #$JohnWilkesBooth).  If
            ACT has multiple performers, ACT will be #$performedBy each
            of them.  See also #$deliberateActors, #$doneBy.</rdfs:comment>
        <guid>bd58a962-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#deliberateActors"/>
        <daml:subPropertyOf rdf:resource="#doneBy"/>
        <daml:domain rdf:resource="#Action"/>
        <daml:range rdf:resource="#Agent"/>
    </daml:Property>
    <daml:Property rdf:ID="performedByPart">
        <rdfs:label>performed by part</rdfs:label>
        <rdfs:comment>(#$performedByPart ACT ORG) means that the
            #$Organization ORG is considered to be the performer of the
            #$Action ACT, though in fact only some subordinate part of
            ORG (i.e., a member or a sub-organization), rather than all
            of the organization, is directly involved in ACT.  For
            example, (#$performedByPart OperationDesertStorm USArmy)
            since only certain divisions of the US Army participated in
            Operation Desert Storm.</rdfs:comment>
        <guid>bd58d5fc-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#performedBy"/>
        <daml:domain rdf:resource="#Action"/>
        <daml:range rdf:resource="#Organization"/>
    </daml:Property>
    <daml:Property rdf:ID="perpendicularObjects">
        <rdfs:label>perpendicular objects</rdfs:label>
        <rdfs:comment>(#$perpendicularObjects OBJ1 OBJ2) means that the
            longest axis of OBJ1 is perpendicular to the longest axis of OBJ2.</rdfs:comment>
        <guid>c0fb9dbe-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#SpatialThing"/>
        <daml:range rdf:resource="#SpatialThing"/>
    </daml:Property>
    <daml:Property rdf:ID="perpendicularVectors">
        <rdfs:label>perpendicular vectors</rdfs:label>
        <rdfs:comment>(#$perpendicularVectors VECTOR1 VECTOR2) means
            that VECTOR1 is perpendicular to VECTOR2.  E.g.,
            (#$perpendicularVectors #$SouthEast-Directly
            #$SouthWest-Directly),  (#$perpendicularVectors
            #$East-Directly #$North-Directly).</rdfs:comment>
        <guid>bd5897ac-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#VectorInterval"/>
        <daml:range rdf:resource="#VectorInterval"/>
    </daml:Property>
    <daml:Property rdf:ID="perpetrator">
        <rdfs:label>culprit</rdfs:label>
        <rdfs:comment>The #$Agent(s) that performed this possibly
            criminal act.</rdfs:comment>
        <guid>bd5b74ec-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#performedBy"/>
        <daml:domain rdf:resource="#Action"/>
        <daml:range rdf:resource="#SocialBeing"/>
    </daml:Property>
    <daml:Property rdf:ID="phoneNumberText">
        <rdfs:label>phone number text</rdfs:label>
        <rdfs:comment>The predicate #$phoneNumberText is used to relate
            a telephone number to a contact location.
            (#$phoneNumberText LOC NUM) means NUM is a string denoting
            (one of) the phone number(s) of the #$ContactLocation LOC.</rdfs:comment>
        <guid>bd58db7e-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#ContactLocation"/>
        <daml:range rdf:resource="#PhoneNumber"/>
    </daml:Property>
    <daml:Property rdf:ID="physicalDecompositions">
        <rdfs:label>physical decompositions</rdfs:label>
        <rdfs:comment>(#$physicalDecompositions WHOLE PART) -- PART is
            any spatial part or decomposition of WHOLE.  PART may be
            discontinuous, diffused throughout the object, discrete and
            identifiable, etc.</rdfs:comment>
        <guid>bd58f362-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#parts"/>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:Property>
    <daml:UniqueProperty rdf:ID="physicalExtent">
        <rdfs:label>physical extent</rdfs:label>
        <rdfs:comment>(#$physicalExtent WHOLE PART) means that PART is
            the complete physical (Tangible) part of the
            #$CompositeTangibleAndIntangibleObject WHOLE, which does not
            include any intangible part of WHOLE.</rdfs:comment>
        <guid>bd589827-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#physicalParts"/>
        <daml:domain rdf:resource="#CompositeTangibleAndIntangibleObject"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:UniqueProperty>
    <daml:Property rdf:ID="physicalParts">
        <rdfs:label>physical part</rdfs:label>
        <rdfs:comment>(#$physicalParts WHOLE PART) -- WHOLE is a
            physical object and PART is one of its distinct,
            non-diffuse, identifiable parts, such as the relationship
            between a car and its wheels or bumpers.  The
            #$physicalParts of an object include only those spatial
            decompositions which are distinct, identifiable parts.</rdfs:comment>
        <guid>bd58f916-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#physicalDecompositions"/>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:Property>
    <daml:Property rdf:ID="physicalPortions">
        <rdfs:label>physical portions</rdfs:label>
        <rdfs:comment>(#$physicalPortions WHOLE PART) means PART is a
            representative spatial chunk of WHOLE.  Every intrinsic
            property which is true of WHOLE should be true of PART.
            Spatial parts of WHOLE which are not representative of the
            whole would be #$physicalParts or #$physicalDecompositions,
            not #$physicalPortions.  For example, the SpaghettiSauce001
            which is part of SpaghettiDinner001 is a #$physicalParts of
            the dinner.  A #$physicalPortions of the dinner would
            include some sauce, some noodles, some parmesan cheese, etc.
            - parts of all the #$constituents.   This is the spatial
            analog of #$timeSlices (not #$subEvents). (#$Pittman, 6/25/96)</rdfs:comment>
        <guid>bd590638-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#physicalDecompositions"/>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:Property>
    <daml:Property rdf:ID="physicalQuarters">
        <rdfs:label>quarters</rdfs:label>
        <rdfs:comment>The predicate #$physicalQuarters is used to relate
            an organization to the building(s) it occupies.
            (#$physicalQuarters ORG BLDG) means that the #$Organization
            ORG is located in the #$ConstructionArtifact BLDG, which may
            consist of one or more buildings, rooms, offices, etc.</rdfs:comment>
        <guid>bd588a21-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#positiveVestedInterest"/>
        <daml:subPropertyOf rdf:resource="#controls"/>
        <daml:subPropertyOf rdf:resource="#parts"/>
        <daml:domain rdf:resource="#Organization"/>
        <daml:range rdf:resource="#ConstructionArtifact"/>
    </daml:Property>
    <daml:Property rdf:ID="physicalStructuralAttributes">
        <rdfs:label>physical structural attributes</rdfs:label>
        <rdfs:comment>(#$physicalStructuralAttributes OBJ ATT) means
            that the physical structure of the tangible object OBJ is
            (at least partially) determined or described by its
            attribute ATT.  See also #$PhysicalStructuralAttribute.</rdfs:comment>
        <guid>bd58b8d8-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasAttributes"/>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#PhysicalStructuralAttribute"/>
    </daml:Property>
    <daml:Property rdf:ID="physicalStructuralIntegrity">
        <rdfs:label>physical structural integrity</rdfs:label>
        <rdfs:comment>(#$physicalStructuralIntegrity SUBST DEGREE) means
            that the tangible object SUBST has DEGREE ability to
            maintain its physical structure intact in the face of
            various forces.  DEGREE is an instance of #$GenericQuantity.
            The #$physicalStructuralIntegrity of an object may be
            inferred from some of its other physical attributes; e.g.,
            something with the #$physicalStructuralAttributes #$Granular
            has a #$Low degree of #$physicalStructuralIntegrity; things
            whose #$stateOfMatter is #$LiquidStateOfMatter have
            #$VeryLow #$physicalStructuralIntegrity.</rdfs:comment>
        <guid>bd58ec3b-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#GenericQuantity"/>
    </daml:Property>
    <daml:Property rdf:ID="pipeEndsAtCavity">
        <rdfs:label>pipe ends at cavity</rdfs:label>
        <rdfs:comment>(#$pipeEndsAtCavity PIPE CAV) means that PIPE is a
            #$Pipe-GenericConduit that joins the larger-diameter
            #$Cavity CAV at a #$PipeEndToCavityJunction, allowing flow
            or access between them.  The flange where a water pipe
            enters a water tank is one example, as is the junction of
            the #$Esophagus and the #$Stomach in animals.  See also the
            collection #$PipeEndToCavityJunction.</rdfs:comment>
        <guid>c13547fe-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#pathTerminus"/>
        <daml:domain rdf:resource="#Pipe-GenericConduit"/>
    </daml:Property>
    <daml:Property rdf:ID="pipesDirectlyConnected">
        <rdfs:label>pipes directly connected</rdfs:label>
        <rdfs:comment>(pipesDirectlyConnected PIPE1 PIPE2) means that
            there is a #$JunctionOfPipes connecting two
            #$Pipe-GenericConduits, PIPE1 to PIPE2, (or else they are
            #$endToEndConnected) allowing flow of #$FluidTangibleThings
            between them.</rdfs:comment>
        <guid>beb95113-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Pipe-GenericConduit"/>
        <daml:range rdf:resource="#Pipe-GenericConduit"/>
    </daml:Property>
    <daml:Property rdf:ID="plaintiffs">
        <rdfs:label>plaintiff</rdfs:label>
        <rdfs:comment>(#$plaintiffs ARG1 ARG2) means that the agent ARG2
            is the complaining party (the party bringing an accusation
            of wrong-doing) in the lawsuit ARG1.</rdfs:comment>
        <guid>bd58d059-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#litigants"/>
        <daml:domain rdf:resource="#Trial"/>
        <daml:range rdf:resource="#Agent"/>
    </daml:Property>
    <daml:Property rdf:ID="planToAchieve-SitType">
        <rdfs:label>plan to achieve - sit type</rdfs:label>
        <rdfs:comment>(#$planToAchieve-SitType PLAN SIT_TYPE) means that
            part of the purpose of PLAN is that a situation of type
            SIT_TYPE is supposed to become true in the execution of PLAN
            but not hold true for the duration of the execution.</rdfs:comment>
        <guid>bdfe95c9-9c29-11b1-9dad-c379636f7270</guid>
    </daml:Property>
    <daml:Property rdf:ID="planToInsure-SitType">
        <rdfs:label>plan to insure - sit type</rdfs:label>
        <rdfs:comment>(planToInsure-SitType PLAN SITTYPE) means that
            part of the purpose of the plan represented by the
            SupposedToBeMicrotheory PLAN is that a situation of type
            SITTYPE should &apos;happen&apos; at some time in the course
            of the exectution of PLAN.  It is presupposed that no
            situation of type SITTYPE obtains at the start of the
            execution of PLAN and that the situation should persist
            after its inception.</rdfs:comment>
        <guid>bef06bad-9c29-11b1-9dad-c379636f7270</guid>
    </daml:Property>
    <daml:Property rdf:ID="planToInterrupt-SitType">
        <rdfs:label>plan to interrupt - sit type</rdfs:label>
        <rdfs:comment>(#$planToInterrupt-SitType PLAN SIT_TYPE) means
            that it is part of the purpose of PLAN that a situation of
            type SIT_TYPE cease to obtain at some point in the execution
            of PLAN but that a situation of type SIT_TYPE should become
            true again sometime before the end of the plan execution.</rdfs:comment>
        <guid>c0fec8b4-9c29-11b1-9dad-c379636f7270</guid>
    </daml:Property>
    <daml:Property rdf:ID="planToMaintain-SitType">
        <rdfs:label>plan to maintain - sit type</rdfs:label>
        <rdfs:comment>(#$planToMaintain-SitType PLAN SIT_TYPE) means
            that the maintainance of a pre-existing #$Situation
            satisfying the description of SIT_TYPE throughout the course
            of PLAN is part of the purpose of PLAN.</rdfs:comment>
        <guid>bd849b51-9c29-11b1-9dad-c379636f7270</guid>
    </daml:Property>
    <daml:Property rdf:ID="planToPrevent-SitType">
        <rdfs:label>plan to prevent - sit type</rdfs:label>
        <rdfs:comment>(#$planToPrevent-SitType PLAN SITTYPE) means that
            it is part of the purpose of PLAN that a #$Situation
            satisfying the description of SITTYPE must NOT come about at
            any time during the course of an execution of PLAN.  It is
            presupposed that no #$Situation of type SITTYPE obtains at
            the start of the execution of PLAN.</rdfs:comment>
        <guid>c05a3396-9c29-11b1-9dad-c379636f7270</guid>
    </daml:Property>
    <daml:Property rdf:ID="planToStop-SitType">
        <rdfs:label>plan to stop - sit type</rdfs:label>
        <rdfs:comment>(planToStop-SitType PLAN SITTYPE) means that it is
            part of the purpose of the plan represented by the
            SupposedToBeMicrotheory PLAN that a pre-existing situation
            of type SITTYPE should cease to obtain at some time in the
            course of the exectution of PLAN.  It is presupposed that a
            situation of the type SITTYPE obtains at the start of the
            execution of PLAN.</rdfs:comment>
        <guid>c141c8a4-9c29-11b1-9dad-c379636f7270</guid>
    </daml:Property>
    <daml:Property rdf:ID="planToThwart-SitType">
        <rdfs:label>plan to thwart - sit type</rdfs:label>
        <rdfs:comment>(#$planToThwart-SitType PLAN SIT_TYPE) means that
            if a  #$Situation of type SIT_TYPE obtains at the start of
            the execution of  PLAN, then it is part of the purpose of
            PLAN that it be stopped some  time in the course of PLAN,
            and if a #$Situation of type SIT_TYPE does  not obtain at
            the start of the execution of PLAN, then it is part of  the
            purpose of PLAN that such a situation must be prevented
            throughout  PLAN. The predicate is defined in terms of
            #$planToStop-SitType and  #$planToPrevent-SitType.</rdfs:comment>
        <guid>c135521c-9c29-11b1-9dad-c379636f7270</guid>
    </daml:Property>
    <daml:Property rdf:ID="planToUphold-SitType">
        <rdfs:label>plan to uphold - sit type</rdfs:label>
        <rdfs:comment>(#$planToUphold-SitType PLAN SIT_TYPE) means that
            if a #$Situation of type SIT_TYPE does not obtain at the
            start of the execution of PLAN, then part of the purpose of
            PLAN is to bring it about at some time in the course of the
            execution of PLAN, and if a #$Situation of type SIT_TYPE
            does obtain at the start of the execution of PLAN, then it
            must be maintained throughout the execution of PLAN. The
            predicate is defined in terms of #$planToMaintain-SitType
            and #$planToInsure-SitType.</rdfs:comment>
        <guid>beb1edc2-9c29-11b1-9dad-c379636f7270</guid>
    </daml:Property>
    <daml:Property rdf:ID="plural">
        <rdfs:label>plural</rdfs:label>
        <rdfs:comment>(#$plural WORD STRING) means that STRING is the
            plural noun form of WORD.  For example, the #$plural form of
            #$Hit-TheWord is `hits&apos;, and the plural form of
            #$Goose-TheWord is `geese&apos;.</rdfs:comment>
        <guid>bd5a6853-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#LexicalWord"/>
        <daml:range rdf:resource="#CharacterString"/>
    </daml:Property>
    <daml:Property rdf:ID="pointClosedSubSystems">
        <rdfs:label>point closed sub systems</rdfs:label>
        <rdfs:comment>(#$pointClosedSubSystems SYS SUBSYS) means that
            the path system SUBSYS is a subsystem of the path system SYS
            (i.e., (#$subPathSystems SYS SUBSYS) holds) and SUBSYS
            &apos;preserves&apos; all points in SYS that are on links in
            SUBSYS, i.e., if LINK is a link in SUBSYS (and hence is a
            link in SYS) and X is a point in SYS and is on LINK, then X
            must be a point in SUBSYS.</rdfs:comment>
        <guid>bfbab435-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#subPathSystems"/>
        <daml:domain rdf:resource="#PathSystem"/>
        <daml:range rdf:resource="#PathSystem"/>
    </daml:Property>
    <daml:Property rdf:ID="pointInSystem">
        <rdfs:label>point in system</rdfs:label>
        <rdfs:comment>(#$pointInSystem POINT SYS) means that POINT is an
            instance of #$Thing, SYS is an instance of #$PathSystem, and
            POINT is a &apos;point&apos; on a path in SYS or is a
            &apos;node&apos; in SYS.  Note that for each path system SYS
            there is at least one POINT such that (#$pointInSystem POINT
            SYS) holds.  For any path system SYS, the set of all points
            in SYS has an important subset, the set of all
            &apos;nodes&apos; in SYS.  See #$nodeInSystem for the
            difference between nodes and points that are not nodes in a
            path system.  Note that in some cases (such as talking about
            relations between #$PathSystems), using (#$PointsFn SYS) to
            denote the set of all points in a path system SYS is more
            convenient than using the predicate #$pointInSystem.</rdfs:comment>
        <guid>c01c8e07-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
        <daml:range rdf:resource="#PathSystem"/>
    </daml:Property>
    <daml:Property rdf:ID="pointOnCycle">
        <rdfs:label>point on cycle</rdfs:label>
        <rdfs:comment>(#$pointOnCycle X CYCLE) means that X is a point
            (or place) on a #$Path-Cyclic CYCLE.  X cannot be something
            that moves along CYCLE, nor can X be a sub-path as a
            &apos;part&apos; of CYCLE, nor can X be anything that
            includes CYCLE as a part.  Note: when we use this predicate
            in a particular #$PathSystem SYS to talk about a loop LOOP
            in SYS, then (#$pointOnCycle X LOOP SYS) holds, according to
            the current treatment, for exactly one point (actually a
            node) X in SYS.</rdfs:comment>
        <guid>c12d1757-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#pointOnPath-Generic"/>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
        <daml:range rdf:resource="#Path-Cyclic"/>
    </daml:Property>
    <daml:Property rdf:ID="pointOnPath">
        <rdfs:label>point on path</rdfs:label>
        <rdfs:comment>(#$pointOnPath X PATH) holds just in case X is on
            path PATH, an instance of #$Path-Simple.  Here we do not
            commit ourselves to any assertion concerning whether X
            itself, or a part of it, is a part of PATH.  We do want,
            nevertheless, to restrict the use of this predicate to the
            extent that when (#$pointOnPath X PATH) holds, X is a
            &apos;point&apos; (loosely speaking) on the path PATH (and
            hence cannot move along PATH even if it could move in some
            other sense; for moving objects on a path use the more
            general #$onPath).  It is not a subpath of PATH or something
            on PATH occasionally (such as something moving along PATH or
            stopped on PATH).  Nor can it be anything that takes PATH as
            a part (e.g., Austin is not a point on the 10th Street in
            it).  Note that the relative positions of points on a path
            do not in general form a linear order (#$TotalOrdering)
            unless the points and the path are part of a particular
            #$PathSystem.  If no #$PathSystem is specified, both Austin
            and Texas can be &apos;points&apos; on the same path
            Interstate 35.</rdfs:comment>
        <guid>c0408997-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#pointOnPath-Generic"/>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
        <daml:range rdf:resource="#Path-Simple"/>
    </daml:Property>
    <daml:Property rdf:ID="pointOnPath-Generic">
        <rdfs:label>point on path - generic</rdfs:label>
        <rdfs:comment>(#$pointOnPath-Generic POINT PATH-GENERIC) holds
            just in case either (#$pointOnPath POINT PATH-GENERIC) or
            (#$pointOnCycle POINT PATH-GENERIC) holds.  Note that
            (#$pointOnPath POINT PATH-GENERIC) and (#$pointOnCycle POINT
            PATH-GENERIC) cannot both hold, and hence
            (#$pointOnPath-Generic POINT PATH-GENERIC) amounts to (#$xor
            (#$pointOnPath POINT PATH-GENERIC) (#$pointOnCycle POINT PATH-GENERIC)).</rdfs:comment>
        <guid>bf3dc2f7-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#onPath"/>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
        <daml:range rdf:resource="#Path-Generic"/>
    </daml:Property>
    <daml:Property rdf:ID="pointOnTraversal">
        <rdfs:label>point on traversal</rdfs:label>
        <rdfs:comment>(#$pointOnTraversal A TRAV) means that A is a
            point along a #$Traversal TRAV of some path or paths.  Let
            TRAV be (#$TraversalFn (#$TheList X(1) PATH(1) ... X(n)
            PATH(n) X(n+1))), using a #$PathChain to describe the
            traversal.  Then (#$pointOnTraversal A TRAV) holds if and
            only if there is a k = 1, ..., n such that
            (#$pointOnPath-Generic A PATH(k)).  Note that each PATH(k)
            is an instance of #$Path-Generic. See also #$Traversal and #$TraversalFn.</rdfs:comment>
        <guid>bede2c8d-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
        <daml:range rdf:resource="#Traversal"/>
    </daml:Property>
    <daml:UniqueProperty rdf:ID="pointQuantValue">
        <rdfs:label>point quant value</rdfs:label>
        <rdfs:comment>(#$pointQuantValue SCALAR VALUE) means that the
            reified point quantity SCALAR is equivalent to VALUE. SCALAR
            is an element of #$ScalarPointValue.  This is  used to state
            the equivalence of reified quantities such as #$One and
            &apos;SpeedOfLight&apos; or &apos;AvagadrosNumber&apos;.
            For example, (#$pointQuantValue #$One 1).</rdfs:comment>
        <guid>bdb8721b-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#ScalarPointValue"/>
        <daml:range rdf:resource="#ScalarPointValue"/>
    </daml:UniqueProperty>
    <daml:Property rdf:ID="pointingToward">
        <rdfs:label>pointing toward</rdfs:label>
        <rdfs:comment>(#$pointingToward OBJ1 OBJ2) means that OBJ1 has a
            pointing axis and that its axis points toward OBJ2.  A
            pointing axis is ascribed to objects that have
            directionality (e.g., a gun, a projectile, an arrow, an
            extended finger).</rdfs:comment>
        <guid>bd58dfeb-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#SpatialThing"/>
        <daml:range rdf:resource="#SpatialThing"/>
    </daml:Property>
    <daml:Property rdf:ID="pointsOfContact">
        <rdfs:label>points of contact</rdfs:label>
        <rdfs:comment>The predicate #$pointsOfContact indicates the
            places at which a particular agent can be reached.
            (#$pointsOfContact AGENT LOC) means that the #$Agent AGENT
            can be contacted at the #$ContactLocation LOC.</rdfs:comment>
        <guid>bd5d95b2-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Agent"/>
        <daml:range rdf:resource="#ContactLocation"/>
    </daml:Property>
    <daml:Property rdf:ID="porosityOfObject">
        <rdfs:label>porosity of object</rdfs:label>
        <rdfs:comment>(#$porosityOfObject OBJ DEGREE) means that the
            tangible object OBJ has the degree of #$Porosity DEGREE.</rdfs:comment>
        <guid>be00c2f5-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasAttributes"/>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#Porosity"/>
    </daml:Property>
    <daml:Property rdf:ID="portalHasCovering">
        <rdfs:label>portal has covering</rdfs:label>
        <rdfs:comment>A general predicate for relating instances of
            portal to their coverings.  Specpreds include
            #$doorwayHasCovering and #$windowHasCovering.</rdfs:comment>
        <guid>bd58cedf-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#physicalParts"/>
        <daml:domain rdf:resource="#Portal"/>
        <daml:range rdf:resource="#PortalCovering"/>
    </daml:Property>
    <daml:Property rdf:ID="posForms">
        <rdfs:label>pos forms</rdfs:label>
        <rdfs:comment>The predicate #$posForms is used to indicate the
            different parts of speech that a particular English word has
            associated with it.  (#$posForms WORD POS) means that the
            #$EnglishWord WORD has a form that can serve as the
            #$SpeechPart POS.  For example, #$Dot-TheWord has forms for
            both #$SimpleNoun and #$Verb.  Forms of a word used for
            different parts of speech may or may not differ from each
            other in sound and/or spelling.  To find out, or to specify,
            the string that represents a particular POS form of a
            specific word, use #$partOfSpeech.</rdfs:comment>
        <guid>bd5e4f4d-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#EnglishWord"/>
        <daml:range rdf:resource="#SpeechPart"/>
    </daml:Property>
    <daml:Property rdf:ID="positiveVestedInterest">
        <rdfs:label>positive vested interest</rdfs:label>
        <rdfs:comment>(#$positiveVestedInterest AGENT OBJECT) means
            AGENT has a positive interest in OBJECT or in the good
            fortune of OBJECT.  Generally, AGENT will be helped or
            pleased by the preservation or enhancement of OBJECT.  Note
            that the restriction of OBJECT to #$TemporalThing means that
            it would be incorrect to use this predicate to say (e.g.)
            that Douglas Adams has a #$positiveVestedInterest in the
            number 42.  Rather, what he has a vested interest in is
            public popularity and faddism focusing on that number.  A
            fad is a #$TemporalThing, but the number 42 isn&apos;t.</rdfs:comment>
        <guid>bd58e8f6-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Agent"/>
        <daml:range rdf:resource="#TemporalThing"/>
    </daml:Property>
    <daml:Property rdf:ID="possesses">
        <rdfs:label>possess</rdfs:label>
        <rdfs:comment>(#$possesses AGENT OBJECT) means that OBJECT is in
            the physical possession of AGENT.  Compare with #$owns.</rdfs:comment>
        <guid>bd58cf23-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <daml:domain rdf:resource="#Agent"/>
        <daml:range rdf:resource="#SomethingExisting"/>
    </daml:Property>
    <daml:Property rdf:ID="postActors">
        <rdfs:label>post actors</rdfs:label>
        <rdfs:comment>The predicate #$postActors is used to indicate a
            participant that continues to exist after a particular
            event.  (#$postActors EVENT OBJECT) means that OBJECT exists
            after EVENT ends and that OBJECT #$temporallyIntersects
            EVENT.  #$postActors is a very general element of
            #$ActorSlot; it subsumes #$outputsCreated, #$doneBy, and
            many others.</rdfs:comment>
        <guid>bd5e52a6-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#actors"/>
        <daml:domain rdf:resource="#Event"/>
        <daml:range rdf:resource="#SomethingExisting"/>
    </daml:Property>
    <daml:Property rdf:ID="postEvents">
        <rdfs:label>post events</rdfs:label>
        <rdfs:comment>This predicate relates one event to another that
            follows it.  (#$postEvents BEFORE AFTER) implies two things:
            (1) BEFORE occurs strictly before AFTER; i.e., AFTER starts
            after BEFORE has ended; i.e., (#$startsAfterEndingOf AFTER
            BEFORE); and    (2) BEFORE and AFTER are significantly
            relevant to each other.  This required `relevance&apos; of
            the two arguments to each other is difficult to formalize
            but often intuitively clearcut.  Often, e.g., AFTER is
            caused by BEFORE. For example we would say (#$postEvents
            TakingAShower001ExitingShower001); we would not say
            (#$postEvents BolshevikRelvolution DeathOfJohnLennon) since
            they are not at all relevant to each other.</rdfs:comment>
        <guid>bd58bbe9-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Event"/>
        <daml:range rdf:resource="#Event"/>
    </daml:Property>
    <daml:Property rdf:ID="postSituation">
        <rdfs:label>post situation</rdfs:label>
        <rdfs:comment>(#$postSituation EVT SIT) means SIT is a
            #$StaticSituation that begins immediately after the action
            EVT ends, and is directly (probably causally) related to
            EVT.  See #$postEvents and #$preSituation for related predicates.</rdfs:comment>
        <guid>bd61e57f-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Event"/>
        <daml:range rdf:resource="#StaticSituation"/>
    </daml:Property>
    <daml:UniqueProperty rdf:ID="postalCodeOfAddress">
        <rdfs:label>postal codes</rdfs:label>
        <rdfs:comment>The predicate #$postalCodeOfAddress maps from a
            particular element of #$ContactLocation to a corresponding
            element of #$PostalCode.  (#$postalCodeOfAddress LOC PC)
            means that the location LOC has the #$PostalCode PC.  For
            example, if LOC had the address: P.O. Box 1677-B, New York,
            NY, 10014, PC would be the string `10014&apos;.  See also #$ContactLocation.</rdfs:comment>
        <guid>bd58dbc1-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#ContactLocation"/>
        <daml:range rdf:resource="#PostalCode"/>
    </daml:UniqueProperty>
    <daml:UniqueProperty rdf:ID="postureOfAnimal">
        <rdfs:label>attitude</rdfs:label>
        <rdfs:comment>(#$postureOfAnimal ?AN ?POS) means that the
            #$Animal ?AN is in the #$Posture ?POS.  #$Postures are types
            of attributes that describe bodily configurations and/or
            orientations of #$Animals.  See #$Posture for examples.</rdfs:comment>
        <guid>bd5903a4-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasAttributes"/>
        <daml:domain rdf:resource="#Animal"/>
        <daml:range rdf:resource="#Posture"/>
    </daml:UniqueProperty>
    <daml:Property rdf:ID="preActors">
        <rdfs:label>pre actors</rdfs:label>
        <rdfs:comment>The predicate #$preActors is used to indicate a
            participant that pre-exists a particular event.
            (#$preActors EVENT OBJECT) means that OBJECT exists before
            EVENT begins and that OBJECT #$temporallyIntersects EVENT.
            #$preActors is a very general #$ActorSlot, subsuming
            #$doneBy, #$objectActedOn, #$objectMoving, and many others.</rdfs:comment>
        <guid>bd60ca59-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#actors"/>
        <daml:subPropertyOf rdf:resource="#startsAfterStartingOf"/>
        <daml:domain rdf:resource="#Event"/>
        <daml:range rdf:resource="#SomethingExisting"/>
    </daml:Property>
    <daml:Property rdf:ID="preSituation">
        <rdfs:label>pre situation</rdfs:label>
        <rdfs:comment>(#$preSituation EVT SIT) means SIT is an element
            of #$StaticSituation that holds just prior to the start of
            EVT, and SIT is directly related to EVT.  The required
            `salience&apos; of the two arguments to each other is
            difficult to formalize but usually intuitively clearcut.
            Commonly, SIT and EVT share many of the same objects
            involved in various roles, and there is often a causal
            connection as well.   For instance, a #$Configuration CONFIG
            (a specialized form of #$StaticSituation) might be somehow
            `taken apart&apos; by event EVT, might `trigger&apos; EVT, etc.</rdfs:comment>
        <guid>bd67abd9-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#startsAfterEndingOf"/>
        <daml:domain rdf:resource="#Event"/>
        <daml:range rdf:resource="#StaticSituation"/>
    </daml:Property>
    <daml:Property rdf:ID="presentParticiple">
        <rdfs:label>present participle</rdfs:label>
        <rdfs:comment>(#$presentParticiple WORD STRING) means that
            STRING is the present participle, or progressive form of
            WORD. The regular present participle is formed from the
            infinitive verb form with an `-ing&apos; suffix. Verbs in
            the Cyc lexicon will have a #$presentParticiple entry only
            if they are irregular. Regular forms are generated by the
            morphology component.</rdfs:comment>
        <guid>bf0661da-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#EnglishWord"/>
        <daml:range rdf:resource="#CharacterString"/>
    </daml:Property>
    <daml:Property rdf:ID="presenter">
        <rdfs:label>presenters</rdfs:label>
        <rdfs:comment>(#$presenter GATHERING PERSON) means that PERSON
            speaks to a set of audience members who have a role in GATHERING.</rdfs:comment>
        <guid>c10af028-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#socialParticipants"/>
        <daml:subPropertyOf rdf:resource="#preActors"/>
        <daml:domain rdf:resource="#SocialGathering"/>
        <daml:range rdf:resource="#Person"/>
    </daml:Property>
    <daml:Property rdf:ID="preservesGenlsInArg">
        <rdfs:label>preserves genls in arg</rdfs:label>
        <rdfs:comment>#$preservesGenlsInArg usefully encapsulates the
            &apos;genls-preserving&apos; property that holds of many
            #$CollectionDenotingFunctions.  For example, we know that a
            group of parrots is a group of birds because parrots are a
            subset of birds; thus #$GroupFn has this property.  Likewise
            we know that transport on a helicopter is a kind of
            transport on an aircraft, so #$TransportViaFn has this
            property.  More formally, (#$preservesGenlsInArg FUNC N)
            means that the Cyc #$CollectionDenotingFunction FUNC has the
            following inferentially useful property: argument N of FUNC
            must be a #$Collection, and if COLLECTION1 and COLLECTION2
            can both serve as the Nth argument of FUNC, and (#$genls
            COLLECTION2 COLLECTION1), then the result of FUNC with
            COLLECTION1 as the Nth argument will be a #$genls of the
            result of FUNC with COLLECTION2 as the Nth argument.  Thus
            we assert (#$preservesGenlsInArg #$GroupFn 1) because
            (#$implies (#$genls COL-2 COL-1) (#$genls (#$GroupFn COl-2)
            (#$GroupFn COL-1))).</rdfs:comment>
        <guid>becd79d2-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#CollectionDenotingFunction"/>
        <daml:range rdf:resource="#PositiveInteger"/>
    </daml:Property>
    <daml:UniqueProperty rdf:ID="prettyName">
        <rdfs:label>pretty name</rdfs:label>
        <rdfs:comment>(#$prettyName TERM STRING) means that STRING is
            the English word or           expression (sequence of words)
            commonly used to refer to the #$Cyc           term TERM.
            The predicate #$prettyName is used by the code which
            generates CycL to English paraphrases, but its applicability
            is not           restricted to this use.</rdfs:comment>
        <guid>c0b4950a-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#CycLReifiableDenotationalTerm"/>
        <daml:range rdf:resource="#SubLString"/>
    </daml:UniqueProperty>
    <daml:Property rdf:ID="primitiveAttributeTypes">
        <rdfs:label>primitive attribute types</rdfs:label>
        <rdfs:comment>The Cyc predicate #$primitiveAttributeTypes is
            used to relate a type of complex attribute to its basic
            components.  (#$primitiveAttributeTypes COMP PRIM) means
            that PRIM is an element of #$PrimitiveAttributeType that
            makes up the #$CompositeAttributeType, COMP.  PRIM can be
            thought of as one axis for the composite scale.  For
            example, hue, intensity, and saturation are each a primitive
            scale for the composite attribute `color&apos;.  Another
            case: #$Speed is a primitive component of the composite
            attribute #$VelocityVector.</rdfs:comment>
        <guid>bd58cb9a-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#CompositeAttributeType"/>
        <daml:range rdf:resource="#PrimitiveAttributeType"/>
    </daml:Property>
    <daml:Property rdf:ID="products">
        <rdfs:label>product</rdfs:label>
        <rdfs:comment>(#$products EV OBJ) means that OBJ is one of the
            intended outputs of event EV.  For unintended outputs, see
            #$byProducts.  For a particular EV and OBJ, it will not be
            true that both (#$products EV OBJ) and (#$byProducts EV OBJ).</rdfs:comment>
        <guid>bd5906e7-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#outputs"/>
        <daml:domain rdf:resource="#CreationOrDestructionEvent"/>
        <daml:range rdf:resource="#Product"/>
    </daml:Property>
    <daml:Property rdf:ID="programUsed">
        <rdfs:label>program used</rdfs:label>
        <rdfs:comment>(#$programUsed EV PROG) means that a copy of PROG
            is used in the action EV.</rdfs:comment>
        <guid>bd58ae70-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#preActors"/>
        <daml:subPropertyOf rdf:resource="#postActors"/>
    </daml:Property>
    <daml:Property rdf:ID="programUsedInElectronicAttack">
        <rdfs:label>program used in electronic attack</rdfs:label>
        <rdfs:comment/>
        <guid>c0a4f06a-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#programUsed"/>
    </daml:Property>
    <daml:Property rdf:ID="propositionalInfoAbout">
        <rdfs:label>propositional info about</rdfs:label>
        <rdfs:comment>(#$propositionalInfoAbout MT TERM) means that the
            context MT is `about&apos; TERM, i.e. it is a #$Microtheory
            with assertions concerning TERM.  For example, a microtheory
            which is the propositional content of a portrait of
            #$GeorgeWashington might only have #$GeorgeWashington as the
            TERM of this predicate.</rdfs:comment>
        <guid>bd590a60-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#conceptuallyRelated"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
    </daml:Property>
    <daml:Property rdf:ID="propositionsPerceived">
        <rdfs:label>propositions perceived</rdfs:label>
        <rdfs:comment>(#$propositionsPerceived PERCEIVING PROP) means
            that in the #$Perceiving event PERCEIVING, the perceiver
            mentally grasps the proposition(s) PROP.  E.g., ten people
            witness a particular car crash, and yet each one gets their
            own particular set of propositions which they later can
            relate to the police; there are ten separate #$Perceivings
            in this case, and each one has its own unique set of #$propositionsPerceived.</rdfs:comment>
        <guid>bd58b91c-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Perceiving"/>
        <daml:range rdf:resource="#ELSentence-Assertible"/>
    </daml:Property>
    <daml:Property rdf:ID="providerOfMotiveForce">
        <rdfs:label>provider of motive force</rdfs:label>
        <rdfs:comment>(#$providerOfMotiveForce ACT OBJ) means that OBJ
            provides, through its expenditure of energy, a significant
            fraction of the physical force required to make ACT happen.
            For example, if ACT is an element of #$PedalingABicycle, OBJ
            will be the person who is operating the bike.  Another
            example: in the use of a belt sanding tool, there will be
            two values for #$providerOfMotiveForce, the electric sander
            and the person operating the sander.  In that case, although
            force is transmitted and applied through the sandpaper, the
            paper doesn&apos;t count as a #$providerOfMotiveForce,
            because it only transmits force and does not itself expend
            energy.   Note that inferences involving this constant
            require that every #$providerOfMotiveForce be a whole
            object, not just a part of an object.  For example: (=&gt;
            (#$and (#$isa ?LOCO #$LocomotionEvent-Animal)
            (#$providerOfMotiveForce ?LOCO ?OBJ)) (#$objectMoving ?LOCO
            ?OBJ)) or (=&gt; (#$and (#$isa ?LOC
            #$LocomotionEvent-Animal) (#$providerOfMotiveForce ?LOC
            ?PROV)) (#$doneBy ?LOC ?PROV)) or (#$domainAssumptions
            #$ManualHumanActivitiesMt (#$forAll ?U (#$forAll ?PERS
            (#$implies (#$and (#$isa ?U #$Action)
            (#$providerOfMotiveForce ?U ?PERS)) (#$isa ?PERS #$Person)))))).</rdfs:comment>
        <guid>bd58d7fe-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#preActors"/>
        <daml:domain rdf:resource="#MovementEvent"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:Property>
    <daml:Property rdf:ID="providerOfService">
        <rdfs:label>service providers</rdfs:label>
        <rdfs:comment>The Cyc predicate #$providerOfService is used to
            relate a service to the agent that provides it.
            (#$providerOfService SEVT AGT) means that the #$ServiceEvent
            SEVT is performed or provided by the #$Agent AGT.
            Typically, AGT acts in order to serve the
            #$recipientOfService in SEVT.</rdfs:comment>
        <guid>bd58ccc8-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#deliberateActors"/>
        <daml:subPropertyOf rdf:resource="#preActors"/>
        <daml:domain rdf:resource="#ServiceEvent"/>
        <daml:range rdf:resource="#Agent"/>
    </daml:Property>
    <daml:Property rdf:ID="purpose-RST">
        <rdfs:label>purpose - r s t</rdfs:label>
        <rdfs:comment>The discourse relation that holds between two
            segments of text when ARG1 specifies something which is
            initiated with the purpose of achieving ARG2. #$purpose-RST
            is agnostic as to volition; see also #$volitionalCause-RST.</rdfs:comment>
        <guid>bf68331b-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#LinguisticObject"/>
        <daml:range rdf:resource="#LinguisticObject"/>
    </daml:Property>
    <daml:Property rdf:ID="quantityIntersects">
        <rdfs:label>quantity intersects</rdfs:label>
        <rdfs:comment>(#$quantityIntersects QUANT1 QUANT2) means that
            the #$ScalarIntervals QUANT1 and QUANT2 have some overlap.
            For example, (#$Meter 2 5) intersects (#$Meter 3 4) and
            (#$Meter 3 7), but not (#$Meter 6 7).</rdfs:comment>
        <guid>c033ac24-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#AttributeValue"/>
        <daml:range rdf:resource="#AttributeValue"/>
    </daml:Property>
    <daml:Property rdf:ID="quantitySubsumes">
        <rdfs:label>quantity subsumes</rdfs:label>
        <rdfs:comment>(#$quantitySubsumes WIDER NARROWER) means that the
            #$ScalarInterval NARROWER is completely included within the
            #$ScalarInterval WIDER.  For example, (#$Meter 2 5) subsumes
            (#$Meter 3 4) and (#$Meter 3 5), but not (#$Meter 2 6).</rdfs:comment>
        <guid>be18e693-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#quantityIntersects"/>
        <daml:domain rdf:resource="#AttributeValue"/>
        <daml:range rdf:resource="#AttributeValue"/>
    </daml:Property>
    <daml:Property rdf:ID="quotedArgument">
        <rdfs:label>quoted argument</rdfs:label>
        <rdfs:comment>(#$quotedArgument RELATION NUMBER) means that,
            whenever an assertion  is made with the #$Relation RELATION,
            what is being referred to in  the argument place NUMBER is
            the symbol itself, not what the symbol  denotes. For
            instance, in the statement (#$myCreator #$PlanetEarth
            #$Maeda), we are referring to the Cyc term #$PlanetEarth,
            rather than  to the thing that it denotes: Maeda created the
            Cyc term, not the  Earth! This is true of the first argument
            of the predicate #$myCreator  whenever it is used, so we
            should assert (#$quotedArgument #$myCreator  1). On the
            other hand, in the statement (#$orbits #$PlanetEarth
            #$Sun), each of the terms is being used to refer to what it
            denotes:  we are saying that the planet Earth, not the cyc
            term #$PlanetEarth,  orbits the Sun.This is often called the
            &apos;use  versus mention&apos; distinction. In the
            statement &apos;Bertrand Russell was a  philosopher,&apos;
            one is using the term &apos;Bertrand Russell&apos;, whereas
            in the  statement &apos; &apos;Bertrand Russell&apos; is a
            proper noun,&apos; one is mentioning  the term
            &apos;Bertrand Russell.&apos; In English, in order to
            indicate that one  is mentioning rather than using a term,
            the term is often enclosed in  quote marks: hence the name
            of our predicate.  </rdfs:comment>
        <guid>c076ff6d-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#opaqueArgument"/>
        <daml:domain rdf:resource="#Relation"/>
        <daml:range rdf:resource="#PositiveInteger"/>
    </daml:Property>
    <daml:Property rdf:ID="radius">
        <rdfs:label>radius</rdfs:label>
        <rdfs:comment>The radius of an object with a circular shape.</rdfs:comment>
        <guid>bd58bac9-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#SpatialThing"/>
        <daml:range rdf:resource="#Distance"/>
    </daml:Property>
    <daml:Property rdf:ID="raininessOfRegion">
        <rdfs:label>raininess of region</rdfs:label>
        <rdfs:comment>(#$raininessOfRegion LOC DEGREE) indicates the
            intensity with which it is raining at the #$OutdoorLocation
            LOC.  (If it is not raining at LOC, it will be the case that
            (#$raininessOfRegion LOC (#$NoAmountFn #$Raininess)).)</rdfs:comment>
        <guid>bf3da060-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasAttributes"/>
        <daml:domain rdf:resource="#OutdoorLocation"/>
        <daml:range rdf:resource="#Raininess"/>
    </daml:Property>
    <daml:Property rdf:ID="rateOfRotationOfObject">
        <rdfs:label>rate of rotation of object</rdfs:label>
        <rdfs:comment>#$rateOfRotationOfObject relates an instance of
            #$PartiallyTangible to the rate of change of its physical
            component&apos;s angular separation from a reference vector
            as measured from a point of origin.</rdfs:comment>
        <guid>bd590482-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasAttributes"/>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#RateOfRotation"/>
    </daml:Property>
    <daml:Property rdf:ID="recipientOfInfo">
        <rdfs:label>perceivers</rdfs:label>
        <rdfs:comment>The predicate #$recipientOfInfo is used to
            indicate who receives information in a particular
            communication event.  (#$recipientOfInfo TRANSFER RECIP)
            means that the information transferred in the
            #$InformationTransferEvent TRANSFER is received by the
            #$Agent RECIP.  After TRANSFER, RECIP understands or
            conceives of the information transferred in TRANSFER; Cyc
            does NOT conclude that s/he #$knows the information or
            counts it among his/her #$beliefs, because RECIP might not
            believe it.  In receiving the information transferred, RECIP
            may be acting intentionally or unintentionally.  Note that
            if the communication event used in the first argument slot
            of this predicate is a #$CommunicationAct-Single and the
            recipient of the information was intended to receive the
            information by the originator of the communication event
            (see #$communicationTarget) then #$recipientOfInfo-Intended
            should probably be used instead of #$recipientOfInfo.  See
            also #$infoTransferred.</rdfs:comment>
        <guid>bd5a9863-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#actors"/>
        <daml:subPropertyOf rdf:resource="#informationDestination"/>
        <daml:domain rdf:resource="#InformationTransferEvent"/>
        <daml:range rdf:resource="#Agent"/>
    </daml:Property>
    <daml:Property rdf:ID="recipientOfService">
        <rdfs:label>recipient of service</rdfs:label>
        <rdfs:comment>(#$recipientOfService ACT AGNT) means the #$Agent
            AGNT is the recipient of the #$ServiceEvent ACT.  The
            service is performed on, for, or to AGNT, and AGNT is
            correspondingly affected by it.</rdfs:comment>
        <guid>bd58bba7-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#beneficiary"/>
        <daml:subPropertyOf rdf:resource="#postActors"/>
        <daml:subPropertyOf rdf:resource="#preActors"/>
        <daml:domain rdf:resource="#ServiceEvent"/>
        <daml:range rdf:resource="#Agent"/>
    </daml:Property>
    <daml:Property rdf:ID="reciprocalTransfers">
        <rdfs:label>reciprocal transfers</rdfs:label>
        <rdfs:comment>(#$reciprocalTransfers T1 T2) means that T1 and T2
            are transfers of possession done in exchange for each other.
            They are part of some #$ExchangeOfUserRights.</rdfs:comment>
        <guid>bd6067f6-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#TransferringPossession"/>
        <daml:range rdf:resource="#TransferringPossession"/>
    </daml:Property>
    <daml:Property rdf:ID="referredServiceProvider">
        <rdfs:label>referred service provider</rdfs:label>
        <rdfs:comment>The agent ARG2 who provides the service ARG1 was
            referred by another agent.</rdfs:comment>
        <guid>c10c18e8-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#providerOfService"/>
        <daml:domain rdf:resource="#ServiceEvent"/>
        <daml:range rdf:resource="#Agent"/>
    </daml:Property>
    <daml:Property rdf:ID="reformulatorEquals">
        <rdfs:label>reformulator equals</rdfs:label>
        <rdfs:comment>(#$reformulatorEquals TERM-1 TERM-2), asserted in
            the microtheory MT, means that TERM-1 may be reformulated
            into TERM-2 or vice versa (based on meta-properties of this
            rule and what mode the reformulator is in) in MT or a specMt
            thereof.  Free variables in TERM-1 and TERM-2 are shared,
            and may bind with CycL terms which match the template. Truth
            and semantics are not necessarily preserved (see #$TruthPreservingReformulation).</rdfs:comment>
        <guid>c0f012ac-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#reformulatorRule"/>
        <daml:domain rdf:resource="#CycLDenotationalTerm"/>
        <daml:range rdf:resource="#CycLDenotationalTerm"/>
    </daml:Property>
    <daml:Property rdf:ID="reformulatorEquiv">
        <rdfs:label>reformulator equiv</rdfs:label>
        <rdfs:comment>(#$reformulatorEquiv SENTENCE-1 SENTENCE-2),
            asserted in the microtheory MT, means that SENTENCE-1 may be
            reformulated into SENTENCE-2 or vice versa (based on
            meta-properties of this rule and what mode the reformulator
            is in) in MT or a specMt thereof.  Free variables in
            SENTENCE-1 and SENTENCE-2 are shared, and may bind with CycL
            sentences which match the template. Truth and semantics are
            not necessarily preserved (see #$TruthPreservingReformulation).</rdfs:comment>
        <guid>c0279a99-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#reformulatorRule"/>
        <daml:domain rdf:resource="#CycLSentence"/>
        <daml:range rdf:resource="#CycLSentence"/>
    </daml:Property>
    <daml:Property rdf:ID="reformulatorRule">
        <rdfs:label>reformulator rule</rdfs:label>
        <rdfs:comment>(#$reformulatorRule EXPR-1 EXPR-2), asserted in
            the microtheory MT, means that EXPR-1 may be reformulated
            into EXPR-2 (or vice versa, based on meta-properties of this
            rule and what mode the reformulator is in) in MT or a specMt
            thereof.  Free variables in EXPR-1 and EXPR-2 are shared,
            and may bind with CycL expressions which match the template.
            Truth and semantics are not necessarily preserved (see
            #$TruthPreservingReformulation). Use the more specific
            predicates #$reformulatorEquiv and $#reformulatorEquals when applicable.</rdfs:comment>
        <guid>c0a79513-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#CycLExpression"/>
        <daml:range rdf:resource="#CycLExpression"/>
    </daml:Property>
    <daml:Property rdf:ID="reformulatorRuleProperties">
        <rdfs:label>reformulator rule properties</rdfs:label>
        <rdfs:comment>(#$reformulatorRuleProperties PROP RULE) means
            that RULE has the property PROP.  Most reformulator
            directives express an assertion of the form &apos;The
            reformulator should do X&apos;, for some X.  In contrast,
            #$reformulatorRuleProperties assertions are stronger, in
            that they express intrinsic properties of reformulator
            rules, and it is a consequence that the reformulator should
            do X in order to be correct.  For example, a reformulator
            directive could say &apos;For this reformulator rule, if in
            tersification mode, the reformulator should reformulate the
            second argument into the first argument.&apos;, whereas a
            reformulator rule property could say &apos;This reformulator
            rule&apos;s first argument is more terse than its second
            argument.&apos;  The latter implies the former.</rdfs:comment>
        <guid>c09f6ac3-9c29-11b1-9dad-c379636f7270</guid>
    </daml:Property>
    <daml:Property rdf:ID="relationAll">
        <rdfs:label>relation all</rdfs:label>
        <rdfs:comment>(#$relationAll PRED COL) means that, for every
            instance of COL (OBJ) the unary predicate PRED holds for
            OBJ. For example, the statement &apos;calendar dates are
            temporally continuous&apos; can be represented as
            (#$relationAll #$temporallyContinuous #$Date).  Thus,
            #$relationAll can be used to express a whole class of rules
            about unary predicates as simple GAF assertions.  One must
            be aware of the implicit quantification underlying this
            predicate. </rdfs:comment>
        <guid>bedc09ec-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#UnaryPredicate"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
    </daml:Property>
    <daml:Property rdf:ID="relationExpansion">
        <rdfs:label>relation expansion</rdfs:label>
        <rdfs:comment>ARG2 is a CycL expression which indicates the
            meaning of expressions in which the relation ARG1 is the
            operator (i.e., in which ARG1 is in the 0th argument
            position).  In ARG2, the variables ?arg1, ?arg2, ?arg3,
            ?arg4, and ?arg5 correspond to the objects in the argument
            positions 1, 2, 3, 4, and 5, respectively, in expressions
            which have ARG1 as the operator.</rdfs:comment>
        <guid>c0328561-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#RuleMacroPredicate"/>
        <daml:range rdf:resource="#ELSentence-Assertible"/>
    </daml:Property>
    <daml:Property rdf:ID="relatives">
        <rdfs:label>relative</rdfs:label>
        <rdfs:comment>(#$relatives ANIM1 ANIM2) means ANIM2 is some
            biological relative of ANIM1.</rdfs:comment>
        <guid>bd58b1b1-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Animal"/>
        <daml:range rdf:resource="#Animal"/>
    </daml:Property>
    <daml:Property rdf:ID="reliabilityOfMicrotheory">
        <rdfs:label>reliability of microtheory</rdfs:label>
        <rdfs:comment>(#$reliabilityOfMicrotheory MICROTHEORY NR) means
            that NR is a measure of the reliability of the assertions in
            the #$Microtheory MICROTHEORY.  A reliability of 1 means the
            content of MICROTHEORY is entirely reliable; a reliability
            of 0 means the content of MICROTHEORY is entirely
            unreliable.  For example, a microtheory the content of which
            is blatantly false would have a reliability of 0, as would a
            microtheory each assertion in which was chosen from a pair
            consisting of the assertion and its negation by flipping a
            coin.  There is, of course, a spectrum at one end of which
            would be guaranteed falsehoods, at the other guaranteed
            truths, and in the middle would be assertions equally likely
            true as false.  For the purposes for which this predicate is
            intended, however, we are interested in a spectrum which  is
            a proper part of the former one -- the idea is that being as
            likely true as false is a minimum threshold.</rdfs:comment>
        <guid>bf85848e-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Microtheory"/>
    </daml:Property>
    <daml:Property rdf:ID="rents">
        <rdfs:label>rents</rdfs:label>
        <rdfs:comment>The predicate #$rents relates an agent to
            something that s/he is renting.  (#$rents AGT OBJ) means
            that the #$Agent AGT is renting the object (possibly a piece
            of real estate) OBJ from another, unspecified agent.   AGT
            is the borrower, renter, lessee or tenant.  AGT has
            temporary use and enjoyment of OBJ, for a charge.  See also
            #$TemporaryUserRightsAgreement,
            #$TemporaryChangeOfUserRights, #$Renting.</rdfs:comment>
        <guid>c10c1e8f-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Agent"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:Property>
    <daml:Property rdf:ID="requiredArg1Pred">
        <rdfs:label>required arg 1 pred</rdfs:label>
        <rdfs:comment>(#$requiredArg1Pred COL PRED) means that for every
            instance INST of COL, there exists some sequence &lt;X2,
            ..., Xn&gt; such that (PRED INST X2 .. Xn) holds, where n is
            the #$arity of PRED.</rdfs:comment>
        <guid>bdd50606-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <daml:range rdf:resource="#Predicate"/>
    </daml:Property>
    <daml:Property rdf:ID="requiredArg2Pred">
        <rdfs:label>required arg 2 pred</rdfs:label>
        <rdfs:comment>(#$requiredArg2Pred COL PRED) means that for every
            instance INST of COL, there exist some THING1, ..., THINGn-1
            such that   (PRED THING1 INST THING2 ... THINGn-1) holds,
            where n is the #$arity of PRED.</rdfs:comment>
        <guid>bef7ed88-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <daml:range rdf:resource="#Predicate"/>
    </daml:Property>
    <daml:Property rdf:ID="residenceOfOrganization">
        <rdfs:label>residence of organization</rdfs:label>
        <rdfs:comment>The predicate #$residenceOfOrganization indicates
            the geographical location of a particular
            organization&apos;s main offices.
            (#$residenceOfOrganization ORG GEOGAGENT) means that the
            #$Organization ORG has its chief office on the territory of
            GEOGAGENT.  GEOGAGENT is typically a #$City but may be a
            larger or smaller #$GeographicalAgent.  For example, the
            #$residenceOfOrganization of the
            #$UnitedStatesFederalGovernment is the #$CityOfWashingtonDC.</rdfs:comment>
        <guid>bd58db93-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#objectFoundInLocation"/>
        <daml:domain rdf:resource="#Organization"/>
    </daml:Property>
    <daml:Property rdf:ID="residesInDwelling">
        <rdfs:label>reside</rdfs:label>
        <rdfs:comment>This predicate relates a person or other sort of
            animal to a constructed shelter in which s/he/it lives or
            resides. (#$residesInDwelling RESIDENT SHELTER) means that
            RESIDENT resides in SHELTER.  That is, SHELTER is the place
            where RESIDENT usually sleeps, spends much of its time, lays
            its eggs; a place it cleans and maintains and repairs; a
            place it defends against intrusion; etc.  A person or animal
            might reside in more than one dwelling at a given time.  For
            example, a person might #$residesInDwelling some tent during
            a camping trip, and at the same time it would still be true
            that she #$residesInDwelling her apartment or house.  Note
            that the dwelling in which a person #$residesInDwelling is
            not necessarily her legal domicile, though of course it
            often will be.  Note also that #$residesInDwelling does not
            subsume parasitical or symbiotic relationships, in which one
            animal lives in or on another.  The more general predicate
            #$objectFoundInLocation would be the appropriate one, for
            example, for a case of a flea living on a dog. See also
            #$occupants and #$residesInRegion.</rdfs:comment>
        <guid>bd58a332-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Person"/>
        <daml:range rdf:resource="#ShelterConstruction"/>
    </daml:Property>
    <daml:Property rdf:ID="residesInRegion">
        <rdfs:label>inhabitants</rdfs:label>
        <rdfs:comment>This predicate relates a person or other sort of
            animal to a geographical region in which s/he/it resides.
            (#$residesInRegion RESIDENT REGION) means that RESIDENT
            lives or resides primarily in REGION.  This obviously does
            not entail that RESIDENT is physically in REGION at any
            particular time, since people are often away from their
            places of residence. Note that a given person/animal (even
            with respect to a particular time) is normally related by
            #$residesInRegion to many different regions, where each such
            region is a sub- or super-region of some of the others.  For
            example, Karen currently resides in Austin, in Texas, in the
            United States, in North America, and so on.  See also
            #$residesInDwelling, #$hasHabitat, and #$ethnicity.</rdfs:comment>
        <guid>bd58cead-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <daml:domain rdf:resource="#Animal"/>
        <daml:range rdf:resource="#GeographicalRegion"/>
    </daml:Property>
    <daml:Property rdf:ID="resistanceOfObject">
        <rdfs:label>resistance</rdfs:label>
        <rdfs:comment>(#$resistanceOfObject OBJ DEGREE) means that the
            tangible object OBJ has this DEGREE of
            #$ElectricalResistance.  A lower value of DEGREE indicates
            OBJ is a better conductor, i.e., one that conducts with less
            energy lost to heat.</rdfs:comment>
        <guid>bd5897a4-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasAttributes"/>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#ElectricalResistance"/>
    </daml:Property>
    <daml:Property rdf:ID="resistanceToBioDeterioration">
        <rdfs:label>resistance to bio deterioration</rdfs:label>
        <rdfs:comment>(#$resistanceToBioDeterioration OBJ DEGREE) means
            that the tangible object OBJ has the indicated DEGREE of
            resistance to biological deterioration.</rdfs:comment>
        <guid>be00c047-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasAttributes"/>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#BioDeteriorationResistance"/>
    </daml:Property>
    <daml:Property rdf:ID="resistanceToCorrosion">
        <rdfs:label>resistance to corrosion</rdfs:label>
        <rdfs:comment>(#$resistanceToCorrosion OBJ DEGREE) means that
            the tangible object OBJ has the stated DEGREE of
            #$CorrosionResistance.  The higher DEGREE is, the less
            readily OBJ will corrode.</rdfs:comment>
        <guid>be00bdac-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasAttributes"/>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#CorrosionResistance"/>
    </daml:Property>
    <daml:Property rdf:ID="resistanceToRadiation">
        <rdfs:label>resistance to radiation</rdfs:label>
        <rdfs:comment>(#$resistanceToRadiation OBJ DEGREE) indicates how
            resistant a tangible object OBJ is to radiation.  A higher
            DEGREE of resistance means that an object is less penetrable
            by #$ElectromagneticRadiation.</rdfs:comment>
        <guid>be00bf05-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasAttributes"/>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#RadiationResistance"/>
    </daml:Property>
    <daml:Property rdf:ID="resultGenl">
        <rdfs:label>result genl</rdfs:label>
        <rdfs:comment>This predicate is used to specify that a certain
            collection is a supercollection of any value returned by a
            particular collection-denoting function.  (#$resultGenl CDF
            COL) means that when the #$CollectionDenotingFunction CDF is
            applied to any sequence of arguments ARG1, ..., ARGn for
            which it is defined, the result will be a subcollection of
            COL, i.e. (#$genls (CDF ARG1...ARGn) COL).  For example,
            (#$resultGenl #$UsingAFn #$Action) means that every using of
            a particular kind of object is an action, (#$resultGenl
            #$AttemptingFn #$PurposefulAction) means that every attempt
            at a specific action is a purposeful act, and (#$resultGenl
            #$JointTypeBetweenFn #$Connection) means that every joint
            between two specific things is a connection.  See also #$resultIsa.</rdfs:comment>
        <guid>bd58d6ab-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#CollectionDenotingFunction"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
    </daml:Property>
    <daml:Property rdf:ID="resultGenlArg">
        <rdfs:label>result genl arg</rdfs:label>
        <rdfs:comment>(#$resultGenlArg FUNC N) states that the value
            returned by a use of the function FUNC will be a subset of a
            particular collection, in this case argument N of the use of
            the function.  More precisely, the term (FUNC ARG1 ... ARGN
            ...), will be a subset of the Nth argument to the use of the
            function, ARGN.  For example, (#$resultGenlArg #$JuvenileFn
            1) indicates that (#$JuvenileFn #$Dog) will be a subset of
            #$Dog.  See also #$resultIsaArg and #$resultGenl</rdfs:comment>
        <guid>bf64a755-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#CollectionDenotingFunction"/>
        <daml:range rdf:resource="#PositiveInteger"/>
    </daml:Property>
    <daml:Property rdf:ID="resultIsa">
        <rdfs:label>result isa</rdfs:label>
        <rdfs:comment>The predicate is used to indicate that any value
            returned by a particular denotational function is an
            instance of a certain  collection.  (#$resultIsa FUNC COL)
            means that FUNC returns an instance of COL for any sequence
            of arguments for which it is defined.  Thus, where FUNC is
            defined for the sequence ARG1, ..., ARGn, (#$resultIsa FUNC
            COL) implies (#$isa (FUNC ARG1...ARGn) COL). For example,
            since #$PlusFn only returns quantities, (#$resultIsa
            #$PlusFn #$ScalarInterval) is true; and given that
            (#$resultIsa #$GovernmentFn #$RegionalGovernment), it
            follows that  (#$isa (#$GovernmentFn #$France)
            #$RegionalGovernment).  See also #$resultGenl.</rdfs:comment>
        <guid>bd5880f1-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Relation"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
    </daml:Property>
    <daml:Property rdf:ID="resultIsaArg">
        <rdfs:label>result isa arg</rdfs:label>
        <rdfs:comment>(#$resultIsaArg FUNC N) states that the value
            returned by a use of the function FUNC will be an element of
            a particular collection, in this case argument N of the use
            of the function.  More precisely, the term (FUNC ARG1 ...
            ARGN ...), will be an element of the Nth argument to the use
            of the function, ARGN.  For example, (#$resultIsaArg #$The
            1) indicates that (#$The #$Dog) will be an element of #$Dog.
            See also #$resultGenlArg and #$resultIsa</rdfs:comment>
        <guid>bebe2068-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Relation"/>
        <daml:range rdf:resource="#PositiveInteger"/>
    </daml:Property>
    <daml:UnambiguousProperty rdf:ID="resultantMentalObjects">
        <rdfs:label>resultant mental objects</rdfs:label>
        <rdfs:comment>(#$resultantMentalObjects PEVT PERCEPT) means that
            during the #$Perceiving event PEVT, the perceiver acquires,
            or begins thinking about some piece of information or
            informational thing PERCEPT (i.e., feeling some emotion,
            deducing some conclusion, observing some facts, etc.)</rdfs:comment>
        <guid>bd58f377-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Perceiving"/>
        <daml:range rdf:resource="#AbstractInformationalThing"/>
    </daml:UnambiguousProperty>
    <daml:Property rdf:ID="rewriteOf">
        <rdfs:label>rewrite of</rdfs:label>
        <rdfs:comment>(#$rewriteOf SIMPLE-TERM COMPLEX-TERM) means that
            SIMPLE-TERM and COMPLEX-TERM are definitionally or
            intensionally equal.  Also SIMPLE-TERM is a simpler form of
            COMPLEX-TERM.  That is, SIMPLE-TERM contains fewer nested
            #$Function-Denotationals than does COMPLEX-TERM.  Unlike
            #$equals, #$rewriteOf is strictly a #$HumanCyclist asserted
            form of equality.  If the #$CycLAssertion ORIGINAL-ASSERTION
            contains a reference to COMPLEX-TERM, this should
            automatically result in a second assertion being added to
            the KB by the #$CycInferenceEngine.  This second assertion
            is created by substituting SIMPLE-TERM for COMPLEX-TERM
            wherever COMPLEX-TERM occurs in ORIGINAL-ASSERTION.  Note
            that substitution does not happen in the opposite direction.
            That is, assertions added to SIMPLE-TERM will not propagate
            to COMPLEX-TERM. &lt;PARAGRAPH&gt; Internally, Cyc will keep
            a link between the two forms of a term and allow the
            simplified form to unify with (possibly nonground) instances
            of the complex form.  For example: If (#$rewriteOf
            #$UnitedStatesNavy (#$NavyFn #$UnitedStatesOfAmerica)) is
            asserted then #$UnitedStatesNavy will unify with (#$NavyFn
            ?X) and yield ?X = #$UnitedStatesOfAmerica.
            &lt;PARAGRAPH&gt; A negative example of an appropriate
            #$rewriteOf assertion would be ``the set of biologically
            male humans is a rewrite of the set of male humans with one
            x and one y chromosone&apos;&apos;.  That would not be an
            appropriate #$rewriteOf assertion because the two sets are
            extensionally but not intensionally equal.
            &lt;PARAGRAPH&gt; Another negative example assertion
            involving #$rewriteOf would be (#$rewriteOf (#$JuvenileFn
            (#$MaleFn #$Person))(#$MaleFn (#$JuvenileFn #$Person))).
            This is a negative example because first of all neither
            (#$JuvenileFn (#$MaleFn #$Person)) nor (#$MaleFn
            (#$JuvenileFn #$Person)) are simpler than one another.
            Secondly, if a pair of #$Function-Denotationals  commute
            with each other (an example of such a pair is #$MaleFn and
            #$JuvenileFn, see also #$functionCommutesWith) then the
            canonicalizer should (in the near term (now=Nov 99)) select
            a canonical ordering for the functions.  Thus, if #$MaleFn
            were to come before #$JuvenileFn, then (#$MaleFn
            (#$JuvenileFn #$Person)) would be the canonical form of such
            a term. It would be impossible to reify (#$JuvenileFn
            (#$MaleFn #$Person)) since it would get canonicalized into
            (#$MaleFn (#$JuvenileFn #$Person)), thus it would be
            impossible to assert (#$rewriteOf (#$JuvenileFn (#$MaleFn
            #$Person))(#$MaleFn (#$JuvenileFn #$Person))).</rdfs:comment>
        <guid>c13bc0c4-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#equals"/>
        <daml:domain rdf:resource="#CycLReifiableDenotationalTerm"/>
        <daml:range rdf:resource="#CycLReifiableDenotationalTerm"/>
    </daml:Property>
    <daml:Property rdf:ID="rightsGranted">
        <rdfs:label>grant</rdfs:label>
        <rdfs:comment>This predicate is used to indicate what
            #$UserRightsAttributes are acquired in events which bring
            about a #$ChangeInUserRights.  (#$rightsGranted EVENT URA)
            means that in the #$ChangeInUserRights EVENT, the
            #$UserRightsAttribute URA is granted (to some agent).  For
            example, (#$rightsGranted
            &apos;&apos;LouisianaPurchase&apos;&apos;
            #$ExclusiveUserRights), since no country other than the USA
            could then claim it as one of their territories.   If EVENT
            is a #$Buying event, then almost always both
            (#$rightsGranted EVENT #$FullUseRights) and (#$rightsGranted
            EVENT #$ExclusiveUserRights) are true.</rdfs:comment>
        <guid>bd58d30a-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasAttributes"/>
        <daml:domain rdf:resource="#ChangeInUserRights"/>
        <daml:range rdf:resource="#UserRightsAttribute"/>
    </daml:Property>
    <daml:Property rdf:ID="rigidityOfObject">
        <rdfs:label>rigidness</rdfs:label>
        <rdfs:comment>(#$rigidityOfObject OBJ DEGREE) means that the
            tangible object OBJ has this DEGREE of #$Rigidity.  A higher
            DEGREE of #$Rigidity means more force is required to change
            the shape of OBJ than for a lower DEGREE.</rdfs:comment>
        <guid>be00bc64-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasAttributes"/>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#Rigidity"/>
    </daml:Property>
    <daml:Property rdf:ID="rotationallyConnectedTo">
        <rdfs:label>rotationally connected to</rdfs:label>
        <rdfs:comment>(#$rotationallyConnectedTo OBJ1 OBJ2) means that
            OBJ1 and OBJ2 are connected in such a way that rotational
            motion, and only rotational motion, can happen between them.
            The rotational motion may be fully or partially rotational.
            Non-rotational movement between two rotationally connected
            objects at their connection point can occur only if the
            connection is broken, deformed, or disassembled.  If OBJ1
            and OBJ2 do rotate relative to one another, then this may be
            due to sliding of their surfaces, articulation of some joint
            part, or deformation of OBJ1 or OBJ2 (so long as that
            deformation only allows rotation between OBJ1 and OBJ2).
            Positive examples: Femurs are rotationally connected to
            hips, doors are rotationally connected to door frames,
            doorknobs are rotationally connected to doors, and
            propellers are rotationally connected to airplanes; in
            computer trackballs the ball is rotationally connected to
            the housing.  Also a book cover is rotationally connected to
            its binding (but #$flapHingedTo is more appropriate because
            it is more specific). Negative examples: a planet orbiting
            around a star (they are not connected).  Cf.
            #$MovingInACircle.  A toothpick stuck in a person&apos;s leg
            is also a negative exemplar:  Although elastic deformation
            of flesh  allows there to be rotational motion between
            toothpick and leg, it also may allow a  small amount of
            translational motion to occur between toothpick and leg.
            #$in-Lodged is more appropriate for describing the case of a
            toothpick stuck in a leg.</rdfs:comment>
        <guid>bd58b50b-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#connectedTo"/>
        <daml:domain rdf:resource="#SolidTangibleThing"/>
        <daml:range rdf:resource="#SolidTangibleThing"/>
    </daml:Property>
    <daml:Property rdf:ID="ruleTemplateDirection">
        <rdfs:label>rule template direction</rdfs:label>
        <rdfs:comment>(#$ruleTemplateDirection TEMPLATE DIRECTION)
            states that all assertions which are instantiations of
            TEMPLATE should  have a direction of DIRECTION.</rdfs:comment>
        <guid>c11bb004-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#RuleTemplate"/>
        <daml:range rdf:resource="#CycLAssertionDirection"/>
    </daml:Property>
    <daml:Property rdf:ID="salientAssertions">
        <rdfs:label>salient assertions</rdfs:label>
        <rdfs:comment>(#$salientAssertions ?TERM ?ASSERTION) means that
            some #$Cyclist has deemed it useful to mark ?ASSERTION as
            one of the assertions which is most useful to examine when
            trying to figure out the intended meaning of ?TERM.
            Statements using #$salientAssertions are wholly intended for
            human consumption; they are not used by Cyc&apos;s inference
            engine in any way. </rdfs:comment>
        <guid>bd5db814-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#CycLReifiableDenotationalTerm"/>
        <daml:range rdf:resource="#CycLAssertion"/>
    </daml:Property>
    <daml:Property rdf:ID="salutation">
        <rdfs:label>salutation</rdfs:label>
        <rdfs:comment>(#$salutation PRSN TITLE) means the #$Person
            PRSN&apos;s name may have the #$CourtesyTitle TITLE attached
            to it, such as: Mr., Ms., Mrs., Miss, Dr., etc., when that
            person is addressed.</rdfs:comment>
        <guid>bd59078a-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Person"/>
        <daml:range rdf:resource="#CourtesyTitle"/>
    </daml:Property>
    <daml:Property rdf:ID="satisfiesStandard">
        <rdfs:label>satisfies standard</rdfs:label>
        <rdfs:comment>The predicate #$satisfiesStandard is used to
            identify a product standard that applies to a certain type
            of products.  (#$satisfiesStandard PRODTYPE STAND) means
            that every instance of the #$FormalProductType PRODTYPE
            satisfies the #$ProductStandard STAND.  STAND will contain a
            description of the desired physical form and/or function for
            the type of product (or service) denoted by PRODTYPE, and
            the instances of PRODTYPE fulfill those specifications.  See
            also #$ProductStandard.</rdfs:comment>
        <guid>bd58defd-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#FormalProductType"/>
        <daml:range rdf:resource="#ProductStandard"/>
    </daml:Property>
    <daml:Property rdf:ID="schoolSymbolName-Female">
        <rdfs:label>school symbol name - female</rdfs:label>
        <rdfs:comment>(#$schoolSymbolName-Female SCHOOL STRING) means
            that    STRING is a common way to refer to all-women
            SCHOOL-affiliated    #$SportsTeams, clubs, and other student
            organizations.      Accordingly, instances of STRING will be
            pluralized (e.g.      &apos;the Ohio State Lady Buckeyes&apos;).</rdfs:comment>
        <guid>bf2386cd-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#EducationalOrganization"/>
        <daml:range rdf:resource="#HumanGivenNameString"/>
    </daml:Property>
    <daml:Property rdf:ID="schoolSymbolName-Male">
        <rdfs:label>school symbol name - male</rdfs:label>
        <rdfs:comment>(#$schoolSymbolName-Male SCHOOL STRING) means that
            STRING is a common way to refer to SCHOOL-affiliated
            #$SportsTeams, clubs, and other student organizations.
            Accordingly, instances of STRING will be pluralized (e.g.
            &apos;the Ohio State Buckeyes&apos;).  Since the advent of
            co-ed higher education, some schools have found      that
            their symbol-name is exclusionary, and so       have gone on
            to adopt alternative, &apos;female&apos; names       to
            apply to &apos;female-only&apos; teams, clubs, etc.
            When entering lexical info for a school in such      a
            situation, make sure to use both #$schoolSymbolName-Male
            and #$schoolSymbolName-Female.</rdfs:comment>
        <guid>be758122-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#EducationalOrganization"/>
        <daml:range rdf:resource="#HumanGivenNameString"/>
    </daml:Property>
    <daml:Property rdf:ID="scopingArg">
        <rdfs:label>scoping arg</rdfs:label>
        <rdfs:comment>(#$scopingArg RELATION N) indicates the Nth
            argument of #$ScopingRelation RELATION denotes one or more
            scoped variables.</rdfs:comment>
        <guid>c03d1910-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#ScopingRelation"/>
        <daml:range rdf:resource="#NonNegativeInteger"/>
    </daml:Property>
    <daml:Property rdf:ID="sees">
        <rdfs:label>see</rdfs:label>
        <rdfs:comment>(#$sees AGENT OBJECT) means that the AGENT
            perceives the physical object or event OBJECT via the sense
            of sight.  This implies that AGENT is sensuously aware of at
            least some of OBJECT&apos;s visible properties, such as its
            color, shape, or texture.</rdfs:comment>
        <guid>bd58e78d-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#perceives"/>
        <daml:domain rdf:resource="#PerceptualAgent"/>
    </daml:Property>
    <daml:Property rdf:ID="seller">
        <rdfs:label>sellers</rdfs:label>
        <rdfs:comment>The predicate #$seller relates an agent to a sales
            event.  (#$seller EVENT AGENT) means that the #$Agent AGENT
            sells something in the #$CommercialActivity EVENT.</rdfs:comment>
        <guid>bd58f14e-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#exchangers"/>
        <daml:domain rdf:resource="#MonetaryExchangeOfUserRights"/>
        <daml:range rdf:resource="#SocialBeing"/>
    </daml:Property>
    <daml:UniqueProperty rdf:ID="sellingAgent">
        <rdfs:label>selling agent</rdfs:label>
        <rdfs:comment>A selling agent acts on behalf of a would be
            seller to bring about a buying event involving his/her/its
            client as the seller. </rdfs:comment>
        <guid>bd58901a-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#sellingPerformer"/>
        <daml:subPropertyOf rdf:resource="#mediators"/>
        <daml:domain rdf:resource="#CommercialActivity"/>
        <daml:range rdf:resource="#SocialBeing"/>
    </daml:UniqueProperty>
    <daml:Property rdf:ID="sellingPerformer">
        <rdfs:label>sellers</rdfs:label>
        <rdfs:comment>(sellingPerformer COM AGENT) means that the
            #$CommercialActivity COM is #$performedBy the #$Agent AGENT,
            who in that event actually pursues and attempts to make a
            sale.  AGENT may also be (and in many cases is) the #$seller
            of the goods or services sold, or s/he may be the
            #$sellingAgent representing the #$seller.</rdfs:comment>
        <guid>c0a3a784-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#socialParticipants"/>
        <daml:subPropertyOf rdf:resource="#performedBy"/>
        <daml:subPropertyOf rdf:resource="#preActors"/>
        <daml:domain rdf:resource="#CommercialActivity"/>
        <daml:range rdf:resource="#SocialBeing"/>
    </daml:Property>
    <daml:Property rdf:ID="sellsProductType">
        <rdfs:label>sell</rdfs:label>
        <rdfs:comment>This predicate relates an agent to a specific type
            of product s/he sells.  (#$sellsProductType AGENT PRODTYPE)
            means that   AGENT sells PRODTYPE.  For example, the
            Wendy&apos;s in the UT Student Union sells hamburgers.  The
            implication is AGENT typically and often sells products of
            PRODTYPE.  See also #$ProductProviderFn-Seller.</rdfs:comment>
        <guid>bd589ee1-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#knowsAbout"/>
        <daml:subPropertyOf rdf:resource="#conceptuallyRelated"/>
        <daml:domain rdf:resource="#LegalAgent"/>
        <daml:range rdf:resource="#ProductType"/>
    </daml:Property>
    <daml:Property rdf:ID="senderOfInfo">
        <rdfs:label>sender of info</rdfs:label>
        <rdfs:comment>The predicate #$senderOfInfo is used to indicate
            the sending agent in a particular transfer of information.
            (#$senderOfInfo TRANSFER SENDER) means that SENDER is an
            agent who is the source of information transferred in the
            #$InformationTransferEvent TRANSFER.  At the time of
            TRANSFER (and typically for some period beforehand), SENDER
            conceives of the information transferred in TRANSFER.
            It&apos;s not the case that SENDER necessarily #$knows the
            `information&apos; or has it among his/her #$beliefs,
            because TRANSFER could involve lying; e.g.,
            #$GeorgeWashington&apos;s telling his father, `I didn&apos;t
            chop down the cherry tree&apos;.  SENDER normally performs
            TRANSFER intentionally, but some transfers may be
            unintentional; e.g., when one repeats some gossip
            unwittingly within earshot of the person being discussed,
            the transfer to the overhearer is unintentional.  See also #$infoTransferred.</rdfs:comment>
        <guid>bd588f2d-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#informationOrigin"/>
        <daml:subPropertyOf rdf:resource="#doneBy"/>
        <daml:domain rdf:resource="#InformationTransferEvent"/>
        <daml:range rdf:resource="#Agent"/>
    </daml:Property>
    <daml:Property rdf:ID="seniorExecutives">
        <rdfs:label>senior executives</rdfs:label>
        <rdfs:comment>The predicate #$seniorExecutives is used to
            identify the upper-level managers in a particular
            organization.  (#$seniorExecutives ORG PERSON) means PERSON
            is an employee with a high executive position in the
            #$Organization ORG.  #$seniorExecutives relates an
            organization to the people who hold its principal corporate
            offices (CEO, President, etc.) and also positions like Chief
            of Staff, General, Admiral, Chief Corporate Counsel,
            Managing Partner, Chief Scientist, Chief Engineer, etc.</rdfs:comment>
        <guid>bd58bfeb-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasWorkers"/>
        <daml:domain rdf:resource="#Organization"/>
        <daml:range rdf:resource="#Person"/>
    </daml:Property>
    <daml:Property rdf:ID="sentenceDesignationArgnum">
        <rdfs:label>sentence designation argnum</rdfs:label>
        <rdfs:comment>Used to specify which argument of a given
            #$MicrotheoryDesignatingRelation  designates the CycL
            sentence to be interpreted in a specific microtheory.</rdfs:comment>
        <guid>c0a63548-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#MicrotheoryDesignatingRelation"/>
        <daml:range rdf:resource="#PositiveInteger"/>
    </daml:Property>
    <daml:Property rdf:ID="sentenceEquiv">
        <rdfs:label>sentence equiv</rdfs:label>
        <rdfs:comment>(#$sentenceImplies FORMULA-1 FORMULA-2) means that
            the formula FORMULA-1 is logically equivalent to the formula
            FORMULA-2.  This predicate is very similar to #$equiv.
            However, #$equiv is part of the syntax of CycL, whereas
            #$sentenceEquiv is merely a predicate between formulas.
            #$sentenceEquiv is primarily intended to be used for rules
            that quantify over CycL formulas.</rdfs:comment>
        <guid>be83f745-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#sentenceImplies"/>
        <daml:domain rdf:resource="#ELSentence-Assertible"/>
        <daml:range rdf:resource="#ELSentence-Assertible"/>
    </daml:Property>
    <daml:Property rdf:ID="sentenceImplies">
        <rdfs:label>sentence implies</rdfs:label>
        <rdfs:comment>(#$sentenceImplies ANTE CONSEQ) means that either
            the formula ANTE is false, or the formula CONSEQ is true
            (possibly both); equivalently, it is not the case that ANTE
            is true and CONSEQ is false.  This predicate is very similar
            to #$implies.  However, #$implies is part of the syntax of
            CycL, whereas #$sentenceImplies is merely a predicate
            between formulas.  #$sentenceImplies is primarily intended
            to be used for rules that quantify over CycL formulas.</rdfs:comment>
        <guid>bead825d-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#ELSentence-Assertible"/>
        <daml:range rdf:resource="#ELSentence-Assertible"/>
    </daml:Property>
    <daml:UniqueProperty rdf:ID="seriesLength">
        <rdfs:label>series length</rdfs:label>
        <rdfs:comment>(#$seriesLength SER LEN) means that the series,
            SER, is LEN members long.  Note that some #$Series have an
            unknown or infinite number of members.</rdfs:comment>
        <guid>bfe12eb2-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Series"/>
        <daml:range rdf:resource="#PositiveInteger"/>
    </daml:UniqueProperty>
    <daml:Property rdf:ID="seriesOrderedBy">
        <rdfs:label>series ordered by</rdfs:label>
        <rdfs:comment>This predicate relates series to relations that
            order them linearly.  (#$seriesOrderedBy SERIES PRED) means
            that PRED is a relation that imposes a linear, or total,
            ordering (see #$TotalOrdering) on the #$seriesMembers of
            SERIES.  PRED is both a #$TransitiveBinaryPredicate and a
            #$AntiSymmetricBinaryPredicate, and each member of SERIES
            stands in the relation PRED to all of the succeeding
            members.  For example, if SERIES is a line of cars driving
            north, it might be ordered by #$northOf (and perhaps also by
            ahead of ).</rdfs:comment>
        <guid>c0dbc44e-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Series"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Property"/>
    </daml:Property>
    <daml:UniqueProperty rdf:ID="seriesOrderedByInverse">
        <rdfs:label>series ordered by inverse</rdfs:label>
        <rdfs:comment>(#$seriesOrderedByInverse SER PRED) means that
            PRED is the relation that imposes an order on the members of
            SER.  Each member of the series stands in the relation PRED
            to the series members that come before it.  For example, if
            SER is a line of cars driving south, the ordering relation
            might be #$northOf (or &apos;&apos;behind&apos;&apos;).  See
            also #$seriesOrderedBy.</rdfs:comment>
        <guid>bd70bf75-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Series"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Property"/>
    </daml:UniqueProperty>
    <daml:Property rdf:ID="shapeOfObject">
        <rdfs:label>shape of object</rdfs:label>
        <rdfs:comment>This predicate is used to describe the predominant
            shape of an object.  For example, (#$shapeOfObject OBJECT
            #$SquareShaped) means that OBJECT has the attribute of being square-shaped.</rdfs:comment>
        <guid>bf9b755c-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#SpatialThing"/>
        <daml:range rdf:resource="#ShapeAttribute"/>
    </daml:Property>
    <daml:Property rdf:ID="sharedNotes">
        <rdfs:label>shared notes</rdfs:label>
        <rdfs:comment>#$sharedNotes is a predicate belonging to the Cyc
            collection #$DocumentationConstant.  Often KB builders wish
            to repeat the same documentation in the #$comment of many
            constants.  Rather than actually duplicating text in the KB,
            it is possible to create a special constant to
            &apos;hold&apos; the documentation; this constant will be an
            instance of #$SharedNote.  (#$sharedNotes X N) means that N
            is an element of #$SharedNote whose #$comment contains
            shared documentation about the constant X.  Since
            #$sharedNotes are usually shared, it is reasonable to expect
            other axioms, such as (#$sharedNotes Y N) and (#$sharedNotes
            Z N) to be in the KB as well.</rdfs:comment>
        <guid>c0fb9be2-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#CycLIndexedTerm"/>
        <daml:range rdf:resource="#SharedNote"/>
    </daml:Property>
    <daml:Property rdf:ID="shareholders">
        <rdfs:label>shareholders</rdfs:label>
        <rdfs:comment>The predicate #$shareholders identifies particular
            agents as owners of shares in a particular organization.
            (#$shareholders ORG AGENT) means AGENT owns one or more
            shares of #$Stock in the company ORG and hence is an owner
            of the company and may receive dividends from the company.
            #$shareholders indicates owners of a company&apos;s stock
            generically, whether they hold common or preferred shares.
            Voting shareholders may vote (one vote per share) for the
            Board of Directors.  Shareholders do not normally
            participate in the operation of a company, and they are not
            personally liable for the debts of the company.</rdfs:comment>
        <guid>bd58c345-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#LegalCorporation"/>
        <daml:range rdf:resource="#Agent"/>
    </daml:Property>
    <daml:Property rdf:ID="shearStrengthOfObject">
        <rdfs:label>shear strength of object</rdfs:label>
        <rdfs:comment>(#$shearStrengthOfObject OBJ DEGREE) means that
            the tangible object OBJ has a DEGREE amount of
            #$ShearStrength, i.e., resistance to shearing stress.</rdfs:comment>
        <guid>bd58d31b-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasAttributes"/>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#ShearStrength"/>
    </daml:Property>
    <daml:Property rdf:ID="sheetSurfaceConnected">
        <rdfs:label>sheet surface connected</rdfs:label>
        <rdfs:comment>(#$sheetSurfaceConnected MEMBRANE OBJ2) means that
            MEMBRANE is connected all over most of one surface to a
            surface of OBJ2.  For example, a bi-layer membrane would
            have two parts #$sheetSurfaceConnected to each other.  Or, a
            membrane could be attached over most of its surface to an
            object&apos;s surface, as the #$VisceralPleura is attached
            to the surface of the #$Lung in the  body.  The membrane(s)
            may be flexible, but the surface connection is firm (i.e. no
            sliding can occur without a separation, tearing, or breaking occurring).</rdfs:comment>
        <guid>c0a8974b-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#SheetOfSomeStuff"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:Property>
    <daml:UnambiguousProperty rdf:ID="shortTimeIntervalAfter">
        <rdfs:label>short time interval after</rdfs:label>
        <rdfs:comment>(shortTimeIntervalAfter INTER TEMP-OBJ) means that
            the instance of #$TimeInterval INTER is the short time
            interval after the instance of #$TemporalThing TEMP-OBJ.</rdfs:comment>
        <guid>be783c52-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#contiguousAfter"/>
        <daml:domain rdf:resource="#TimeInterval"/>
        <daml:range rdf:resource="#TemporalThing"/>
    </daml:UnambiguousProperty>
    <daml:UnambiguousProperty rdf:ID="shortTimeIntervalBefore">
        <rdfs:label>short time interval before</rdfs:label>
        <rdfs:comment>(shortTimeIntervalBefore INTER TEMP-OBJ) means
            that the instance of #$TimeInterval INTER is the short time
            interval before the instance of #$TemporalThing TEMP-OBJ.</rdfs:comment>
        <guid>becc822f-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#TimeInterval"/>
        <daml:range rdf:resource="#TemporalThing"/>
    </daml:UnambiguousProperty>
    <daml:Property rdf:ID="siblingDisjointExceptions">
        <rdfs:label>sibling disjoint exceptions</rdfs:label>
        <rdfs:comment>The predicate #$siblingDisjointExceptions is used
            to state exceptions to constraints normally imposed from
            #$SiblingDisjointCollection.  (#$siblingDisjointExceptions
            COL1 COL2) means that the relationship between the
            collections COL1 and COL2 is exempt from the disjointness
            constraint which would otherwise be imposed because COL1 and
            COL2 are both instances of some element of
            #$SiblingDisjointCollection.  (See
            #$SiblingDisjointCollection for a full explanation of the
            constraints.)   For example, #$Killing-Biological and
            #$PhysicallyAttackingAnAgent are both elements of
            #$DefaultDisjointScriptType, which in turn is an element of
            #$SiblingDisjointCollection.  The exception is useful in
            this case because it lifts the constraint that physically
            attacking and killing an agent must be disjoint from each
            other, while letting us continue to conclude that killing
            and attacking are each disjoint from many other kinds of
            actions.  By asserting (#$siblingDisjointExceptions
            #$Killing-Biological #$PhysicallyAttackingAnAgent), we block
            the disjointness constraint between those two collections,
            without disturbing the constraints between each of those
            collections and all the other instances of their parent
            (disjoint) collection, #$DefaultDisjointScriptType.  In
            other words, (#$siblingDisjointExceptions COL1 COL2)
            prevents COL1 and COL2 from being considered disjoint if
            they would otherwise be disjoint due to their being both
            instances of the same #$SiblingDisjointCollection.</rdfs:comment>
        <guid>c10b559a-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
    </daml:Property>
    <daml:Property rdf:ID="siblingOrganizations">
        <rdfs:label>sibling organizations</rdfs:label>
        <rdfs:comment>The predicate #$siblingOrganizations relates two
            organizations which are immediate #$subOrganizations of a
            common (unspecified) parent organization.
            (#$siblingOrganizations ORG1 ORG2) means that the
            #$Organizations ORG1 and ORG2 are sister organizations
            within some hierarchically structured organization; ORG1 and
            ORG2 are at the same `level&apos; from the top.</rdfs:comment>
        <guid>bd58d154-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Organization"/>
        <daml:range rdf:resource="#Organization"/>
    </daml:Property>
    <daml:Property rdf:ID="siblings">
        <rdfs:label>sibling</rdfs:label>
        <rdfs:comment>(#$siblings ANIM1 ANIM2) means that ANIM1 and
            ANIM2 are siblings.  Either they share one or more
            biological parents, or are siblings by adoption, marriage,
            or some other social arrangement.  Generally siblings are
            reasonably close in age (within 15 years or so) and have
            grown up together in the same family.</rdfs:comment>
        <guid>bd58e3e9-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#biologicalRelatives"/>
        <daml:subPropertyOf rdf:resource="#relatives"/>
        <daml:subPropertyOf rdf:resource="#positiveVestedInterest"/>
        <daml:subPropertyOf rdf:resource="#acquaintedWith"/>
        <daml:domain rdf:resource="#Animal"/>
        <daml:range rdf:resource="#Animal"/>
    </daml:Property>
    <daml:Property rdf:ID="simultaneousWith">
        <rdfs:label>simultaneous with</rdfs:label>
        <rdfs:comment>(#$simultaneousWith T1 T2) means that #$TimePoints
            T1 and T2 occur at exactly the same time (and therefore T1
            #$equals T2).  Note that individual #$TimePoints are seldom
            mentioned in axioms. Rather, an axiom is more likely to use
            some #$ComplexTemporalRelation, such as #$cotemporal or
            #$temporalBoundsIdentical, which holds between two
            #$TemporalThings. These #$ComplexTemporalRelations are
            themselves usually defined in terms of
            #$PrimitiveTemporalRelations, such as #$after and
            #$simultaneousWith, which relate one #$TimePoint to another.</rdfs:comment>
        <guid>bd58a4fb-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#cotemporal"/>
        <daml:subPropertyOf rdf:resource="#equals"/>
        <daml:domain rdf:resource="#TimePoint"/>
        <daml:range rdf:resource="#TimePoint"/>
    </daml:Property>
    <daml:Property rdf:ID="singular">
        <rdfs:label>singular</rdfs:label>
        <rdfs:comment>(#$singular WORD STRING) means that STRING is the
            singular noun form of WORD.  For example, the #$singular
            form of #$Hit-TheWord is `hit&apos;.</rdfs:comment>
        <guid>bd6757b8-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#LexicalWord"/>
        <daml:range rdf:resource="#CharacterString"/>
    </daml:Property>
    <daml:UniqueProperty rdf:ID="skinColor">
        <rdfs:label>skin color</rdfs:label>
        <rdfs:comment>(#$skinColor PERSON SKINCOL) means #$Person PERSON
            has the #$HumanSkinColor SKINCOL.</rdfs:comment>
        <guid>bd58d82c-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#objectHasColor"/>
        <daml:subPropertyOf rdf:resource="#hasAttributes"/>
        <daml:domain rdf:resource="#Person"/>
    </daml:UniqueProperty>
    <daml:Property rdf:ID="smells">
        <rdfs:label>smell</rdfs:label>
        <rdfs:comment>(#$smells AGENT OBJECT) means that AGENT perceives
            the physical object or event OBJECT via the sense of smell.
            This implies that OBJECT releases (or involves the release
            of) a scent (see #$Odor) of which AGENT is sensuously aware.
            In the situation described by  Joe smells the coffee brewing
            , both of the following are true: (#$smells Joe Coffee01)
            and (#$smells Joe CoffeeBrewingEvent09).</rdfs:comment>
        <guid>bd58fa66-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#perceives"/>
        <daml:domain rdf:resource="#PerceptualAgent"/>
    </daml:Property>
    <daml:Property rdf:ID="socialClass">
        <rdfs:label>social class</rdfs:label>
        <rdfs:comment>(#$socialClass PRSN CLS) means that in the
            surrounding culture, the #$Person PRSN has the
            #$SocialClass-Lifestyle CLS.  As the name suggests, this
            predicate indicates PRSN&apos;s approximate social status as
            determined by his or her style of life -- quality of life,
            access to material goods and services, and social
            associations.  It may also depend on a cultural non-material
            system of social rank, based on birth, office, manners,
            vocal accent or other factors.  E.g., (#$socialClass
            #$DonaldTrump #$UpperClass) was true even when he lost his
            fortune and was (temporarily) bankrupt; and (#$socialClass
            #$BillGates #$UpperMiddleClass) was true, at least for a
            while, after he became a billionaire.  This is a good
            example of a predicate whose precise meaning, and associated
            heuristic rules, vary quite a bit from context to context,
            such as from country to country, from century to century, etc.</rdfs:comment>
        <guid>bd58b09b-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasAttributes"/>
        <daml:domain rdf:resource="#Person"/>
        <daml:range rdf:resource="#SocialClass-Lifestyle"/>
    </daml:Property>
    <daml:Property rdf:ID="socialParticipants">
        <rdfs:label>participants</rdfs:label>
        <rdfs:comment>(#$socialParticipants SO AGT) means that the
            #$Agent AGT participates --- in some social role --- in the
            #$SocialOccurrence SO.  In every culture there are many
            specializations of this #$ActorSlot; some
            #$SocialOccurrences have very elaborate role structures
            (e.g., a lawsuit in 1990&apos;s America), and some are
            fairly simple (e.g., rudely bumping into someone.)  See #$SocialOccurrence.</rdfs:comment>
        <guid>bd588014-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#actors"/>
        <daml:domain rdf:resource="#SocialOccurrence"/>
        <daml:range rdf:resource="#Agent"/>
    </daml:Property>
    <daml:Property rdf:ID="solubleIn">
        <rdfs:label>soluble in</rdfs:label>
        <rdfs:comment>(#$solubleIn SOLUTE SOLVENT) means that the piece
            of #$PartiallyTangible stuff SOLUTE will ordinarily dissolve
            if placed into the #$LiquidTangibleThing SOLVENT.  See also #$Solubility.</rdfs:comment>
        <guid>bd58c479-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#LiquidTangibleThing"/>
    </daml:Property>
    <daml:Property rdf:ID="solute">
        <rdfs:label>solute</rdfs:label>
        <rdfs:comment>The predicate #$solute indicates a particular
            #$TangibleThing in a #$Solution which is dissolved in the
            #$solvent of that #$Solution.</rdfs:comment>
        <guid>bd58d37f-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#constituents"/>
        <daml:domain rdf:resource="#Solution"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:Property>
    <daml:UniqueProperty rdf:ID="solvent">
        <rdfs:label>solvent</rdfs:label>
        <rdfs:comment>The predicate #$solvent indicates a particular
            liquid in a #$Solution in which the #$solute is dissolved.</rdfs:comment>
        <guid>bd58d342-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#mainConstituent"/>
        <daml:domain rdf:resource="#Solution"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:UniqueProperty>
    <daml:Property rdf:ID="spaceRegionPortals">
        <rdfs:label>space region portals</rdfs:label>
        <rdfs:comment>(spaceRegionPortals REGION HOLE) means that HOLE
            is a #$Portal into the interior region REGION.  All the
            portals of this #$Interior space region are related to it by spaceRegionPortals.</rdfs:comment>
        <guid>bd5899bb-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#adjacentTo"/>
        <daml:domain rdf:resource="#CavityInteriorRegion"/>
        <daml:range rdf:resource="#Portal"/>
    </daml:Property>
    <daml:Property rdf:ID="spatiallyIntersects">
        <rdfs:label>spatially intersects</rdfs:label>
        <rdfs:comment>(#$spatiallyIntersects THING1 THING2) means that
            the spatial extent of the #$SpatialThing THING1 overlaps the
            spatial extent of the #$SpatialThing THING2.  Note that
            spatial intersection doesn&apos;t imply that THING1 and
            THING2 have any parts in common.  (For example, a wall and
            the magnetic field surrounding an outlet in the wall
            spatially intersect without sharing any common parts.  For
            other examples, see the comment for #$cospatial.)  See also #$spatiallySubsumes.</rdfs:comment>
        <guid>bd58d895-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#near"/>
        <daml:domain rdf:resource="#SpatialThing"/>
        <daml:range rdf:resource="#SpatialThing"/>
    </daml:Property>
    <daml:Property rdf:ID="spatiallyIntrinsicArg">
        <rdfs:label>spatially intrinsic arg</rdfs:label>
        <rdfs:comment>(#$spatiallyIntrinsicArg PRED N) means that the
            Cyc predicate PRED expresses a property that is spatially
            intrinsic for its argument position N. That means, if a
            formula using PRED        is true for some object OBJ (in
            the Nth argument position), we can assume the truth of every
            similar formula in which any spatial part of OBJ is
            substituted in for OBJ. For        example, since
            (#$spatiallyIntrinsicArg #$temperatureOfObject 1) is true,
            if we know (#$temperatureOfObject `Coffee007&apos;
            (#$DegreeCelsius 90)), we can expect that any spatial part
            of `Coffee007&apos; will also have that temperature. An
            example of a property that is NOT spatially intrinsic is
            #$massOfObject; though a whole rock may weigh two pounds,
            there are spatial parts of the rock that don&apos;t.
            Another example of a relation that is not spatially
            intrinsic, but might at first seem to be, is #$constituents.
            In (#$constituents `ChocolateMilk37&apos; `Milk36&apos;), it
            is not the case that every spatial part of
            `ChocolateMilk37&apos; has `Milk36&apos; among its
            #$constituents.  #$constituents means, rather, that every
            part of its first argument has some part of the second
            argument among its components, but that is different from
            the intended meaning of #$spatiallyIntrinsicArg.</rdfs:comment>
        <guid>be3a3685-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Predicate"/>
        <daml:range rdf:resource="#PositiveInteger"/>
    </daml:Property>
    <daml:Property rdf:ID="spectators">
        <rdfs:label>spectator</rdfs:label>
        <rdfs:comment>(#$spectators E AGT) means that in the #$Event E,
            the #$Agent AGT is an onlooker of E but not actively acting
            in it in any other way.   AGT will observe all or part of E.</rdfs:comment>
        <guid>bd59088b-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#preActors"/>
        <daml:domain rdf:resource="#Event"/>
        <daml:range rdf:resource="#IntelligentAgent"/>
    </daml:Property>
    <daml:Property rdf:ID="speedOfObject-Translation">
        <rdfs:label>speed</rdfs:label>
        <rdfs:comment>The predicate #$speedOfObject-Translation is used
            to give the speed with which an object is moving in a
            particular translational motion.  Velocity has a speed and
            direction.  Speed is a scalar quantity, i.e., it has no
            direction, only magnitude.  Thus, `100 miles per hour
            straight up&apos; is a velocity, and `100 miles per
            hour&apos; is the corresponding speed.</rdfs:comment>
        <guid>bd58f397-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#SpatialThing"/>
        <daml:range rdf:resource="#Speed"/>
    </daml:Property>
    <daml:UnambiguousProperty rdf:ID="spouse">
        <rdfs:label>spouse</rdfs:label>
        <rdfs:comment>(#$spouse PERSON1 PERSON2) means the two #$Persons
            PERSON1 and PERSON2 are married.   Note: in some contexts
            (cultures), a person is not restricted to having only one
            cotemporal spouse.</rdfs:comment>
        <guid>bd58d591-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#loves"/>
        <daml:subPropertyOf rdf:resource="#cohabitingFamilyMembers"/>
        <daml:subPropertyOf rdf:resource="#mate"/>
        <daml:domain rdf:resource="#Person"/>
        <daml:range rdf:resource="#Person"/>
    </daml:UnambiguousProperty>
    <daml:Property rdf:ID="startingDate">
        <rdfs:label>starting date</rdfs:label>
        <rdfs:comment>(#$startingDate X Y) indicates that Y is a #$Date
            such that (#$temporallySubsumes Y (#$StartFn X)). This is
            NOT the same as #$startingPoint (qv).  Rather, it means that
            X happened (started to happen, came into existence, etc.)
            sometime on that date.  Note:  the date is tied to a time
            interval on a calendar, but need not be a particular day; it
            might be a particular calendar month, a particular calendar
            year, etc.</rdfs:comment>
        <guid>bd58a0a8-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <daml:domain rdf:resource="#TemporalThing"/>
        <daml:range rdf:resource="#Date"/>
    </daml:Property>
    <daml:UniqueProperty rdf:ID="startingPoint">
        <rdfs:label>beginning</rdfs:label>
        <rdfs:comment>This predicate relates a temporal thing to the
            time point at which it starts or begins to exist.
            (#$startingPoint THING POINT) means that THING begins at
            POINT, which is the earliest moment of its temporal extent.
            See also #$endingPoint.</rdfs:comment>
        <guid>be00f69c-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#temporallyCooriginating"/>
        <daml:subPropertyOf rdf:resource="#temporallySubsumes"/>
        <daml:domain rdf:resource="#TemporalThing"/>
        <daml:range rdf:resource="#TimePoint"/>
    </daml:UniqueProperty>
    <daml:Property rdf:ID="startsAfterEndingOf">
        <rdfs:label>starts after ending of</rdfs:label>
        <rdfs:comment>(#$startsAfterEndingOf AFTER BEFORE) means
            (#$after (#$StartFn AFTER) (#$EndFn BEFORE)).   That is, the
            #$startingPoint of AFTER is later than the #$endingPoint of
            BEFORE.    Note:  Cyc&apos;s #$startsAfterEndingOf relation
            is equivalent to what James Allen independently dubbed the
            AFTER relation.</rdfs:comment>
        <guid>bd58d0c9-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#temporallyDisjoint"/>
        <daml:subPropertyOf rdf:resource="#endsAfterEndingOf"/>
        <daml:subPropertyOf rdf:resource="#startsAfterStartingOf"/>
        <daml:domain rdf:resource="#TemporalThing"/>
        <daml:range rdf:resource="#TemporalThing"/>
    </daml:Property>
    <daml:Property rdf:ID="startsAfterStartingOf">
        <rdfs:label>starts after starting of</rdfs:label>
        <rdfs:comment>(#$startsAfterStartingOf LATER-START
            EARLIER-START) means (#$after (#$StartFn LATER-START)
            (#$StartFn EARLIER-START)).  That is, the #$startingPoint of
            LATER-START is later than the #$startingPoint of
            EARLIER-START.  This implies nothing about whether
            LATER-START and EARLIER-START overlap, or how much they
            overlap, except that they can&apos;t be fully #$cotemporal.</rdfs:comment>
        <guid>bd58b037-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#endsAfterStartingOf"/>
        <daml:domain rdf:resource="#TemporalThing"/>
        <daml:range rdf:resource="#TemporalThing"/>
    </daml:Property>
    <daml:Property rdf:ID="startsDuring">
        <rdfs:label>starts during</rdfs:label>
        <rdfs:comment>(#$startsDuring X Y) means Y covers the start of
            X, i.e. the #$startingPoint of X is properly contained
            (#$temporalBoundsContain) within Y.  Note that X and Y do
            not necessarily intersect in time, however, they would if Y
            were #$temporallyContinuous.</rdfs:comment>
        <guid>bd58dd0c-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#temporalBoundsIntersect"/>
        <daml:subPropertyOf rdf:resource="#startsAfterStartingOf"/>
        <daml:domain rdf:resource="#TemporalThing"/>
        <daml:range rdf:resource="#TemporalThing"/>
    </daml:Property>
    <daml:UniqueProperty rdf:ID="stateOfAddress">
        <rdfs:label>state of address</rdfs:label>
        <rdfs:comment>(#$stateOfAddress LOC STATE) means that the
            #$ContactLocation LOC is found in the STATE, where STATE is
            either a   #$State-UnitedStates or another
            #$CountrySubsidiary. For example, as   #$CycorpHeadquarters
            is a #$ContactLocation for #$Cycorp, then
            (#$stateOfAddress #$CycorpHeadquarters #$Texas-State) means
            that the  Cycorp Headquarters building is located in Texas.
            Note that the arg-constraint  on the first argument should
            be an instance of #$ContactLocation which serves  as a
            #$pointsOfContact for an agent and not the agent itself.</rdfs:comment>
        <guid>bd590075-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#objectFoundInLocation"/>
        <daml:domain rdf:resource="#ContactLocation"/>
        <daml:range rdf:resource="#CountrySubsidiary"/>
    </daml:UniqueProperty>
    <daml:Property rdf:ID="stateOfDevice">
        <rdfs:label>state of device</rdfs:label>
        <rdfs:comment>This predicate is used to identify the state of
            operation that a particular device is in.  (#$stateOfDevice
            DEV STATE) means that the #$PhysicalDevice DEV is in the
            #$DeviceState STATE.  Thus, (#$stateOfDevice HAL
            #$DeviceOff) says that the computer HAL is switched off.</rdfs:comment>
        <guid>bd58eb21-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasAttributes"/>
        <daml:domain rdf:resource="#PhysicalDevice"/>
        <daml:range rdf:resource="#DeviceState"/>
    </daml:Property>
    <daml:Property rdf:ID="stateOfMatter">
        <rdfs:label>state of matter</rdfs:label>
        <rdfs:comment>The predicate #$stateOfMatter is used to indicate
            the physical state of a tangible thing.  (#$stateOfMatter
            SUBST STATE) means that the tangible substance SUBST is in
            the physical state STATE.  STATE is an element of
            #$StateOfMatter-SolidLiquidGaseous (solid, semi-solid,
            liquid, or gaseous).</rdfs:comment>
        <guid>bd58bd1c-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasAttributes"/>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#StateOfMatter-SolidLiquidGaseous"/>
    </daml:Property>
    <daml:Property rdf:ID="streetAddressText">
        <rdfs:label>address</rdfs:label>
        <rdfs:comment>The predicate #$streetAddressText maps from a
            particular place to a string representing its street
            address.  (#$streetAddressText LOC STREET) means that LOC is
            found at the number and street given in the string STREET.
            See also #$ContactLocation.</rdfs:comment>
        <guid>bd58acb5-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#ContactLocation"/>
        <daml:range rdf:resource="#StreetAddress"/>
    </daml:Property>
    <daml:Property rdf:ID="structureMemberIsa">
        <rdfs:label>structure member isa</rdfs:label>
        <rdfs:comment>(#$structureMemberIsa SIT COL) means that each of
            the #$structureMembers of the situation SIT is an element of
            the collection COL.</rdfs:comment>
        <guid>bd6c22c9-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Situation"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
    </daml:Property>
    <daml:Property rdf:ID="structureMembers">
        <rdfs:label>structure members</rdfs:label>
        <rdfs:comment>#$structureMembers is a very general predicate,
            encompassing all the ways a #$Situation&apos;s structure can
            be composed out of parts.  In (#$structureMembers WHOLE
            PART), PART could be either a member or subgroup/subseries
            of WHOLE (if WHOLE is a #$Group or #$Series), any
            #$subEvents of an #$Event (if WHOLE is an #$Event), and so on.</rdfs:comment>
        <guid>bd897c1f-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Situation"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
    </daml:Property>
    <daml:Property rdf:ID="structureRelations">
        <rdfs:label>structure relations</rdfs:label>
        <rdfs:comment>(#$structureRelations STRUCT REL) means that the
            situation or structure STRUCT has REL as one of its
            associated relations between its #$structureMembers.  This
            is very general and it could be an abstract predicate,
            relation or function, defined on the structureMembers.</rdfs:comment>
        <guid>be1e710b-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#parts"/>
        <daml:domain rdf:resource="#Situation"/>
        <daml:range rdf:resource="#Relation"/>
    </daml:Property>
    <daml:Property rdf:ID="stuckTo">
        <rdfs:label>adhere</rdfs:label>
        <rdfs:comment>(#$stuckTo OBJ1 OBJ2) means that OBJ1 and OBJ2 are
            held together by an adhesive force that is at least strong
            enough to support the whole weight of (the lighter of) OBJ1
            or OBJ2.  Either OBJ1 or OBJ2 must be `sticky&apos; or have
            a sticky surface; e.g., duct tape, honey, chewing gum, and
            perhaps magnetism.  #$stuckTo may represent a weak form of
            connection, one that may be separated by manual force.
            Note: If a third object (such as glue) supplies the adhesive
            force holding OBJ1 and OBJ2 together, or if OBJ1 or OBJ2
            were acted on non-trivially (e.g., welding, not simply
            contact or pressure), then see #$bondedTo and its specializations.</rdfs:comment>
        <guid>bd58f0a1-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#touchesDirectly"/>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:Property>
    <daml:Property rdf:ID="stuffUsed">
        <rdfs:label>stuff used</rdfs:label>
        <rdfs:comment>The predicate #$stuffUsed relates an event to some
            tangible substance which facilitates that event.
            (#$stuffUsed EVENT STUFF) means that STUFF is a portion of
            an element of #$ExistingStuffType which plays an
            instrumental role in EVENT.  STUFF may or may not be
            consumed in the course of EVENT.  Examples: portions of
            #$Water are #$stuffUsed in instances of #$WashingDishes,
            #$WashingHair, #$WashingClothesInAMachine, etc.; portions of
            #$EdibleOil are #$stuffUsed in some instances of #$Frying
            food and #$BakingBread.</rdfs:comment>
        <guid>bd58cadc-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#instrument-Generic"/>
        <daml:domain rdf:resource="#Event"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:Property>
    <daml:Property rdf:ID="subAbstrac">
        <rdfs:label>sub abstrac</rdfs:label>
        <rdfs:comment>(#$subAbstrac WHOLE SUB) means SUB is a temporal
            part   (one of the #$timeSlices) of WHOLE, where WHOLE and
            SUB are both elements of   #$SomethingExisting.  Both
            entities and subabstractions are subabstractions of
            themselves.  So the predicate #$subAbstrac is the
            restriction of the predicate   #$timeSlices to the domain,
            and hence also range, #$SomethingExisting.
            `AlbertEinsteinWhileAtPrinceton&apos; is a #$subAbstrac of
            `AlbertEinsteinAsAnAdult&apos;,   which in turn is a
            #$subAbstrac of &apos;AlbertEinstein&apos;, which in turn is
            a   #$subAbstrac only of itself (hence
            &apos;AlbertEinstein&apos; is an element of   #$Entity (q.v.)).</rdfs:comment>
        <guid>bd5901e3-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#timeSlices"/>
        <daml:domain rdf:resource="#SomethingExisting"/>
        <daml:range rdf:resource="#SomethingExisting"/>
    </daml:Property>
    <daml:Property rdf:ID="subAgreements">
        <rdfs:label>sub agreements</rdfs:label>
        <rdfs:comment>The predicate #$subAgreements relates a particular
            agreement to the subordinate agreements it comprises.
            (#$subAgreements AGR SUB) means that both AGR and SUB are
            elements of #$Agreement, and AGR has SUB as a sub-part.</rdfs:comment>
        <guid>be018058-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Agreement"/>
        <daml:range rdf:resource="#Agreement"/>
    </daml:Property>
    <daml:Property rdf:ID="subBeliefSystem">
        <rdfs:label>sub belief system</rdfs:label>
        <rdfs:comment>(#$subBeliefSystem BSYS SUB) indicates that SUB is
            a more specialized `branch&apos; of belief system BSYS.
            Thus the #$beliefStatements of SUB will be a superset of the
            #$beliefStatements of BSYS (sometimes with a few changes and
            deletions.)  Some examples of this are:  (#$subBeliefSystem
            #$Islam #$ShiiteIslam), (#$subBeliefSystem
            #$ProtestantReligion #$PresbyterianReligion), and
            (#$subBeliefSystem #$MilesianSchoolBeliefs
            #$AnaximandersPhilosophy).--KM Smith, Sep 16, 1997</rdfs:comment>
        <guid>bd58a069-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#BeliefSystem"/>
        <daml:range rdf:resource="#BeliefSystem"/>
    </daml:Property>
    <daml:Property rdf:ID="subEvents">
        <rdfs:label>subevent</rdfs:label>
        <rdfs:comment>(#$subEvents WHOLE PART) means that the event PART
            is a meaningful part of the event WHOLE.  So both WHOLE and
            PART are elements of #$Event.  The predicate #$subEvents can
            be used to decompose events in time, in space, and/or in
            other ways.  Following a recipe often has this property:
            the task is broken down into several sub-tasks, some of
            which happen before others, and some of which happen
            simultaneously but involve different ingredients.  One could
            also decompose `making dinner&apos; into #$subEvents
            according to how dangerous they are, which might be useful
            if one had kids of various ages helping.  Often, a more
            specialized relation than #$subEvents can be used; e.g., if
            you have subevents that decompose an action in time only,
            then the more specialized predicate #$subProcesses should be used.</rdfs:comment>
        <guid>bd589099-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#temporallySubsumes"/>
        <daml:subPropertyOf rdf:resource="#parts"/>
        <daml:domain rdf:resource="#Event"/>
        <daml:range rdf:resource="#Event"/>
    </daml:Property>
    <daml:Property rdf:ID="subGoals">
        <rdfs:label>sub goals</rdfs:label>
        <rdfs:comment>(#$subGoals G SUB) means that SUB is a subordinate
            goal of G.  In other words, SUB is an intermediate objective
            or milestone to be accomplished in the course of pursuing
            the overall #$Goal G.</rdfs:comment>
        <guid>bd59012e-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#ELSentence-Assertible"/>
        <daml:range rdf:resource="#ELSentence-Assertible"/>
    </daml:Property>
    <daml:Property rdf:ID="subGroups">
        <rdfs:label>subgroup</rdfs:label>
        <rdfs:comment>This predicate relates a group to its subgroups.
            (#$subGroups GROUP SUBGROUP) means that (1) all
            #$groupMembers of SUBGROUP are members of GROUP and (2) if
            SUBGROUP is different from GROUP, then the members of
            SUBGROUP constitute a #$Group in their own right that is
            some sort of specialization within GROUP.  Examples: the
            stars in #$BigDipper-Asterism constitute one of the
            #$subGroups of #$MilkyWay-Galaxy; the Democrats in the House
            of Representatives in a given year constitute a subgroup of
            the group of #$USRepresentatives for that year.</rdfs:comment>
        <guid>bd58c466-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Group"/>
        <daml:range rdf:resource="#Group"/>
    </daml:Property>
    <daml:Property rdf:ID="subOrganizations">
        <rdfs:label>sub organizations</rdfs:label>
        <rdfs:comment>The predicate #$subOrganizations relates a
            particular organization to one of its sub-organizations.
            (#$subOrganizations ORG SUBORG) means SUBORG is a
            sub-organization of ORG, whether it is at the very next
            organizational level down, e.g., (#$subOrganizations
            #$NationalLeague-Baseball #$NationalLeagueEast-Baseball), or
            several levels down the hierarchy, e.g., (#$subOrganizations
            #$NationalLeague-Baseball #$NewYorkMets).--Foxvog, Feb 2, 1998</rdfs:comment>
        <guid>bd58bfbf-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#subGroups"/>
        <daml:subPropertyOf rdf:resource="#affiliatedWith"/>
        <daml:domain rdf:resource="#Organization"/>
        <daml:range rdf:resource="#Organization"/>
    </daml:Property>
    <daml:Property rdf:ID="subPathSystems">
        <rdfs:label>sub path systems</rdfs:label>
        <rdfs:comment>(#$subPathSystems SYS SUBSYS) means that the path
            system SUBSYS is a subsystem of the path system SYS.
            Technically, this means the following: (i) Every point in
            SUBSYS is a point in SYS, (ii) every node in SUBSYS is a
            node in SYS, (iii) every link in SUBSYS is a link in SYS,
            and (iv) every loop in SUBSYS is a loop in SYS.  Some
            consequences of these conditions are as follows.  (a) Every
            point in SUBSYS that is a node in SYS is a node in SUBSYS.
            (b) For any nodes X and Y in SUBSYS and each link LINK in
            SUBSYS, LINK is between X and Y in SYS iff it is between X
            and Y in SUBSYS.  (c) For each point X in SYS that is not a
            node in SYS, if X is on a link in SYS that is not in SUBSYS,
            X is not in SUBSYS.  (d) Isolated points and deadends in
            SUBSYS must be nodes in SYS.  (e) For each loop LOOP in
            SUBSYS, the only node in SYS on LOOP must be a node in
            SUBSYS.  (f) If SYS is a #$SimpleGraph-GraphTheoretic (or a
            #$Multigraph), all subsystems of SYS are
            #$SimpleGraph-GraphTheoretics (or #$Multigraphs).
            Predicates concerning particular kinds of subsystems of path
            systems, i.e., predicates that take #$subPathSystems as
            #$genlPreds, include #$linkClosedSubSystems,
            #$pointClosedSubSystems, and #$maximalConnectedSubSystems,
            etc.  Predicates whose #$genlInverse are #$subPathSystems
            includes #$underlyingGraph.</rdfs:comment>
        <guid>c0e5d1f8-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#PathSystem"/>
        <daml:range rdf:resource="#PathSystem"/>
    </daml:Property>
    <daml:Property rdf:ID="subPaths">
        <rdfs:label>sub paths</rdfs:label>
        <rdfs:comment>(#$subPaths PATH SUBPATH) means that SUBPATH is a
            sub-path of PATH, such that any &apos;point&apos; on SUBPATH
            must also be on PATH.  PATH and SUBPATH are both instances
            of #$Path-Simple.</rdfs:comment>
        <guid>be2a22b6-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Path-Simple"/>
        <daml:range rdf:resource="#Path-Simple"/>
    </daml:Property>
    <daml:Property rdf:ID="subRegions">
        <rdfs:label>sub regions</rdfs:label>
        <rdfs:comment>(#$subRegions SUPER SUB) means that SUPER and SUB
            are both (effectively) two-dimensional regions, and the area
            SUB lies wholly within the region SUPER (see inRegion).
            SUPER may or may not completely surround SUB.  To relate two
            instances of #$GeopoliticalEntity, use the predicate,
            #$geopoliticalSubdivision, if it applies, and for other
            instances of #$GeographicalRegion use #$geographicalSubRegions.</rdfs:comment>
        <guid>bf5e4df2-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Surface-Generic"/>
        <daml:range rdf:resource="#Surface-Generic"/>
    </daml:Property>
    <daml:Property rdf:ID="subSeries">
        <rdfs:label>sub series</rdfs:label>
        <rdfs:comment>(#$subSeries SER1 SER2) means that SER2 is a
            sub-series of SER1.  This means that all the members of SER2
            are members of SER1, that SER1 and SER2 share the same
            ordering principle, and that, if the first member of SER2 is
            the Mth member of SER1, the Nth member of SER2 is the (N + M
            - 1)th member of SER1.  So a subseries is an uninterrupted
            &apos;&apos;slice&apos;&apos; of the whole.</rdfs:comment>
        <guid>bd5944c9-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Series"/>
        <daml:range rdf:resource="#Series"/>
    </daml:Property>
    <daml:Property rdf:ID="subTraversals">
        <rdfs:label>sub traversals</rdfs:label>
        <rdfs:comment>(#$subTraversals TRAV SUBTRAV) means that TRAV is
            a #$Traversal along some path or paths and SUBTRAV is a
            subtraversal of TRAV.  The subtraversal SUBTRAV is within
            the same paths as the traversal TRAV, but it is &apos;shorter&apos;.</rdfs:comment>
        <guid>beaaeacb-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#parts"/>
        <daml:domain rdf:resource="#Traversal"/>
        <daml:range rdf:resource="#Traversal"/>
    </daml:Property>
    <daml:Property rdf:ID="sublists">
        <rdfs:label>sublists</rdfs:label>
        <rdfs:comment>(#$sublists LIST SUB) means that SUB is a sublist
            of LIST, both being instances of #$List.  Formally, SUB is a
            sublist of LIST iff for some #$Lists X and Y, (#$JoinListsFn
            X SUB Y) = LIST.  Note that by this definition and our
            definition of #$JoinListsFn, every list is a sublist of
            itself, and #$TheEmptyList is a sublist of every #$List.  As
            examples, the following are all sublists of (#$TheList A B C
            D A B): #$TheEmptyList, (#$TheList A), (#$TheList A B),
            (#$TheList A B C), (#$TheList B C), (#$TheList B C D A), and
            LIST itself, etc. Note also that the sublist (#$TheList A B)
            of LIST above &apos;occurs&apos; in LIST as a segment more
            than once--one is an initial segment, and the other is a
            final segment, of LIST.  See #$PositionsInListFn.</rdfs:comment>
        <guid>c10c4485-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#parts"/>
        <daml:domain rdf:resource="#List"/>
        <daml:range rdf:resource="#List"/>
    </daml:Property>
    <daml:Property rdf:ID="subsetOf">
        <rdfs:label>subset</rdfs:label>
        <rdfs:comment>(#$subsetOf SUB SUPER) means that every element of
            the mathematical set or collection SUB is an element of the
            mathematical set or collection SUPER.</rdfs:comment>
        <guid>bd903ed3-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#SetOrCollection"/>
        <daml:range rdf:resource="#SetOrCollection"/>
    </daml:Property>
    <daml:Property rdf:ID="substring">
        <rdfs:label>substring</rdfs:label>
        <rdfs:comment>(#$substring SUBSTRING STRING) means that
            SUBSTRING is a substring of STRING.</rdfs:comment>
        <guid>c06337a2-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#SubLString"/>
        <daml:range rdf:resource="#SubLString"/>
    </daml:Property>
    <daml:Property rdf:ID="substring-CaseInsensitive">
        <rdfs:label>substring - case insensitive</rdfs:label>
        <rdfs:comment>(#$substring-CaseInsensitive SUBSTRING STRING)
            means that SUBSTRING is a substring of STRING with case
            ignored in both SUBSTRING and STRING.  For case-sensitive
            tagging use the more specialized predicate, #$substring.</rdfs:comment>
        <guid>c1164bb8-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#SubLString"/>
        <daml:range rdf:resource="#SubLString"/>
    </daml:Property>
    <daml:Property rdf:ID="subsumedByIntervalType">
        <rdfs:label>subsumed by interval type</rdfs:label>
        <rdfs:comment>(#$subsumedByIntervalType ?X ?Y) means that a time
            interval of type ?Y (i.e., something which #$isa ?Y)
            #$temporallySubsumes ?X.  For example,
            (#$subsumedByIntervalType FredsBirth #$Wednesday) means that
            Fred was born on a Wednesday.  As another example, Cyc
            contains an axiom which says, in a typical modern
            service-providing context, that each instance of
            #$HairCuttingEvent is #$subsumedByIntervalType
            #$DaytimeWorkingHours -- i.e., it is true as a default that
            the typical professional haircut is given during normal
            daytime working hours.</rdfs:comment>
        <guid>bd58d7de-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#TemporalThing"/>
        <daml:range rdf:resource="#TemporalObjectType"/>
    </daml:Property>
    <daml:Property rdf:ID="subsumesIntervalType">
        <rdfs:label>subsumes interval type</rdfs:label>
        <rdfs:comment>(#$subsumesIntervalType X Y) indicates that every
            instance of X #$temporallySubsumes some instance of Y.  For
            example, one of Cyc&apos;s axioms states that in the
            #$NorthernHemisphereMt (the context in which the location is
            assumed to be somewhere north of the equator) it is true
            that (#$subsumesIntervalType #$CalendarWinter #$January).
            That is, in that micro-theory, each Winter contains a
            January.  In the base KB -- that is, independent of context
            -- it is true that (#$subsumesIntervalType #$CalendarQuarter
            #$CalendarMonth), which means that every calendar quarter
            contains at least one entire calendar month.</rdfs:comment>
        <guid>be010f1d-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#intersectsIntervalType"/>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
    </daml:Property>
    <daml:Property rdf:ID="successfulForAgents">
        <rdfs:label>successful for agents</rdfs:label>
        <rdfs:comment>The predicate #$successfulForAgents is used to
            indicate that a particular agent achieves its goal in a
            particular action.  (#$successfulForAgents ENDEAVOR AGT)
            means that the #$Agent AGT is successful in accomplishing
            the #$PurposefulAction ENDEAVOR.  This means that each of
            the purposes AGT had in doing ENDEAVOR has come true.  See
            also #$purposeInEvent.</rdfs:comment>
        <guid>bd590676-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#performedBy"/>
        <daml:domain rdf:resource="#Event"/>
        <daml:range rdf:resource="#Agent"/>
    </daml:Property>
    <daml:Property rdf:ID="succession-RST">
        <rdfs:label>succession - r s t</rdfs:label>
        <rdfs:comment>The discourse relation that holds between two
            segments of text when they describe events which are related
            to one another by succession.</rdfs:comment>
        <guid>c08e2032-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#LinguisticObject"/>
        <daml:range rdf:resource="#LinguisticObject"/>
    </daml:Property>
    <daml:Property rdf:ID="superTaxons">
        <rdfs:label>super taxons</rdfs:label>
        <rdfs:comment>The predicate #$superTaxons is used to relate
            elements of #$BiologicalTaxon.  (#$superTaxons TAXON
            GEN-TAXON) means that GEN-TAXON is a #$BiologicalTaxon above
            (i.e., more general and inclusive than) the more specific
            #$BiologicalTaxon TAXON.  Every instance of TAXON must
            therefore also be an instance of GEN-TAXON; the same holds
            for the #$taxonMembers relation.  Example: (#$superTaxons
            #$DomesticCat #$FelisGenus).  See also #$taxonMembers.</rdfs:comment>
        <guid>bd58e36e-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#genls"/>
        <daml:domain rdf:resource="#BiologicalTaxon"/>
        <daml:range rdf:resource="#BiologicalTaxon"/>
    </daml:Property>
    <daml:Property rdf:ID="suppliers">
        <rdfs:label>providers</rdfs:label>
        <rdfs:comment>The predicate relates two generic agents.
            (#$suppliers SUPPLIER SUPPLIEE) means that SUPPLIER supplies
            some goods or services to SUPPLIEE, usually on an ongoing
            basis. When payment is returned for the supplying, consider
            using the inverse specialization #$customers.</rdfs:comment>
        <guid>bd58d498-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#doesBusinessWith"/>
        <daml:domain rdf:resource="#Agent-Generic"/>
        <daml:range rdf:resource="#Agent-Generic"/>
    </daml:Property>
    <daml:Property rdf:ID="supportedBy">
        <rdfs:label>supported by</rdfs:label>
        <rdfs:comment>(#$supportedBy OBJECT SUPPORT) means that
            SUPPORT is at least partially responsible for holding OBJECT
            up and maintaining its vertical position.  If SUPPORT were
            to be removed, then (everything else being equal) either
            OBJECT would fall or at least part of  OBJECT would move
            downward.  See also #$supportedObject, #$supportingObject,
            and #$SupportingSomething.</rdfs:comment>
        <guid>bd5901fe-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:Property>
    <daml:Property rdf:ID="surfaceAttributeOfSurf">
        <rdfs:label>surface attribute of surf</rdfs:label>
        <rdfs:comment>(surfaceAttributeOfSurf SURF SURFATT) means that
            the particular individual #$Surface-Physical SURF has the
            #$SurfaceAttribute SURFATT over most or all of its area.  It
            may have more than one such surface attribute.</rdfs:comment>
        <guid>bd58b6e5-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasAttributes"/>
        <daml:domain rdf:resource="#Surface-Physical"/>
    </daml:Property>
    <daml:Property rdf:ID="surfaceParts">
        <rdfs:label>surface parts</rdfs:label>
        <rdfs:comment>(#$surfaceParts BIG LITTLE) means that LITTLE is
            an external physical part (see #$externalParts) of a surface
            of BIG, or that LITTLE is a physical part of BIG itself and
            a surface of LITTLE is part of a surface of BIG.  LITTLE is
            also something which &apos;does not go all the way
            through&apos; BIG.   In other words, there is no line
            segment spatially subsumed by LITTLE that goes from a point
            at the surface of one side of BIG to a point of the surface
            on the opposite side of BIG. Positive exemplars: the skin of
            an orange is a #$surfaceParts of the orange, a window of a
            house is a #$surfaceParts of that house.  Borderline
            positive exemplars: the inside surface of a coffee cup is
            one of the #$surfaceParts of the cup; the inside surface of
            a beer-can in some contexts is a #$surfaceParts of the can.
            Negative exemplars:  the brain is not a #$surfaceParts of a
            person.  A person&apos;s head is also a negative exemplar of
            a #$surfaceParts.  There is a line that can go, for example,
            from the front side to the back side of that person.</rdfs:comment>
        <guid>bd58d0ad-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#externalParts"/>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:Property>
    <daml:Property rdf:ID="surroundsCompletely">
        <rdfs:label>surround</rdfs:label>
        <rdfs:comment>(#$surroundsCompletely OUTSIDE INSIDE) means that
            OUTSIDE completely surrounds INSIDE. In other words, all
            rays with  origins at INSIDE pass through OUTSIDE by default
            (with some exceptions). OUTSIDE is not a part of INSIDE (or
            vice versa).  Holes in OUTSIDE are permitted. Examples: a
            candy bar inside its wrapper; the body of a pregnant
            mammalian female  containing a foetus; a fish in water.</rdfs:comment>
        <guid>bd589a41-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#surroundsHorizontally"/>
        <daml:domain rdf:resource="#SpatialThing"/>
        <daml:range rdf:resource="#SpatialThing"/>
    </daml:Property>
    <daml:Property rdf:ID="surroundsHorizontally">
        <rdfs:label>surrounds horizontally</rdfs:label>
        <rdfs:comment>(#$surroundsHorizontally OUTSIDE INSIDE) means
            that OUTSIDE surrounds a horizontal slice of INSIDE.  That
            is, there is some horizontal cross section of INSIDE such
            that all rays drawn horizontally from points in that cross
            section pass through OUTSIDE, and along each of those rays
            there are points which are in OUTSIDE and beyond all points
            of INSIDE.  Thus, (#$surroundsHorizontally OUTSIDE INSIDE)
            is NOT true if INSIDE shares a boundary with OUTSIDE; e.g.,
            Texas is not surrounded by the USA.  Positive cases: water
            surrounds islands; foothills may surround a mountain range.
            See also #$surroundsCompletely.</rdfs:comment>
        <guid>c0f2a0c3-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#SpatialThing"/>
        <daml:range rdf:resource="#SpatialThing"/>
    </daml:Property>
    <daml:Property rdf:ID="suspendedIn">
        <rdfs:label>suspended in</rdfs:label>
        <rdfs:comment>(#$suspendedIn OBJ FLUID) means that OBJ is fully
            immersed in FLUID (see #$in-ImmersedFully), and FLUID
            provides a significant supporting or upward force via fluid
            dynamics of FLUID.  That is, OBJ does not undergo rapid
            falling.  Note that a rapidly rising object such as a
            released helium ballon or a submarine on its way towards the
            surface is #$suspendedIn the fluid surround it.  Buoyancy or
            fluid dynamic forces are strong enough that the net upward
            force acting on OBJ is positive, zero, or slightly negative.
            A feather in free fall is a borderline negative example of
            #$suspendedIn.  An airborne (see #$Airborne) soap bubble
            slowly drifting towards the ground is a borderline positive
            example of #$suspendedIn (in typical contexts).  An
            underwater bubble floating to the surface is a positive
            exemple usage of #$suspendedIn.  A rock in free fall is a
            clear negative exemplar.  An air bubble rising to the
            surface is a positive exemplar of #$suspendedIn.  Birds,
            airplanes, and cruise missiles flying are positive examples
            of #$suspendedIn because fluid dynamics of the surrounding
            air plays a major role in keeping them aloft.  Rockets or
            blasting blasting off, on the other hand, are negative
            examples of #$suspendedIn because the dynamics of FLUID
            (i.e. the air surrounding them) does not play a major role
            in the forces keeping them aloft.  A floating (see
            #$in-Floating) ship, although #$supportedBy the water, is
            not #$suspendedIn the water because it is only
            #$in-ImmersedPartly the water.  See also #$Suspension,
            #$suspendedPart, #$suspendingFluid.</rdfs:comment>
        <guid>bd5899ec-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#in-ImmersedFully"/>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#FluidTangibleThing"/>
    </daml:Property>
    <daml:Property rdf:ID="suspendedPart">
        <rdfs:label>suspended part</rdfs:label>
        <rdfs:comment>The predicate #$suspendedPart indicates an
            individual particle of #$TangibleThing which is suspended in
            a particular instance of #$Suspension.  Thus,
            (#$suspendedPart SUS PART) means that PART is a #$Particle
            suspended in the #$suspendingFluid of the #$Suspension SUS.
            Examples: in an instance of #$CloudOfH2O, the (typical)
            #$suspendedPart is a #$Particle of water; in muddy water,
            the (typical) #$suspendedPart is a #$Particle of soil.</rdfs:comment>
        <guid>c0fb9a9b-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#constituents"/>
        <daml:domain rdf:resource="#Suspension"/>
        <daml:range rdf:resource="#Particle"/>
    </daml:Property>
    <daml:UniqueProperty rdf:ID="suspendingFluid">
        <rdfs:label>suspending fluid</rdfs:label>
        <rdfs:comment>The predicate #$suspendingFluid indicates the
            particular fluid in which particles are suspended in a
            particular instance of #$Suspension.  Thus,
            (#$suspendingFluid SUS FLU) means that FLU is among the
            #$constituents of the #$Suspension SUS, FLU is a fluid
            (i.e., liquid OR gas), and FLU is the fluid constituent
            which suspends the particles in SUS.  For example, in an
            instance of #$CloudlikeObject, the #$suspendingFluid is the
            portion of #$Air that is surrounding and supporting the
            droplets of water vapour in the cloud.  In muddy water, the
            #$suspendingFluid is that instance of #$Water which is
            supporting the particles of soil.</rdfs:comment>
        <guid>c0fb97e0-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#mainConstituent"/>
        <daml:domain rdf:resource="#Suspension"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:UniqueProperty>
    <daml:Property rdf:ID="symbolizes">
        <rdfs:label>symbolize</rdfs:label>
        <rdfs:comment>(#$symbolizes SYMBOL OBJ) means that the
            #$SymbolicObject SYMBOL represents the thing OBJ for some
            abstract agent.  E.g., the US flag #$symbolizes the USA.  It
            is usually true that (#$symbolizes x y) implies (#$connotes
            x y #$High). Note that the &apos;abstract agent&apos; may be
            context-specific -- a given object may represent one thing
            in one culture, and nothing at all or a different thing in
            another culture.</rdfs:comment>
        <guid>bd58cfa9-9c29-11b1-9dad-c379636f7270</guid>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
    </daml:Property>
    <daml:Property rdf:ID="symmetricPartTypes">
        <rdfs:label>symmetric part types</rdfs:label>
        <rdfs:comment>(#$symmetricPartTypes BIG SMALL) means that every
            instance of BIG has exactly two, symmetrically positioned,
            instance of SMALL as parts.</rdfs:comment>
        <guid>bf12f780-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#ExistingObjectType"/>
        <daml:range rdf:resource="#ExistingObjectType"/>
    </daml:Property>
    <daml:Property rdf:ID="target">
        <rdfs:label>target</rdfs:label>
        <rdfs:comment>(#$target TRANS PLACE) means that the
            #$performedBy (or #$directingAgent) of the event TRANS
            intends that the #$transferredThing end up at PLACE.</rdfs:comment>
        <guid>c10afaed-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#preActors"/>
        <daml:domain rdf:resource="#GeneralizedTransfer"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:Property>
    <daml:Property rdf:ID="tastes">
        <rdfs:label>taste</rdfs:label>
        <rdfs:comment>(#$tastes AGENT OBJECT) means that AGENT perceives
            the  (partially) tangible object or physical event OBJECT
            via the sense of taste.  We can taste certain objects (such
            as lollipops) as well as, arguably, certain events (such as
            the  finish  of a wine).</rdfs:comment>
        <guid>bd58b29e-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#touchesDirectly"/>
        <daml:subPropertyOf rdf:resource="#perceives"/>
        <daml:domain rdf:resource="#PerceptualAgent"/>
    </daml:Property>
    <daml:Property rdf:ID="temperatureOfObject">
        <rdfs:label>temperature of object</rdfs:label>
        <rdfs:comment>(#$temperatureOfObject OBJECT TEMPERATURE) means
            that the individual OBJECT has the #$Temperature
            TEMPERATURE. Note that OBJECT may be a piece of stuff -- for
            example, a particular spot in the ocean.</rdfs:comment>
        <guid>bd5889fc-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#Temperature"/>
    </daml:Property>
    <daml:Property rdf:ID="temporalBoundsContain">
        <rdfs:label>temporal bounds contain</rdfs:label>
        <rdfs:comment>(#$temporalBoundsContain LONGER SHORTER) means
            that LONGER strictly contains SHORTER.  There is a positive
            non-zero time after LONGER starts before SHORTER starts, and
            there is a positive non-zero time after SHORTER ends before
            LONGER ends.   That is, the #$startingPoint of LONGER is a
            finite amount of time earlier than the #$startingPoint of
            SHORTER, and the #$endingPoint of LONGER is a finite amount
            of time later than the #$endingPoint of SHORTER.
            Naturally, #$temporalBoundsContain is a stronger relation
            than #$temporalBoundsIntersect.  If LONGER is
            #$temporallyContinuous, then (#$temporalBoundsContain LONGER
            SHORTER) further implies (#$temporallySubsumes LONGER
            SHORTER).  Note:  This Cyc temporal relation is equivalent
            to what James Allen independently dubbed the CONTAINS relation.</rdfs:comment>
        <guid>bd58810f-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#temporalBoundsIntersect"/>
        <daml:domain rdf:resource="#TemporalThing"/>
        <daml:range rdf:resource="#TemporalThing"/>
    </daml:Property>
    <daml:Property rdf:ID="temporalBoundsIdentical">
        <rdfs:label>temporal bounds identical</rdfs:label>
        <rdfs:comment>(#$temporalBoundsIdentical X Y) means that X and Y
            are both #$temporallyCooriginating and
            #$temporallyCoterminal.  That is, X and Y have the same
            #$startingPoints and also have the same #$endingPoints.
            Note that if X and Y are continuous temporal objects, such
            as a pair of ashtrays, then this means that they must in
            fact be completely #$cotemporal.</rdfs:comment>
        <guid>bd58c961-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#temporallyCoterminal"/>
        <daml:subPropertyOf rdf:resource="#temporallyCooriginating"/>
        <daml:domain rdf:resource="#TemporalThing"/>
        <daml:range rdf:resource="#TemporalThing"/>
    </daml:Property>
    <daml:Property rdf:ID="temporalBoundsIntersect">
        <rdfs:label>temporal bounds intersect</rdfs:label>
        <rdfs:comment>(#$temporalBoundsIntersect ?X ?Y) means that the
            closed solid time interval between from the start of ?X to
            the end of ?X, inclusive, intersects the solid time interval
            from the start of ?Y and the end of ?Y, inclusive.  Clearly,
            if ?X and ?Y are continuous events, then the stronger
            assertion (#$temporallyIntersects ?X ?Y) must also hold.
            But if either is a discontinuous event, it is possible to
            have a situation where their bounds intersect but where
            there is no time point in common.  For example, the
            discontinuous event of `Fred sleeping this week&apos; could
            intersects the bounds of `Fred driving this week&apos; even
            though the two events share no time points (we hope).</rdfs:comment>
        <guid>bd58c862-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#TemporalThing"/>
        <daml:range rdf:resource="#TemporalThing"/>
    </daml:Property>
    <daml:Property rdf:ID="temporallyContains">
        <rdfs:label>temporally contains</rdfs:label>
        <rdfs:comment>(#$temporallyContains LONG SHORT) means that SHORT
            #$startsDuring LONG, #$endsDuring LONG, and is temporally
            subsumed by LONG.   This is equivalent to James Allen&apos;s
            CONTAINS relation and the inverse of his DURING relation.</rdfs:comment>
        <guid>bd9d737f-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#temporallySubsumes"/>
        <daml:subPropertyOf rdf:resource="#temporalBoundsContain"/>
    </daml:Property>
    <daml:Property rdf:ID="temporallyCooriginating">
        <rdfs:label>temporally cooriginating</rdfs:label>
        <rdfs:comment>(#$temporallyCooriginating X Y) means
            (#$simultaneousWith (#$StartFn X) (#$StartFn Y)).  That is,
            the #$startingPoint of X is the same as the #$startingPoint
            of Y.  This implies that X and Y overlap, in at least one
            point (namely, their #$startingPoints are the same.)</rdfs:comment>
        <guid>bd58c91e-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <daml:domain rdf:resource="#TemporalThing"/>
        <daml:range rdf:resource="#TemporalThing"/>
    </daml:Property>
    <daml:Property rdf:ID="temporallyCoterminal">
        <rdfs:label>temporally coterminal</rdfs:label>
        <rdfs:comment>(#$temporallyCoterminal X Y) means
            (#$simultaneousWith (#$EndFn X) (#$EndFn Y)).  That is, the
            #$endingPoint of X is the same as the #$endingPoint of Y.
            This implies that X and Y overlap, in at least one point
            (namely, their #$endingPoints are the same.)</rdfs:comment>
        <guid>bd58c8dd-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <daml:domain rdf:resource="#TemporalThing"/>
        <daml:range rdf:resource="#TemporalThing"/>
    </daml:Property>
    <daml:Property rdf:ID="temporallyDisjoint">
        <rdfs:label>temporally disjoint</rdfs:label>
        <rdfs:comment>(#$temporallyDisjoint X Y) means that there are no
            time points in common between X and Y.  If you view each of
            them as a set of #$TimePoints, the two sets are disjoint.
            For example, consider the discontinuous events `Fred
            sleeping this week&apos; and `Fred driving this week&apos;.
            These are presumably #$temporallyDisjoint even if they
            `interlock&apos; during the week.</rdfs:comment>
        <guid>bd58d5db-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#TemporalThing"/>
        <daml:range rdf:resource="#TemporalThing"/>
    </daml:Property>
    <daml:Property rdf:ID="temporallyFinishedBy">
        <rdfs:label>conclusion</rdfs:label>
        <rdfs:comment>(#$temporallyFinishedBy PERIOD FINISH) means that
            PERIOD and FINISH are #$temporallyCoterminal, and that
            FINISH starts within the bounds of PERIOD.   That is, the
            #$endingPoint of PERIOD and FINISH are the same element of
            #$TimePoint, and the #$startingPoint of FINISH is later than
            the #$startingPoint of PERIOD.        Note:  This Cyc
            temporal relation is equivalent to what James Allen dubbed
            the FINISHED-BY relation.  We liked his name better than the
            one we had been using, and so we renamed this predicate accordingly.</rdfs:comment>
        <guid>bd58a8d3-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#temporallyCoterminal"/>
        <daml:domain rdf:resource="#TemporalThing"/>
        <daml:range rdf:resource="#TemporalThing"/>
    </daml:Property>
    <daml:Property rdf:ID="temporallyIntersects">
        <rdfs:label>temporally intersects</rdfs:label>
        <rdfs:comment>(#$temporallyIntersects X Y) means that there is
            at least one #$TimePoint which X #$temporallySubsumes and Y
            #$temporallySubsumes.  If you think of X and Y as sets of
            #$TimePoints, then those two sets intersect.</rdfs:comment>
        <guid>bd58c89b-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#temporalBoundsIntersect"/>
        <daml:domain rdf:resource="#TemporalThing"/>
        <daml:range rdf:resource="#TemporalThing"/>
    </daml:Property>
    <daml:Property rdf:ID="temporallyIntrinsicArg">
        <rdfs:label>temporally intrinsic arg</rdfs:label>
        <rdfs:comment>(#$temporallyIntrinsicArg PRED N) means that PRED
            expresses a property that is temporally intrinsic for its
            argument position N. That means, if a formula using PRED
            is true for some object OBJ (in the Nth argument position),
            we can assume the truth of every similar formula in which
            any temporal part of OBJ is substituted in for OBJ. For
            example, since (#$temporallyIntrinsicArg #$massOfObject 1)
            is true, if we know (#$massOfObject `Rock37&apos; (#$Gram
            37)), we can expect that any temporal part of `Rock37&apos;,
            such as        `Rock37Today&apos;, will also have a mass of
            37 grams. An example of a property which is not temporally
            intrinsic would be `average speed&apos;. The average speed
            of a car        on a drive from Austin to Dallas might be 50
            mph, but during particular sub-intervals of that drive the
            average speed could vary from 0 to 75 mph.  The collection
            #$CotemporalPredicate is a class of relations which
            are not temporally intrinsic but might at first seem to be,
            e.g., #$physicalParts. In (#$physicalParts `Joe&apos;
            `JoesHead&apos;), it is not the case        that every
            temporal part of `Joe&apos; (such as `JoeToday&apos;) has
            `JoesHead&apos; as a physical part.  Rather, `JoeToday&apos;
            would have `JoesHeadToday&apos; among its #$physicalParts.
            With #$physicalParts,        as with all other elements of
            #$CotemporalPredicate, every time-slice of the first
            argument is related to a cotemporal time-slice of the second
            argument, but that is not covered by
            #$temporallyIntrinsicArg and its associated axioms.</rdfs:comment>
        <guid>bf0397d9-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Predicate"/>
        <daml:range rdf:resource="#PositiveInteger"/>
    </daml:Property>
    <daml:Property rdf:ID="temporallyOverlaps">
        <rdfs:label>temporally overlaps</rdfs:label>
        <rdfs:comment>(#$temporallyOverlaps FIRST SECOND) means that
            SECOND #$startsAfterStartingOf FIRST and SECOND
            #$endsAfterEndingOf FIRST.  It does not require that all
            #$TimePoints from the #$startingPoint of SECOND through the
            #$endingPoint of FIRST are in the temporal extent of both
            FIRST and SECOND.          Note: #$temporallyOverlaps is
            equivalent to what James Allen dubbed the OVERLAPS relation
            and is the inverse of what James Allen dubbed the
            OVERLAPPED-BY relation.</rdfs:comment>
        <guid>c04552dc-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#temporalBoundsIntersect"/>
    </daml:Property>
    <daml:Property rdf:ID="temporallyStartedBy">
        <rdfs:label>temporally started by</rdfs:label>
        <rdfs:comment>(#$temporallyStartedBy PERIOD START) means that
            PERIOD and START are #$temporallyCooriginating and that
            START ends within the bounds of PERIOD.   That is, the
            #$startingPoint of PERIOD and START are the same
            #$TimePoint, and the #$endingPoint of START is before the
            #$endingPoint of PERIOD.                Note:  This Cyc
            temporal relation is equivalent to what James Allen dubbed
            the STARTED-BY relation.  We liked his name better than the
            one we had been using, and so we renamed this predicate accordingly.</rdfs:comment>
        <guid>bd58d660-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#temporallyCooriginating"/>
        <daml:subPropertyOf rdf:resource="#endsAfterEndingOf"/>
        <daml:domain rdf:resource="#TemporalThing"/>
        <daml:range rdf:resource="#TemporalThing"/>
    </daml:Property>
    <daml:Property rdf:ID="temporallySubsumes">
        <rdfs:label>temporally subsumes</rdfs:label>
        <rdfs:comment>(#$temporallySubsumes LONG SHORT) means that all
            time points of SHORT are contained in LONG.   This implies
            that SHORT does not start before LONG, nor end after LONG.
            And if there&apos;s some time point or interval when LONG is
            not happening, then neither is SHORT.    Note:  This
            relation is weaker than #$cotemporal, which can be thought
            of as requiring that LONG and SHORT #$temporallySubsumes
            each other.     Note: This relation is a strictly temporal
            relationship between LONG and SHORT; it is weaker than
            #$subEvents, which can be thought of as requiring that LONG
            not only #$temporallySubsumes SHORT but also contains SHORT
            as a `part&apos;.</rdfs:comment>
        <guid>bd588019-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#temporallyIntersects"/>
        <daml:domain rdf:resource="#TemporalThing"/>
        <daml:range rdf:resource="#TemporalThing"/>
    </daml:Property>
    <daml:Property rdf:ID="tensileStrengthOfSubstance">
        <rdfs:label>tensile strength of substance</rdfs:label>
        <rdfs:comment>(#$tensileStrengthOfSubstance OBJ DEGREE)
            indicates the relative force needed to pull the tangible OBJ
            apart.  A higher DEGREE of #$TensileStrength indicates more
            force is required to pull the object apart.</rdfs:comment>
        <guid>bd58b936-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasAttributes"/>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#TensileStrength"/>
    </daml:Property>
    <daml:Property rdf:ID="termDependsOn">
        <rdfs:label>term depends on</rdfs:label>
        <rdfs:comment>(#$termDependsOn DEP-TERM INDEP-TERM) states that
            the existence of the term DEP-TERM is completely dependent
            on the continued existence of the term INDEP-TERM.  As a
            consequence, if INDEP-TERM should ever be removed from the
            knowledge base, then DEP-TERM should also be immediately
            removed.  This relationship is automatically maintained
            between reified NATs and the terms from which they are constructed.</rdfs:comment>
        <guid>bdf02d74-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#CycLReifiableDenotationalTerm"/>
        <daml:range rdf:resource="#CycLReifiableDenotationalTerm"/>
    </daml:Property>
    <daml:UnambiguousProperty rdf:ID="termOfUnit">
        <rdfs:label>term of unit</rdfs:label>
        <rdfs:comment>#$termOfUnit is an inference-related Cyc predicate
            which appears in system-generated assertions; #$termOfUnit
            represents a mapping between a non-atomic term (NAT) and a
            Cyc constant that was reified by the system especially for
            that NAT.  Assertions with #$termOfUnit are created by the
            system when a certain kind of non-atomic term (NAT) first
            appears in a Cyc formula; such a NAT consists of a Cyc
            function that is an element of #$ReifiableFunction, together
            with the correct number and type of arguments.  When such a
            NAT is first used in a formula, the Cyc system automatically
            creates a Cyc-constant data-structure to reify the NAT.  A
            name is automatically assigned to the new constant (i.e.,
            the data-structure) by the Cyc system; currently (1997), the
            system is using for most of those constant names a string
            which is identical to the NAT.  One should not be misled by
            that into thinking that #$termOfUnit is a specialization of
            #$equals.     The predicate #$termOfUnit maps between the
            system-generated data-structure and the original non-atomic
            term.  (#$termOfUnit NAT-CONSTANT NAT-EXPRESSION) tells us
            that the constant data-structure NAT-CONSTANT was created to
            reify the value of the non-atomic term NAT-EXPRESSION.  From
            now on, NAT-EXPRESSION will refer to the constant
            NAT-CONSTANT.    Examples of non-atomic terms (NATs)
            include: (#$Giga #$DollarsPerYear), (#$RepairingFn
            #$Automobile), and (#$TheScriptFn
            #$WashingClothesInAMachine). See also
            #$Function-Denotational, #$CycLReifiableDenotationalTerm.
            Note: #$termOfUnit assertions are entered in the #$BaseKB
            because the mapping between a NAT and the constant that was
            reified for it holds universally.  One should view
            #$termOfUnit assertions as bits of bookkeeping knowledge
            which are very rarely, if ever, entered into the KB by hand.</rdfs:comment>
        <guid>bd5880e4-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#CycLReifiableNonAtomicTerm"/>
        <daml:range rdf:resource="#CycLUnreifiedReifiableNonAtomicTerm"/>
    </daml:UnambiguousProperty>
    <daml:Property rdf:ID="terrainAttributes">
        <rdfs:label>terrain attributes</rdfs:label>
        <rdfs:comment>The predicate #$terrainAttributes is used to
            describe the type of terrain in a particular geographical
            region. (#$terrainAttributes REGION ATTRIB) means that
            #$GeographicalRegion REGION has the #$TerrainAttribute
            ATTRIB.  For example, the #$Matterhorn-Mount has
            #$terrainAttributes, #$RuggedTerrain. </rdfs:comment>
        <guid>bd58f376-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasAttributes"/>
        <daml:domain rdf:resource="#GeographicalRegion"/>
        <daml:range rdf:resource="#TerrainAttribute"/>
    </daml:Property>
    <daml:Property rdf:ID="territoriesControlled">
        <rdfs:label>territories controlled</rdfs:label>
        <rdfs:comment>(#$territoriesControlled AGENT TERRITORY) means
            the TERRITORY is a #$GeographicalThing under the political
            control of AGENT.   This refers to actual practical
            political control, not mere legal or unenforced territorial claims.</rdfs:comment>
        <guid>bd58a42f-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#controls"/>
        <daml:domain rdf:resource="#IntelligentAgent"/>
    </daml:Property>
    <TernaryRelation rdf:ID="thereExistAtLeast">
        <rdfs:label>there exist at least</rdfs:label>
        <rdfs:comment>The predicate #$thereExistAtLeast is a specialized
            form of #$thereExists (q.v.).  (#$thereExistAtLeast 5 X
            FORM) means that there are at least five distinct objects in
            the Cyc universe which, when substituted for the
            #$ELVariable X in the #$ELSentence-Assertible FORM, make
            FORM true.  See #$thereExists for more information about
            existential quantification.</rdfs:comment>
        <guid>c10af5e7-9c29-11b1-9dad-c379636f7270</guid>
    </TernaryRelation>
    <TernaryRelation rdf:ID="thereExistAtMost">
        <rdfs:label>there exist at most</rdfs:label>
        <rdfs:comment>The predicate #$thereExistAtMost is a specialized
            form of #$thereExists (q.v.).  (#$thereExistAtMost 5 X FORM)
            means that there are no more than five distinct objects in
            the (relevant)  universe of discourse which, when
            substituted for the #$ELVariable X in the
            #$ELSentence-Assertible FORM, make FORM true.  See
            #$thereExists for more information about existential quantification.</rdfs:comment>
        <guid>c10af932-9c29-11b1-9dad-c379636f7270</guid>
    </TernaryRelation>
    <TernaryRelation rdf:ID="thereExistExactly">
        <rdfs:label>there exist exactly</rdfs:label>
        <rdfs:comment>The predicate #$thereExistExactly is a specialized
            form of #$thereExists (q.v.).  (#$thereExistExactly 5 X
            FORM) means that there are no more and no less than five
            distinct objects in the (relevant) universe of discourse
            which, when substituted for the #$ELVariable X in the
            #$ELSentence-Assertible FORM, make FORM true.  See
            #$thereExists for more information about existential quantification.</rdfs:comment>
        <guid>c10ae7b8-9c29-11b1-9dad-c379636f7270</guid>
    </TernaryRelation>
    <BinaryRelation rdf:ID="thereExists">
        <rdfs:label>there exists</rdfs:label>
        <rdfs:comment>The predicate #$thereExists is Cyc&apos;s version
            of the existential quantifier of predicate calculus (i.e.,
            the operator symbolized in one common notation by a
            backwards &apos;E&apos;).  As its two arguments,
            #$thereExists  takes a variable (which is an element of
            #$ELVariable) and an element of #$ELSentence-Assertible,
            respectively.  (#$thereExists VAR FORM) means that FORM is
            true in at least one case (and possibly more) in which all
            occurrences of the variable VAR in FORM are replaced by an
            object in the Cyc universe.  For example, to say that every
            person has a mother, we could assert: (#$forAll ?X
            (#$implies (#$isa ?X #$Person) (#$thereExists ?Y (#$mother
            ?X ?Y)))).       [Developer-level footnote:  There are many
            `flavors&apos; of quantification `on the market&apos; these
            days; here is how the Cyc system currently handles axioms
            that involve #$thereExists:    When processing an FI-ASK
            about whether (#$thereExists VAR FORM) is true or not, Cyc
            determines extensionally whether or not any known VAR
            (anything in the knowledge base) satisfies FORM (makes it
            true.)    When processing an FI-PROVE about whether
            (#$thereExists VAR FORM) is true or not, Cyc tries to
            construct an intensional proof (at least at a default-true
            level) that there must exist some value of VAR --- which may
            or may not already be known in the KB -- for which FORM must
            be true.    When processing an FI-ASSERT in which a user or
            program tells Cyc that (#$thereExists VAR FORM) is true, Cyc
            records the assertion intensionally so that it can later
            serve as part of an intensional proof, when some future
            FI-PROVE request is processed.  It does this by creating a
            new #$SkolemFunction (q.v.).      When modus ponens is used
            with a rule of the form (#$implies ANTECEDENT (#$thereExists
            VAR FORM)), and the formula ANTECEDENT is true, then Cyc
            will generate a new term for VAR, add that to its language,
            and assert that the new term satisfies FORM.]</rdfs:comment>
        <guid>bd5880f6-9c29-11b1-9dad-c379636f7270</guid>
    </BinaryRelation>
    <daml:Property rdf:ID="thermalConductivityOfObject">
        <rdfs:label>thermal conductivity of object</rdfs:label>
        <rdfs:comment>(#$thermalConductivityOfObject OBJ DEGREE) means
            that the tangible object OBJ has the #$ThermalConductivity
            attribute DEGREE.  Objects with higher values of DEGREE
            conduct heat faster and better (i.e., with less heat loss)
            than those with a lower #$ThermalConductivity.</rdfs:comment>
        <guid>be00abc4-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasAttributes"/>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#ThermalConductivity"/>
    </daml:Property>
    <daml:Property rdf:ID="threeWayJunctionInSystem">
        <rdfs:label>three way junction in system</rdfs:label>
        <rdfs:comment>(#$threeWayJunctionInSystem JUNCT SYS) means that
            JUNCT is a 3-way junction in the specified #$PathSystem SYS.
            Formally, a 3-way junction in SYS is any point (actually,
            any node) X in SYS such that either there are exactly 3
            links and no loops in SYS that X is on, or there are exactly
            1 link and 1 loop in SYS that X is on.  See
            #$junctionInSystem.  When the junction is is simply a
            customary junction not based on a specified #$PathSystem,
            use #$ThreeWayJunctionOfPaths.</rdfs:comment>
        <guid>c0d729ee-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#junctionInSystem"/>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
        <daml:range rdf:resource="#PathSystem"/>
    </daml:Property>
    <daml:Property rdf:ID="timeConstraintOfAction">
        <rdfs:label>time constraint of action</rdfs:label>
        <rdfs:comment>(#$timeConstraintOfAction ACT DUR) means that in
            the planning context of the assertion, ACT should take no
            longer than the #$Time-Quantity DUR.</rdfs:comment>
        <guid>c0589c48-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#PurposefulAction"/>
        <daml:range rdf:resource="#Time-Quantity"/>
    </daml:Property>
    <daml:UnambiguousProperty rdf:ID="timeIntervalBetween">
        <rdfs:label>time interval between</rdfs:label>
        <rdfs:comment>This predicate relates two temporally disjoint
            things to the (longest) time interval between them.
            (#$timeIntervalBetween BETWEEN EARLIER LATER) means that
            BETWEEN is the time interval that starts immediately after
            EARLIER ends and ends immediately before LATER begins.
            LATER, of course, must begin after EARLIER ends.</rdfs:comment>
        <guid>be537ff0-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#TimeInterval"/>
        <daml:range rdf:resource="#TemporalThing"/>
    </daml:UnambiguousProperty>
    <daml:Property rdf:ID="timeSlices">
        <rdfs:label>time slices</rdfs:label>
        <rdfs:comment>(#$timeSlices WHOLE PART) means that PART is one
            of the temporal decompositions of WHOLE.  PART is part of
            WHOLE and is thus temporally included in WHOLE (see
            #$temporallySubsumes).  There is no other part of WHOLE that
            happens at the same time but is not included in PART.
            Unlike #$subEvents, which can divide up an #$Event both in
            space and time, #$timeSlices divides up its first argument
            in time only.  So #$timeSlices is more specialized than
            #$subEvents.  On the other hand, it has broader application;
            #$timeSlices makes sense for any #$TemporalThing, not just
            #$Events; e.g., one can talk about year-long #$timeSlices of
            a rock.</rdfs:comment>
        <guid>bd69f839-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#temporallySubsumes"/>
        <daml:subPropertyOf rdf:resource="#parts"/>
        <daml:domain rdf:resource="#TemporalThing"/>
        <daml:range rdf:resource="#TemporalThing"/>
    </daml:Property>
    <daml:Property rdf:ID="titleOfPerson-String">
        <rdfs:label>title of person - string</rdfs:label>
        <rdfs:comment>(#$titleOfPerson-String PRSN STRNG) relates the
            #$Person PRSN to a #$CharacterString, STRNG, which is a word
            for a title PRSN has.  E.g., (#$titleOfPerson-String #$Lenat
            ``Dr.&apos;&apos;).  A person may have more than one title,
            even cotemporally.</rdfs:comment>
        <guid>bd66d843-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Person"/>
        <daml:range rdf:resource="#CharacterString"/>
    </daml:Property>
    <daml:Property rdf:ID="toAchieveInEvent-SitType">
        <rdfs:label>to achieve in event - sit type</rdfs:label>
        <rdfs:comment>(#$toAchieveInEvent-SitType EVT SIT_TYPE) means
            that, in the planning context, a situation of type SIT_TYPE
            is supposed to become true in EVT but not hold true for the
            duration of EVT.</rdfs:comment>
        <guid>c0003868-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#PurposefulAction"/>
    </daml:Property>
    <daml:Property rdf:ID="toAchieveInPlan-SitType">
        <rdfs:label>to achieve in plan - sit type</rdfs:label>
        <rdfs:comment>(#$toAchieveInPlan-SitType PLAN SIT_TYPE) means
            that a situation of type SIT_TYPE is supposed to become true
            in the execution of PLAN but not hold true for the duration
            of the plan execution.</rdfs:comment>
        <guid>bf325c12-9c29-11b1-9dad-c379636f7270</guid>
    </daml:Property>
    <daml:Property rdf:ID="toInsureInEvent-SitType">
        <rdfs:label>to insure in event - sit type</rdfs:label>
        <rdfs:comment>(#$toInsureInEvent-SitType SIT SITTYPE) means that
            SIT isa  a #$Situation whose success in a planning context
            is contingent on a  situation of type SITTYPE &apos;happening&apos;.</rdfs:comment>
        <guid>be19e5cd-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#PurposefulAction"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
    </daml:Property>
    <daml:Property rdf:ID="toInsureInPlan-SitType">
        <rdfs:label>to insure in plan - sit type</rdfs:label>
        <rdfs:comment>(toInsureInPlan-SitType PLAN SITTYPE) means that
            the success of the plan represented by the
            SupposedToBeMicrotheory PLAN is contingent upon a situation
            of type SITTYPE &apos;happening&apos; at some time in the
            course of the exectution of PLAN.  It is presupposed that no
            situation of type SITTYPE obtains at the start of the
            execution of PLAN and that the situation should persist
            after its inception.</rdfs:comment>
        <guid>be0ce781-9c29-11b1-9dad-c379636f7270</guid>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
    </daml:Property>
    <daml:Property rdf:ID="toInterruptInEvent-SitType">
        <rdfs:label>to interrupt in event - sit type</rdfs:label>
        <rdfs:comment>(#$toInterruptInEvent-SitType EVT SIT_TYPE) means
            that, in the planning context, a situation of type SIT_TYPE
            is supposed to cease to obtain at some point in EVENT but
            that a situation of type SIT_TYPE should become true again
            sometime before the end of EVENT.</rdfs:comment>
        <guid>c07a4981-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#PurposefulAction"/>
    </daml:Property>
    <daml:Property rdf:ID="toInterruptInPlan-SitType">
        <rdfs:label>to interrupt in plan - sit type</rdfs:label>
        <rdfs:comment>(#$toInterruptInPlan-SitType PLAN SIT_TYPE) means
            that a situation of type SIT_TYPE is supposed to cease to
            obtain at some point in the execution of PLAN but that a
            situation of type SIT_TYPE should become true again sometime
            before the end of the plan execution.</rdfs:comment>
        <guid>bfd4e8bf-9c29-11b1-9dad-c379636f7270</guid>
    </daml:Property>
    <daml:Property rdf:ID="toLocation">
        <rdfs:label>destination</rdfs:label>
        <rdfs:comment>The predicate #$toLocation is used to indicate the
            ending point of a particular movement.  (#$toLocation MOVE
            LOC) means that LOC is where the #$objectMoving in MOVE (a
            #$Movement-TranslationEvent) is found when the event MOVE
            ends; the final location of the #$objectMoving in that event
            is LOC.  The #$objectMoving may or may not be #$Stationary
            at LOC.  If MOVE is a single-pathway translation (see
            #$Translation-SingleTrajectory), then every #$objectMoving
            in it is found at LOC when MOVE ends.  If MOVE has multiple
            movers and multiple pathways (see
            #$Translation-MultiTrajectory), then at least some of the
            #$objectMoving(s) can be found at LOC at the end of MOVE.
            If MOVE is a fluid flow (see #$Translation-Flow), then at
            least some portion of the fluid #$objectMoving can be found
            at location LOC at the end of MOVE.  See also
            #$motionPathway-Complete, #$pathConnects.</rdfs:comment>
        <guid>bd58d77a-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#postActors"/>
        <daml:domain rdf:resource="#Translocation"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:Property>
    <daml:Property rdf:ID="toMaintainInEvent-SitType">
        <rdfs:label>to maintain in event - sit type</rdfs:label>
        <rdfs:comment>(#$toMaintainInEvent-SitType EVT SIT_TYPE) means
            that, in the planning context, the maintainance of a
            pre-existing #$Situation satisfying the description of
            SIT_TYPE throughout the course of EVT is a criterion of
            EVT&apos;s success.</rdfs:comment>
        <guid>be03fa16-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#PurposefulAction"/>
    </daml:Property>
    <daml:Property rdf:ID="toMaintainInPlan-SitType">
        <rdfs:label>to maintain in plan - sit type</rdfs:label>
        <rdfs:comment>(#$toMaintainInPlan-SitType PLAN SIT_TYPE) means
            that the maintainance of a pre-existing #$Situation
            satisfying the description of SIT_TYPE throughout the course
            of PLAN is a criterion of PLAN&apos;s success.</rdfs:comment>
        <guid>bebe4dab-9c29-11b1-9dad-c379636f7270</guid>
    </daml:Property>
    <daml:Property rdf:ID="toOrientation">
        <rdfs:label>to orientation</rdfs:label>
        <rdfs:comment>This predicate indicates, for the particular
            rotational motion ROT, the orientation that the
            #$primaryObjectMoving in that event has after that motion.
            (#$toOrientation ROT ORIENT) means that when ROT ends, the
            object that moved in ROT has the final position ORIENT, with
            respect to the current frame of reference.  Examples of
            orientations include: #$HorizontalOrientation,
            #$VerticalOrientation, #$UpSideDown.  See also
            #$fromOrientation, #$OrientationAttribute.</rdfs:comment>
        <guid>bfcf393f-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Movement-Rotation"/>
        <daml:range rdf:resource="#OrientationAttribute"/>
    </daml:Property>
    <daml:Property rdf:ID="toPossessor">
        <rdfs:label>recipient</rdfs:label>
        <rdfs:comment>This predicate identifies an #$Agent who gains
            some right to use an object.  (#$toPossessor GAIN AGENT)
            means that after the event GAIN (a #$GainingUserRights),
            AGENT enjoys some #$UserRightsAttribute over the
            #$objectOfPossessionTransfer which that agent did not have
            at the start of GAIN.</rdfs:comment>
        <guid>bd58a979-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#postActors"/>
        <daml:domain rdf:resource="#GainingUserRights"/>
        <daml:range rdf:resource="#Agent"/>
    </daml:Property>
    <daml:Property rdf:ID="toPreventInEvent-SitType">
        <rdfs:label>to prevent in event - sit type</rdfs:label>
        <rdfs:comment>(#$toPreventInEvent-SitType EVT SITTYPE) means
            that, in the planning context, a #$Situation satisfying the
            description of SITTYPE must NOT come about at any time
            during the course of EVT in order for EVT to count as
            &apos;successful&apos;.  It is presupposed that no
            #$Situation of type SITTYPE obtains at the start of SIT.</rdfs:comment>
        <guid>bdbd710a-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#PurposefulAction"/>
    </daml:Property>
    <daml:Property rdf:ID="toPreventInPlan-SitType">
        <rdfs:label>to prevent in plan - sit type</rdfs:label>
        <rdfs:comment>(#$toPreventInPlan-SitType PLAN SITTYPE) means
            that a #$Situation satisfying the description of SITTYPE
            must NOT come about at any time during the course of an
            execution of PLAN in order for PLAN to count as
            &apos;successful&apos;.  It is presupposed that no
            #$Situation of type SITTYPE obtains at the start of the
            execution of PLAN.</rdfs:comment>
        <guid>bf20813c-9c29-11b1-9dad-c379636f7270</guid>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
    </daml:Property>
    <daml:Property rdf:ID="toState">
        <rdfs:label>to state</rdfs:label>
        <rdfs:comment>This predicate is used in connection with
            #$IntrinsicStateChangeEvent, to identify the
            #$AttributeValue a thing has immediately after the change.
            (#$toState EVENT VALUE) means that following the
            intrinsic-state-changing action, EVENT, the object
            undergoing the change is characterized by the the value
            VALUE of the relevant attribute.  For example, after any X
            which is a #$TurningOnAnElectricalSwitch, the switch
            involved has (#$toState X #$DeviceOn).</rdfs:comment>
        <guid>bd64608d-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#IntrinsicStateChangeEvent"/>
        <daml:range rdf:resource="#AttributeValue"/>
    </daml:Property>
    <daml:Property rdf:ID="toStopInEvent-SitType">
        <rdfs:label>to stop in event - sit type</rdfs:label>
        <rdfs:comment>(toStopInEvent-SitType EVT SITTYPE) means that, in
            the planning context, the success of EVT is contingent upon
            a pre-existing situation of type SITTYPE ceasing to obtain
            at some time in the course of SIT.</rdfs:comment>
        <guid>bda91ca0-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#PurposefulAction"/>
    </daml:Property>
    <daml:Property rdf:ID="toStopInPlan-SitType">
        <rdfs:label>to stop in plan - sit type</rdfs:label>
        <rdfs:comment>(toStopInPlan-SitType PLAN SITTYPE) means that the
            success of the plan represented by the
            SupposedToBeMicrotheory PLAN is contingent upon a
            pre-existing situation of type SITTYPE ceasing to obtain at
            some time in the course of the exectution of PLAN.  It is
            presupposed that a situation of the type SITTYPE obtains at
            the start of the execution of PLAN.</rdfs:comment>
        <guid>c14eb04e-9c29-11b1-9dad-c379636f7270</guid>
    </daml:Property>
    <daml:Property rdf:ID="toThwartInEvent-SitType">
        <rdfs:label>to thwart in event - sit type</rdfs:label>
        <rdfs:comment>(#$toThwartInEvent-SitType EVENT SIT_TYPE) means
            that if a #$Situation of type SIT_TYPE obtains at the start
            of EVENT, then it must be stopped some time in the course of
            EVENT, and if a #$Situation of type SIT_TYPE does not obtain
            at the start of EVENT, then it must be prevented throughout
            EVENT, in order for EVENT to count as successful. The
            predicate is defined in terms of #$toStopInEvent-SitType and #$toPreventInEvent-SitType.</rdfs:comment>
        <guid>bf813423-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Event"/>
    </daml:Property>
    <daml:Property rdf:ID="toThwartInPlan-SitType">
        <rdfs:label>to thwart in plan - sit type</rdfs:label>
        <rdfs:comment>(#$toThwartInPlan-SitType PLAN SIT_TYPE) means
            that if a #$Situation of type SIT_TYPE obtains at the start
            of the execution of PLAN, then it must be stopped some time
            in the course of PLAN, and if a #$Situation of type SIT_TYPE
            does not obtain at the start the execution of PLAN, then
            such a situation must be prevented throughout PLAN, in order
            for PLAN to count as successful. The predicate is defined in
            terms of #$toStopInPlan-SitType and #$toPreventInPlan-SitType.</rdfs:comment>
        <guid>bee42265-9c29-11b1-9dad-c379636f7270</guid>
    </daml:Property>
    <daml:Property rdf:ID="toUpholdInEvent-SitType">
        <rdfs:label>to uphold in event - sit type</rdfs:label>
        <rdfs:comment>(#$toUpholdInEvent-SitType EVT SIT_TYPE) means
            that if a #$Situation of type SIT_TYPE does not obtain at
            the start of EVT, then it must be brought about some time in
            the course of SIT, and if a #$Situation of type SIT_TYPE
            does obtain at the start of EVT, then it must be maintained
            throughout EVT, in order for EVT to count as successful in
            the planning context.  The predicate is defined in terms of
            #$toMaintainInEvent-SitType and #$toInsureInEvent-SitType.</rdfs:comment>
        <guid>bdb072be-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Event"/>
    </daml:Property>
    <daml:Property rdf:ID="toUpholdInPlan-SitType">
        <rdfs:label>to uphold in plan - sit type</rdfs:label>
        <rdfs:comment>(#$toUpholdInPlan-SitType PLAN SIT_TYPE) means
            that if a #$Situation of type SIT_TYPE does not obtain at
            the start of the execution ofPLAN, then it must be brought
            about some time in the course of the execution of PLAN, and
            if a #$Situation of type SIT_TYPE does obtain at the start
            of the execution ofPLAN, then it must be maintained
            throughout PLAN, in order for PLAN to count as successful.
            The predicate is defined in terms of
            #$toMaintainInPlan-SitType and #$toInsureInPlan-SitType.</rdfs:comment>
        <guid>bfb7bd8a-9c29-11b1-9dad-c379636f7270</guid>
    </daml:Property>
    <daml:Property rdf:ID="topicOfInfoTransfer">
        <rdfs:label>topic</rdfs:label>
        <rdfs:comment>The predicate #$topicOfInfoTransfer is used to
            indicate what a particular communication is about.
            (#$topicOfInfoTransfer TRANS TOPIC) means that TOPIC is a
            primary topic of the information communicated in the
            #$InformationTransferEvent TRANS.  For example, a result
            reported after an instance of #$BloodTest will contain
            information about the #$objectTested (viz., the blood
            sample); the patient&apos;s blood is thus a
            #$topicOfInfoTransfer of that report.</rdfs:comment>
        <guid>bd5cee44-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#InformationTransferEvent"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
    </daml:Property>
    <daml:Property rdf:ID="totalDisplacement">
        <rdfs:label>total displacement</rdfs:label>
        <rdfs:comment>The accumulated total displacement along the
            trajectory at any point in time during the duration of the
            moving process</rdfs:comment>
        <guid>bd58d7ad-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#MovementProcess"/>
    </daml:Property>
    <daml:Property rdf:ID="touches">
        <rdfs:label>touches</rdfs:label>
        <rdfs:comment>(#$touches THIS THAT) means that THIS and THAT are
            in contact, directly or indirectly.  THIS #$touchesDirectly
            on THAT if and only if there is nothing between them.  THIS
            #$touches THAT indirectly if there is some very thin object
            or substance between them.  `Very thin&apos; means that the
            distance between the surfaces of THIS and THAT is very much
            less than the distance between their center points.  Some
            examples of #$touches: an airplane touches the air around
            it; my feet touch the floor (even though I am wearing
            shoes); a blanket touches the person sleeping under it (even
            if there is a sheet); a hovercraft touches the water (even
            though a cushion of air is between them).  For cases where
            immediate surface contact needs to be indicated, use
            #$touchesDirectly (q.v.).</rdfs:comment>
        <guid>bd590568-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#near"/>
        <daml:domain rdf:resource="#SpatialThing"/>
        <daml:range rdf:resource="#SpatialThing"/>
    </daml:Property>
    <daml:Property rdf:ID="touchesDirectly">
        <rdfs:label>contact</rdfs:label>
        <rdfs:comment>(#$touchesDirectly THIS THAT) means that THIS and
            THAT are in direct physical contact.  That is, there exists
            a region on both objects where the distance between their
            surfaces is zero.  If in doubt, use #$touches rather than #$touchesDirectly.</rdfs:comment>
        <guid>bd5889ba-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#touches"/>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:Property>
    <daml:Property rdf:ID="trajectory-Complete">
        <rdfs:label>trajectory - complete</rdfs:label>
        <rdfs:comment>(#$trajectory-Complete MOVE TRAJ) means that the
            #$Movement-TranslationEvent MOVE has the #$Trajectory TRAJ
            as its entire trajectory.  Suppose OBJ is the #$objectMoving
            in TRAJ.  TRAJ is a line or curve in space (technically a
            one-manifold) traced out by some reference point (probably
            the centroid) of OBJ.  See also #$trajectory-Partial.
            Contrast #$trajectory-Complete with #$motionPathway-Complete
            and with #$traverses-Complete.  The trajectory of the motion
            may cross itself, zig-zag back and forth along the same
            path, repeat several cycles, etc., and the trajectory need
            not be confined to any pre-existing #$Path-Generics or
            #$Traversals of paths.</rdfs:comment>
        <guid>bff60f8e-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#eventOccursAt"/>
        <daml:subPropertyOf rdf:resource="#trajectory-Partial"/>
        <daml:domain rdf:resource="#Movement-TranslationEvent"/>
        <daml:range rdf:resource="#Trajectory"/>
    </daml:Property>
    <daml:Property rdf:ID="trajectory-Partial">
        <rdfs:label>trajectory - partial</rdfs:label>
        <rdfs:comment>(#$trajectory-Partial MOVE TRAJ) means that the
            #$Movement-TranslationEvent MOVE has at least part of its
            entire trajectory, i.e., the line or curve in space traced
            out by the whole motion, in common with a sub-trajectory of
            the #$Trajectory TRAJ where the motion along the shared
            segment moves in the same direction as TRAJ goes.  See also
            #$trajectory-Complete.  Contrast #$trajectory-Partial with
            #$motionPathway-Partial and with #$traverses-Partial.  The
            trajectory of the motion may cross itself, zig-zag back and
            forth along the same path, repeat several cycles, etc.,
            (like a #$Traversal and unlike a #$Path-Generic), and the
            trajectory need not be confined to any pre-existing
            #$Path-Generics or #$Traversals of paths.</rdfs:comment>
        <guid>be082c6d-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#actors"/>
        <daml:domain rdf:resource="#Movement-TranslationEvent"/>
        <daml:range rdf:resource="#Trajectory"/>
    </daml:Property>
    <daml:Property rdf:ID="trajectoryPassesThrough">
        <rdfs:label>trajectory passes through</rdfs:label>
        <rdfs:comment>(#$trajectoryPassesThrough MOVE LOC) means that
            the #$trajectory-Complete of the
            #$Translation-SingleTrajectory MOVE passes through LOC,
            which is an instance of #$SpatialThing-Localized, and thus
            can be a location, a portal, a river, a path, the equator,
            etc.  More formally, the #$objectMoving which undergoes MOVE
            from the #$fromLocation to the #$toLocation passes through
            LOC.  Here `passes through LOC&apos; means that the
            #$objectMoving OBJ both arrives in and leaves LOC.  Thus,
            LOC can not be a super region of any #$fromLocation nor any
            #$toLocations of MOVE.  Otherwise it would be possible to
            state (#$trajectoryPassesThrough TripToTheStore01
            TheUniverse).  On the other hand, LOC can be a sub region of
            some #$toLocation or some #$fromLocation.</rdfs:comment>
        <guid>bfd6faea-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#nonDeliberateActors"/>
        <daml:domain rdf:resource="#Translation-SingleTrajectory"/>
        <daml:range rdf:resource="#SomethingExisting"/>
    </daml:Property>
    <daml:Property rdf:ID="transferInSubEvent">
        <rdfs:label>transfer in sub event</rdfs:label>
        <rdfs:comment>The Cyc predicate #$transferInSubEvent indicates
            the final stage of a particular #$GeneralizedTransfer in
            which the #$transferredThing reaches the destination.  For
            example, (#$transferInSubEvent COMM LISTENING) means that
            LISTENING is the final stage (see #$lastSubEvents) of the
            #$CommunicationAct-Single COMM.</rdfs:comment>
        <guid>beabc2a1-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#lastSubEvents"/>
        <daml:domain rdf:resource="#GeneralizedTransfer"/>
        <daml:range rdf:resource="#TransferIn"/>
    </daml:Property>
    <daml:Property rdf:ID="transferOutSubEvent">
        <rdfs:label>initial transfer-out subevent</rdfs:label>
        <rdfs:comment>The Cyc predicate #$transferOutSubEvent indicates
            the initial stage of a particular #$GeneralizedTransfer in
            which the #$transferredThing leaves the point of origin.
            For example, (#$transferOutSubEvent TRANSLOC EMISSION) means
            that EMISSION is the initial stage (see #$firstSubEvents) of
            the #$Translocation TRANSLOC.  (The #$emitter in EMISSION is
            a #$fromLocation of TRANSLOC.)</rdfs:comment>
        <guid>be4d48d4-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#firstSubEvents"/>
        <daml:domain rdf:resource="#GeneralizedTransfer"/>
        <daml:range rdf:resource="#TransferOut"/>
    </daml:Property>
    <daml:Property rdf:ID="transferredThing">
        <rdfs:label>transferred thing</rdfs:label>
        <rdfs:comment>The Cyc predicate #$transferredThing is used to
            identify the object whose external relationships change in
            some event considered generically as a `transfer&apos;.
            (#$transferredThing TRANSFER OBJ) means that OBJ is being
            moved, transferred, exchanged, etc., in the
            #$GeneralizedTransfer event TRANSFER.  In general, and if
            possible, it is preferable to use a more specialized
            instance of #$ActorSlot than #$transferredThing (e.g.,
            #$objectMoving for physical transfer of an object;
            #$objectOfPossessionTransfer for an object that changes
            possession but not necessarily location; and so on).</rdfs:comment>
        <guid>bd67a405-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#postActors"/>
        <daml:subPropertyOf rdf:resource="#preActors"/>
        <daml:domain rdf:resource="#GeneralizedTransfer"/>
        <daml:range rdf:resource="#SomethingExisting"/>
    </daml:Property>
    <daml:UnambiguousProperty rdf:ID="transformedInto">
        <rdfs:label>transformed into</rdfs:label>
        <rdfs:comment>(#$transformedInto ?X ?Y) means that ?X stops
            existing at the instant that ?Y is created.  Furthermore,
            the material which made up ?X when it ceased to exist will
            generally make up ?Y when it is created, which in turn
            implies things about the location of ?Y at that moment, etc.</rdfs:comment>
        <guid>bd58a032-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Entity"/>
        <daml:range rdf:resource="#Entity"/>
    </daml:UnambiguousProperty>
    <daml:Property rdf:ID="transparencyOfObject">
        <rdfs:label>transparency of object</rdfs:label>
        <rdfs:comment>(#$transparencyOfObject OBJ DEGREE) means that the
            tangible object OBJ has an intrinsic #$Transparency to light
            of the specified DEGREE.  Higher values indicate that more
            light will pass through the substance and with less distortion.</rdfs:comment>
        <guid>bd58f9fc-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasAttributes"/>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#Transparency"/>
    </daml:Property>
    <daml:Property rdf:ID="transportees">
        <rdfs:label>transportee</rdfs:label>
        <rdfs:comment>The predicate #$transportees relates a
            translational motion event to the object(s) transported by a
            separate  object, i.e. a distinctly separate other
            participant in the  event. (#$transportees MOVE OBJ) means
            that some #$conveyor-Generic  facilitates the conveyance of
            OBJ in MOVE. For example, in a dumptruck  driving event, the
            dirt in the back of the truck is a #$transportees.  Any
            humans in the truck cab (or truck bed) during the trip are
            also  #$transportees; however, a more precise role
            designation for humans  riding in the truck would be either
            #$passengers or (for the driver)  #$driverActor.  Borderline
            positive example #$transportees include the  clothes worn by
            a person walking, or a horseshoe worn by a horse  walking.
            A negative exemplar of a #$transportees is the ear of the
            person walking.  This is because #$transporters do not
            transport their  parts when they move.  In other words,
            #$transporters only transport  separate objects.
            #$translatesFromTo on the other hand, does apply to  parts
            of #$transportees.  Note also that parts of #$transportees
            are  not necessarily #$transportees themselves.  See also
            the comments on  #$TransportationEvent and #$transporter.</rdfs:comment>
        <guid>bd58ae94-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#objectMoving"/>
        <daml:subPropertyOf rdf:resource="#objectActedOn"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:Property>
    <daml:Property rdf:ID="transporter">
        <rdfs:label>transporters</rdfs:label>
        <rdfs:comment>(#$transporter MOVE OBJ) means that OBJ enables or
            facilitates the conveyance of the #$transportees in the
            #$TransportationEvent MOVE.  OBJ is an #$objectMoving in
            MOVE that moves along with the #$transportees.  OBJ will
            generally hold, support, contain, pull, or push the
            #$transportees throughout the MOVE #$Event.  OBJ may or may
            not be the #$providerOfMotiveForce in the event MOVE.  If
            OBJ stays with each #$primaryObjectMoving from the
            #$fromLocation to the #$toLocation, moving along the same
            trajectory, then it is also a #$primaryObjectMoving.      If
            OBJ facilitates the motion of the #$primaryObjectMoving but
            does not itself engage in translational motion it is merely
            the conveyor of the action, and the role
            #$conveyor-Stationary should be asserted.  If it is unclear
            whether the conveyor is stationary or not, the role
            #$conveyor-Generic is used.  Specializations of the role
            #$transporter should be used when possible: although
            automobiles are #$transporters in many events, they should
            normally have the more specific role designation of
            #$vehicle because they are also #$SelfPoweredDevices.   When
            a car is being towed by a towtruck, the car is just a
            #$transporter of any of its contents while the towtruck is
            the #$vehicle of that event.  An additional role designation
            for some #$transporters -- those which are #$PhysicalDevices
            -- is #$deviceUsed; e.g., the use of crutches in hobbling or
            ice skates in skating.  See the #$comment on
            #$TransportationEvent.  Note that an organism may be a
            #$transportees in a #$Bicycle riding or #$Skating event as
            well as being the #$providerOfMotiveForce in such cases.</rdfs:comment>
        <guid>bd58c1d8-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#instrument-Generic"/>
        <daml:subPropertyOf rdf:resource="#constrainingObject"/>
        <daml:subPropertyOf rdf:resource="#objectMoving"/>
        <daml:domain rdf:resource="#TransportationEvent"/>
        <daml:range rdf:resource="#SolidTangibleThing"/>
    </daml:Property>
    <daml:Property rdf:ID="traversalFrom">
        <rdfs:label>traversal from</rdfs:label>
        <rdfs:comment>(#$traversalFrom TRAV POINT) means that POINT is a
            starting point of the #$Traversal TRAV along some paths.
            Note that (#$traversalFrom TRAV A) and (#$traversalFrom TRAV
            B) may both be true even when A and B are different.  This
            can happen when, e.g., A is a part of B and a path goes from
            both.  This is why we did not call POINT, in the context
            above, THE starting point of TRAV.</rdfs:comment>
        <guid>c12839c4-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Traversal"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
    </daml:Property>
    <daml:Property rdf:ID="traversalInSystem">
        <rdfs:label>traversal in system</rdfs:label>
        <rdfs:comment>(#$traversalInSystem TRAV SYS) means that TRAV is
            a #$Traversal of some paths in the #$PathSystem SYS.  Let
            TRAV be represented by (#$TraversalFn (#$TheList X(1)
            PATH(1) ... X(n) PATH(n) X(n+1))).  To say that TRAV is a
            #$Traversal in SYS we mean that (i) TRAV is a #$Traversal
            (and thus (#$TheList X(1) PATH(1) ... X(n) PATH(n) X(n+1))
            is a #$PathChain), and (ii) each X(k) is a point in SYS and
            each PATH(k) is either a link or a loop in SYS, or a subpath
            of a loop in SYS.  Our favorate description of a traversal
            in SYS is such a list that all X(k) are nodes in SYS except
            X(1) and X(n+1), and all PATH(k)s are links or loops in SYS
            except PATH(1) and PATH(n).</rdfs:comment>
        <guid>c153824c-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Traversal"/>
        <daml:range rdf:resource="#PathSystem"/>
    </daml:Property>
    <daml:Property rdf:ID="traversalInSystem-OrderObserved">
        <rdfs:label>traversal in system - order observed</rdfs:label>
        <rdfs:comment>(#$traversalInSystem-OrderObserved TRAV SYS) means
            that TRAV is a #$Traversal of some paths in the
            #$Semi-DirectedPathSystem SYS, which observes the orders or
            directions of links (and paths) in SYS. To say that TRAV
            observes the orders or directions of links in SYS, we mean
            that for each link LINK in SYS between X and Y,
            (#$TraversalFn (#$TheList X LINK Y)) is a subtraversal of
            TRAV only if (#$linkFromToInSystem LINK X Y SYS) holds, and
            for each subpath SUB between A and B of a link LINK in SYS
            between X and Y, (#$TraversalFn (#$TheList A SUB B)) is a
            subtraversal of TRAV only if (#$linkFromToInSystem LINK X Y
            SYS) holds.</rdfs:comment>
        <guid>bf4688ba-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#traversalInSystem"/>
        <daml:domain rdf:resource="#Traversal"/>
        <daml:range rdf:resource="#Semi-DirectedPathSystem"/>
    </daml:Property>
    <daml:UnambiguousProperty rdf:ID="traversalOf">
        <rdfs:label>traversal of</rdfs:label>
        <rdfs:comment>(#$traversalOf TRAV CHAIN) means that TRAV is the
            #$Traversal of the #$PathChain CHAIN.</rdfs:comment>
        <guid>bf3374d2-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Traversal"/>
        <daml:range rdf:resource="#PathChain"/>
    </daml:UnambiguousProperty>
    <daml:Property rdf:ID="traversalPassesThrough">
        <rdfs:label>traversal passes through</rdfs:label>
        <rdfs:comment>(#$traversalPassesThrough TRAV POINT) means that
            POINT is a point that the #$Traversal TRAV passes through.
            Note that when TRAV passes through POINT, POINT cannot be a
            mere endpoint of TRAV.  This means that a traversal does not
            pass through its starting point if it does not go back to
            the point and then leave it, nor does it pass through its
            ending point if it does not meet the point twice.</rdfs:comment>
        <guid>c14db0b9-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Traversal"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
    </daml:Property>
    <daml:Property rdf:ID="traversalTo">
        <rdfs:label>traversal to</rdfs:label>
        <rdfs:comment>(#$traversalTo TRAV POINT) means that POINT is an
            ending point of the #$Traversal TRAV along some paths.  Note
            that (#$traversalTo TRAV A) and (#$traversalTo TRAV B) may
            both be true even when A and B are different.  This can
            happen when, e.g., A is a part of B and a path goes to both.
            This is why we did not call POINT, in the context above, THE
            ending point of TRAV.</rdfs:comment>
        <guid>bf8aaa38-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Traversal"/>
        <daml:range rdf:resource="http://www.daml.org/2001/03/daml+oil#Thing"/>
    </daml:Property>
    <daml:Property rdf:ID="traverses-Complete">
        <rdfs:label>traverses - complete</rdfs:label>
        <rdfs:comment>(#$traverses-Complete MOVE TRAVER) means that the
            #$Movement-TranslationEvent MOVE traverses a path or series
            of paths (#$Path-Generics forming the #$Traversal TRAVER)
            during its motion, and that TRAVER is the entire traversal
            from beginning to end of the movement.  The traversal may
            cross itself, go back and forth along the same path, or
            repeat cycles of paths (unlike the #$ActorSlot
            #$motionPathway-Complete, which can follow only one,
            non-self-crossing, pre-existing #$Path-Generic.)  See also
            #$traverses-Partial.  Contrast #$traverses-Complete with
            #$motionPathway-Complete, that relates to one existing
            #$Path-Generic, and with #$trajectory-Complete that relates
            to the pure #$Trajectory of the motion.</rdfs:comment>
        <guid>bf784989-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#traverses-Partial"/>
        <daml:subPropertyOf rdf:resource="#actors"/>
        <daml:domain rdf:resource="#Translation-SingleTrajectory"/>
        <daml:range rdf:resource="#SpatialThing"/>
    </daml:Property>
    <daml:Property rdf:ID="traverses-Partial">
        <rdfs:label>traverses - partial</rdfs:label>
        <rdfs:comment>(#$traverses-Partial MOVE TRAV) means that the
            moving object OBJ in the #$Translation-SingleTrajectory MOVE
            (see #$objectMoving) is partially confined to the
            #$Traversal TRAV during EVENT, i.e., one of MOVE&apos;s
            subevent has the #$traverses-Complete relation to a
            sub-traversal of TRAV.  To say that MOVE is partially
            confined to TRAV during EVENT, we mean that (1) there is a
            subevent SUBEVENT of MOVE such that
            (#$subTranslations-SingleTrajectory MOVE SUBEVENT) holds,
            and (2) there is a sub-Traversal SUBTRAV of TRAV (see
            #$subTraversals) such that SUBEVENT is confined to SUBTRAV,
            i.e., (#$traverses-Complete SUBEVENT SUBTRAV) holds.</rdfs:comment>
        <guid>bd5f8e0a-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#actors"/>
        <daml:domain rdf:resource="#Translation-SingleTrajectory"/>
        <daml:range rdf:resource="#SpatialThing"/>
    </daml:Property>
    <daml:Property rdf:ID="trueRule">
        <rdfs:label>true rule</rdfs:label>
        <rdfs:comment>(#$trueRule TEMPLATE FORMULA) states that FORMULA
            is both true and an instantiation of the rule template TEMPLATE.</rdfs:comment>
        <guid>c03b87b7-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#RuleTemplate"/>
        <daml:range rdf:resource="#ELSentenceTemplate"/>
    </daml:Property>
    <daml:Property rdf:ID="typedGenlPreds">
        <rdfs:label>typed genl preds</rdfs:label>
        <rdfs:comment>(#$typedGenlPreds NARROW BROAD) means that
            predicate BROAD is a more general version of predicate
            NARROW that allows for more general argument types.  If the
            predicate BROAD applies to a set of arguments which meet the
            argument restrictions of NARROW, the predicate NARROW also
            applies to those same arguments.  For example,
            (#$typedGenlPreds #$sisters #$siblings) means that if
            (#$siblings John Alex) is in the KB and Alex is an instance
            of #$FemaleAnimal (the arg2 restriction of #$sisters) then
            (#$sisters John Alex) is true.</rdfs:comment>
        <guid>bf75b684-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#genlPreds"/>
        <daml:domain rdf:resource="#Predicate"/>
        <daml:range rdf:resource="#Predicate"/>
    </daml:Property>
    <daml:Property rdf:ID="unchangedActors">
        <rdfs:label>unchanged actors</rdfs:label>
        <rdfs:comment>(#$unchangedActors EV OBJ) means that the object
            OBJ remains virtually unchanged by its participation in the
            event EV. This means that OBJ does not appreciably move, nor
            does it undergo some internal change in its properties, nor
            is it created or destroyed in the course of EV.</rdfs:comment>
        <guid>bd58ac77-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#postActors"/>
        <daml:subPropertyOf rdf:resource="#preActors"/>
        <daml:domain rdf:resource="#Event"/>
        <daml:range rdf:resource="#SomethingExisting"/>
    </daml:Property>
    <daml:Property rdf:ID="undergroundOf">
        <rdfs:label>underground of</rdfs:label>
        <rdfs:comment>(#$undergroundOf OBJ GROUND) means that OBJ is
            beneath the surface of ground and has the #$locationState #$Underground.</rdfs:comment>
        <guid>c0f2a793-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Place"/>
        <daml:range rdf:resource="#SpatialThing"/>
    </daml:Property>
    <daml:Property rdf:ID="underlyingGraph">
        <rdfs:label>underlying graph</rdfs:label>
        <rdfs:comment>(#$underlyingGraph RED SYS) means that (i) every
            node in SYS is a node in RED, (ii) every point in RED is a
            node in RED (and hence a node in SYS), and (iii)
            (#$linkClosedSubSystems SYS RED) holds. It is easy to see
            that when (#$underlyingGraph RED SYS) holds, RED must be an
            instance of #$Multigraph.  But RED is not only a
            multi-graph, it is THE multi-graph that underlies the path
            system SYS, i.e., the only difference between SYS and RED is
            that SYS is obtainable by adding to RED some points that are
            on a link in RED between the end-nodes.</rdfs:comment>
        <guid>c0787b09-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Multigraph"/>
        <daml:range rdf:resource="#PathSystem"/>
    </daml:Property>
    <daml:Property rdf:ID="uniquePartTypes">
        <rdfs:label>unique part types</rdfs:label>
        <rdfs:comment>(#$uniquePartTypes BIG SMALL) means that every
            instance of BIG has exactly one instance of SMALL as a part.</rdfs:comment>
        <guid>bdc6b464-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#ExistingObjectType"/>
        <daml:range rdf:resource="#ExistingObjectType"/>
    </daml:Property>
    <daml:UnambiguousProperty rdf:ID="unitExpansions">
        <rdfs:label>unit expansions</rdfs:label>
        <rdfs:comment>The Cyc predicate #$unitExpansions is used to
            express the relationship between a derived unit of
            measurement and the units from which it is derived, e.g.,
            miles per second from miles and seconds.  (#$unitExpansions
            UNIT FACTOR-LIST) means that UNIT is derived from the
            factors on the list UNIT-FACTOR.  UNIT-FACTOR is an instance
            of #$SubLList.  There are two kinds of items in the
            UNIT-FACTOR list: (1) all items except the last are
            themselves lists that consist of an element of
            #$UnitOfMeasure followed by an exponent for that unit; (2)
            the last element is the constant multiplier.  Some examples:
            (#$unitExpansions #$MilesPerHour (((#$Mile
            1)(#$HoursDuration -1)) 1),      (#$unitExpansions
            #$SpeedOfLight (((#$Mile 1)(#$SecondsDuration -1)) 186000)),
            (#$unitExpansions #$MetersPerSecondPerSecond (((#$Meter
            1)(#$SecondsDuration -2)) 1). The first of these examples is
            included only because it makes a clear example; the
            definition of #$MilesPerHour in terms of #$Mile and
            #$HoursDuration should actually be done with the simpler
            #$multiplicationUnits. In general, any relationship among
            units that can be expressed with #$multiplicationUnits
            should be, and #$unitExpansions should be reserved for those
            relationships that can&apos;t be expressed with the simpler vocabulary.</rdfs:comment>
        <guid>bd5899fb-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#UnitOfMeasure"/>
        <daml:range rdf:resource="#SubLList"/>
    </daml:UnambiguousProperty>
    <daml:Property rdf:ID="upAxisPoints">
        <rdfs:label>up axis points</rdfs:label>
        <rdfs:comment>(#$upAxisPoints OBJ DIR) means OBJ&apos;s
            intrinsic up-axis points in the direction DIR.  An object
            has an intrinsic up-axis only if it has an intrisic top by
            virtue of its design or function.  People, rockets, cars,
            and cups are examples of objects with intrinsic tops.  A
            sphere has no intrinsic top, due to its symmetry.  If an
            object with an intrinsic up-axis, OBJ, is on its side, one
            asserts (#$upAxisPoints OBJ #$HorizontalDirection).  If OBJ
            is upside-down, one asserts (#$upAxisPoints OBJ
            #$Down-Directly) or (#$upAxisPoints OBJ #$Down-Generally),
            depending on how precise one wishes to be.</rdfs:comment>
        <guid>bd590a36-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#SpatialThing"/>
        <daml:range rdf:resource="#UnitVectorInterval"/>
    </daml:Property>
    <daml:Property rdf:ID="urgeSatisfied">
        <rdfs:label>urge satisfied</rdfs:label>
        <rdfs:comment>(#$urgeSatisfied EVT URGETYPE) means that the
            sensory event EVT satisfies an instance of a physical urge
            of type URGETYPE.   Use the predicate, #$urgeTypeSatisfied,
            to stateg rules about what sorts of actions relieve what
            sorts of urges.  E.g., scratching relieves an #$UrgeToScratch.</rdfs:comment>
        <guid>bd5886ab-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#PhysicalEvent"/>
        <daml:range rdf:resource="#PhysicalUrgeType"/>
    </daml:Property>
    <daml:Property rdf:ID="urgeTypeSatisfied">
        <rdfs:label>urge type satisfied</rdfs:label>
        <rdfs:comment>The urge of type arg2 is satisfied in the event of
            type arg1.</rdfs:comment>
        <guid>bd58f856-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="http://www.daml.org/2001/03/daml+oil#Class"/>
        <daml:range rdf:resource="#PhysicalUrgeType"/>
    </daml:Property>
    <daml:UniqueProperty rdf:ID="vehicle">
        <rdfs:label>vehicle</rdfs:label>
        <rdfs:comment>(#$vehicle EVENT VEHICLE) means that VEHICLE is a
            #$TransportationDevice-Vehicle which is both the
            #$providerOfMotiveForce and the #$transporter in EVENT.  If
            an object is a #$TransportationDevice-Vehicle and plays the
            role of #$transporter in some moving event, then it
            generally  will play the role of #$vehicle in that event.
            Examples: a car plays the role of #$vehicle in driving.
            Note, however, that a bicycle does not play the role of
            #$vehicle in bike riding since it is not a provider of
            motive force.  A borderline non-example is someone sitting
            in their car while it&apos;s being pulled by a towtruck;
            their car is not playing the role of #$vehicle in that event.</rdfs:comment>
        <guid>bd58a883-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#transporter"/>
        <daml:subPropertyOf rdf:resource="#providerOfMotiveForce"/>
        <daml:subPropertyOf rdf:resource="#deviceUsed"/>
        <daml:domain rdf:resource="#TransportationEvent"/>
        <daml:range rdf:resource="#TransportationDevice-Vehicle"/>
    </daml:UniqueProperty>
    <daml:Property rdf:ID="victim">
        <rdfs:label>victim</rdfs:label>
        <rdfs:comment>The #$Agent(s) most directly harmed by this
            possibly criminal act.  In so-called victimless crimes, some
            would consider the state to be the victim, but we will not
            follow that convention here.</rdfs:comment>
        <guid>bd5f0ec3-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#maleficiary"/>
        <daml:subPropertyOf rdf:resource="#damages"/>
        <daml:domain rdf:resource="#Event"/>
        <daml:range rdf:resource="#SocialBeing"/>
    </daml:Property>
    <daml:Property rdf:ID="viscosityOfSubstance">
        <rdfs:label>thicken</rdfs:label>
        <rdfs:comment>(#$viscosityOfSubstance LIQ VISC) means that the
            #$LiquidTangibleThing LIQ has the #$Viscosity VISC.</rdfs:comment>
        <guid>bd58959c-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasAttributes"/>
        <daml:domain rdf:resource="#LiquidTangibleThing"/>
        <daml:range rdf:resource="#Viscosity"/>
    </daml:Property>
    <daml:Property rdf:ID="visuallyDepicts">
        <rdfs:label>represent</rdfs:label>
        <rdfs:comment>(#$visuallyDepicts ?IBT ?OBJ) means the object
            ?OBJ is depicted by the visual information source ?IBT.</rdfs:comment>
        <guid>c1006396-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#containsInformationAbout"/>
        <daml:domain rdf:resource="#VisualInformationSource"/>
        <daml:range rdf:resource="#SpatialThing"/>
    </daml:Property>
    <daml:Property rdf:ID="volatilityOfSubstance">
        <rdfs:label>volatility</rdfs:label>
        <rdfs:comment>(#$volatilityOfSubstance SUBST DEGREE) indicates
            how volatile SUBST is.  Objects with a higher DEGREE of
            #$Volatility evaporate more readily than objects with a
            lower DEGREE.</rdfs:comment>
        <guid>bd58b691-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasAttributes"/>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#Volatility"/>
    </daml:Property>
    <daml:Property rdf:ID="volitionalCause-RST">
        <rdfs:label>volitional cause - r s t</rdfs:label>
        <rdfs:comment>The discourse relation that holds between two
            segments of text when ARG2 specifies something which could
            be a cause of the volitional action described in ARG1.</rdfs:comment>
        <guid>be9d9952-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#LinguisticObject"/>
        <daml:range rdf:resource="#LinguisticObject"/>
    </daml:Property>
    <daml:Property rdf:ID="volitionalResult-RST">
        <rdfs:label>volitional result - r s t</rdfs:label>
        <rdfs:comment>The discourse relation that holds between two
            segments of text when ARG1 specifies something which could
            be a volitional cause of ARG2.</rdfs:comment>
        <guid>bdeec6cc-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#LinguisticObject"/>
        <daml:range rdf:resource="#LinguisticObject"/>
    </daml:Property>
    <daml:Property rdf:ID="volumeContained">
        <rdfs:label>volume contained</rdfs:label>
        <rdfs:comment>Indicates the total volume enclosed by a given
            container.  (#$volumeContained ?CONT ?VOL) means that the
            total available volume of ?CONT is ?VOL.</rdfs:comment>
        <guid>bd5897f0-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#Volume"/>
    </daml:Property>
    <daml:Property rdf:ID="volumeOfObject">
        <rdfs:label>volume</rdfs:label>
        <rdfs:comment>(#$volumeOfObject OBJ VOL) means that the
            #$TangibleThing OBJ has the #$Volume VOL.</rdfs:comment>
        <guid>bd58dbad-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#SpatialThing"/>
        <daml:range rdf:resource="#Volume"/>
    </daml:Property>
    <daml:UnambiguousProperty rdf:ID="wasteProducts">
        <rdfs:label>waste products</rdfs:label>
        <rdfs:comment>(#$wasteProducts EV OBJ) means that OBJ is one of
            the by-products of EV which is disposed of, rather than used
            or sold.  See also #$unwantedMatter.</rdfs:comment>
        <guid>bd58c21a-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#byProducts"/>
        <daml:domain rdf:resource="#PurposefulAction"/>
        <daml:range rdf:resource="#PartiallyTangible"/>
    </daml:UnambiguousProperty>
    <daml:Property rdf:ID="waterSolubility">
        <rdfs:label>water solubility</rdfs:label>
        <rdfs:comment>(#$waterSolubility OBJ DEGREE) means that the
            tangible OBJ has this DEGREE of #$Solubility in water.  A
            higher value of DEGREE indicates that a substance dissolves
            more readily and completely than one with a lower solubility.</rdfs:comment>
        <guid>be00ab6d-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#PartiallyTangible"/>
        <daml:range rdf:resource="#Solubility"/>
    </daml:Property>
    <daml:Property rdf:ID="wavelength">
        <rdfs:label>wavelength</rdfs:label>
        <rdfs:comment>(#$wavelength WAVE LENGTH) means that the
            #$WavePropagation WAVE consists of waves having the length
            LENGTH.  LENGTH is a #$Distance measuring one complete wave
            in a #$WavePropagation event.</rdfs:comment>
        <guid>c10096d6-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#WavePropagation"/>
    </daml:Property>
    <daml:UniqueProperty rdf:ID="wearer">
        <rdfs:label>wearer</rdfs:label>
        <rdfs:comment>The predicate #$wearer is used to indicate an
            individual who is wearing some article of clothing (or other
            wearable item) in a particular situation.  (#$wearer WEARING
            ANIMAL) means that ANIMAL is the wearer during WEARING, an
            element of #$WearingSomething (q.v.).</rdfs:comment>
        <guid>bd5ec1e5-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#WearingSomething"/>
        <daml:range rdf:resource="#Animal"/>
    </daml:UniqueProperty>
    <daml:Property rdf:ID="wearsClothing">
        <rdfs:label>wear</rdfs:label>
        <rdfs:comment>(#$wearsClothing ANIMAL ITEM) means that ANIMAL is
            wearing ITEM, an element of #$SomethingToWear.  The first
            argument of #$wearsClothing is loosely constrained (by
            #$PartiallyTangible), so that this predicate may be used to
            describe mannequins, animals, and other individuals (of
            whatever kinds) that might wear clothes, as well as humans;
            however, by default Cyc assumes that an individual who
            #$wearsClothing is an element of #$Person.  See also
            #$wornOn, which relates the item worn to the body part on
            which it is worn.</rdfs:comment>
        <guid>bd58ac14-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#SolidTangibleThing"/>
        <daml:range rdf:resource="#SomethingToWear"/>
    </daml:Property>
    <daml:Property rdf:ID="weatherAttributes">
        <rdfs:label>weather attributes</rdfs:label>
        <rdfs:comment>The predicate #$weatherAttributes is used to
            describe the weather at a particular outdoor location.
            (#$weatherAttributes LOC WEATHER) means that the
            #$OutdoorLocation LOC has the #$WeatherAttribute WEATHER.
            For example, to say that it&apos;s snowy in Lake Tahoe, we
            would say: (#$weatherAttributes #$LakeTahoe #$Snowy).  See
            also #$WeatherAttribute.</rdfs:comment>
        <guid>bd58f2a7-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#hasAttributes"/>
        <daml:domain rdf:resource="#OutdoorLocation"/>
        <daml:range rdf:resource="#WeatherAttribute"/>
    </daml:Property>
    <daml:Property rdf:ID="widthOfObject">
        <rdfs:label>width</rdfs:label>
        <rdfs:comment>(#$widthOfObject OBJECT WIDTH) means that the
            #$Distance across OBJECT from one side boundary to the
            opposite side boundary is WIDTH.  Side boundaries are
            roughly perpendicular to the top and bottom of the object.
            Note that some objects have widths by virtue of having one
            or more intrinsic default orientations (see
            #$BilateralObject and its specializations), while some
            objects have widths by virtue of having orientations
            determined only in relation to their environments.  In any
            case, having a width requires being  at least
            two-dimensional (see #$TwoOrHigherDimensionalShape).  See
            also #$lengthOfObject, #$heightOfObject, and #$depthOfObject.</rdfs:comment>
        <guid>bd58e003-9c29-11b1-9dad-c379636f7270</guid>
        <daml:range rdf:resource="#Distance"/>
    </daml:Property>
    <daml:UnambiguousProperty rdf:ID="windowHasCovering">
        <rdfs:label>window has covering</rdfs:label>
        <rdfs:comment>A restriction of #$portalHasCovering.  This
            predicate can take as it&apos;s arg1 any instance of
            #$WindowPortal, eg., a car window, or a window in a #$ModernHumanResidence.</rdfs:comment>
        <guid>bf39b367-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#portalHasCovering"/>
        <daml:domain rdf:resource="#WindowPortal"/>
    </daml:UnambiguousProperty>
    <daml:Property rdf:ID="worksWith">
        <rdfs:label>works with</rdfs:label>
        <rdfs:comment>The predicate #$worksWith relates two agents who
            in some way work together.  The two #$Agents may be people
            or organizations.  (#$worksWith AGENT1 AGENT2) means that
            AGENT1 and AGENT2 work together or cooperate in some
            activity for mutual benefit.  They may or may not work for
            the same employer.  Some types of relationships that provide
            a basis for assertions using #$worksWith include:  coworkers
            in a company, an employee and his boss, organizations
            affiliated in some endeavor, a professional and her client,
            professionals and their representatives.  Examples: a
            research organization #$worksWith its shareholding
            companies; a #$Novelist #$worksWith his or her
            #$PublishingCompany; an #$EntertainmentOrArtsProfessional
            #$worksWith his or her agent (i.e., #$ArtistOrEntertainerRepresentative).</rdfs:comment>
        <guid>bd58df7a-9c29-11b1-9dad-c379636f7270</guid>
        <daml:domain rdf:resource="#Agent"/>
        <daml:range rdf:resource="#Agent"/>
    </daml:Property>
    <daml:Property rdf:ID="wornOn">
        <rdfs:label>worn on</rdfs:label>
        <rdfs:comment>The predicate #$wornOn is used to describe on what
            part of an individual&apos;s body a particular device or
            garment is worn.  (#$wornOn ITEM BODYPART) means that ITEM
            is being worn on the body part BODYPART.  #$wornOn can apply
            to human or animal wearers, and the items worn can include
            clothing, jewelry, medical devices, harnesses, carrying
            devices, wigs--basically, anything which can be attached to
            or borne upon a body part without intentionally holding or
            carrying it. See #$SomethingToWear for its subsets of things
            that can be worn.  See also #$wearsClothing, which relates
            the wearer, rather than the body part, to the item worn.</rdfs:comment>
        <guid>bd5909d2-9c29-11b1-9dad-c379636f7270</guid>
        <daml:subPropertyOf rdf:resource="#supportedBy"/>
        <daml:subPropertyOf rdf:resource="#touches"/>
        <daml:domain rdf:resource="#SomethingToWear"/>
        <daml:range rdf:resource="#AnimalBodyPart"/>
    </daml:Property>
    <LogicalConnective rdf:ID="xor">
        <rdfs:label>xor</rdfs:label>
        <rdfs:comment>The logical connective #$xor represents
            exclusive-or.    #$xor takes two arguments, each of which
            must be an    element of ELSentence-Assertible. (#$xor
            FORMULA-1 FORMULA-2) means    that formula FORMULA-1 is true
            precisely when formula    FORMULA-2 is false; in other
            words, one but not both of    FORMULA-1 and FORMULA-2 is
            true. An EL formula that mentions     #$xor is translated
            during canonicalization into an equivalent     (though less
            compact) formula that mentions #$or, #$and, and #$not
            and does not mention #$xor (see the expansion gaf for #$xor).</rdfs:comment>
        <guid>bde7f9f2-9c29-11b1-9dad-c379636f7270</guid>
    </LogicalConnective>
</rdf:RDF>
