
DOCUMENT START
TOKENS
// -------- PATH
<DEFAULT> TOKEN : {
<PLING: "!">
| <VBAR: "|">
| <CARROT: "^">
| <FPATH: "->">
| <RPATH: "<-">
}

// ------------------------------------------
// Tokens

// Comments and whitespace
<DEFAULT> SKIP : {
" "
| "\t"
| "\n"
| "\r"
| "\f"
}

<DEFAULT> TOKEN : {
<#WS: " " | "\t" | "\n" | "\r" | "\f">
}

<DEFAULT> SPECIAL : {
<SINGLE_LINE_COMMENT: "#" (~["\n","\r"])* ("\n" | "\r" | "\r\n")?>
}

// -------------------------------------------------
// Keywords : directives before LANGTAG
<DEFAULT> TOKEN : {
<KW_A: "a">
| <PREFIX: "@prefix">
| <BASE: "@base">
}

<DEFAULT> TOKEN [IGNORE_CASE] : {
<TRUE: "true">
| <FALSE: "false">
| <INTEGER: (["-","+"])? <DIGITS>>
| <DECIMAL: (["-","+"])? ((<DIGITS>)+ "." (<DIGITS>)* | "." (<DIGITS>)+)>
| <DOUBLE: (["+","-"])? ((["0"-"9"])+ "." (["0"-"9"])* <EXPONENT> | "." (["0"-"9"])+ <EXPONENT> | (["0"-"9"])+ <EXPONENT>)>
| <#EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+>
| <#QUOTE_3D: "\"\"\"">
| <#QUOTE_3S: "\'\'\'">
| <ECHAR: "\\" ("t" | "b" | "n" | "r" | "f" | "\\" | "\"" | "\'")>
| <STRING_LITERAL1: "\'" (~["\'","\\","\n","\r"] | <ECHAR>)* "\'">
| <STRING_LITERAL2: "\"" (~["\"","\\","\n","\r"] | <ECHAR>)* "\"">
| <STRING_LITERAL_LONG1: <QUOTE_3S> (~["\'","\\"] | <ECHAR> | "\'" ~["\'"] | "\'\'" ~["\'"])* <QUOTE_3S>>
| <STRING_LITERAL_LONG2: <QUOTE_3D> (~["\"","\\"] | <ECHAR> | "\"" ~["\""] | "\"\"" ~["\""])* <QUOTE_3D>>
| <DIGITS: (["0"-"9"])+>
}

<DEFAULT> TOKEN : {
<IRIref: "<" (~[">","<","\"","{","}","^","\\","|","`","\u0000"-" "])* ">">
| <PNAME_NS: (<PN_PREFIX>)? ":">
| <PNAME_LN: <PNAME_NS> <PN_LOCAL>>
| <BLANK_NODE_LABEL: "_:" <PN_LOCAL>>
| <VAR: "?" <VARNAME>>
| <LANGTAG: <AT> (<A2Z>)+ ("-" (<A2ZN>)+)*>
| <#A2Z: ["a"-"z","A"-"Z"]>
| <#A2ZN: ["a"-"z","A"-"Z","0"-"9"]>
}

<DEFAULT> TOKEN : {
<LPAREN: "(">
| <RPAREN: ")">
| <NIL: <LPAREN> (<WS> | <SINGLE_LINE_COMMENT>)* <RPAREN>>
| <LBRACE: "{">
| <RBRACE: "}">
| <LBRACKET: "[">
| <RBRACKET: "]">
| <ANON: <LBRACKET> (<WS> | <SINGLE_LINE_COMMENT>)* <RBRACKET>>
| <SEMICOLON: ";">
| <COMMA: ",">
| <DOT: ".">
}

// Operator
<DEFAULT> TOKEN : {
<EQ: "=">
| <ARROW: "=>">
| <DOLLAR: "$">
| <QMARK: "?">
| <TILDE: "~">
| <COLON: ":">
| <STAR: "*">
| <SLASH: "/">
| <RSLASH: "\\">
| <DATATYPE: "^^">
| <AT: "@">
}

<DEFAULT> TOKEN : {
<#PN_CHARS_BASE: ["A"-"Z"] | ["a"-"z"] | ["\u00c0"-"\u00d6"] | ["\u00d8"-"\u00f6"] | ["\u00f8"-"\u02ff"] | ["\u0370"-"\u037d"] | ["\u037f"-"\u1fff"] | ["\u200c"-"\u200d"] | ["\u2070"-"\u218f"] | ["\u2c00"-"\u2fef"] | ["\u3001"-"\ud7ff"] | ["\uf900"-"\ufffd"]>
| <#PN_CHARS_U: <PN_CHARS_BASE> | "_">
| <#PN_CHARS: <PN_CHARS_U> | "-" | ["0"-"9"] | "\u00b7" | ["\u0300"-"\u036f"] | ["\u203f"-"\u2040"]>
| <#PN_PREFIX: <PN_CHARS_BASE> ((<PN_CHARS> | ".")* <PN_CHARS>)?>
| <#PN_LOCAL: (<PN_CHARS_U> | ["0"-"9"]) ((<PN_CHARS> | ".")* <PN_CHARS>)?>
| <#VARNAME: (<PN_CHARS_U> | ["0"-"9"]) (<PN_CHARS_U> | ["0"-"9"] | "\u00b7" | ["\u0300"-"\u036f"] | ["\u203f"-"\u2040"])*>
}

// Catch-all tokens.  Must be last.  
// Any non-whitespace.  Causes a parser exception, rather than a
// token manager error (with hidden line numbers).
// Only bad IRIs (e.g. spaces) now give unhelpful parse errors.
<DEFAULT> TOKEN : {
<#UNKNOWN: (~[" ","\t","\n","\r","\f"])+>
}

NON-TERMINALS
// --- Entry point
	parse	:=	( Statement )* <EOF>
	Statement	:=	( Directive | TriplesSameSubject ) <DOT>
	Directive	:=	<PREFIX> <PNAME_NS> IRI_REF
		|	<BASE> IRI_REF
// ---- TRIPLES
	TriplesSameSubject	:=	Term PropertyListNotEmpty
		|	TriplesNode PropertyList
	PropertyList	:=	( PropertyListNotEmpty )?
// Non-recursive for Turtle long PropertyList tests
	PropertyListNotEmpty	:=	Verb ObjectList ( <SEMICOLON> ( Verb ObjectList )? )*
// Non-recursive for Turtle long PropertyList tests
	ObjectList	:=	Object ( <COMMA> Object )*
	Object	:=	GraphNode
	Verb	:=	( IRIref | <KW_A> | <EQ> | <ARROW> )
// -------- Triple expansions

// Anything that can stand in a node slot and which is
// a number of triples
	TriplesNode	:=	Collection
		|	BlankNodePropertyList
	BlankNodePropertyList	:=	<LBRACKET> PropertyListNotEmpty <RBRACKET>
// ------- RDF collections

// Code not as SPARQL/ARQ because of output ordering.
	Collection	:=	<LPAREN> ( GraphNode )+ <RPAREN>
// -------- Nodes in a graph pattern or template
	GraphNode	:=	Term
		|	TriplesNode
// Node VarOrTerm() : {Node n = null ; }
// {
//   ( n = Var() | n = GraphTerm() | n = Formula() )
//   { return n ; }
// }
	Term	:=	( GraphTerm | Formula )
	Formula	:=	<LBRACE> TriplesSameSubject ( <DOT> ( TriplesSameSubject )? )* <RBRACE>
	Var	:=	<VAR>
	GraphTerm	:=	IRIref
		|	RDFLiteral
		|	NumericLiteral
		|	BooleanLiteral
		|	BlankNode
		|	<NIL>
// ---- Basic terms
	NumericLiteral	:=	<INTEGER>
		|	<DECIMAL>
		|	<DOUBLE>
	RDFLiteral	:=	String ( Langtag | ( <DATATYPE> IRIref ) )?
	Langtag	:=	( <LANGTAG> | AnyDirective )
	AnyDirective	:=	( <PREFIX> | <BASE> )
	BooleanLiteral	:=	<TRUE>
		|	<FALSE>
	String	:=	( <STRING_LITERAL1> | <STRING_LITERAL2> | <STRING_LITERAL_LONG1> | <STRING_LITERAL_LONG2> )
	IRIref	:=	IRI_REF
		|	PrefixedName
	PrefixedName	:=	( <PNAME_LN> | <PNAME_NS> )
	BlankNode	:=	<BLANK_NODE_LABEL>
		|	<ANON>
	IRI_REF	:=	<IRIref>

DOCUMENT END
